<?php

function form_example_menu() {
  $items = array();

  $items['examples/form-example'] = array( //this creates a URL that will call this form at "examples/form-example"
    'title' => 'First Example Form', //page title
    'description' => 'A form to mess around with.',
    'page callback' => 'drupal_get_form', //this is the function that will be called when the page is accessed.  for a form, use drupal_get_form
    'page arguments' => array('form_example_form'), //put the name of the form here
    'access callback' => TRUE
  );

  return $items;
}

function form_example_form($form, &$form_state) {
  $form['#id'] = 'form_example';

  $form['copy'] = array(  
    '#type' =>'checkbox', 
    '#title' => t('Send me a copy. (Testing Of checkbox)'),
  );

  $form['high_school']['tests_taken'] = array(
                                              '#type' => 'checkboxes',
                                              '#options' => drupal_map_assoc(array(t('SAT'), t('ACT'))),
                                              '#title' => t('What standardized tests did you take? (Testing Of Multi CheckBoxes)'),
                                              );

  $today_date = array('year' => 2017, 'month' => 2, 'day' => 15);
  $form['date_field'] = array(
      '#type' => 'date',
      '#title' => 'Choose Date (Testing of Date)',
      '#default_value' => $today_date,
      // '#access' => FALSE,
  );

  $form['contact'] = array(

    '#type' => 'fieldset', 
    '#title' => t('Contact settings (Testing Of FieldSet)'), 

    // '#weight' => 5, 
    // '#attributes' => array('class' => array('search-form')),

    '#collapsible' => TRUE,
    '#collapsed' => FALSE,

    '#description' => 'Contact setting description'.'<h1> hello </h1>'.
          '<ul>'
          // .' &lt;'.'li' .' &gt;'. ' style = "color: red;">Hello</li>
          .' &lt;'.'li'.' style = "color: red;"'.'&gt;'.'Hello'.' &lt;'.'li' .'&gt;'.'
          <li>Hello</li>
          <li>Hello</li>
          <li>Hello</li>
          </ul>',
  );

  $form['upload'] = array(
    // '#name' => 'files[' . implode('_', $element['#parents']) . ']',
    // '#name' => 'files[' .'file'. ']',
    '#name' => 'filesname',
    '#type' => 'file',
    '#title' => t('Choose a file (Testing of file field)'),
    // '#title_display' => 'invisible',
    // '#title_display' => 'after',
    '#size' => 22,
    // '#theme_wrappers' => array(),
    // '#weight' => -10,
  );

  $form['machine_name'] = array(
    '#type' => 'machine_name',
    // '#default_value' => $vocabulary->machine_name,
    '#default_value' => 'machine_name',
    '#maxlength' => 21,
    // '#machine_name' => array(
    //   'exists' => 'menu_edit_menu_name_exists',
    // ),
  );

  $form['menu_name'] = array(

    '#type' => 'machine_name',

    '#title' => t('Menu name'),

    // '#default_value' => $menu['menu_name'],

    '#maxlength' => MENU_MAX_MENU_NAME_LENGTH_UI,

    '#description' => t('A unique name to construct the URL for the menu. It must only contain lowercase letters, numbers and hyphens. (Testing of machine_name with menu item)'),

    '#machine_name' => array(

      'exists' => 'menu_edit_menu_name_exists',

      'source' => array('title'),

      'label' => t('URL path'),

      'replace_pattern' => '[^a-z0-9-]+',

      'replace' => '-',

    ),

    // A menu's machine name cannot be changed.

    // '#disabled' => !empty($menu['old_name']) || isset($system_menus[$menu['menu_name']]),

    // $f = array(
    //   '1991' => '0'.'0',
    //   '2007' => '15'.'1',
    //   '2009' => '17'.'1',
    //   '2012' => '20'.'3',
    //   '2012(Dec)' => '21'.'.6',
    //   '2013' => '21'.'0',
    //   '2013' => '22'.'0',
    //   '2016' => '24'.'3',
    //   '2016' => '25'.'.6',
    //   '2017' => '25'.'.6',
    //   '2017' => '26'.'.6',
    //   14 + 3 + 3  =   20
    //   1           =    1
    //   1           =    1
    //                   22 => 15000 
    //                         + 850 
    //                         + 230 
    //                         + 5000
    //                         + 27000(10000 + 5000 + 12000 + 10000)
    //                         = 48080 
    //   );


    );

  $form['image_example_image_fid'] = array(
    '#title' => t('Image (Testing of Managed File)'),
    '#type' => 'managed_file',
    '#description' => t('The uploaded image will be displayed on this page using the image style choosen below.'),
    '#default_value' => variable_get('image_example_image_fid', ''),
    '#upload_location' => 'public://image_example_images/',
  );

  $form['username'] = array(
    '#type' => 'textfield', //you can find a list of available types in the form api
    '#title' => 'User Name',
    '#size' => 10,
    '#maxlength' => 10,
    '#required' => TRUE, //make this field required 
  );

  $form['password_field'] = array(
    '#type' => 'password',
    '#title' => 'Set Password',
  );

  $form['pass'] = array(
    '#type' => 'password_confirm', 
    '#title' => t('Retype Pwd (Testing Password Confirm)'),
    '#size' => 25,
  );

  $form['radio_button'] = array(
    '#type' => 'radio',
    '#title' => 'Choose Default Option (Testing of Single Radio Button)',
    '#ajax[event]' => 'change',
    '#title_display' => 'after',
  );

  $admin = 'Admin';
  $active = array(0 => t('Closed'), 1 => t('Active'));
  $f = $form['settings']['active'] = array(
    '#type' => 'radios',
    '#title' => t('Poll status (Testing of Multi Radio Button)'),
    '#default_value' => isset($node->active) ? $node->active : 1,
    // '#default_value' => $node->active,
    '#options' => $active,
    '#description' => t('When a poll is closed, visitors can no longer vote for it.'),
    '#access' => $admin,
  );

  $category = array('selected' => '0');
  $form['selected'] = array(
    '#type' => 'select',
    '#title' => t('Selected (Testing of Selected)'),
    '#options' => array(
        0 => t('No'),
        1 => t('Yes'),
    ),
   '#default_value' => $category['selected'],
   '#description' => t('Set this to <em>Yes</em> , if you would like this category to be selected by default.'),
  );

   $users = array(
    array('uid' => 1, 'first_name' => 'Indy', 'last_name' => 'Jones'),
    array('uid' => 2, 'first_name' => 'Darth', 'last_name' => 'Vader'),
    array('uid' => 3, 'first_name' => 'Super', 'last_name' => 'Man'),
  );

  $header = array(
    'first_name' => t('First Name'),
    'last_name' => t('Last Name'),
  );
  $options = array();
  foreach ($users as $user) {
    $options[$user['uid']] = array(
      'first_name' => $user['first_name'],
      'last_name' => $user['last_name'],
    );
  }
  $form['table'] = array(
    '#type' => 'tableselect',
    '#header' => $header,
    '#options' => $options,
    '#empty' => t('No users found'),
  );

  $form['description'] = array(
    '#type' => 'text_format',
    '#title' => t('Description (Testing of Text Format)'),
    // '#default_value' => $term->description,
    // '#format' => $term->format,
    // '#weight' => 0,
  );

  $form['keywords'] = array(
    '#title' => t('Keywords (Testing of Text Area)'),
    '#type' => 'textarea',
    '#description' => t('The comment will be unpublished if it contains any of the phrases above. Use a case-sensitive, comma-separated list of phrases. Example: funny, bungee jumping, "Company, Inc."'),
    '#default_value' => isset(  $context['keywords']) ? drupal_implode_tags($context['keywords']) : '',
);

  $form['price'] = array(
    '#type' => 'textfield', //you can find a list of available types in the form api
    '#title' => 'What is Your Price? (Testing of Text Field)',
    '#size' => 10,
    '#maxlength' => 10,
    '#required' => TRUE, //make this field required 
  );

  $edit = array('weight' => 0);
  $form['weight'] = array(
    '#type' => 'weight', 
    '#title' => t('Weight (Testing of weight to decide the order)'), 
    '#default_value' => $edit['weight'], 
    '#delta' => 1, 

    '#description' => t('Optional.
    In the menu, the heavier items will sink and the lighter items will be
    positioned nearer the top.'),
  );

  $common_arr = array('year' => 2017, 'month' => 2, 'day' => 15);
  $common_arr2 = 'hello';
  $form['testfield'] = array(
    '#type' => 'textfield', //you can find a list of available types in the form api
    '#title' => 'Test Field (with field prefix)',
    '#size' => 10,
    '#maxlength' => 10,
    // '#required' => TRUE, //make this field required 
    // '#field_prefix' => url(NULL, NULL, NULL, TRUE) . (variable_get('clean_url', 0) ? '' : '?q=')
    '#field_prefix' => url(NULL, $common_arr, NULL, TRUE) . (variable_get('clean_url', 0) ? '' : '?q=')
  );

  $multiple_form = array('1','2','3','4');

  foreach ($multiple_form as $key => $value) {
    $form['from1'.$value] = array(
      '#type' => 'item',

      '#title' => t('Item '.$value.' (Testing Of Item)'),

      '#markup' => 'Info! This is '.$value,
    );
  }

  // Special Elements 

  $form['preview'] = array(
    '#type' => 'button', 
    '#value' => t('Preview'), 
    // '#weight' => 19,
  );

  // $elements = '1';
  // $field = array('type' => '1');
  $field_name = 'Container';

  // if ($elements) {
    // Also aid in theming of field widgets by rendering a classified
    // container.
    $form['container'] = array(
      '#type' => 'container',
      // '#attributes' => array(
        // 'class' => array(
          // 'field-type-' . drupal_html_class($field['type']),
          // 'field-name-' . drupal_html_class($field_name),
          // 'field-widget-' . drupal_html_class($instance['widget']['type']),
        // ),
      // ),
      // '#weight' => $instance['widget']['weight'],
    );
  // }

  $options = array('image' =>'http://localhost/drupal-7.56/themes/bartik/logo.png');
  $form['go'] = array
    (
      '#type' => 'image_button',
      '#src' => $options['image'],
      '#submit' => array('ctools_jump_menu_submit'),
      '#attributes' => array
        (
          'class' => array
          ('ctools-jump-menu-button')
        )
    );

  $bid = '1'; 
  $form['bid'] = array(
    '#type' => 'hidden', 
    '#value' => $bid
  );

  $form['vid'] = array(
    '#type' => 'value', 
    '#value' => $bid
  );

  $form['actions'] = array('#type' => 'actions');
  
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit Form'),
  );

  $form['actions']['delete'] = array(
    '#type' => 'button',
    '#value' => t('Reset Form'),
  );

  $form['actions']['cancel'] = array(
    '#markup' => l(t('Cancel Form'), 'foo/bar'),
  );

  $status = array('3');
  $options = array('0','1','2','3','4');

  
  // $form['status'] = array(

  //   '#type' => 'checkboxes',
  //   // '#default_value' => '0', 
  //   '#default_value' => $status,
  //   // '#options' => '0', 
  //   '#options' => $options, 
  //   '#tree' => TRUE,
  // );

  // $required =array('block','filter', 'system', 'user', 'watchdog');

  // foreach ($required as $require) {
  //   $f = $form['status'][$require] = array(

  //     '#type' => 'hidden', 

  //     '#value' =>1, 

  //     '#prefix' => t('prefix_required'),
  //     '#suffix' => t('sufffix_required'),
  //   );

    // echo "<pre>";
    // print_r($form['status'][$require]);
    // print_r($f);
    // echo "</pre>";
    // exit;
  // }

  return $form;
}

function form_example_form_validate($form, &$form_state) {
  if (!($form_state['values']['price'] > 10)){
    form_set_error('price', t('Price must be a greater than 10 number.'));
  }
  //Use only two input state 
  // 1. Values (Given preference cause of security)
  // 2. Input (But its not secured)

  $pwd_field = $form_state['values']['password_field'];

  if(!($pwd_field > 4)){
    form_set_error('password',t('Password length should be grater than 4'));
  }
}

function form_example_form_submit($form, &$form_state) {
  // echo "hello";
}

?>