<?php
/**
 * Implements hook_menu().
 */
function m6connect_program_menu() {  
  $items['program/my-project'] = array(
    'title' => 'My Projects',
    'page callback' => 'program_my_project_listing_content',
    'access callback' => '_is_m6_user_logged_in',
  );  
  $items['program/projects'] = array(
    'title' => 'Project',
    'page callback' => 'program_project_content',
    'access callback' => '_is_m6_user_logged_in',
  );  
  $items['program/estimates'] = array(
    'title' => 'Budget',
    'page callback' => 'program_project_estimates_content',
    //'access callback' => TRUE,
    'access callback' => '_is_m6_user_logged_in',
  );
  $items['program/estimates/capital-request'] = array(
    'title' => 'Budget',
    'page callback' => 'program_project_estimates_content_capital_request',
    //'access callback' => TRUE,
    'access callback' => '_is_m6_user_logged_in',
  );
  $items['program/estimates/estimate-schedule'] = array(
    'title' => 'Budget',
    'page callback' => 'program_project_estimates_content_estimate_schedule',
    //'access callback' => TRUE,
    'access callback' => '_is_m6_user_logged_in',
  );
  $items['program/estimates/supporting-estimates'] = array(
    'title' => 'Budget',
    'page callback' => 'program_project_estimates_content_supporting_estimates',
    //'access callback' => TRUE,
    'access callback' => '_is_m6_user_logged_in',
  ); 
  $items['program/cost-summary'] = array(
    'title' => 'Cost Summary',
    'page callback' => 'program_project_cost_summary_content',
    //'access callback' => TRUE,
    'access callback' => '_is_m6_user_logged_in',
    'file' => 'cost.summary.inc',
    'file path' => drupal_get_path('module', 'm6connect_program') . '/includes',
    'type' => MENU_NORMAL_ITEM,
  );    
  $items['program/commitments'] = array(
    'title' => 'Commitments',
    'page callback' => 'program_project_commitments_content',
    //'access callback' => TRUE,
    'access callback' => '_is_m6_user_logged_in',
  );  
  $items['program/spending'] = array(
    'title' => 'Spending',
    'page callback' => 'program_project_spending_content',
    //'access callback' => TRUE,
    'access callback' => '_is_m6_user_logged_in',
  );  
  $items['get-current-asset/%/%'] = array(
    'page callback' => '_get_current_asset_value',
    'page arguments' => array(1,2),
    'access callback' => '_is_m6_user_logged_in',
    'type' => MENU_CALLBACK,  
  );
  $items['program/etc'] = array(
    'title' => 'ETC',
    'page callback' => 'program_project_etc_content',
    //'access callback' => TRUE,
    'access callback' => '_is_m6_user_logged_in',
  );  
  $items['program/spending-forcast'] = array(
    'title' => 'Spending Forecast',
    'page callback' => 'program_project_spending_forcast_content',
    'access callback' => '_is_m6_user_logged_in',
  );  
  // ==== COST MANAGER MENU ITEMS ==== //
  $items['program/cm/my-project'] = array(
    'title' => 'My Projects',
    'page callback' => 'program_my_project_listing_content',
    'access callback' => '_is_m6_user_logged_in',
  );  
  $items['program/cm/projects'] = array(
    'title' => 'Project',
    'page callback' => 'program_project_content',
    'access callback' => '_is_m6_user_logged_in',
  );
  $items['program/cm/estimates'] = array(
    'title' => 'Budget',
    'page callback' => 'program_project_estimates_content',
    'access callback' => '_is_m6_user_logged_in',
  );
  $items['program/cm/estimates/capital-request'] = array(
    'title' => 'Budget',
    'page callback' => 'program_project_estimates_content_capital_request',
    'access callback' => '_is_m6_user_logged_in',
  );
  $items['program/cm/estimates/estimate-schedule'] = array(
    'title' => 'Budget',
    'page callback' => 'program_project_estimates_content_estimate_schedule',
    'access callback' => '_is_m6_user_logged_in',
  );
  $items['program/cm/estimates/supporting-estimates'] = array(
    'title' => 'Budget',
    'page callback' => 'program_project_estimates_content_supporting_estimates',
    'access callback' => '_is_m6_user_logged_in',
  ); 
  $items['program/cm/cost-summary'] = array(
    'title' => 'Cost Summary',
    'page callback' => 'program_project_cost_summary_content',
    'access callback' => '_is_m6_user_logged_in',
    'file' => 'cost.summary.inc',
    'file path' => drupal_get_path('module', 'm6connect_program') . '/includes',
    'type' => MENU_NORMAL_ITEM,
  );    
  $items['program/cm/commitments'] = array(
    'title' => 'Commitments',
    'page callback' => 'program_project_commitments_content',
    'access callback' => '_is_m6_user_logged_in',
  );  
  $items['program/cm/spending'] = array(
    'title' => 'Spending',
    'page callback' => 'program_project_spending_content',
    'access callback' => '_is_m6_user_logged_in',
  );  
  $items['program/cm/etc'] = array(
    'title' => 'ETC',
    'page callback' => 'program_project_etc_content',
    'access callback' => '_is_m6_user_logged_in',
  );  
  $items['program/cm/spending-forcast'] = array(
    'title' => 'Spending Forecast',
    'page callback' => 'program_project_spending_forcast_content',
    'access callback' => '_is_m6_user_logged_in',
  );  
  $items['program/cm/location'] = array(
    'title' => t('Project Location'),
    'page callback' => 'program_project_manage_asset_location',
    'access callback' => '_is_m6_user_logged_in',
    'file' => 'asset_location.inc',
    'file path' => drupal_get_path('module', 'm6connect_program') . '/includes',
  );
  // ==== COST MANAGER MENU END =====//
  $items['spending-forecast-data/%/%/%/%/%/%'] = array(
    'page callback' => 'spending_forecast_data_callback',
    'page arguments' => array(1,2,3,4,5,6),
    'access callback' => '_is_m6_user_logged_in',
    'type' => MENU_CALLBACK,  
  );
  $items['check-for-previous-forecast/%/%'] = array(
    'page callback' => 'spending_forecast_previous_data_callback',
    'page arguments' => array(1,2),
    'access callback' => '_is_m6_user_logged_in',
    'type' => MENU_CALLBACK,  
  );
  $items['remove-forecast-data/%/%'] = array(
    'page callback' => 'spending_forecast_remove_data_callback',
    'page arguments' => array(1,2),
    'access callback' => '_is_m6_user_logged_in',
    'type' => MENU_CALLBACK,  
  );
  
  $items['load-spending-forecast/%/%/%/%ctools_js'] = array(
    'page callback' => 'load_spending_forecast_details_callback',
    'page arguments' => array(1,2,3,4),
    'access callback' => '_is_m6_user_logged_in',
  );    
  $items['program/safety'] = array(
    'title' => 'Safety',
    'page callback' => 'program_project_safety_content',
    //'access callback' => TRUE,
    'access callback' => '_is_m6_user_logged_in',
  );  
  $items['program/schedule'] = array(
    'title' => 'Schedule',
    'page callback' => 'program_project_schedule_content',
    //'access callback' => TRUE,
    'access callback' => '_is_m6_user_logged_in',
  );  
  $items['program/photos'] = array(
    'title' => 'Photos',
    'page callback' => 'program_project_photos_content',
    //'access callback' => TRUE,
    'access callback' => '_is_m6_user_logged_in',
  );  
  $items['program/reports'] = array(
    'title' => 'Reports',
    'page callback' => 'program_project_reports_content',
    'access callback' => '_is_m6_user_logged_in',
  );
  $items['program/assets'] = array(
    'title' => 'Assets',
    'page callback' => 'program_project_assets_content',
    'access callback' => '_is_m6_user_logged_in',
  );
  $items['program/location'] = array(
    'title' => t('Project Location'),
    'page callback' => 'program_project_manage_asset_location',
    'access callback' => '_is_m6_user_logged_in',
    'file' => 'asset_location.inc',
    'file path' => drupal_get_path('module', 'm6connect_program') . '/includes',
  );
   // ==== COST MANAGER MENU START =====// 
  $items['program/cm/safety'] = array(
    'title' => 'Safety',
    'page callback' => 'program_project_safety_content',
    //'access callback' => TRUE,
    'access callback' => '_is_m6_user_logged_in',
  ); 
  $items['program/cm/schedule'] = array(
    'title' => 'Schedule',
    'page callback' => 'program_project_schedule_content',
    'access callback' => '_is_m6_user_logged_in',
  );  
  $items['program/cm/photos'] = array(
    'title' => 'Photos',
    'page callback' => 'program_project_photos_content',
    'access callback' => '_is_m6_user_logged_in',
  );  
  $items['program/cm/reports'] = array(
    'title' => 'Reports',
    'page callback' => 'program_project_reports_content',
    'access callback' => '_is_m6_user_logged_in',
  );
  // ==== COST MANAGER MENU END =====//
  $items['commitment-company/autocomplete'] = array(
    'page callback' => 'commitment_company_autocomplete',
    'access arguments' => array('access content'),
    'access callback'   => '_is_m6_user_logged_in_for_request',
    'type' => MENU_CALLBACK,
  );
  $items['vendor-number/autocomplete'] = array(
    'page callback' => 'vendor_number_autocomplete',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  
  $items['commitment-number-company/autocomplete'] = array(
    'page callback' => 'commitment_number_company_autocomplete',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['cost-code-details/%/%/%ctools_js'] = array(
    'page callback' => 'cost_code_details_callback',
    'page arguments' => array(1,2,3),
    //'access callback' => TRUE,
    'access callback' => '_is_m6_user_logged_in',
    'type' => MENU_CALLBACK,  
  );  
  $items['program/manage-asset-category'] = array(
    'title' => 'Manage Asset Categories',
    'page callback' => 'program_project_manage_asset_category',
    'access callback' => '_is_m6_user_logged_in',
  );
  $items['edit-est-details/%/%ctools_js'] = array(
    'title' => 'Edit estimate code code details',
    'page callback' => 'edit_estimate_code_code_details_callback',
    'page arguments' => array(1,2),
    'access callback' => '_is_m6_user_logged_in',
    'type' => MENU_CALLBACK,
  );    
  $items['estimate-approve-status-title/%'] = array(
    'page callback' => 'estimate_approve_status_change_callback',
    'page arguments' => array(1),
    //'access callback' => TRUE,
    'access callback' => '_is_m6_user_logged_in',
    'type' => MENU_CALLBACK,  
  );
  $items['status-mark/%/%'] = array(
    'page callback' => 'status_mark_callback',
    'page arguments' => array(1,2),
    'access callback' => '_is_m6_user_logged_in',
    'type' => MENU_CALLBACK,  
  );  
  $items['load-more-data/%/%/%'] = array(
    'page callback' => 'load_more_data_callback',
    'page arguments' => array(1,2,3),
    'access callback' => '_is_m6_user_logged_in',
    'type' => MENU_CALLBACK,  
  );    
  $items['get-cost-code/%'] = array(
    'page callback' => 'get_costcode_option_callback',
    'page arguments' => array(1),
  'access callback' => '_is_m6_user_logged_in',
    'type' => MENU_CALLBACK,  
  );
  $items['check-project-availablity/%/%/%'] = array(
    'page callback' => 'get_project_availability_callback',
    'page arguments' => array(1,2,3),
    'access callback' => '_is_m6_user_logged_in',
    'type' => MENU_CALLBACK,  
  );
  $items['update-spending-status/%/%'] = array(
    'page callback' => 'update_spending_reco_callback',
    'page arguments' => array(1,2),
    'access callback' => '_is_m6_user_logged_in',
    'type' => MENU_CALLBACK,  
  );  
  $items['update-image-reove/%/%'] = array(
    'page callback' => 'update_image_remove_callback',
    'page arguments' => array(1,2),
    'access callback' => '_is_m6_user_logged_in',
    'type' => MENU_CALLBACK,  
  );    
  $items['check-commitment-amount/%/%'] = array(
    'page callback' => 'get_commit_amount_callback',
    'page arguments' => array(1,2),
    'access callback' => '_is_m6_user_logged_in',
    'type' => MENU_CALLBACK,  
  );  
  $items['check-title-availablity/%/%/%'] = array(
    'page callback' => 'get_project_title_availability_callback',
    'page arguments' => array(1,2,3),
    'access callback' => '_is_m6_user_logged_in',
    'type' => MENU_CALLBACK,  
  );  
  $items['get-contigency-status/%'] = array(
    'page callback' => 'get_costcode_contigency_status_callback',
    'page arguments' => array(1),
    'access callback' => '_is_m6_user_logged_in',
    'type' => MENU_CALLBACK,  
  );
  $items['get-vendor-by-commitment/%'] = array(
    'page callback' => 'get_vendor_by_commitment_callback',
    'page arguments' => array(1),
    'access callback' => '_is_m6_user_logged_in',
    'type' => MENU_CALLBACK,  
  );  
  $items['get-commitment-list-project/%'] = array(
    'page callback' => 'get_commitment_option_project_callback',
    'page arguments' => array(1), 
  'access callback' => '_is_m6_user_logged_in',
    'type' => MENU_CALLBACK,  
  );
  $items['get-commitment-type/%'] = array(
    'page callback' => 'get_commitment_option_by_type_project_callback',
    'page arguments' => array(1,2), 
  'access callback' => '_is_m6_user_logged_in',
    'type' => MENU_CALLBACK,  
  );  
  $items['sendinvite-tom6-users/%ctools_js'] = array(
    'title' => 'Invite People to Join M6Connect',
    'page callback' => 'm6connect_sendinvite_tom6_callback',
    'page arguments' => array(1),
    'access callback' => '_is_m6_user_logged_in',
    'modal' => TRUE,
  );
  $items['get-commitment-and-costcode/%/%ctools_js'] = array(
    'title' => 'Commitment and Cost code for Etc',
    'page callback' => 'm6connect_get_cc_commitment_callback',
    'page arguments' => array(1,2),
    'access callback' => '_is_m6_user_logged_in',
    'modal' => TRUE,
  );  
  $items['po-items-details/%/%ctools_js'] = array(
    'page callback' => 'po_items_details_callback',
    'page arguments' => array(1,2),
    //'access callback' => TRUE,
    'access callback' => '_is_m6_user_logged_in',
    'type' => MENU_CALLBACK,  
  );    
  $items['node-delete/%ctools_js/%'] = array(
    'page callback' => 'node_delete_custom_callback', 
    'page arguments' => array( 1,2 ), 
    'access callback' => '_is_m6_user_logged_in',
    'type' => MENU_CALLBACK, 
  );
  $items['project-manager-comment/%/%/%ctools_js'] = array(
    'page callback' => 'custom_project_manager_comment_edit',
    'page arguments' => array(1,2,3),
    'access arguments' => array('access content'),
    'access callback' => '_is_m6_user_logged_in',
  );
  $items['project-manager-comment/delete/%/%/%ctools_js'] = array(
    'page callback' => 'custom_project_manager_comment_delete',
    'page arguments' => array(2,3,4),
    'access arguments' => array('access content'),
  );
  $items['project-default-milestone/delete/%/%/%/%ctools_js'] = array(
    'page callback' => 'custom_project_default_milestone_delete',
    'page arguments' => array(2,3,4,5),
    'access arguments' => array('access content'),
  );
  $items['asset-category/delete/%/%/%ctools_js'] = array(
    'page callback' => 'asset_category_delete',
    'page arguments' => array(2,3,4),
    'access arguments' => array('access content'),
  );
  $items['load-est-budget/%/%ctools_js'] = array(
    'page callback' => 'load_estimate_budget_details_callback',
    'page arguments' => array(1,2),
    'access callback' => '_is_m6_user_logged_in',
  );
  $items['clear-asset-data/%/%ctools_js'] = array(
    'page callback' => 'clear_asset_data_callback',
    'page arguments' => array(1,2),
    'access callback' => '_is_m6_user_logged_in',
  );
  $items['delete-asset-data-spread/%/%ctools_js'] = array(
    'page callback' => 'delete_asset_data_spread_callback',
    'page arguments' => array(1,2),
    'access callback' => '_is_m6_user_logged_in',
  );
  $items['reseting/%/%ctools_js'] = array(
    'page callback' => 'reset_filter_settings_callback',
    'page arguments' => array(1,2),
    'access callback' => '_is_m6_user_logged_in',
  );
  $items['load-project-pdf/%/%/%ctools_js'] = array(
    'title' => 'Project Report',
    'page callback' => 'load_project_pdf_data_callback',
    'page arguments' => array(1,2,3),
    'access callback' => '_is_m6_user_logged_in',
  );    
  $items['load-project-pdf-data/%/%'] = array(
    'title' => 'Project Report',
    'page callback' => 'project_programe_report_pdf',
    'page arguments' => array(1,2), 
    'access callback' => '_is_m6_user_logged_in',
  );
  $items['project-report-excel/%/%'] = array(
    'page callback' => 'project_programe_report_excel',
    'page arguments' => array(1,2),
    'access callback' => '_is_m6_user_logged_in',
  );      
  $items['program/add-cost-code'] = array(
    'title' => 'Add New Cost Code',
    'page callback' => 'program_project_add_cost_code_content',
    'access callback' => '_is_m6_user_logged_in',
  );  
  $items['program/add-default-milestone'] = array(
    'title' => 'Default Milestone',
    'page callback' => 'program_project_add_default_milestone_content',
    'access callback' => '_is_m6_user_logged_in',
  );
  $items['program/archive'] = array(
    'title' => 'Archived Projects',
    'page callback' => 'program_project_archive_project_content',
    'access callback' => '_is_m6_user_logged_in',
  );
  $items['program/lock-milestone-date'] = array(
    'title' => 'Lock Milestone Date',
    'page callback' => 'program_project_add_lock_milestone_content',
    'access callback' => '_is_m6_user_logged_in',
  );
  $items['get-cost-code-up/%'] = array(
    'page callback' => 'get_costcode_option_callback_test',
    'page arguments' => array(1),
  'access callback' => TRUE,
    'type' => MENU_CALLBACK,  
  );
  $items['get-user-data/%'] = array(
    'page callback' => '_get_user_data_callback',
    'page arguments' => array(1),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,  
  );
  $items['program/archive-program/%/%ctools_js'] = array(
    'title' => t('Archive Project'),
    'page callback' => 'archive_program_cpm',
    'page arguments' => array(2,3),
    'access callback' => '_is_m6_user_logged_in',
  );
  $items['program/restore-archive/%/%ctools_js'] = array(
    'title' => t('Restore Project'),
    'page callback' => 'restore_program_cpm',
    'page arguments' => array(2,3),
    'access callback' => '_is_m6_user_logged_in',
  );
  $items['program/delete-archive/%/%ctools_js'] = array(
    'title' => t('Archive Project'),
    'page callback' => 'delete_program_cpm',
    'page arguments' => array(2,3),
    'access callback' => '_is_m6_user_logged_in',
  );
  $items['update-lock-status/%/%'] = array(
    'page callback' => 'update_lock_status_project',
    'page arguments' => array(1,2),
    'access callback' => '_is_m6_user_logged_in',
    'type' => MENU_CALLBACK,  
  );
  $items['get-state-list-countrycode-program/%'] = array(
    'page callback' => 'get_state_by_countrycode_callback',
    'page arguments' => array(1),
    'access callback' => '_is_m6_user_logged_in',
    'type' => MENU_CALLBACK,  
  );
  $items['program-loc-node-delete/%ctools_js/%/%'] = array(
    'page callback' => 'prog_loc_node_delete_custom_callback', 
    'page arguments' => array( 1,2,3 ), 
    'access callback' => '_is_m6_user_logged_in',
    'type' => MENU_CALLBACK,
    'file' => 'asset_location.inc',
    'file path' => drupal_get_path('module', 'm6connect_program') . '/includes',
  );
  $items['program-loc-action/%/%/%/%ctools_js'] = array(
    'page callback' => 'program_loc_node_action_callback', 
    'page arguments' => array( 1,2,3,4), 
    'access callback' => '_is_m6_user_logged_in',
    'type' => MENU_CALLBACK, 
  );
  $items['get-locationdata-country-prog/%/%'] = array(
    'page callback' => 'get_location_data_country_callback_program',
    'page arguments' => array(1,2),
    'access callback' => '_is_m6_user_logged_in',
    'type' => MENU_CALLBACK,  
  );
  $items['get-facility-floordata-program/%'] = array(
    'page callback' => 'get_facility_floor_data_program_callback',
    'page arguments' => array(1),
    'access callback' => '_is_m6_user_logged_in',
    'type' => MENU_CALLBACK,
  );
  $items['get-all-assets'] = array(
    'page callback' => 'get_all_assets',
    'access callback' => TRUE,
  );
  $items['get-next-page-data/%/%/%/%/%ctools_js'] = array(
    'page callback' => 'get_next_page_data_records',
    'page arguments' => array(1,2,3,4,5),
    'access callback' => '_is_m6_user_logged_in',
  );
  $items['get-total-number-of-data/%/%/%/%/%ctools_js'] = array(
    'page callback' => 'get_total_number_data_records',
    'page arguments' => array(1,2,3,4,5),
    'access callback' => '_is_m6_user_logged_in',
  );
  $items['get-asset-based-data/%/%/%ctools_js'] = array(
    'page callback' => 'get_asset_based_data_callback',
    'page arguments' => array(1,2,3),
    'access callback' => '_is_m6_user_logged_in',
  );
  $items['load-spending-details/%/%/%ctools_js'] = array(
    'page callback' => 'load_spending_details_callback',
    'page arguments' => array(1,2),
    'access callback' => '_is_m6_user_logged_in',
  );
  $items['generate-spending-details/%/%'] = array(
    'page callback' => 'generate_spending_details_callback',
    'page arguments' => array(1,2),
    'access callback' => '_is_m6_user_logged_in',
  );  
  
  return $items;
}

/**
 * Implements hook_views_api
 */

function m6connect_program_views_api() {
  return array(
  'api' => views_api_version(),
    'path' => drupal_get_path('module', 'm6connect_program') . '/views',
  );
}

/**
* Implements hook_block_info().
*/
function m6connect_program_block_info() {
  $blocks = array();
  $blocks['program_project_navigation'] = array(
    'info' => t('Program Project Navigation'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );
  $blocks['programe-manager-project'] = array(
    'info' => t('New project programe manager'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );  
  return $blocks;
}
/**
* Implements hook_block_view().
*/
function m6connect_program_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'program_project_navigation':
      $block['subject'] = '';
      $block['content'] = program_project_menu_links_content();
      break;
    case 'programe-manager-project':
      $block['subject'] = t('');
      $block['content'] = new_programe_manager_project();
      break;  
    case 'programe-manager-settings':
      $block['subject'] = t('');
      $block['content'] = new_programe_manager_setting_link_content();
    break;  
  }
  return $block;
}

/*
 *  Implement hook_preprocess_page
 *  Used For: Disable page title form pages.
 */

function m6connect_program_preprocess_page(&$variables) {
  if(arg(1) == 'cm') {
    if (in_array(current_path(),array('program/cm/my-project','program/cm/projects','program/cm/estimates','program/cm/cost-summary','program/cm/commitments','program/cm/spending','program/cm/etc','program/cm/safety','program/cm/schedule','program/cm/reports'))) {
    $variables['title'] = '';
    }
  }
  else {
    if (in_array(current_path(),array('program/my-project','program/projects','program/estimates','program/cost-summary','program/commitments','program/spending','program/etc','program/safety','program/schedule','program/reports'))) {
      $variables['title'] = '';
    }
  }  
}

function m6connect_program_theme(){
  $path = drupal_get_path('modules', 'm6connect_program');  
  return array(
    'm6_numberfield'=> array(
    'render element' => 'element',
  ),
  'invite_m6_theme'=> array(
    'render element' => 'form',
  ),
  'add_item_invite_m6_theme'=> array(
    'render element' => 'form',
  ),
  'assets_form_theme'=> array(
    'render element' => 'form',
  ),
  'project_program_report_content_pdf' => array(
    'variables' => array('data' => array()),
    'template' => $path . '/includes/project-program-report-content-pdf',
    ),
  'slideshow_manage' => array(
      'render element' => 'form',
    ),
  'image_multifield_multitype' => array(
      'render element' => 'element',
    ),
  );  
}

function theme_m6_numberfield($variables) {
  $element = $variables['element'];
  $element['#attributes']['type'] = 'number';
  element_set_attributes($element, array('id', 'name', 'value', 'size', 'maxlength', 'placeholder', 'min', 'max', 'step'));
  _form_set_class($element, array('form-text', 'form-number'));
  $output = '<input' . drupal_attributes($element['#attributes']) . ' />';
  return $output;
}

function program_project_menu_links_content($top_arg = ''){
  if (empty($top_arg)) {
    $top_arg = arg(1);
  }
  $currentPath = current_path();
  if ($top_arg == 'cm') {
    $_SESSION['CURRENTPROJECT'] = 'CM';
    $programList = array(
      'program/cm/my-project'=>'My Projects',
      'program/cm/projects'=>'Project',
      'program/cm/estimates'=>'Budget',
      'program/cm/cost-summary'=>'Cost Summary',
      'program/cm/commitments'=>'Commitments',
      'program/cm/spending'=>'Spending',
      'program/cm/etc'=>'ETC',
      'program/cm/spending-forcast'=>'Spending Forecast',
      'program/cm/assets'=>'Assets',
      'program/cm/safety'=>'Safety',
      'program/cm/schedule'=>'Schedule',
      'program/cm/photos' => 'Photos',
      'program/cm/reports'=>'Reports',
    );
    $estimate_subtab = array(
      'program/cm/estimates/capital-request',
      'program/cm/estimates/estimate-schedule',
      'program/cm/estimates/supporting-estimates',
    );
  }
  elseif ($top_arg == 'cr') {
    $_SESSION['CURRENTPROJECT'] = 'CR';
    $programList = array(
      'program/cr/my-project'=>'My Projects',
      'program/cr/projects'=>'Project',
      'program/cr/estimates'=>'Budget',
      'program/cr/cost-summary'=>'Cost Summary',
      'program/cr/commitments'=>'Commitments',
      'program/cr/spending'=>'Spending',
      'program/cr/etc'=>'ETC',
      'program/cr/spending-forcast'=>'Spending Forecast',
      'program/cr/assets'=>'Assets',
      'program/cr/safety'=>'Safety',
      'program/cr/schedule'=>'Schedule',
      'program/cr/photos' => 'Photos',
      'program/cr/reports'=>'Reports',
    );
    $estimate_subtab = array(
      'program/cr/estimates/capital-request',
      'program/cr/estimates/estimate-schedule',
      'program/cr/estimates/supporting-estimates',
    );
  }
  elseif (!empty($_SESSION['CURRENTPROJECT'])) {
    if ($_SESSION['CURRENTPROJECT'] == 'CM') {
      $programList = array(
        'program/cm/my-project'=>'My Projects',
        'program/cm/projects'=>'Project',
        'program/cm/estimates'=>'Budget',
        'program/cm/cost-summary'=>'Cost Summary',
        'program/cm/commitments'=>'Commitments',
        'program/cm/spending'=>'Spending',
        'program/cm/etc'=>'ETC',
        'program/cm/spending-forcast'=>'Spending Forecast',
        'program/cm/assets'=>'Assets',
        'program/cm/safety'=>'Safety',
        'program/cm/schedule'=>'Schedule',
        'program/cm/photos' => 'Photos',
        'program/cm/reports'=>'Reports',
      );
      $estimate_subtab = array(
        'program/cm/estimates/capital-request',
        'program/cm/estimates/estimate-schedule',
        'program/cm/estimates/supporting-estimates',
      );
    }
    if ($_SESSION['CURRENTPROJECT'] == 'CR') {
      $programList = array(
        'program/cr/my-project'=>'My Projects',
        'program/cr/projects'=>'Project',
        'program/cr/estimates'=>'Budget',
        'program/cr/cost-summary'=>'Cost Summary',
        'program/cr/commitments'=>'Commitments',
        'program/cr/spending'=>'Spending',
        'program/cr/etc'=>'ETC',
        'program/cr/spending-forcast'=>'Spending Forecast',
        'program/cr/assets'=>'Assets',
        'program/cr/safety'=>'Safety',
        'program/cr/schedule'=>'Schedule',
        'program/cr/photos' => 'Photos',
        'program/cr/reports'=>'Reports',
      );
      $estimate_subtab = array(
        'program/cr/estimates/capital-request',
        'program/cr/estimates/estimate-schedule',
        'program/cr/estimates/supporting-estimates',
      );
    }
    if($_SESSION['CURRENTPROJECT'] = 'CPM') {
      $programList = array(
        'program/my-project'=>'My Projects',
        'program/projects'=>'Project',
        'program/estimates'=>'Budget',
        'program/cost-summary'=>'Cost Summary',
        'program/commitments'=>'Commitments', 
        'program/spending'=>'Spending',
        'program/etc'=>'ETC',
        'program/spending-forcast'=>'Spending Forecast',
        'program/assets'=>'Assets',
        'program/safety'=>'Safety',
        'program/schedule'=>'Schedule',
        'program/photos' => 'Photos',
        'program/reports'=>'Reports',
      );
      $estimate_subtab = array(
        'program/estimates/capital-request',
        'program/estimates/estimate-schedule',
        'program/estimates/supporting-estimates',
      );
    }
  }
  else {
    $_SESSION['CURRENTPROJECT'] = 'CPM';
    $programList = array(
      'program/my-project'=>'My Projects',
      'program/projects'=>'Project',
      'program/estimates'=>'Budget',
      'program/cost-summary'=>'Cost Summary',
      'program/commitments'=>'Commitments', 
      'program/spending'=>'Spending',
      'program/etc'=>'ETC',
      'program/spending-forcast'=>'Spending Forecast',
      'program/assets'=>'Assets',
      'program/safety'=>'Safety',
      'program/schedule'=>'Schedule',
      'program/photos' => 'Photos',
      'program/reports'=>'Reports',
    );
    $estimate_subtab = array(
      'program/estimates/capital-request',
      'program/estimates/estimate-schedule',
      'program/estimates/supporting-estimates',
    );
  }
  $output = '<ul class="list-unstyled list-inline custom-list program-project-menu-links clearfix">';
  foreach($programList as $menuPath => $label){
    $class = ($currentPath == $menuPath)?' active':'';
    if(in_array($currentPath,$estimate_subtab) && $label == 'Budget'){    
      $output .= '<li class="menu-item active">'.l($label,$menuPath).'</li>'; 
    }
    else if($label == 'Photos') {
      if($currentPath == 'program/projects' && isset($_GET['pid'])) { 
        $output .= '<li class="menu-item">'.l($label,$menuPath, array('query' => array('pid' => check_plain($_GET['pid'])))).'</li>'; 
      }
      else if(isset($_SESSION['ACTIVEPROJECT'])){
        $output .= '<li class="menu-item">'.l($label,$menuPath, array('query' => array('pid' => $_SESSION['ACTIVEPROJECT']))).'</li>'; 
      }
      else {
        $output .= '<li class="menu-item">'.l($label,$menuPath).'</li>'; 
      }
    }
    else {
      $output .= '<li class="menu-item'.$class.'">'.l($label,$menuPath).'</li>';
    }
  }    
  $output .= '</ul>';
  return $output; 
}

function program_project_estimate_subtab(){
  $currentPath = current_path();
  $estimate_subtab = array(
    'program/estimates/capital-request'=>'Capital Budget',
    'program/estimates/estimate-schedule'=>'Budget Schedule',
    'program/estimates/supporting-estimates'=>'Supporting Budget',  
  );
  $output = '<ul class="list-unstyled list-inline custom-list program-project-sub-menu-links clearfix">';
  foreach($estimate_subtab as $menuPath => $label){
    $class = ($currentPath == $menuPath)?' active':'';
    $output .= '<li class="menu-item'.$class.'">'.l($label,$menuPath).'</li>'; 
  }    
  $output .= '</ul>';
  return $output; 
}

function new_programe_manager_setting_link_content(){
  $currentPath = current_path();
  if (arg(1) == 'cm') {
    $programList = array(
      'program/cm/add-cost-code'=>'Cost Code',
      // 'program/cm/add-default-milestone'=>'Default Milestones',
      'program/cm/lock-milestone-date'=>'Manage Projects',
      'program/cm/manage-asset-category'=>'Manage Asset Categories',
      'program/cm/location'=>'Locations',
    );
  }
  elseif (arg(1) == 'cr') {
    $programList = array(
      'program/cr/add-cost-code'=>'Cost Code',
       // 'program/cr/add-default-milestone'=>'Default Milestones',
      'program/cr/lock-milestone-date'=>'Manage Projects',
      'program/cr/manage-asset-category'=>'Manage Asset Categories',
      'program/cr/location'=>'Locations',
    );
  }
  else {
    $programList = array(
      'program/add-cost-code'=>'Cost Code',
      // 'program/add-default-milestone'=>'Default Milestones',
      'program/lock-milestone-date'=>'Manage Projects',
      'program/manage-asset-category'=>'Manage Asset Categories',
      'program/location'=>'Locations',
    );
  }
  $output = '<ul class="list-unstyled list-inline custom-list program-project-setting-menu-links clearfix">';
  foreach($programList as $menuPath => $label){
    $class = ($currentPath == $menuPath)?' active':'';
    if(in_array($currentPath,$estimate_subtab) && $label == 'Budget'){    
      $output .= '<li class="menu-item active">'.l($label,$menuPath).'</li>'; 
    }
    else {
      $output .= '<li class="menu-item'.$class.'">'.l($label,$menuPath).'</li>';
    }
  }    
  $output .= '</ul>';
  return $output; 
}

function new_programe_manager_project() {   
  global $user;
  $userObj = user_load($user->uid);
  $programeProjectLink = '';  
  if(in_array(current_path(),array('program/my-project','program/projects','program/estimates','program/cost-summary','program/commitments','program/spending','program/etc','program/spending-forcast','program/assets','program/safety','program/schedule','program/reports','program/photos','program/add-default-milestone','program/add-cost-code','program/lock-milestone-date','program/manage-asset-category','program/location','program/estimates/estimate-schedule','program/estimates/capital-request','program/cm/my-project','program/cm/projects','program/cm/estimates','program/cm/cost-summary','program/cm/commitments','program/cm/spending','program/cm/etc','program/cm/spending-forcast','program/cm/assets','program/cm/safety','program/cm/schedule','program/cm/reports','program/cm/photos','program/cm/add-default-milestone','program/cm/add-cost-code','program/cm/estimates/estimate-schedule','program/cm/estimates/capital-request','program/cm/lock-milestone-date','program/cm/manage-asset-category','program/cm/location'))){
    if(current_path() == 'program/my-project') { $bannerTitle = 'Capital Projects Manager - My Projects'; }  
    if(current_path() == 'program/projects') { $bannerTitle = 'Capital Projects Manager - Project'; }  
    if(current_path() == 'program/estimates') { $bannerTitle = 'Capital Projects Manager - Budget'; }  
    if(current_path() == 'program/cost-summary') { $bannerTitle = 'Capital Projects Manager - Cost Summary'; }  
    if(current_path() == 'program/commitments') { $bannerTitle = 'Capital Projects Manager - Commitments'; }  
    if(current_path() == 'program/spending') { $bannerTitle = 'Capital Projects Manager - Spending'; }  
    if(current_path() == 'program/etc') { $bannerTitle = 'Capital Projects Manager - Estimate to Complete'; }   
    if(current_path() == 'program/spending-forcast') { $bannerTitle = 'Capital Projects Manager - Spending Forecast'; }     
    if(current_path() == 'program/safety') { $bannerTitle = 'Capital Projects Manager - Safety'; }  
    if(current_path() == 'program/schedule') { $bannerTitle = 'Capital Projects Manager - Schedule'; }  
    if(current_path() == 'program/reports') { $bannerTitle = 'Capital Projects Manager - Reports'; }  
    if(current_path() == 'program/photos') { $bannerTitle = 'Capital Projects Manager - Photos'; }    
    if(current_path() == 'program/assets') { $bannerTitle = 'Capital Projects Manager - Assets'; }    
    if(current_path() == 'program/add-cost-code') { $bannerTitle = 'Capital Projects Manager - Cost Code'; }  
    if(current_path() == 'program/add-default-milestone') { $bannerTitle = 'Capital Projects Manager - Default Milestones'; }     
    if(current_path() == 'program/lock-milestone-date') { $bannerTitle = 'Capital Projects Manager - Lock Milestone Date'; }    
    if(current_path() == 'program/manage-asset-category') { $bannerTitle = 'Capital Projects Manager - Manage Asset Category'; }    
    if(current_path() == 'program/location') { $bannerTitle = 'Capital Projects Manager - Location'; }      
    if(current_path() == 'program/estimates/capital-request') { $bannerTitle = 'Capital Projects Manager - Budget - Capital Budget'; }  
    if(current_path() == 'program/estimates/estimate-schedule') { $bannerTitle = 'Capital Projects Manager - Budget - Budget Schedule'; }   
    if(current_path() == 'program/add-cost-code') { $programeProjectLink = ''; }
    // ====== COST MANAGER ===== //
    if(current_path() == 'program/cm/my-project') { $bannerTitle = 'Cost Manager - My Projects'; }  
    if(current_path() == 'program/cm/projects') { $bannerTitle = 'Cost Manager - Project'; }  
    if(current_path() == 'program/cm/estimates') { $bannerTitle = 'Cost Manager - Budget'; }  
    if(current_path() == 'program/cm/cost-summary') { $bannerTitle = 'Cost Manager - Cost Summary'; }  
    if(current_path() == 'program/cm/commitments') { $bannerTitle = 'Cost Manager - Commitments'; }  
    if(current_path() == 'program/cm/spending') { $bannerTitle = 'Cost Manager - Spending'; }  
    if(current_path() == 'program/cm/etc') { $bannerTitle = 'Cost Manager - Estimate to Complete'; }    
    if(current_path() == 'program/cm/spending-forcast') { $bannerTitle = 'Cost Manager - Spending Forecast'; }      
    if(current_path() == 'program/cm/assets') { $bannerTitle = 'Cost Manager - Assets'; }   
    if(current_path() == 'program/cm/safety') { $bannerTitle = 'Cost Manager - Safety'; }  
    if(current_path() == 'program/cm/schedule') { $bannerTitle = 'Cost Manager - Schedule'; }  
    if(current_path() == 'program/cm/reports') { $bannerTitle = 'Cost Manager - Reports'; }  
    if(current_path() == 'program/cm/photos') { $bannerTitle = 'Cost Manager - Photos'; }   
    if(current_path() == 'program/cm/add-cost-code') { $bannerTitle = 'Cost Manager - Cost Code'; }  
    if(current_path() == 'program/cm/add-default-milestone') { $bannerTitle = 'Cost Manager - Default Milestones'; }    
    if(current_path() == 'program/cm/lock-milestone-date') { $bannerTitle = 'Cost Manager - Lock Milestone Date'; }   
    if(current_path() == 'program/cm/manage-asset-category') { $bannerTitle = 'Cost Manager - Manage Asset Category'; }   
    if(current_path() == 'program/cm/location') { $bannerTitle = 'Cost Manager - Location'; }   
    if(current_path() == 'program/cm/estimates/capital-request') { $bannerTitle = 'Cost Manager - Budget - Capital Budget'; }  
    if(current_path() == 'program/cm/estimates/estimate-schedule') { $bannerTitle = 'Cost Manager - Budget - Budget Schedule'; }    
    if(current_path() == 'program/cm/add-cost-code') {  $programeProjectLink = ''; }
  else if(current_path() == 'program/cm/add-default-milestone') { $programeProjectLink = ''; }
  else { 
      if(arg(1) == 'cm') {
        $programeProjectLink = l('<i class="glyphicon glyphicon-plus"></i> Add New Project',url('/program/cm/projects'),array('html' => TRUE,'attributes' => array('class' => 'add-project')));   
      }
      else {
        $programeProjectLink = l('<i class="glyphicon glyphicon-plus"></i> Add New Project',url('/program/projects'),array('html' => TRUE,'attributes' => array('class' => 'add-project')));    
      }
    }
  }
  if($userObj->field_gender['und'][0]['value'] == 'male') {
    $img = '<img src="/sites/all/themes/m6connect/images/icon-detective.png" />';
  }
  else {
    $img = '<img src="/sites/all/themes/m6connect/images/icon-manager.png" />';
  }
  $output = '<div class="main_content">
         <div class="box box-with-image">
         <div class="box-header-main box-header">
         <div class="box-image-wrapper"> <a href="#"> '.$img.'<!--<i class="fa fa-user-secret" aria-hidden="true"></i> --></a> </div>
           <div class="box-right-entity">              
           <div class="row"><div class="col-md-8 col-sm-6 col-xs-12"><h1>'.$bannerTitle.'</h1>
         <p>Create New Projects, Estimates and Manage Costs</p>
           </div>
             <div class="col-md-4 col-sm-6 col-xs-12 box-actions text-right">'.$programeProjectLink.'</div></div>
       </div></div></div></div>';
  return $output; 
}

// ============================
// Start My Project Slide Section
// Get the information of all project type node based on GLOBAL Company
// =====================================================================
function program_my_project_listing_content() {
  $elements = array();  
  $path = check_plain($_GET['q']);
  $arguments = explode('/', $path);
  $top_arg = 'cpm';
  if ($arguments[1] == 'cm') {
    $top_arg = 'cm';
  }
  elseif ($arguments[1] == 'cr') {
    $top_arg = 'cr';
  }
  else {
    $top_arg = 'cpm';
  }

  drupal_add_js('Drupal.behaviors.m6connect_cm_inline_js = {
        attach: function (context, settings) { if (!jQuery("table.m6connect-custom-myproject-slide-table").hasClass("custom_processed")) { jQuery("table.m6connect-custom-myproject-slide-table").DataTable({"bPaginate": false,"bLengthChange": false,"bFilter": false,"bInfo": false,"bAutoWidth": false,"order": [],"aoColumnDefs": [{ "bSortable": false, "aTargets": ["no-sort"]}]});
          jQuery("table.m6connect-custom-myproject-slide-table").addClass("custom_processed"); }}}',
    array('type' => 'inline')
  );
  $elements['prgram-project-menu-items'] = array(
    '#markup' => program_project_menu_links_content($top_arg),
    '#prefix' => '<div class="clearfix">',
    '#suffix' => '</div>',
  );
  $elements['prgram-project-listing'] = array(
    // '#markup' => get_my_project_listing_table_data(),
    '#markup' => render(drupal_get_form('get_my_project_listing_table_data_form', $top_arg)),
    '#prefix' => '<div class="clearfix"><div class="table-responsive">',
    '#suffix' => '</div></div>',
  );     
  return $elements;
}

function get_my_project_listing_table_data_form($form, &$form_state, $top_arg = 'cpm') {
  $default_value_sort_element = '';
  $sort_method = FALSE;
  if (!empty($_SESSION['project_sort_method'])) {
    $default_value_sort_element = $_SESSION['project_sort_method'];
    $sort_method = $_SESSION['project_sort_method'];
  }
  if (!empty($form_state['triggering_element']['#name']) && $form_state['triggering_element']['#name'] == 'select_sort_element') {
    $default_value_sort_element = $form_state['triggering_element']['#value'];
    $sort_method = $form_state['triggering_element']['#value'];
  }
  $form['top_arg'] = array(
    '#type' => 'hidden',
    '#value' => $top_arg,
  );
  $form['select_sort_element'] = array(
    '#type' => 'select',
    '#options' => array(0 => '-- None --', 'region' => t('Region'), 'site' => t('Site'), 'facility_type' => t('Facility Type')),
    '#title' => t('View By:'),
    '#default_value' => $default_value_sort_element,
    '#ajax' => array(
      'callback'=> 'change_select_sort_element_callback',
      'wrapper' => 'select-sort-element-table',
      'effect' => 'fade',
    ),
    '#attributes' => array('class' => array('display-inline-block'), 'style' => 'width:200px;'),
    '#field_prefix' => '<div class="display-inline-block">',
    '#field_suffix' => '</div>',
    '#prefix' => '<div class="clearfix"><div class="form-inline pull-right">',
    '#suffix' => '</div></div>',
  );
  $form['data_tables'] = array(
    '#type' => 'markup',
    '#markup' => get_my_project_listing_table_data($sort_method, $top_arg),
    '#prefix' => '<div id = "select-sort-element-table">',
    '#suffix' => '</div>',
  );
  return $form;
}

/**
 * Ajax callback for getting table data according to sort.
 */
function change_select_sort_element_callback($form, &$form_state) {
  if (isset($_SESSION['project_sort_method'])) {
    unset($_SESSION['project_sort_method']);
  }
  $_SESSION['project_sort_method'] = $form_state['triggering_element']['#value'];
  return $form['data_tables'];
}

function get_my_project_listing_table_data($sort_method = FALSE, $top_arg){
  global $company;  
  setlocale(LC_MONETARY, 'en_US');
  drupal_add_js(drupal_get_path('module', 'm6connect_program') . '/js/m6connect_program.js');
  drupal_add_js(drupal_get_path('module', 'm6connect_program') . '/js/Prototype_Price_Format_0.1.js');
  drupal_add_js(drupal_get_path('theme', 'm6connect') . '/js/jquery.dataTables.min.js');
  drupal_add_css(drupal_get_path('theme', 'm6connect') . '/css/jquery.dataTables.min.css');
  $default_way = TRUE;
  if (empty($sort_method)) {
    // If no sort method defined, then moving the normal way.
    if ($top_arg == 'cm') {
      $projectList = _project_list_by_company($company->nid, 'project_management','cmtrue');
    }
    elseif ($top_arg == 'cr') {
      $projectList = _project_list_by_company($company->nid, 'project_management','crtrue');
    }
    else {
      $projectList = _project_list_by_company($company->nid, 'project_management','cmfalse');
    }
  }
  else {
    // Prepare data array for sort method.
    $default_way = FALSE;
    // First getting all the headers for projects, then preparing projects for
    // each of those.
    $sort_nodes = _get_sorted_nodes_by_type_arg_cmp($top_arg);
    if (empty($sort_nodes)) {
      // If there are no nodes to be sorted by the given type, then sorting as
      // normal.
      return get_my_project_listing_table_data(FALSE, $top_arg);
    }
    // If there are sort nodes, then processing further.
    $sorted_data = array();
    foreach ($sort_nodes as $key => $sort_node_obj) {
      $sorted_out = _get_project_by_sort_node($sort_node_obj->nid, $sort_method, $top_arg);
      if (empty($sorted_out)) {
        continue;
      }
      $sorted_data[$sort_node_obj->nid] = $sorted_out;
    }
  }
  $header = array(
    array('data'=>'Project Number','class'=>array('text-center')),
    array('data'=>'Project Title','class'=>array('text-center')),
    array('data'=>'Project Status','class'=>array('text-center')),
    array('data'=>'Project Manager','class'=>array('text-center')),
    array('data'=>'Total Budget','class'=>array('text-center')),
    array('data'=>'Projected Final Cost','class'=>array('text-center')),
    array('data'=>'Cost','class'=>array('text-center','no-sort')),
    array('data'=>'Schedule','class'=>array('text-center','no-sort')),
    array('data'=>'Safety','class'=>array('text-center','no-sort')),
    array('data'=>'Actions','class'=>array('text-center','no-sort')),
  );
  if ($default_way) {
    foreach ($projectList as $projectId => $projectTitle) {      
      $nodeDetails = node_load($projectId); 
      $projectNo = isset($nodeDetails->field_project_mgmt_number['und'])?$nodeDetails->field_project_mgmt_number['und'][0]['value']:' - None -';
      $projectStatus = isset($nodeDetails->field_project_mgmt_status['und'])?$nodeDetails->field_project_mgmt_status['und'][0]['value']:' - None -';
      $projectManager = isset($nodeDetails->field_project_mgmt_manager['und'])?_get_user_realname($nodeDetails->field_project_mgmt_manager['und'][0]['value']):' - None -';
      $totalBudget = get_total_approved_budget_by_project($nodeDetails->nid);
      $getETCStatus = get_status_mark_of_project('project_etc', $nodeDetails->nid);
      $getScheduleStatus = get_status_mark_of_project('project_schedule', $nodeDetails->nid);
      $getSafetytatus = get_status_mark_of_project('project_safety', $nodeDetails->nid);  
      $fivePer = (($totalBudget['totalOriginalBudget']*5)/100);
      $costStatus ='';
      if ($totalBudget['projectFinalCost'] > 0) {  
        if ($totalBudget['totalOriginalBudget'] <= $totalBudget['projectFinalCost']) {
          $costStatus = '<div class="status-mark form-group text-danger"><i class="fa fa-check-circle"></i></div>';      
        }
        else if ($totalBudget['projectFinalCost'] < ($totalBudget['totalOriginalBudget']-$fivePer)) {
          $costStatus = '<div class="status-mark form-group text-success"><i class="fa fa-check-circle"></i></div>';
        }
        else {
          $costStatus = '<div class="status-mark form-group text-warning"><i class="fa fa-check-circle"></i></div>';
        }
      } 
      if ($top_arg == 'cm') {
        $projNumber = l($projectNo, 'program/cm/projects',array('query' => array('pid' => $nodeDetails->nid))); 
        $proTitle = l($nodeDetails->title, 'program/cm/projects',array('query' => array('pid' => $nodeDetails->nid)));
        $proEdit = 'program/cm/projects';
      }
      elseif ($top_arg == 'cr') {
        $projNumber = l($projectNo, 'program/cr/projects',array('query' => array('pid' => $nodeDetails->nid))); 
        $proTitle = l($nodeDetails->title, 'program/cr/projects',array('query' => array('pid' => $nodeDetails->nid)));
        $proEdit = 'program/cr/projects';
      }
      else {
        $projNumber = l($projectNo, 'program/projects',array('query' => array('pid' => $nodeDetails->nid)));  
        $proTitle = l($nodeDetails->title, 'program/projects',array('query' => array('pid' => $nodeDetails->nid)));
        $proEdit = 'program/projects';
      }
    $action = '<div class="project-action">
                 <div class="btn-group"><div class="dropdown">
                 <button id="dLabel" class="btn btn-success" type="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"> Actions</button>
				 <ul class="dropdown-menu" role="menu" aria-labelledby="dLabel">
				 <li>'.l('Edit',$proEdit, array('query' => array('pid' => $nodeDetails->nid))).'</li>
				 <li>'.l('Submit for Approval','#').'</li>
				 <li>'.l('Change Status','#').'</li>
                 </ul></div></div></div>';
    $rows[] = array(
      'data' => array(
        array('data' => $projNumber,'class' => array('text-left')),
        array('data' => ucwords($proTitle),'class' => array('text-left')),
        array('data' => ucwords($projectStatus),'class' => array('text-left')),
        array('data' => ucwords($projectManager),'class' => array('text-left')),          
        array('data' => '$'.number_format($totalBudget['totalOriginalBudget']),'class' => array('text-right')),
        array('data' => '$'.number_format($totalBudget['projectFinalCost']),'class' => array('text-right')),
        array('data' => $costStatus,'class' => array('text-center')),
        array('data' => $getScheduleStatus,'class' => array('text-center')),
        array('data' => $getSafetytatus,'class' => array('text-center')),
        array('data' => $action,'class' => array('text-center')),
      ),
      //'class' => array('custom-odd'),
    );
  }
  return theme('table', array('header' => $header, 'rows' => $rows, 'empty' => 'No Project yet','attributes'=>array('class'=>array('table','m6connect-custom-program-table','m6connect-custom-myproject-slide-table','table-hover','table-bordered','text-center'))));
  }
  else {
    // If using sort method.
    if (!empty($sorted_data)) {
      // If we have data to deal with.
      $sorted_data_all = array();
      foreach ($sorted_data as $key => $value) {
        foreach ($value as $key1 => $value1) {
          $sorted_data_all[$key1] = $value1;
        }
      }
      if ($top_arg == 'cm') {
        $projectList = _project_list_by_company($company->nid, 'project_management','cmtrue');
      }
      elseif ($top_arg == 'cr') {
        $projectList = _project_list_by_company($company->nid, 'project_management','crtrue');
      }
      else {
        $projectList = _project_list_by_company($company->nid, 'project_management','cmfalse');
      }
    // We need to make sure that all the projects are shown when sort is enabled.
      // If, for any reason, a project is not listed in the given sort, then
      // displaying it in unsorted category.
      $remaining_data = array_diff($projectList, $sorted_data_all);
      $elements = array();
      $i = 1;
      foreach ($sorted_data as $sort_key => $sort_value) {
        $output = '';
        $rows = array();
        $sort_title = _get_title_of_node($sort_key);
        foreach ($sort_value as $projectId => $projectTitle) {
          $nodeDetails = node_load($projectId); 
          $projectNo = isset($nodeDetails->field_project_mgmt_number['und'])?$nodeDetails->field_project_mgmt_number['und'][0]['value']:' - None -';
          $projectStatus = isset($nodeDetails->field_project_mgmt_status['und'])?$nodeDetails->field_project_mgmt_status['und'][0]['value']:' - None -';
          $projectManager = isset($nodeDetails->field_project_mgmt_manager['und'])?_get_user_realname($nodeDetails->field_project_mgmt_manager['und'][0]['value']):' - None -';
          $totalBudget = get_total_approved_budget_by_project($nodeDetails->nid);
          $getETCStatus = get_status_mark_of_project('project_etc', $nodeDetails->nid);
          $getScheduleStatus = get_status_mark_of_project('project_schedule', $nodeDetails->nid);
          $getSafetytatus = get_status_mark_of_project('project_safety', $nodeDetails->nid);  
          $fivePer = (($totalBudget['totalOriginalBudget']*5)/100);
          $costStatus ='';
          if ($totalBudget['projectFinalCost'] > 0) {  
            if ($totalBudget['totalOriginalBudget'] <= $totalBudget['projectFinalCost']) {
              $costStatus = '<div class="status-mark form-group text-danger"><i class="fa fa-check-circle"></i></div>';      
            }
            else if ($totalBudget['projectFinalCost'] < ($totalBudget['totalOriginalBudget']-$fivePer)) {
              $costStatus = '<div class="status-mark form-group text-success"><i class="fa fa-check-circle"></i></div>';
            }
            else {
              $costStatus = '<div class="status-mark form-group text-warning"><i class="fa fa-check-circle"></i></div>';
            }
          } 
          if ($top_arg == 'cm') {
            $projNumber = l($projectNo, 'program/cm/projects',array('query' => array('pid' => $nodeDetails->nid))); 
            $proTitle = l($nodeDetails->title, 'program/cm/projects',array('query' => array('pid' => $nodeDetails->nid)));
            $proEdit = 'program/cm/projects';
          }
          elseif ($top_arg == 'cr') {
            $projNumber = l($projectNo, 'program/cr/projects',array('query' => array('pid' => $nodeDetails->nid))); 
            $proTitle = l($nodeDetails->title, 'program/cr/projects',array('query' => array('pid' => $nodeDetails->nid)));
            $proEdit = 'program/cr/projects';
          }
          else {
            $projNumber = l($projectNo, 'program/projects',array('query' => array('pid' => $nodeDetails->nid)));  
            $proTitle = l($nodeDetails->title, 'program/projects',array('query' => array('pid' => $nodeDetails->nid))); 
            $proEdit = 'program/projects';
          }
      $action = '<div class="project-action">
                     <div class="btn-group"><div class="dropdown">
                     <button id="dLabel" class="btn btn-success" type="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"> Actions</button>
           <ul class="dropdown-menu" role="menu" aria-labelledby="dLabel">
                     <li>'.l('Edit',$proEdit, array('query' => array('pid' => $nodeDetails->nid))).'</li>
           <li>'.l('Submit for Approval','#').'</li>
                     <li>'.l('Change Status','#').'</li>
                     </ul></div></div></div>';                 
          $rows[] = array(
            'data' => array(
              array('data' => $projNumber,'class' => array('text-left')),
              array('data' => ucwords($proTitle),'class' => array('text-left')),
              array('data' => ucwords($projectStatus),'class' => array('text-left')),
              array('data' => ucwords($projectManager),'class' => array('text-left')),
              array('data' => '$'.number_format($totalBudget['totalOriginalBudget']),'class' => array('text-right')),
              array('data' => '$'.number_format($totalBudget['projectFinalCost']),'class' => array('text-right')),
              array('data' => $costStatus,'class' => array('text-center')),
              array('data' => $getScheduleStatus,'class' => array('text-center')),
              array('data' => $getSafetytatus,'class' => array('text-center')),
              array('data' => $action,'class' => array('text-center')),
            ),
          //'class' => array('custom-odd'),
          );
        }
        $output = theme('table', array('header' => $header, 'rows' => $rows, 'empty' => 'No Project yet','attributes'=>array('class'=>array('table','m6connect-custom-program-table','m6connect-custom-myproject-slide-table','table-hover','table-bordered','text-center'))));
    $collapsible_class = $i == 1 ? '' : 'collapsed';
    $elements['program_projects_' . $sort_key] = array(
          '#type' => 'fieldset',
          '#title' => $sort_title,
          '#collapsible' => TRUE,
          '#collapsed' => $i == 1 ? TRUE : FALSE,
          '#attributes' => array('class' => array('collapsible', $collapsible_class, 'bid-package-fieldset', 'fieldsetbigtitle')),
          '#attached' => array('js' => array('misc/form.js', 'misc/collapse.js')),
          '#prefix' => '<div class="clearfix margin-bottom-10">',
          '#suffix' => '</div>',
        );
        $elements['program_projects_' . $sort_key]['project_listing'] = array(
          '#type' => 'markup',
          '#markup' => $output,
        );
        $i++;
      }
    if (!empty($remaining_data)) {
        $output = '';
        $rows = array();
    foreach ($remaining_data as $projectId => $projectTitle) {
          $nodeDetails = node_load($projectId); 
          $projectNo = isset($nodeDetails->field_project_mgmt_number['und'])?$nodeDetails->field_project_mgmt_number['und'][0]['value']:' - None -';
          $projectStatus = isset($nodeDetails->field_project_mgmt_status['und'])?$nodeDetails->field_project_mgmt_status['und'][0]['value']:' - None -';
          $projectManager = isset($nodeDetails->field_project_mgmt_manager['und'])?_get_user_realname($nodeDetails->field_project_mgmt_manager['und'][0]['value']):' - None -';
          $totalBudget = get_total_approved_budget_by_project($nodeDetails->nid);
          $getETCStatus = get_status_mark_of_project('project_etc', $nodeDetails->nid);
          $getScheduleStatus = get_status_mark_of_project('project_schedule', $nodeDetails->nid);
          $getSafetytatus = get_status_mark_of_project('project_safety', $nodeDetails->nid);  
          $fivePer = (($totalBudget['totalOriginalBudget']*5)/100);
          $costStatus ='';
          if ($totalBudget['projectFinalCost'] > 0) {  
            if ($totalBudget['totalOriginalBudget'] <= $totalBudget['projectFinalCost']) {
              $costStatus = '<div class="status-mark form-group text-danger"><i class="fa fa-check-circle"></i></div>';      
            }
            else if ($totalBudget['projectFinalCost'] < ($totalBudget['totalOriginalBudget']-$fivePer)) {
              $costStatus = '<div class="status-mark form-group text-success"><i class="fa fa-check-circle"></i></div>';
            }
            else {
              $costStatus = '<div class="status-mark form-group text-warning"><i class="fa fa-check-circle"></i></div>';
            }
          } 
          if ($top_arg == 'cm') {
            $projNumber = l($projectNo, 'program/cm/projects',array('query' => array('pid' => $nodeDetails->nid))); 
            $proTitle = l($nodeDetails->title, 'program/cm/projects',array('query' => array('pid' => $nodeDetails->nid)));
            $proEdit = 'program/cm/projects';
          }
          elseif ($top_arg == 'cr') {
            $projNumber = l($projectNo, 'program/cr/projects',array('query' => array('pid' => $nodeDetails->nid))); 
            $proTitle = l($nodeDetails->title, 'program/cr/projects',array('query' => array('pid' => $nodeDetails->nid)));
            $proEdit = 'program/cr/projects';
          }
          else {
            $projNumber = l($projectNo, 'program/projects',array('query' => array('pid' => $nodeDetails->nid)));  
            $proTitle = l($nodeDetails->title, 'program/projects',array('query' => array('pid' => $nodeDetails->nid))); 
            $proEdit = 'program/projects';
          }

          $action = '<div class="project-action">
                   <div class="btn-group"><div class="dropdown">
                   <button id="dLabel" class="btn btn-success" type="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"> Actions</button>
                     <ul class="dropdown-menu" role="menu" aria-labelledby="dLabel">
                     <li>'.l('Edit',$proEdit, array('query' => array('pid' => $nodeDetails->nid))).'</li>
                     
                     <li>'.l('Submit for Approval','#').'</li>
                     <li>'.l('Change Status','#').'</li>
                     </ul></div></div></div>';                 
          $rows[] = array(
            'data' => array(
              array('data' => $projNumber,'class' => array('text-left')),
              array('data' => ucwords($proTitle),'class' => array('text-left')),
              array('data' => ucwords($projectStatus),'class' => array('text-left')),
              array('data' => ucwords($projectManager),'class' => array('text-left')),          
              array('data' => '$'.number_format($totalBudget['totalOriginalBudget']),'class' => array('text-right')),
              array('data' => '$'.number_format($totalBudget['projectFinalCost']),'class' => array('text-right')),
              array('data' => $costStatus,'class' => array('text-center')),
              array('data' => $getScheduleStatus,'class' => array('text-center')),
              array('data' => $getSafetytatus,'class' => array('text-center')),
              array('data' => $action,'class' => array('text-center')),
            ),
          //'class' => array('custom-odd'),
          );
        }
        $output = theme('table', array('header' => $header, 'rows' => $rows, 'empty' => 'No Project yet','attributes'=>array('class'=>array('table','m6connect-custom-program-table','m6connect-custom-myproject-slide-table','table-hover','table-bordered','text-center'))));

        $elements['pogram_projects_unsorted'] = array(
          '#type' => 'fieldset',
          '#title' => t('Unsorted'),
          '#collapsible' => TRUE,
          '#collapsed' => FALSE,
          '#attributes' => array('class' => array('collapsible', 'collapsed','bid-package-fieldset', 'fieldsetbigtitle')),
          '#attached' => array('js' => array('misc/form.js', 'misc/collapse.js')),
          '#prefix' => '<div class="clearfix margin-bottom-10">',
          '#suffix' => '</div>',
        );
        $elements['pogram_projects_unsorted']['project_listing'] = array(
          '#type' => 'markup',
          '#markup' => $output,
        );
      }
      return render($elements);
    }
    else {
      return get_my_project_listing_table_data(FALSE, $top_arg);
    }
  }
}

/**
 * Helper function to get Sorted Nodes.
 */
function _get_sorted_nodes_by_type_arg_cmp($top_arg) {
  global $company;
  $query = db_select('node','n');
  $query->orderBy('n.nid', 'DESC');

  // Filter by company.
  $query->join('og_membership','om','om.etid=n.nid AND om.entity_type=:entityType', array(':entityType'=>'node'));
  $query->condition('om.gid', $company->nid, '=');

  // Filter by Cost Manager Type.
  $query->join('field_data_field_cm_type', 'fcm', 'fcm.entity_id=n.nid');
  $query->condition('fcm.field_cm_type_value', $top_arg);

  $query->fields('n', array('nid'));
  $result = $query->execute()->fetchAll();

  return $result;
}

/**
 * Helper function to get Project List based on sorting criteria.
 */
function _get_project_by_sort_node($sort_nid = FALSE, $sort_type = FALSE, $top_arg = '') {
  if (!$sort_nid || !$sort_type || empty($top_arg)) {
    // If none of the three are available, then retutn blank.
    return array();
  }
  $query = db_select('node','n');
  $query->orderBy('n.nid', 'DESC');

  if ($top_arg == 'cm') {
    $query->join('field_data_field_product_status‎','ps','ps.entity_id=n.nid');
    $query->condition('ps.field_product_status_value', 'cmtrue', '=');
  }
  elseif ($top_arg == 'cr') {
    $query->join('field_data_field_product_status‎','ps','ps.entity_id=n.nid');
    $query->condition('ps.field_product_status_value', 'crtrue', '=');
  }
  else {
    $query->join('field_data_field_product_status‎','ps','ps.entity_id=n.nid');
    $query->condition('ps.field_product_status_value', 'cmfalse', '=');
  }

  if ($sort_type == 'site') {
    $query->join('field_data_field_project_location_site', 'pl', 'pl.entity_id=n.nid');
    $query->condition('pl.field_project_location_site_target_id', $sort_nid);
  }
  elseif ($sort_type == 'region') {
    $query->join('field_data_field_project_location_region', 'pl', 'pl.entity_id=n.nid');
    $query->condition('pl.field_project_location_region_target_id', $sort_nid);
  }
  elseif ($sort_type == 'facility_type') {
    $query->join('field_data_field_project_location_facility', 'pl', 'pl.entity_id=n.nid');
    $query->condition('pl.field_project_location_facility_target_id', $sort_nid);
  }

  $query->fields('n', array('nid', 'title'));
  $projectByCompany = $query->execute()->fetchAllKeyed(0,1);
  return !empty($projectByCompany) ? $projectByCompany : array();
}

function get_project_summary_table_data($proId){
  if(empty($proId))  {
    $proId = check_plain($_GET['pid']);
  }
  else {
    $proId = $proId;
  }
  global $company;
  setlocale(LC_MONETARY, 'en_US');  
  $rows = array();
  $header = array(
  array('data'=>'Original Budget','class'=>array('text-center')),
  array('data'=>'Budget Adjustment','class'=>array('text-center')),
  array('data'=>'Current Budget','class'=>array('text-center')),
  array('data'=>'Total Commitments','class'=>array('text-center')),
  array('data'=>'Total Spend','class'=>array('text-center')), 
  array('data'=>'Total Allocated','class'=>array('text-center')),
  array('data'=>'ETC','class'=>array('text-center')),
  array('data'=>'Projected Final Cost','class'=>array('text-center')),
  array('data'=>'Variance','class'=>array('text-center')),
  );  
  // Get cost code by and budget amount by project    
  $query= db_select('node','n'); 
  $query->join('og_membership','om','om.etid=n.nid AND om.entity_type=:entityType', array(':entityType'=>'node'));
  $query->join('field_data_field_estimate_reference','er','er.entity_id = n.nid');
  $query->join('node','enode','enode.nid=er.field_estimate_reference_nid');
  $query->join('field_data_field_project_estimate_status','es','es.entity_id = enode.nid');  
  $query->join('field_data_field_project_estimate_amount','ea','ea.entity_id = enode.nid');    
  $query->join('field_data_field_capital_contingency','ecc','ecc.entity_id = enode.nid');      
  $query->join('field_data_field_project_reference','pr','enode.nid=pr.entity_id');  
  $query->leftjoin('field_data_field_est_line_item_amt','la','n.nid=la.entity_id');
  $query->leftjoin('field_data_field_conigency_percentage','cp','n.nid=cp.entity_id');  
  $query->leftjoin('field_data_field_est_cost_code','cc','cc.entity_id=n.nid');
  $query->fields('cc',array('entity_id'));
  $query->fields('la',array('field_est_line_item_amt_value'));
  $query->fields('cp',array('field_conigency_percentage_value'));
  $query->fields('cc',array('field_est_cost_code_value'));
  $query->fields('ea',array('field_project_estimate_amount_value'));  
  $query->fields('ecc',array('field_capital_contingency_value'));  
  $query->fields('er',array('field_estimate_reference_nid'));  
  $query->condition('es.field_project_estimate_status_value', 'approved', '=');
  $query->condition('om.gid', $company->nid, '=');
  $query->orderBy('cc.field_est_cost_code_value', 'ASC');
  $query->condition('pr.field_project_reference_nid', $proId, '=');        
  $costCode = $query->execute()->fetchAll();
  
  $query2= db_select('node','n'); 
  $query2->join('og_membership','om','om.etid=n.nid AND om.entity_type=:entityType', array(':entityType'=>'node'));
  $query2->join('field_data_field_estimate_reference','er','er.entity_id = n.nid');
  $query2->join('node','enode','enode.nid=er.field_estimate_reference_nid');
  $query2->join('field_data_field_project_estimate_status','es','es.entity_id = enode.nid');      
  $query2->join('field_data_field_project_reference','pr','enode.nid=pr.entity_id');  
  $query2->leftjoin('field_data_field_est_line_item_amt','la','n.nid=la.entity_id');  
  $query2->leftjoin('field_data_field_est_cost_code','cc','cc.entity_id=n.nid');
  $query2->addExpression('SUM(la.field_est_line_item_amt_value)');
  $query2->condition('es.field_project_estimate_status_value', 'approved', '=');
  $query2->orderBy('cc.field_est_cost_code_value', 'ASC');
  $query2->condition('pr.field_project_reference_nid', $proId, '=');        
  $query2->condition('om.gid', $company->nid, '=');
  $amtLineTotal = $query2->execute()->fetchField();     
  $i = 0;
  foreach($costCode as $ccId => $ccVal) { 
    // Get cost code  
  $costCode = get_description_by_cost_code_mod($ccVal->field_est_cost_code_value);
    // Get Original budget
  $capitalContigency = $ccVal->field_capital_contingency_value; 
  if(!isset($ccArr[$ccVal->field_est_cost_code_value])){
    $ccArr[$ccVal->field_est_cost_code_value]= array(
      'cost_code' => $ccVal->field_est_cost_code_value.'|'.$costCodeDes,
      'originalBudget' => 0,
    'currentBudget' => 0,
    'Commitment' => 0,
    'spent' => 0,
    'Allocated' => 0,
    'est' => 0,
    'PFC' => 0,
    'Variance' => 0,
    );
  }
  if($ccVal->field_est_line_item_amt_value != '') {
    $originalBudget = $ccVal->field_est_line_item_amt_value;
  }
  else if($ccVal->field_conigency_percentage_value != '') {
    $percent = ($amtLineTotal * $ccVal->field_conigency_percentage_value)/100;      
    $originalBudget = $percent;
  }
  $totalOriginalBudget += $originalBudget;
  $currentBudget = $originalBudget;
  $totalcurrentBudget += $currentBudget;
    // Get invoice total
  $getInvoiceTotal = get_invoice_total_by_cost_code($ccVal->field_est_cost_code_value,$proId);
  $totalInvoiceTotal += $getInvoiceTotal;
  // Get commitment total
  $getCommitmentTotal = get_commitment_total_by_cost_code($ccVal->field_est_cost_code_value,$proId);
  $totalCommitmentTotal += $getCommitmentTotal;
  // Get total allocated 
  $getTotalAllocated = get_total_allocated_by_cost_code($ccVal->field_est_cost_code_value,$proId,$getCommitmentTotal);
  $totalAllocated += $getTotalAllocated;
  // Get etc total
  $getETCTotal = get_etc_total_by_cost_code($ccVal->field_est_cost_code_value,$proId);
  $etcTotal += $getETCTotal;
  // Get Project final cost
  $projectFinalCost = $getTotalAllocated + $getETCTotal;
  $totalFinalCost += $projectFinalCost;
  // Variance
  $varience = $originalBudget - $projectFinalCost;
  $totalVariance += $varience;  
  
  $ccArr[$ccVal->field_est_cost_code_value]['originalBudget'] += $originalBudget; 
  $ccArr[$ccVal->field_est_cost_code_value]['currentBudget'] += $currentBudget;
  $ccArr[$ccVal->field_est_cost_code_value]['Commitment'] = $getCommitmentTotal;
  $ccArr[$ccVal->field_est_cost_code_value]['spent'] = $getInvoiceTotal;
  $ccArr[$ccVal->field_est_cost_code_value]['Allocated'] = $getTotalAllocated;
  $ccArr[$ccVal->field_est_cost_code_value]['est'] = $getETCTotal;
  $ccArr[$ccVal->field_est_cost_code_value]['PFC'] = $projectFinalCost;
  $ccArr[$ccVal->field_est_cost_code_value]['Variance'] = $varience;  
  } 
  $ccArrTotal= array(
      'originalBudget' => 0,
    'currentBudget' => 0,
    'Commitment' => 0,
    'spent' => 0,
    'Allocated' => 0,
    'est' => 0,
    'PFC' => 0,
    'Variance' => 0,
    );
  foreach($ccArr as $ccKey => $ccVals) {
  $ccArrTotal= array(
      'originalBudget' => $ccArrTotal['originalBudget']+$ccVals['originalBudget'],
    'currentBudget' => $ccArrTotal['currentBudget']+$ccVals['currentBudget'],
    'Commitment' => $ccArrTotal['Commitment']+$ccVals['Commitment'],
    'spent' => $ccArrTotal['spent']+$ccVals['spent'],
    'Allocated' => $ccArrTotal['Allocated']+$ccVals['Allocated'],
    'est' => $ccArrTotal['est']+$ccVals['est'],
    'PFC' => $ccArrTotal['PFC']+$ccVals['PFC'],
    'Variance' => $ccArrTotal['Variance']+$ccVals['Variance'],
    );
  }  
  $rows[] = array(
    'data' => array('$'.number_format($ccArrTotal['originalBudget']),'$0','$'.number_format($ccArrTotal['currentBudget']),'$'.number_format($ccArrTotal['Commitment']),'$'.number_format($ccArrTotal['spent']),'$'.number_format($ccArrTotal['Allocated']),'$'.number_format($ccArrTotal['est']),'$'.number_format($ccArrTotal['PFC']),'$'.number_format($ccArrTotal['Variance'])), 

  'class' => array('custom-odd', 'text-right'),       
  );
  return theme('table', array('header'=>$header,'rows'=>$rows,'empty'=>'No records yet','attributes'=>array('class'=>array('table','m6connect-custom-table','m6connect-custom-program-table','m6connect-program-project-table','table-hover','table-bordered','text-center'))));
}
// End My Project Slide Section
// ============================

// Start Project Slide Section
// ===========================

function program_project_content(){
  $elements = array(); 
  $path = check_plain($_GET['q']);
  $arguments = explode('/', $path);

  $elements['project-form']= array(
    '#markup' => drupal_render(drupal_get_form('program_modify_project_form', $arguments[1])),
  '#prefix' => '<div class="clearfix margin-bottom-10">',
  '#suffix' => '</div>',
  );
  $elements['prgram-project-listing'] = array(
    '#markup' => get_project_summary_table_data(),
  '#prefix' => '<div class="clearfix margin-bottom-10"><div class="project-summary-listing" id="prgram-project-summary-listing">',
  '#suffix' => '</div></div></div>',
   );
  $elements['comment-form']= array(
    '#markup' => drupal_render(drupal_get_form('project_manager_comment_form')),
  '#prefix' => '<div class="project-details-bottom3"><div class="clearfix margin-bottom-10">',
  '#suffix' => '</div>',
  ); 
  $elements['prgram-project-comment-listing'] = array(
    '#markup' => get_comment_message_table_data(),
  '#prefix' => '<div class="clearfix margin-bottom-10" id="project_manager_message_container"><div class="prgram-estimate-listing">',
  '#suffix' => '</div></div></div>',
   );
  return $elements;
}

// ====================================================
// Generating project form based on project select list
function program_modify_project_form($form, &$form_state, $top_arg) {
  global $user;   
  global $company;  
  drupal_add_js(drupal_get_path('module', 'm6connect_program') . '/js/m6connect_program.js');
  //drupal_add_js(drupal_get_path('module', 'm6connect_program') . '/js/Prototype_Price_Format_0.1.js');
  // === Getting project location details
  $getLocation = get_project_loaction();
  $country = _addressfield_country_options_list();
  $projectLocation = array();
  foreach($getLocation as $locationKey => $locationVal) {
    $projectLocation[$locationVal->nid] = $locationVal->field_org_address_thoroughfare.', '.$locationVal->field_org_address_administrative_area;
  }
  // === Getting project manager list
  //$projectManager = _get_user_mappping_by_group_company_nid($company->nid);      
  $projectManager = _get_company_users_list_by_og_roles($company->nid, 'project manager');
  // Project number calculation
  $currentYear = date('Y');
  $myCounter = variable_get('ProjectNumber');
  $makeSr = str_pad($myCounter, 6, "0", STR_PAD_LEFT);
  $projectNumber = 'CM-'.$makeSr.'-'.$currentYear;    

  $form_state['top_arg'] = $top_arg;

  // Get project list by company 
  if ($top_arg == 'cm') {
    $getProjectByCompany = _project_list_by_company($company->nid, 'project_management','cmtrue');
    // Get Location data
    $getRegionByCompany = _project_location_by_company($company->nid, 'fm_location_region','cm');
    // $getSiteByCompany = _project_location_by_company($company->nid, 'fm_location_site','cm');
    // $getFacitityTypeByCompany = _project_location_by_company($company->nid, 'fm_facility_type','cm');
    // $getFacitityByCompany = _project_location_by_company($company->nid, 'fm_facility','cm');
    // $getZoneByCompany = _project_location_by_company($company->nid, 'fm_location_location','cm');
  }
  elseif ($top_arg == 'cr') {
    $getProjectByCompany = _project_list_by_company($company->nid, 'project_management','crtrue');
    // Get Location data
    $getRegionByCompany = _project_location_by_company($company->nid, 'fm_location_region','cr');
    // $getSiteByCompany = _project_location_by_company($company->nid, 'fm_location_site','cr');
    // $getFacitityTypeByCompany = _project_location_by_company($company->nid, 'fm_facility_type','cr');
    // $getFacitityByCompany = _project_location_by_company($company->nid, 'fm_facility','cr');
    // $getZoneByCompany = _project_location_by_company($company->nid, 'fm_location_location','cr');
  }
  else {
    $getProjectByCompany = _project_list_by_company($company->nid, 'project_management','cmfalse');
    // Get Location data
    $getRegionByCompany = _project_location_by_company($company->nid, 'fm_location_region','cpm');
    // $getSiteByCompany = _project_location_by_company($company->nid, 'fm_location_site','cpm');
    // $getFacitityTypeByCompany = _project_location_by_company($company->nid, 'fm_facility_type','cpm');
    // $getFacitityByCompany = _project_location_by_company($company->nid, 'fm_facility','cpm');
    // $getZoneByCompany = _project_location_by_company($company->nid, 'fm_location_location','cpm');
  }
  if (isset($form_state['site_options'])) {
    unset($form_state['site_options']);
  }
  if (isset($form_state['facility_options'])) {
    unset($form_state['facility_options']);
  }
  if (!empty($form_state['values']['project-location-region'])) {
    // If we have region, then only we get site.
    $site_options = _get_site_location_by_region($form_state['values']['project-location-region'], 'site');
    if (!empty($site_options)) {
      $form_state['site_options'] = $site_options;
    }
  }
  if (!empty($form_state['values']['project-location-site'])) {
    // If we have site, then only we get facility.
    $facility_options = _get_site_location_by_region($form_state['values']['project-location-site'], 'facility');
    if (!empty($facility_options)) {
      $form_state['facility_options'] = $facility_options;
    }
  }

  // Get project list by company 
  //$getProjectByCompany = _project_list_by_company($company->nid, 'project_management');
  $projectListByCom = array('0' => '- None -');
  foreach($getProjectByCompany as $key => $val) {
    $projectListByCom[$key] = $val;
  }  
  $form['#attached']['js'][] = array(
    'data'=>drupal_get_path('module', 'm6connect_routing') . '/js/routing_type_slip_form.js',
  'type'=>'file'
  );
  $form['#attributes']['class'] = array('program_modify_project_form');

  if (empty($form_state['projectLocation'])) { $form_state['projectLocation'] = $projectLocation; }
  if (empty($form_state['getRegionByCompany'])) { $form_state['getRegionByCompany'] = $getRegionByCompany; }
  if (empty($form_state['getSiteByCompany'])) { $form_state['getSiteByCompany'] = $getSiteByCompany; }
  if (empty($form_state['getFacitityTypeByCompany'])) { $form_state['getFacitityTypeByCompany'] = $getFacitityTypeByCompany; }
  if (empty($form_state['getFacitityByCompany'])) { $form_state['getFacitityByCompany'] = $getFacitityByCompany; }
  if (empty($form_state['getZoneByCompany'])) { $form_state['getZoneByCompany'] = $getZoneByCompany; }
  if (empty($form_state['projectManager'])) { $form_state['projectManager'] = $projectManager; }
  if (empty($form_state['projectNumber'])) { $form_state['projectNumber'] = $projectNumber; }

  /*$form['prgram-project-page-title'] = array(
    '#markup' => '<h1>Project</h1>',
  '#prefix' => '<div class="clearfix">',
  '#suffix' => '</div>',
  );*/  
  $form['select-project'] = array(
    '#type'=>'select',
  '#title'=> 'Select Project:',
  '#options' => $projectListByCom,
  //'#empty_option' => ' -None- ',
  //'#default_value' => isset($_SESSION['ACTIVEPROJECT'])?$_SESSION['ACTIVEPROJECT']:'',
  '#attributes' => array('class'=> array('form-control project_programe_main_pro')),
  '#ajax' => array(
    'callback'=> 'change_program_project_callback',
    'wrapper' => 'project_program_main_container',
    'effect' => 'fade',
  ),
  '#prefix' => '<div class="clearfix"><div class="pull-left form-inline">',
  '#suffix' => '</div></div>',
  );  
  $form['prgram-project-menu-items'] = array(
    '#markup' => program_project_menu_links_content($top_arg),
  '#prefix' => '<div class="clearfix">',
  '#suffix' => '</div>',
  );
  $form_state['storage_project'] = array();
  if(isset($form_state['values'],$form_state['input'],$form_state['triggering_element'],$form_state['triggering_element']['#type'],$form_state['triggering_element']['#name']) && $form_state['triggering_element']['#type']=='select' && $form_state['triggering_element']['#name']=='select-project'){
  $triggeringElement = $form_state['triggering_element'];
  if($triggeringElement['#value'] != 0 && !empty($triggeringElement['#value'])) {
    $projectNode = node_load($triggeringElement['#value']);

    if (!empty($projectNode->field_project_location_region['und'][0]['target_id'])) {
      $form_state['storage_project']['project-location-region'] = $projectNode->field_project_location_region['und'][0]['target_id'];
    }
    if (!empty($projectNode->field_project_location_site['und'][0]['target_id'])) {
      $form_state['storage_project']['project-location-site'] = $projectNode->field_project_location_site['und'][0]['target_id'];
    }
    if (!empty($projectNode->field_project_location_facility['und'][0]['target_id'])) {
      $form_state['storage_project']['project-location-facility'] = $projectNode->field_project_location_facility['und'][0]['target_id'];
    }

    $form_state['storage_project'] = array(
      'project-number' => $projectNode->field_project_mgmt_number['und'][0]['value'],
      'project-title' => $projectNode->title,
      'project-location' => $projectNode->field_project_mgmt_location['und'][0]['value'],
      'project-floor' => $projectNode->field_project_mgmt_floor['und'][0]['value'],
      'project-room' => $projectNode->field_project_mgmt_room['und'][0]['value'],
      'project-manager' => $projectNode->field_project_mgmt_manager['und'][0]['value'],
      'project-status' => $projectNode->field_project_mgmt_status['und'][0]['value'],
      'project-cost-center' => $projectNode->field_project_mgmt_cost_center['und'][0]['value'],
      'project-description' => $projectNode->body['und'][0]['value'],
    );  
    }
  }

  $form['hidden-site-field'] = array(
    '#type' => 'hidden',
    '#value' => '',
  );
  $form['hidden-facility-field'] = array(
    '#type' => 'hidden',
    '#value' => '',
  );

  $form_cancel = '<input type="button" value="Cancel" class="form-submit custom-reset-button-project">';

  $form['main-container']= array(
    '#type' => 'container',
    '#attributes' => array('class'=>array('row')),
    '#prefix' => '<div class="clearfix"><div id="project_program_main_container" class="project-detail">',  
    '#process' => array('project_program_main_container_process'),
  );    
  $form['submit'] = array(
    '#type' => 'submit',
  '#value' => 'Save',
  '#submit'=> array('program_project_submit'),
  '#prefix' => '<div class="clearfix custom-submit-project-button">', 
  '#suffix' => $form_cancel . '</div></div></div>', 
  );  
  return $form;
}

/**
 * Helper function to get sites by regions.
 */
function _get_site_location_by_region($region_nid, $type) {
  $output = array();

  $query = db_select('node', 'n');
  $query->fields('n', array('nid', 'title'));
  $query->orderBy('n.nid', 'DESC');

  if ($type == 'site') {
    $query->join('field_data_field_location_region','flr','flr.entity_id=n.nid');
    $query->condition('flr.field_location_region_target_id', $region_nid);
  }

  if ($type == 'facility') {
    $query->join('field_data_field_facility_location_site','flr','flr.entity_id=n.nid');
    $query->condition('flr.field_facility_location_site_target_id', $region_nid);
  }

  $result = $query->execute()->fetchAll();
  if (!empty($result)) {
    foreach($result as $delta){
      $output[$delta->nid] = $delta->title;
    }
  }
  return $output;
}

/**
 * Ajax callbacks for project form location.
 */
function replace_site_options_project($form, &$form_state) {
  return $form['main-container']['left-container']['project-location-site'];
}
function replace_facility_options_project($form, &$form_state) {
  return $form['main-container']['left-container']['project-location-facility'];
}

function project_program_main_container_process($element, &$form_state) {
  $projectLocation  = $form_state['projectLocation'];  
  $projectManager = $form_state['projectManager'];  
  $projectNumber = $form_state['projectNumber'];
  $defaultValues = $form_state['storage_project'];   
  
  // Project location setting tab data
  $getRegionByCompany = $form_state['getRegionByCompany'];
  $getSiteByCompany = $form_state['getSiteByCompany'];
  $getFacitityTypeByCompany = $form_state['getFacitityTypeByCompany'];
  $getFacitityByCompany = $form_state['getFacitityByCompany'];
  $getZoneByCompany = $form_state['getZoneByCompany'];

  $element['left-container']= array(
    '#type' => 'container',
  '#attributes' => array('class'=>array('col-md-6','col-sm-6','col-xs-12','project-details-left'),),
  );  
  $element['right-container']= array(
    '#type' => 'container',
    '#attributes' => array('class'=>array('col-md-6','col-sm-6','col-xs-12','project-details-right')),
  );    
  $element['left-container']['project-number'] = array(
    '#type' => 'textfield',
  '#title' => 'Project Number',
  '#attributes' => array('class'=> array('form-control project-number')),
  '#prefix' => '<div class="project-details-border"><div class="clearfix form-item">',
  '#suffix' => '</div>',
  '#default_value' => isset($defaultValues['project-number'])?$defaultValues['project-number']:$projectNumber,
  '#field_suffix' => '<div class="pull-right project-avail-status"><span class="text-danger"></span><span class="text-success"></span></div>'
  );
  $element['left-container']['project-title'] = array(
    '#type'=>'textfield',
  '#title'=> 'Project Title',
  '#attributes' => array('class'=> array('form-control project-title')),
  '#default_value' => isset($defaultValues['project-title'])?$defaultValues['project-title']:'',
  '#prefix' => '<div class="clearfix form-item">',  
  '#suffix' => '</div>', 
  '#field_suffix' => '<div class="pull-right project-avail-status-title"><span class="text-danger"></span><span class="text-success"></span></div>'
  );

  $element['left-container']['project-location-region'] = array(
    '#type' => 'select',
    '#title' => 'Choose Region',
    '#options' => $getRegionByCompany,
    '#empty_option' => '- Select Region -',
    '#attributes' => array('class'=> array('form-control project-location-region')),
    '#default_value' => isset($defaultValues['project-location-region'])?$defaultValues['project-location-region']:'',
    '#prefix' => '<div class="clearfix form-item">',
    '#suffix' => '</div>',
    '#ajax' => array(
      'wrapper' => 'replace-site-options-here',
      'callback' => 'replace_site_options_project',
    ),
  );

  $element['left-container']['project-location-site'] = array(
    '#type' => 'select',
    '#title' => 'Choose Site',
    '#options' => array('-- None --'),
    '#empty_option' => '- Select Site -',
    '#attributes' => array('class'=> array('form-control project-location-site')),
    '#default_value' => isset($defaultValues['project-location-site'])?$defaultValues['project-location-site']:'',
    '#prefix' => '<div class="clearfix form-item" id = "replace-site-options-here">',  
    '#suffix' => '</div>',
    '#disabled' => TRUE,
    '#ajax' => array(
      'wrapper' => 'replace-facility-options-here',
      'callback' => 'replace_facility_options_project',
    ),
  );
  if (!empty($form_state['site_options'])) {
    $element['left-container']['project-location-site']['#options'] = $form_state['site_options'];
    $element['left-container']['project-location-site']['#disabled'] = FALSE;
  }
  $element['left-container']['project-location-facility'] = array(
    '#type' => 'select',
    '#title' => 'Choose Facility',
    '#options' => array('-- None --'),
    '#empty_option' => '- Select Facility Type -',
    '#attributes' => array('class'=> array('form-control project-location-facility')),
    '#default_value' => isset($defaultValues['project-location-facility'])?$defaultValues['project-location-facility']:'',
    '#prefix' => '<div class="clearfix form-item" id = "replace-facility-options-here">',  
    '#suffix' => '</div>',
    '#disabled' => TRUE,
  );
  if (!empty($form_state['facility_options'])) {
    $element['left-container']['project-location-facility']['#options'] = $form_state['facility_options'];
    $element['left-container']['project-location-facility']['#disabled'] = FALSE;
  }

 //  $element['left-container']['project-location'] = array(
 //    '#type' => 'select',
  // '#title' => 'Location',
  // '#options' => $projectLocation,
  // '#empty_option' => '- Select Location -',
  // '#attributes' => array('class'=> array('form-control project-location')),
  // '#default_value' => isset($defaultValues['project-location'])?$defaultValues['project-location']:'',
  // '#prefix' => '<div class="clearfix form-item">', 
  // '#suffix' => '</div>', 
 //  );
  $element['left-container']['project-floor'] = array(
    '#type'=>'textfield',
  '#title'=> 'Floor',
  '#attributes' => array('class'=> array('form-control project-floor')),
  '#prefix' => '<div class="clearfix form-item">',  
  '#suffix' => '</div>', 
  );
  $element['left-container']['project-room'] = array(
    '#type'=>'textfield',
  '#title'=> 'Room',
  '#attributes' => array('class'=> array('form-control project-room')),
  '#default_value' => isset($defaultValues['project-room'])?$defaultValues['project-room']:'',
  '#prefix' => '<div class="clearfix form-item">',  
  '#suffix' => '</div>', 
  );
  $element['left-container']['project-manager'] = array(
    '#type' => 'select',
  '#title' => 'Project Manager',
  '#options' => $projectManager,
  '#empty_option' => '- Select Project Manager -',
  '#attributes' => array('class'=> array('form-control project-manager')),
  '#default_value' => isset($defaultValues['project-manager'])?$defaultValues['project-manager']:'',
  '#prefix' => '<div class="clearfix form-item">',  
  '#suffix' => '</div>', 
  );       
  $element['left-container']['project-cost-center'] = array(
    '#type'=>'textfield',
  '#title'=> 'Cost Center/Dept',
  '#attributes' => array('class'=> array('form-control project-cost-center')),
  '#default_value' => isset($defaultValues['project-cost-center'])?$defaultValues['project-cost-center']:'',
  '#prefix' => '<div class="clearfix form-item">',  
  '#suffix' => '</div></div>', 
  ); 
  $element['right-container']['project-status'] = array(
    '#type'=>'select',
  '#title'=> 'Project Status',
  '#options' => array(
          'active'=>'Active',
          'on_hold'=>'On Hold', 
          'closed'=>'Closed',
          'Active In-House' => 'Active In-House',
          'Active In-House Design' => 'Active In-House Design', 
          'Active In-House CM' => 'Active In-House CM',
          'Active External Design' => 'Active External Design',
          'Active External CM' => 'Active External CM',
          'Bids Due' => 'Bids Due'
          ),
  '#empty_option' => '- Select -',
  '#attributes' => array('class'=> array('form-control project-status')),
  '#default_value' => isset($defaultValues['project-status'])?$defaultValues['project-status']:'',
  '#prefix' => '<div class="project-details-border"><div class="clearfix form-item">',  
  '#suffix' => '</div>', 
  );
  $element['right-container']['funding-status'] = array(
    '#type'=>'select',
  '#title'=> 'Funding Status',
  '#options' => array(
          'planned-'.date('Y')=>'Planned '.date('Y'),
          'Planned-'.date('Y', strtotime('+1 years'))=>'Planned '.date('Y', strtotime('+1 years')),
          'Planned-'.date('Y', strtotime('+2 years'))=>'Planned '.date('Y', strtotime('+2 years')),
          'Planned-'.date('Y', strtotime('+3 years'))=>'Planned '.date('Y', strtotime('+3 years')),
          'Approval Requested' => 'Approval Requested',
          'Approved' => 'Approved',
          'Unplanned-'.date('Y') => 'Unplanned '.date('Y'),
          ),
  '#empty_option' => '- Select -',
  '#attributes' => array('class'=> array('form-control funding-status')),
  '#default_value' => isset($defaultValues['funding-status'])?$defaultValues['funding-status']:'',
  '#prefix' => '<div class="clearfix form-item">',  
  '#suffix' => '</div>', 
  );  
  $element['right-container']['design-status'] = array(
    '#type'=>'select',
  '#title'=> 'Design Status',
  '#options' => array(
          'Programming' => 'Programming',
          'Schematic Design' => 'Schematic Design',
          'Design Development' => 'Design Development',
          'Construction Documents' => 'Construction Documents',
          'Construction Administration' => 'Construction Administration',

          ),
  '#empty_option' => '- Select -',
  '#attributes' => array('class'=> array('form-control design-status')),
  '#default_value' => isset($defaultValues['design-status'])?$defaultValues['design-status']:'',
  '#prefix' => '<div class="clearfix form-item">',  
  '#suffix' => '</div></div>', 
  );  
  $element['right-container']['project-description'] = array(
    '#title' => 'Project Description',
  '#type' => 'textarea',
  '#attributes'=> array('class'=> array('form-control project-description')),
  '#default_value' => isset($defaultValues['project-description'])?strip_tags($defaultValues['project-description']):'',
  );  
  return $element;
}

function change_program_project_callback($form,&$form_state) {
  global $company;  
  $commands = array();
  $triggeringElement = $form_state['triggering_element'];
  if(!empty($triggeringElement['#value']) && $triggeringElement['#value'] != 0){   
  $projectNode = node_load($triggeringElement['#value']); 
  // Setting the session for active project 
  //if(isset($_SESSION['ACTIVEPROJECT'])) { unset($_SESSION['ACTIVEPROJECT']); }
  if((isset($_SESSION['ACTIVEPROJECT']) && $_SESSION['ACTIVEPROJECT']!=$triggeringElement['#value']) || (!isset($_SESSION['ACTIVEPROJECT'])) || (empty($_SESSION['ACTIVEPROJECT']))){
    $_SESSION['ACTIVEPROJECT'] = $triggeringElement['#value'];
  }

  $storage_project = array(
    'project-number' => $projectNode->field_project_mgmt_number['und'][0]['value'],
    'project-title' => $projectNode->title,
    'project-location' => $projectNode->field_project_mgmt_location['und'][0]['value'],
    'project-location-region' => $projectNode->field_project_location_region['und'][0]['target_id'],
    'project-location-site' => $projectNode->field_project_location_site['und'][0]['target_id'],
    'project-location-facility' => $projectNode->field_project_location_facility['und'][0]['target_id'],
    'project-floor' => $projectNode->field_project_mgmt_floor['und'][0]['value'],
    'project-room' => $projectNode->field_project_mgmt_room['und'][0]['value'],
    'project-manager' => $projectNode->field_project_mgmt_manager['und'][0]['value'],
    'project-status' => $projectNode->field_project_mgmt_status['und'][0]['value'],   
    'funding-status' => $projectNode->field_project_funding_status['und'][0]['value'],
    'design-status' => $projectNode->field_project_design_status['und'][0]['value'],    
    'project-cost-center' => $projectNode->field_project_mgmt_cost_center['und'][0]['value'],
    'project-description' => isset($projectNode->body['und'])?strip_tags($projectNode->body['und'][0]['value']):'',
  );
  $commands[] = ajax_command_invoke("input.project-number", 'val',array($storage_project['project-number']));
  $commands[] = ajax_command_invoke("input.project-title", 'val',array($storage_project['project-title']));
  $commands[] = ajax_command_invoke("select.project-location", 'val',array($storage_project['project-location']));

  if (!empty($storage_project['project-location-site'])) {
    $commands[] = ajax_command_invoke('input[name="hidden-site-field"]', 'val', array($storage_project['project-location-site']));
  }
  else {
    $commands[] = ajax_command_invoke('input[name="hidden-site-field"]', 'val', array(''));
  }
  if (!empty($storage_project['project-location-facility'])) {
    $commands[] = ajax_command_invoke('input[name="hidden-facility-field"]', 'val', array($storage_project['project-location-facility']));
  }
  else {
    $commands[] = ajax_command_invoke('input[name="hidden-facility-field"]', 'val', array(''));
  }

  if (!empty($storage_project['project-location-region'])) {
    $commands[] = ajax_command_invoke("select.project-location-region", 'val',array($storage_project['project-location-region']));
    $commands[] = ajax_command_invoke("select.project-location-region", 'trigger',array('change'));
  }
  else {
    $commands[] = ajax_command_invoke("select.project-location-region", 'val',array(''));
    $commands[] = ajax_command_invoke("select.project-location-site", 'val',array(''));
    $commands[] = ajax_command_invoke("select.project-location-facility", 'val',array(''));
    $commands[] = ajax_command_invoke("select.project-location-region", 'trigger',array('change'));
  }

  // $commands[] = ajax_command_invoke("select.project-location-site", 'val',array($storage_project['project-location-site']));
  // $commands[] = ajax_command_invoke("select.project-location-facility", 'val',array($storage_project['project-location-facility']));

  $commands[] = ajax_command_invoke("input.project-floor", 'val',array($storage_project['project-floor']));
  $commands[] = ajax_command_invoke("input.project-room", 'val',array($storage_project['project-room']));
  $commands[] = ajax_command_invoke("select.project-manager", 'val',array($storage_project['project-manager']));
  $commands[] = ajax_command_invoke("select.project-status", 'val',array($storage_project['project-status']));    
  $commands[] = ajax_command_invoke("select.funding-status", 'val',array($storage_project['funding-status']));  
  $commands[] = ajax_command_invoke("select.design-status", 'val',array($storage_project['design-status']));    
  $commands[] = ajax_command_invoke("input.project-cost-center", 'val',array($storage_project['project-cost-center'])); 
  $commands[] = ajax_command_invoke("textarea.project-description", 'val',array($storage_project['project-description']));
  $commands[] = ajax_command_html("#project_manager_message_container", get_comment_message_table_data($triggeringElement['#value'],$company->nid));
  $commands[] = ajax_command_html("#prgram-project-summary-listing", get_project_summary_table_data($triggeringElement['#value'])); 
  }
  else{
  $commands[] = ajax_command_invoke("input.project-title",'val',array(''));
  $commands[] = ajax_command_invoke("select.project-location",'val',array(''));
  $commands[] = ajax_command_invoke("select.project-location-region", 'val',array(''));

  $commands[] = ajax_command_invoke("select.project-location-site", 'val',array(''));
  $commands[] = ajax_command_invoke("select.project-location-facility", 'val',array(''));  
  $commands[] = ajax_command_invoke("input.project-floor",'val',array(''));
  $commands[] = ajax_command_invoke("input.project-room",'val',array(''));
  $commands[] = ajax_command_invoke("select.project-manager",'val',array(''));
  $commands[] = ajax_command_invoke("select.project-status",'val',array(''));
  $commands[] = ajax_command_invoke("select.funding-status", 'val',array(''));  
  $commands[] = ajax_command_invoke("select.design-status", 'val',array('')); 
  $commands[] = ajax_command_invoke("input.project-cost-center",'val',array(''));
  $commands[] = ajax_command_invoke("textarea.project-description", 'val',array(''));
  $commands[] = ajax_command_html("#prgram-project-summary-listing", get_project_summary_table_data($triggeringElement['#value'])); 
  //$commands[] = mymodule_ajax_command_insertInCkeditor('.project-description','');
  }
  return array('#type' => 'ajax', '#commands' => $commands);
}

// ==== Project form submition ==== //
function program_project_submit(&$form, &$form_state) {  
  global $user; 
  global $company;
  $formVal = $form_state['values'];  
  //Check for updated project or new one
  if($formVal['select-project'] != '0') {
    $projectNid = $formVal['select-project'];
  $nodeDetails = node_load($projectNid);  
  $nodeDetails->title = $formVal['project-title'];
  $nodeDetails->body['und'][0]['value'] = $formVal['project-description'];
    $nodeDetails->field_project_mgmt_location['und'][0]['value'] = $formVal['project-location'];   
    $nodeDetails->field_project_location_region['und'][0]['target_id'] = $formVal['project-location-region'];   
    $nodeDetails->field_project_location_site['und'][0]['target_id'] = $formVal['project-location-site'];   
    $nodeDetails->field_project_location_facility['und'][0]['target_id'] = $formVal['project-location-facility'];
    $nodeDetails->field_project_mgmt_floor['und'][0]['value'] = $formVal['project-floor'];  
    $nodeDetails->field_project_mgmt_room ['und'][0]['value'] = $formVal['project-room'];
    $nodeDetails->field_project_mgmt_manager['und'][0]['value'] = $formVal['project-manager'];   
    $nodeDetails->field_project_mgmt_status['und'][0]['value'] = $formVal['project-status'];
    $nodeDetails->field_project_mgmt_cost_center['und'][0]['value'] = $formVal['project-cost-center'];    
  $nodeDetails->field_project_funding_status['und'][0]['value'] = $formVal['funding-status'];
  $nodeDetails->field_project_design_status['und'][0]['value'] = $formVal['design-status'];
  if (empty($nodeDetails->field_product_status['und'][0]['value'])) {
    if (arg(1) == 'cm') {
      $nodeDetails->field_product_status['und'][0]['value'] = 'cmtrue';
    }
    elseif (arg(1) == 'cr') {
      $nodeDetails->field_product_status['und'][0]['value'] = 'crtrue';
    }
    else {
      $nodeDetails->field_product_status['und'][0]['value'] = 'cmfalse';
    }
  }
  node_save($nodeDetails);
  drupal_set_message('Project '.$formVal['project-title'].' updated successfully!');
  // drupal_goto('program/projects', array('query'=>array('pid'=>$formVal['select-project'])));
  $form_state['redirect'] = array('program/projects', array('query'=>array('pid'=>$formVal['select-project'])));
  }
  else {  
    $node = new stdClass();
    $node->type = 'project_management';
    $node->title = $formVal['project-title']; 
  $node->body['und'][0]['value'] = $formVal['project-description'];
    $node->uid = $user->uid;
    $node->language = en;
    $node->status = 1;
    $node->og_group_ref['und'][0]['target_id'] = $company->nid;
    $node->field_project_mgmt_number['und'][0]['value'] = $formVal['project-number'];
    $node->field_project_location_region['und'][0]['target_id'] = $formVal['project-location-region'];   
    $node->field_project_location_site['und'][0]['target_id'] = $formVal['project-location-site'];   
    $node->field_project_location_facility['und'][0]['target_id'] = $formVal['project-location-facility']; 
  if($formVal['project-location'] != '') {
      $node->field_project_mgmt_location['und'][0]['value'] = $formVal['project-location'];   
  }
    $node->field_project_mgmt_floor['und'][0]['value'] = $formVal['project-floor'];  
    $node->field_project_mgmt_room ['und'][0]['value'] = $formVal['project-room'];
  if($formVal['project-manager'] != '') {
      $node->field_project_mgmt_manager['und'][0]['value'] = $formVal['project-manager'];   
  }
    $node->field_project_mgmt_status['und'][0]['value'] = $formVal['project-status'];
    $node->field_project_mgmt_cost_center['und'][0]['value'] = $formVal['project-cost-center']; 
  $node->field_project_funding_status['und'][0]['value'] = $formVal['funding-status'];
  $node->field_project_design_status['und'][0]['value'] = $formVal['design-status'];
  if (arg(1) == 'cm') {
    $node->field_product_status['und'][0]['value'] = 'cmtrue';
  }
  elseif (arg(1) == 'cr') {
    $node->field_product_status['und'][0]['value'] = 'crtrue';
  }
  else {
    $node->field_product_status['und'][0]['value'] = 'cmfalse';
  }
  $projectNumber = variable_get('ProjectNumber');
  variable_set('ProjectNumber', $projectNumber + 1);
    node_save($node);
  drupal_set_message('New project '.$formVal['project-title'].' created successfully!');
  // drupal_goto('program/projects', array('query'=>array('pid'=>$node->nid)));
  $form_state['redirect'] = array('program/projects', array('query'=>array('pid'=>$node->nid)));
  }
  //$form_state['rebuild'] = TRUE;
}

// ==== Generating project slide comment form ==== //
function project_manager_comment_form($form,&$form_state) {
  $form['#attributes']['class'] = array('project_manager_comment_form');    
  $form['project_id_ref']= array(
    '#type'=>'hidden',
  '#title_display' => 'invisible',
  '#attributes' => array('class'=> array('project_id_ref')),
  );
  $form['comment'] = array(
    '#type'=>'textfield',
  '#title_display' => 'invisible',
  '#maxlength' => 4096,  
  '#attributes' => array('class'=> array('form-control', 'project-manager-comment')),
  '#prefix' => '<div class="project-manager-comment"><div class="clearfix margin-bottom-10">Add Project Manager Comments:</div><div class="add-comment-form-section  margin-bottom-10">',
  //'#suffix' => '</div>',
  );
  $form['add-comment'] = array(
    '#type' => 'submit',
  '#value' => 'Add',
  '#attributes' => array('class' => array('add_new_project_manager_comment','add_new_comment_message')),
  '#executes_submit_callback' => FALSE,
  '#limit_validation_errors' => array(),
  '#href' => '',
  '#ajax' => array(
    'callback' => 'add_new_project_manager_comment_message',
    'effect' => 'fade',
    'event' => 'click',
    'progress' => array('type' => 'none'),
    ),
  '#suffix' => '</div>',
  );  
  return $form;
}

function add_new_project_manager_comment_message(&$form,&$form_state) {
  global $company,$user;
  $commands = array();
  $output = '';
  $values = $form_state['values'];
  $message = trim($values['comment']);    
  $dateObject = new DateObject(time(), new DateTimeZone('UTC'));
  $dateTimeNew =  date_format_date($dateObject, 'custom', 'Y-m-d H:i');
  $currentTimestamp = strtotime($dateTimeNew);      
  if (!empty($message) && is_numeric($values['project_id_ref'])) {
  $commentMessage= array(
      'company_nid' => $company->nid,
      'message' => strip_tags($message),
      'user_uid' => $user->uid,
      'project_ref_id' => $values['project_id_ref'],
      'timestamp' => $currentTimestamp,
    );
  $id = db_insert('m6connect_project_manager_comment')->fields($commentMessage)->execute();     
  $output = get_comment_message_table_data($values['project_id_ref'],$company->nid);  
  $commands[] = ajax_command_invoke('input.project-manager-comment','val',array(''));
    $commands[] = ajax_command_html('#project_manager_message_container', $output);
  }
  return array('#type' => 'ajax', '#commands' => $commands);
}

function get_comment_message_table_data($projectId,$companyId) {
  global $user;
  ctools_include('ajax');
  ctools_include('modal');
  if(db_table_exists('m6connect_project_manager_comment')) {
    $query = db_select('m6connect_project_manager_comment', 'pmc');
  $query->join('realname', 'r', 'r.uid=pmc.user_uid');
  $query->fields('pmc', array('id', 'message','timestamp','user_uid'));
  $query->fields('r', array('realname'));   
  $query->condition('pmc.project_ref_id', $projectId, '=');
  $query->condition('pmc.company_nid', $companyId, '=');
  $query->orderBy('pmc.timestamp', 'ASC');
  $result = $query->execute()->fetchAll();
  $rows = array(); 
  $count = 1;
  if($result && !empty($result)) {
    foreach ($result as $delta => $msgObj) {    
      $action = l('<i class="fa fa-pencil"></i>','/project-manager-comment/'.$msgObj->id.'/'.$projectId.'/nojs', array('attributes' => array('class' => array('use-ajax','ctools-modal-assign-dashboard-popup-style','ctools-use-modal')), 'html' => TRUE)).' '.l('<i class="fa fa-trash-o"></i>','/project-manager-comment/delete/'.$msgObj->id.'/'.$projectId.'/nojs', array('attributes' => array('class' => array('use-ajax','ctools-modal-assign-dashboard-popup-style','ctools-use-modal')), 'html' => TRUE));          
    $rows[] = array(
              'data' => array(  
                array('data'=>$count),    
                array('data'=>date('m/d/Y H:i h').', '.ucwords($msgObj->realname).', '.$msgObj->message,'class'=> array('text-left')),    
                array('data'=>$action,'width'=>array(58)),    
            ),  
            );      
    $count++;
    }
  }
  }
  return theme('table', array('header'=>$header,'rows'=>$rows,'empty'=>'No Comments yet','attributes'=>array('class'=>array('table','m6connect-custom-table','m6connect-custom-program-manager-comment-table','m6connect-program-project-manager-comment-table','table-hover','table-bordered','text-center'))));
}
// End Projects Slide (Tab) Section
// ================================

// ===================================
// Start Estimates Slide (Tab) Section
function program_project_estimates_content(){
  global $company;    
  $getEstimateByCompany = _project_list_by_company($company->nid, 'project_management');    
  reset( $array );
  $firstProject = key( $getEstimateByCompany );
  $elements = array();  
  $elements['estimates_form']= array(
    '#markup' => drupal_render(drupal_get_form('program_modify_estimates_form')),
    '#prefix' => '<div class="clearfix margin-bottom-10">',
    '#suffix' => '</div>',
  ); 
  $elements['prgram-estimate-budget-listing'] = array(
    '#markup' => get_estimate_budget_listing_table_data(),
    '#prefix' => '<div class="clearfix margin-bottom-20"><div class="prgram-estimate-listing" id="programe-estimate-cost-code">',
    '#suffix' => '</div></div>',
  );   
  $elements['prgram-estimate-listing'] = array(
    '#markup' => get_estimate_listing_table_data(),
    '#prefix' => '<div class="clearfix margin-bottom-10"><div class="prgram-estimate-listing" id="programe-estimate-listing-by-project">',
    '#suffix' => '</div></div>',
   ); 
  return $elements;
}

function program_modify_estimates_form($form,&$form_state) {
  global $user;
  global $company;    
  $getEstimateByCompany = _project_list_by_company($company->nid, 'project_management');
  $getEstNodes = _project_list_by_company($company->nid, 'project_estimate');
  drupal_add_js(drupal_get_path('module', 'm6connect_program') . '/js/m6connect_program.js');
  drupal_add_js(drupal_get_path('module', 'm6connect_program') . '/js/Prototype_Price_Format_0.1.js');  
  $form['#attached']['js'][] = array(
    'data'=>drupal_get_path('module', 'm6connect_routing') . '/js/routing_type_slip_form.js',
    'type'=>'file'
  );
  $form['#attributes']['class'] = array('program_modify_estimates_form');
  $form['select-estimate'] = array(
    '#type'=>'select',
    '#title'=> 'Select Project',
    '#options' => $getEstimateByCompany,
    '#default_value' => isset($_SESSION['ACTIVEPROJECT'])?$_SESSION['ACTIVEPROJECT']:'',
    '#attributes' => array('class'=> array('form-control project-program-sel')),
    '#ajax' => array(
      'callback'=> 'change_program_estimate_callback',
      'wrapper' => 'project_estimate_main_container',
      'effect' => 'fade',
    ),
    '#prefix' => '<div class="clearfix"><div class="pull-left form-inline">',
    '#suffix' => '</div><div class="add-new-budget-btn pull-right" id="add-budget-button-custom">'. l('<input type="button" value="Create New Budget" class="form-submit new-record-cus-btn" />', '#', array('html' => TRUE, 'external' => TRUE, 'attributes' => array('class' => array('new-budget-link')))).'</div></div>',
  );
  $form['choose-estimate'] = array(
    '#type'=>'select',
    '#title'=> 'Select Project',
    '#options' => $getEstNodes, 
    '#default_value' => isset($_GET['bid'])?check_plain($_GET['bid']):0,  
    '#attributes' => array('class'=> array('form-control project-program-sel-est-details')),
    '#ajax' => array(
      'callback'=> 'change_program_estimate_callback',
      'wrapper' => 'project_estimate_main_container',
      'effect' => 'fade',
    ),
    '#prefix' => '<div class="clearfix" style="display:none;"><div class="pull-left form-inline">',
    '#suffix' => '</div></div>',
  );    
  $form['estimate-nodata-dialog']= array(
    '#markup' => '',
    '#prefix' => '<div id="estimate-approve-nodata-dialog">',
    '#suffix' => '</div>',
  );  
  $form['prgram-project-menu-items'] = array(
    '#markup' => program_project_menu_links_content(),
    '#prefix' => '<div class="clearfix">',
    '#suffix' => '</div>',
  );
  //estimate subtab  
  $proId = isset($_GET['pid'])?check_plain($_GET['pid']):0;
  if(!empty($proId)){
    $form_state['getPID'] = $proId;
  }
  $form_state['storage_project_estimate'] = array();
  if(isset($form_state['values'],$form_state['input'],$form_state['triggering_element'],$form_state['triggering_element']['#type'],$form_state['triggering_element']['#name']) && $form_state['triggering_element']['#type']=='select' && $form_state['triggering_element']['#name']=='choose-estimate'){
    $triggeringElement = $form_state['triggering_element'];
    if($triggeringElement['#value'] != 0 && !empty($triggeringElement['#value'])) {   
      $estimateNode = node_load($triggeringElement['#value']);    
      $form_state['storage_project_estimate'] = array(
        'estimate_name' => $estimateNode->title,
        'estimate_status' => isset($estimateNode->field_project_estimate_status['und'])?$estimateNode->field_project_estimate_status['und'][0]['value']:'',        'request_date' => isset($estimateNode->field_project_est_request_date['und'])?$estimateNode->field_project_est_request_date['und'][0]['value']:'',
         'agree_date' => isset($estimateNode->field_project_est_agree_to_date['und'])?$estimateNode->field_project_est_agree_to_date['und'][0]['value']:'',
         'planed_completion_date' => isset($estimateNode->field_planned_completion_date['und'])?$estimateNode->field_planned_completion_date['und'][0]['value']:'',
         'submit_date' => isset($estimateNode->field_project_est_submit_date['und'])?$estimateNode->field_project_est_submit_date['und'][0]['value']:'',
         'approval_date' => isset($estimateNode->field_project_est_approval_date['und'])?$estimateNode->field_project_est_approval_date['und'][0]['value']:'',
         'estimate_amount' => isset($estimateNode->field_project_estimate_amount['und'])?$estimateNode->field_project_estimate_amount['und'][0]['value']:'',
         'installation_type' => isset($estimateNode->field_project_installation_type['und'])?$estimateNode->field_project_installation_type['und'][0]['value']:'',
         'spend_start_date' => isset($estimateNode->field_project_spend_start_date['und'])?$estimateNode->field_project_spend_start_date['und'][0]['value']:'',
         'spend_end_date' => isset($estimateNode->field_project_spend_end_date['und'])?$estimateNode->field_project_spend_end_date['und'][0]['value']:'',
         'estimate_set_date' => isset($estimateNode->field_project_estimate_set_date['und'])?$estimateNode->field_project_estimate_set_date['und'][0]['value']:'',
        'plan_budget' => isset($estimateNode->field_plan_budget['und'])?$estimateNode->field_plan_budget['und'][0]['value']:'',
        'capital_contingency' => isset($estimateNode->field_capital_contingency['und'])?$estimateNode->field_capital_contingency['und'][0]['value']:'10',
        'estimate_approver' => isset($estimateNode->field_estimate_approver['und'])?$estimateNode->field_estimate_approver['und'][0]['value']:'',
        'comment' => isset($estimateNode->body['und'])?$estimateNode->body['und'][0]['value']:'',
      );    
    }    
  }
  $form['main-container']= array(
    '#type' => 'container',
    '#attributes' => array('class'=>array('row')), 
    '#prefix' => '<div class="clearfix"><div id="project_estimate_main_container" class="project-detail">',
    '#suffix' => '</div></div>',
    '#process' => array('project_estimate_main_container_process'), 
  );    
  $form['estimate-dialog']= array(
    '#markup' => '',
    '#prefix' => '<div id="estimate-approve-change-dialog">',
    '#suffix' => '</div>',
  );        
  $form['actions']['reset'] = array(
    '#type' => 'markup',
    '#markup' => '<input type="button" value="Cancel" class="form-submit custom-reset-button">',
    '#prefix' => '<div class="clearfix margin-top-10"><div class="pull-left custom-submit-reset margin-bottom-10">',
  );
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#name' => 'main_call',
    '#submit'=> array('project_estimate_submit'),
    '#attributes' => array('class'=>array('main-estimate-submit-call')), 
    '#value' => 'Save',
    '#prefix' => '<div class="pull-left project_estimate_submit_container margin-bottom-10">',
    '#suffix' => '</div></div></div>', 
  );
  return $form; 
}

function project_estimate_main_container_process($element, &$form_state) {
  global $company;  
  $getUserList = _get_company_users_list_by_og_roles($company->nid, 'Program manager');  
  $defaultValues = $form_state['storage_project_estimate'];     
  $element['main-container']['left-container']= array(
    '#type' => 'container',
    '#attributes' => array('class'=>array('col-md-6','col-sm-6','col-xs-12','project-details-left')),
    '#weight' => 1,
  );  
  $element['main-container']['right-container']= array(
    '#type' => 'container',
    '#attributes' => array('class'=>array('col-md-6','col-sm-6','col-xs-12','project-details-right')),
    '#weight' => 2,
  );   
  $element['main-container']['full-container']= array(
    '#type' => 'container',
    '#attributes' => array('class'=>array('col-md-12','col-sm-12','col-xs-12','project-details-full-mid')),
    '#weight' => 3,
  );   
  $element['main-container']['full-container']['left-main-container']['inner-left-container']= array(
    '#type' => 'container',
    '#attributes' => array('class'=>array('col-md-6','col-sm-6','col-xs-12','project-details-left')),
  );  
  $element['main-container']['full-container']['left-main-container']['inner-right-container-left']= array(
    '#type' => 'container',
    '#attributes' => array('class'=>array('col-md-3','col-sm-3','col-xs-12','project-details-left')),
  );  
  $element['main-container']['full-container']['left-main-container']['inner-right-container-right']= array(
    '#type' => 'container',
    '#attributes' => array('class'=>array('col-md-3','col-sm-3','col-xs-12','project-details-left')),
  );  
  $element['project_est_ref_nid']= array(
    '#type' => 'hidden',
    '#title_display' => 'invisible',
    '#attributes' => array('class'=> array('form-control project_est_ref_nid')),  
  );   
  $element['approve-status-drop'] = array(
    '#type' => 'select',
    '#options' => array('ok' => 'OK', 'cancel' => 'Cancel'),
    '#prefix' => '<div style="display:none">',
    '#suffix' => '</div>',
  );  
  $element['approve_status_previous_approved']= array(
    '#type' => 'hidden',
    '#title_display' => 'invisible',
    '#attributes' => array('class'=> array('form-control approve_status_previous_approved')), 
  );
  $element['main-container']['left-container']['estimate_name']= array(
    '#type' => 'textfield',
    '#title' => 'Budget Name',
    '#attributes' => array('class'=> array('form-control estimate_name')),
    '#required' => TRUE,
    '#default_value' => isset($defaultValues['estimate_name'])?$defaultValues['estimate_name']:'',
    '#prefix' => '<div class="project-details-border"><div class="form-item clearfix">',
    '#suffix' => '</div>',
    '#field_suffix' => '<div class="pull-right project-avail-status-title"><span class="text-danger"></span><span class="text-success"></span></div>',
  );  
  $element['main-container']['left-container']['estimate_status']= array(
    '#type' => 'select',
    '#title' => 'Budget Status',
    '#options' => array('approved'=>'Approved','pending'=>'Pending'),
    '#empty_option' => '- Select -',
    '#attributes' => array('class'=> array('form-control estimate_status')),
    '#default_value' => isset($defaultValues['estimate_status'])?$defaultValues['estimate_status']:'',
    '#prefix' => '<div class="form-item clearfix">',
    '#suffix' => '</div>',
  );  
  $installationType = array('new construction'=>'New Construction','renovation'=>'Renovation','equipment'=>'Equipment','infrastructure'=>'Infrastructure','utilities'=>'Utilities','tele communication'=>'Tele Communication','real estate'=>'Real Estate');
  $element['main-container']['left-container']['installation_type']= array(
    '#type' => 'select',
    '#title' => 'Installation Type',
    '#options' => $installationType,
    '#empty_option' => '- Select -',
    '#attributes' => array('class'=> array('form-control installation_type')),
  //'#required' => TRUE,
    '#default_value' => isset($defaultValues['installation_type'])?$defaultValues['installation_type']:'',
    '#prefix' => '<div class="form-item clearfix">',
    '#suffix' => '</div>',
  );
  $element['main-container']['left-container']['estimate_amount']= array(
    '#type' => 'textfield',
    '#title' => 'Total Budget',
    '#attributes' => array('class'=> array('form-control estimate_amount','form-disabled-field')),
    '#default_value' => isset($defaultValues['estimate_amount'])?$defaultValues['estimate_amount']:'',
    '#prefix' => '<div class="form-item clearfix">',
    '#suffix' => '</div>',
    '#disabled' => TRUE,
  );
  $element['main-container']['left-container']['plan_budget']= array(
    '#type' => 'textfield',
    '#title' => 'Plan Budget',
    '#attributes' => array('class'=> array('form-control plan_budget')),
    '#default_value' => isset($defaultValues['plan_budget'])?$defaultValues['plan_budget']:'',
    '#prefix' => '<div class="form-item clearfix">',
    '#suffix' => '</div>',
  );  
  $element['main-container']['left-container']['estimate_approver']= array(
    '#type' => 'select',
    '#title' => 'Budget Approver',
    '#options' => $getUserList,
    '#empty_option' => '- Select -',  
    '#attributes' => array('class'=> array('form-control estimate_approver')),
    '#default_value' => isset($defaultValues['estimate_approver'])?$defaultValues['estimate_approver']:'',
    '#prefix' => '<div class="form-item clearfix">',
    '#suffix' => '</div></div>',
  ); 
  $element['main-container']['right-container']['comment']= array(
    '#type' => 'textarea',
    '#title' => 'Comment',
    '#attributes' => array('class'=> array('form-control comment')),
    '#default_value' => isset($defaultValues['comment'])?strip_tags($defaultValues['comment']):'',
    '#prefix' => '<div class="clearfix">',
    '#suffix' => '</div>',
  );    
  $query= db_select('node','n'); 
  $query->join('field_data_field_estimate_reference','er','er.entity_id = n.nid');
  $query->join('node','enode','enode.nid=er.field_estimate_reference_nid');
  $query->join('field_data_field_project_estimate_status','es','es.entity_id = enode.nid');
  $query->join('field_data_field_project_reference','pr','enode.nid=pr.entity_id');
  $query->fields('n',array('nid'));
  $query->condition('es.field_project_estimate_status_value', 'approved', '=');
  $query->condition('pr.field_project_reference_nid', $form_state['values']['select-estimate'], '=');
  $approvedCostCode = $query->execute()->fetchCol();   
  $filedId = 1;   
  $grantLineItem = 0.00;
  foreach($approvedCostCode as $estKey => $estVal) {
    $getLineItem = node_load($estVal);
    // Get Subtotal of line item
    $query = db_select('node','n');
    $query->join('field_data_field_estimate_reference','ed','ed.entity_id = n.nid');
    $query->join('field_data_field_conigency_status','cs','cs.entity_id = n.nid');
    $query->join('field_data_field_est_line_item_amt','la','la.entity_id = n.nid');
    $query->addExpression('SUM(la.field_est_line_item_amt_value)');
    $query->condition('ed.field_estimate_reference_nid', $getLineItem->field_estimate_reference['und'][0]['nid'], '=');
    $query->condition('cs.field_conigency_status_value','FALSE','=');
    $query->condition('ed.bundle','estimate_detail','=');
    $getSubtotal = $query->execute()->fetchField();
  if($getLineItem->field_est_line_item_amt['und'][0]['value'] != '') {
      $estAmt = $getLineItem->field_est_line_item_amt['und'][0]['value'];
      $grantLineItem += $getLineItem->field_est_line_item_amt['und'][0]['value'];
    }
    else {
      $estAmt = $getLineItem->field_conigency_percentage['und'][0]['value'];
    }
    $element['main-container']['full-container']['left-main-container']['inner-left-container']['line-item-total-sub']= array(
      '#type' => 'hidden',
      '#attributes' => array('class'=> array('form-control line-item-total-sub-value')),
      '#default_value' => $getSubtotal,
    );  
    $element['main-container']['full-container']['left-main-container']['inner-left-container']['field_est_cost_code_'.$estKey]= array(
      '#type' => 'textfield',
      '#title' => 'Cost Code',
      '#attributes' => array('class'=> array('form-control field_est_cost_code'),'id' => array('cost-code-data-'.$filedId)),
      '#default_value' => $getLineItem->field_est_cost_code['und'][0]['value'],
      '#prefix' => '<div class="form-item clearfix" id="cost-code-data-'.$filedId.'">',
      '#suffix' => '</div>',
      '#disabled' => TRUE,
      '#parents' => array('budgetData', $estKey, 'cost_code'),
    );  
    $element['main-container']['full-container']['left-main-container']['inner-left-container']['field_conigency_status_'.$estKey]= array(
      '#type' => 'hidden',
      '#attributes' => array('class'=> array('form-control field_conigency_status')),
      '#default_value' => $getLineItem->field_conigency_status['und'][0]['value'] != ''?$getLineItem->field_conigency_status['und'][0]['value']:'',
      '#parents' => array('budgetData', $estKey, 'field_conigency_status'),
    );
    $element['main-container']['full-container']['left-main-container']['inner-right-container-left']['field_est_line_item_amt'.$estKey]= array(
      '#type' => 'textfield',
      '#title' => 'Line Item Amount',
      '#attributes' => array('class'=> array('form-control field_est_line_item_amt'),'id' => array($filedId)),
      '#default_value' => $getLineItem->field_est_line_item_amt['und'][0]['value'] != ''?$getLineItem->field_est_line_item_amt['und'][0]['value']:'',
      '#prefix' => '<div class="form-item clearfix" id="cost-code-amt-'.$filedId.'">',
      '#suffix' => '</div>',
      '#parents' => array('budgetData', $estKey, 'line_item_amt'),
    );
    $element['main-container']['full-container']['left-main-container']['inner-right-container-right']['field_conigency_percentage'.$estKey]= array(
      '#type' => 'textfield',
      '#title' => 'Percentage',
      '#attributes' => array('class'=> array('form-control field_conigency_percentage'),'id' => array($filedId)),
      '#prefix' => '<div class="form-item clearfix" id="cost-code-per-'.$filedId.'">',
      '#suffix' => '</div>',
      '#default_value' => $getLineItem->field_conigency_percentage['und'][0]['value'] != ''?$getLineItem->field_conigency_percentage['und'][0]['value']:'',
      '#parents' => array('budgetData', $estKey, 'line_item_per'),      
    );
    if($getLineItem->field_est_line_item_amt['und'][0]['value'] != '') {
      $element['main-container']['full-container']['left-main-container']['inner-left-container']['field_data_status_'.$estKey]= array(
        '#type' => 'hidden',
        '#default_value' => 'HasAmt',
        '#parents' => array('budgetData', $estKey, 'field_data_status'),
      );       
    }
    else {
      $element['main-container']['full-container']['left-main-container']['inner-left-container']['field_data_status_'.$estKey]= array(
        '#type' => 'hidden',
        '#default_value' => 'HasPer',
        '#parents' => array('budgetData', $estKey, 'field_data_status'),
      );
  }
    $filedId ++;        
  }
  $element['main-container']['full-container']['left-main-container']['inner-right-container-left']['total-line-amt-calc']= array(
    '#markup' => '<strong class="calcuation-line-item-total">$'.number_format($grantLineItem, 2).'</strong>',
  '#prefix' => '<div class="calcuation-line-item-total-conatiner">',
    '#suffix' => '</div>',
  );
  return $element;
}

function change_program_estimate_callback($form,&$form_state) {
  $commands = array();
  $triggeringElement = $form_state['triggering_element'];
  if(!empty($triggeringElement['#value']) && $triggeringElement['#value'] != 0 && $triggeringElement['#name'] == 'choose-estimate'){
    $estimateNode = node_load($triggeringElement['#value']);            
    $storage_project = array(
      'estimate_name' => $estimateNode->title,    
      'estimate_status' => isset($estimateNode->field_project_estimate_status['und'])?$estimateNode->field_project_estimate_status['und'][0]['value']:'',
      'request_date' => isset($estimateNode->field_project_est_request_date['und'])?$estimateNode->field_project_est_request_date['und'][0]['value']:'',
      'agree_date' => isset($estimateNode->field_project_est_agree_to_date['und'])?$estimateNode->field_project_est_agree_to_date['und'][0]['value']:'',
      'planed_completion_date' => isset($estimateNode->field_planned_completion_date['und'])?$estimateNode->field_planned_completion_date['und'][0]['value']:'',
      'submit_date' => isset($estimateNode->field_project_est_submit_date['und'])?$estimateNode->field_project_est_submit_date['und'][0]['value']:'',
      'approval_date' => isset($estimateNode->field_project_est_approval_date['und'])?$estimateNode->field_project_est_approval_date['und'][0]['value']:'',
      'estimate_amount' => isset($estimateNode->field_project_estimate_amount['und'])?$estimateNode->field_project_estimate_amount['und'][0]['value']:'',
      'installation_type' => isset($estimateNode->field_project_installation_type['und'])?$estimateNode->field_project_installation_type['und'][0]['value']:'',
      'spend_start_date' => isset($estimateNode->field_project_spend_start_date['und'])?$estimateNode->field_project_spend_start_date['und'][0]['value']:'',
      'spend_end_date' => isset($estimateNode->field_project_spend_end_date['und'])?$estimateNode->field_project_spend_end_date['und'][0]['value']:'',
      'estimate_set_date' => isset($estimateNode->field_project_estimate_set_date['und'])?$estimateNode->field_project_estimate_set_date['und'][0]['value']:'',
      'plan_budget' => isset($estimateNode->field_plan_budget['und'])?$estimateNode->field_plan_budget['und'][0]['value']:'',
      'capital_contingency' => isset($estimateNode->field_capital_contingency['und'])?$estimateNode->field_capital_contingency['und'][0]['value']:'10',
      'estimate_approver' => isset($estimateNode->field_estimate_approver['und'])?$estimateNode->field_estimate_approver['und'][0]['value']:'',
      'comment' => isset($estimateNode->body['und'])?strip_tags($estimateNode->body['und'][0]['value']):'',
    );
    $finalBudget = _get_final_budget_by_contigency($estimateNode->field_project_reference['und'][0]['nid'], $estimateNode->nid, $storage_project['capital_contingency']);
  $reqDate = $storage_project['request_date']!=''?date('m/d/Y', strtotime($storage_project['request_date'])):'';
    $agreeDate = $storage_project['agree_date']!=''?date('m/d/Y', strtotime($storage_project['agree_date'])):'';
    $comDate = $storage_project['planed_completion_date']!=''?date('m/d/Y', strtotime($storage_project['planed_completion_date'])):'';
    $subDate = $storage_project['submit_date']!=''?date('m/d/Y', strtotime($storage_project['submit_date'])):'';
    $appDate = $storage_project['approval_date']!=''?date('m/d/Y', strtotime($storage_project['approval_date'])):'';
    $spenStart = $storage_project['spend_start_date']!=''?date('m/d/Y', strtotime($storage_project['spend_start_date'])):'';
    $spenEnd = $storage_project['spend_end_date']!=''?date('m/d/Y', strtotime($storage_project['spend_end_date'])):'';
    $setDate = $storage_project['estimate_set_date']!=''?date('m/d/Y', strtotime($storage_project['estimate_set_date'])):'';
  $commands[] = ajax_command_invoke("input.estimate_name", 'val',array($storage_project['estimate_name']));
    $commands[] = ajax_command_invoke("select.estimate_status", 'val',array($storage_project['estimate_status']));
    $commands[] = ajax_command_invoke("input.request_date", 'val',array($reqDate)); 
    $commands[] = ajax_command_invoke("input.agree_date", 'val',array($agreeDate));
    $commands[] = ajax_command_invoke("input.planed_completion_date", 'val',array($comDate));
    $commands[] = ajax_command_invoke("input.submit_date", 'val',array($subDate));
    $commands[] = ajax_command_invoke("input.approval_date", 'val',array($appDate));
    $commands[] = ajax_command_invoke("input.estimate_amount", 'val',array($finalBudget));  
    $commands[] = ajax_command_invoke("select.installation_type", 'val',array($storage_project['installation_type']));
    $commands[] = ajax_command_invoke("input.spend_start_date", 'val',array($spenStart));
    $commands[] = ajax_command_invoke("input.spend_end_date", 'val',array($spenEnd));
    $commands[] = ajax_command_invoke("input.estimate_set_date", 'val',array($setDate));
    $commands[] = ajax_command_invoke("input.plan_budget", 'val',array($storage_project['plan_budget']));
    $commands[] = ajax_command_invoke("input.capital_contingency", 'val',array($storage_project['capital_contingency'])); 
    $commands[] = ajax_command_invoke("select.estimate_approver", 'val',array($storage_project['estimate_approver']));
  $commands[] = ajax_command_invoke("textarea.comment", 'val',array($storage_project['comment']));  
    $commands[] = ajax_command_html("#programe-estimate-listing-by-project", get_estimate_listing_table_data($estimateNode->field_project_reference['und'][0]['nid']));
    $commands[] = ajax_command_html("#programe-estimate-cost-code", estimate_budget_details_content($estimateNode->nid));
    $commands[] = ajax_command_invoke("input.project_est_ref_nid", 'val',array($estimateNode->nid));
    if($storage_project['estimate_amount'] != '') {
      $commands[] = ajax_command_invoke("input#edit-estimate-amount", 'trigger',array('keyup'));
    }
    if($storage_project['capital_contingency'] != '') {
      $commands[] = ajax_command_invoke("input#edit-capital-contingency", 'trigger',array('keyup'));
    }
    if($storage_project['plan_budget'] != '') {
      $commands[] = ajax_command_invoke("input#edit-plan-budget", 'trigger',array('keyup'));
    } 
    $commands[] = ajax_command_invoke("table.m6connect-program-estimate-table-main-estimate tr.estimate-tr", 'removeClass',array('bg-info'));
    $commands[] = ajax_command_invoke("table.m6connect-program-estimate-table-main-estimate tr.estimate-tr-".$estimateNode->nid, 'removeClass',array('odd')); 
    $commands[] = ajax_command_invoke("table.m6connect-program-estimate-table-main-estimate tr.estimate-tr-".$estimateNode->nid, 'removeClass',array('even'));  
    $commands[] = ajax_command_invoke("table.m6connect-program-estimate-table-main-estimate tr.estimate-tr-".$estimateNode->nid, 'addClass',array('bg-info'));
  }
  else{    
    if((isset($_SESSION['ACTIVEPROJECT']) && $_SESSION['ACTIVEPROJECT']!=$triggeringElement['#value']) || (!isset($_SESSION['ACTIVEPROJECT'])) || (empty($_SESSION['ACTIVEPROJECT']))){
      $_SESSION['ACTIVEPROJECT'] = $triggeringElement['#value'];
    }
    $commands[] = ajax_command_html("#programe-estimate-cost-code", estimate_budget_details_content($triggeringElement['#value']));
    $commands[] = ajax_command_html("#programe-estimate-listing-by-project", get_estimate_listing_table_data($triggeringElement['#value']));    
    $commands[] = ajax_command_invoke("input.project-number", 'val',array(''));
    $commands[] = ajax_command_invoke("input.estimate_name", 'val',array(''));
    $commands[] = ajax_command_invoke("select.estimate_status", 'val',array(''));
    $commands[] = ajax_command_invoke("input.request_date", 'val',array(''));
    $commands[] = ajax_command_invoke("input.agree_date", 'val',array(''));
    $commands[] = ajax_command_invoke("input.planed_completion_date", 'val',array(''));
    $commands[] = ajax_command_invoke("input.submit_date", 'val',array(''));
    $commands[] = ajax_command_invoke("input.approval_date", 'val',array(''));
    $commands[] = ajax_command_invoke("input.estimate_amount", 'val',array(''));
    $commands[] = ajax_command_invoke("select.installation_type", 'val',array(''));
    $commands[] = ajax_command_invoke("input.spend_start_date", 'val',array(''));
    $commands[] = ajax_command_invoke("input.spend_end_date", 'val',array(''));
    $commands[] = ajax_command_invoke("input.estimate_set_date", 'val',array(''));
    $commands[] = ajax_command_invoke("input.plan_budget", 'val',array(''));
    $commands[] = ajax_command_invoke("input.capital_contingency", 'val',array('10'));
    $commands[] = ajax_command_invoke("input.capital_contingency", 'trigger',array('keyup'));
    $commands[] = ajax_command_invoke("select.estimate_approver", 'val',array(''));
    $commands[] = ajax_command_invoke("textarea.comment", 'val',array(''));
    // Trigger approved budget  
    //Get Approved budget by project
    $query= db_select('node','n'); 
    $query->join('field_data_field_project_estimate_status','es','es.entity_id = n.nid');
    $query->join('field_data_field_project_reference','pr','n.nid=pr.entity_id');         
    $query->fields('es',array('entity_id'));
    $query->condition('es.field_project_estimate_status_value', 'approved', '=');
    $query->condition('pr.field_project_reference_nid', $triggeringElement['#value'], '=');
    $approvedNodeId = $query->execute()->fetchField();  
    if(!isset($form_state['getPID'])) {
      $commands[] = ajax_command_invoke("#estimate-td-".$approvedNodeId, 'trigger',array('click'));
    }
  }
  return array('#type' => 'ajax', '#commands' => $commands);
}

function change_program_estimate_subtab_callback($form,&$form_state) {
  $commands = array();
  $triggeringElement = $form_state['triggering_element'];
  if(!empty($triggeringElement['#value']) && $triggeringElement['#value'] != 0 && $triggeringElement['#name'] == 'subchoose-estimate'){ 
    $estimateNode = node_load($triggeringElement['#value']);            
    $storage_project = array(
      'estimate_name' => $estimateNode->title,    
      'estimate_status' => isset($estimateNode->field_project_estimate_status['und'])?$estimateNode->field_project_estimate_status['und'][0]['value']:'',
      'request_date' => isset($estimateNode->field_project_est_request_date['und'])?$estimateNode->field_project_est_request_date['und'][0]['value']:'',
      'agree_date' => isset($estimateNode->field_project_est_agree_to_date['und'])?$estimateNode->field_project_est_agree_to_date['und'][0]['value']:'',
      'planed_completion_date' => isset($estimateNode->field_planned_completion_date['und'])?$estimateNode->field_planned_completion_date['und'][0]['value']:'',
      'submit_date' => isset($estimateNode->field_project_est_submit_date['und'])?$estimateNode->field_project_est_submit_date['und'][0]['value']:'',
      'approval_date' => isset($estimateNode->field_project_est_approval_date['und'])?$estimateNode->field_project_est_approval_date['und'][0]['value']:'',
      'estimate_amount' => isset($estimateNode->field_project_estimate_amount['und'])?$estimateNode->field_project_estimate_amount['und'][0]['value']:'',
      'installation_type' => isset($estimateNode->field_project_installation_type['und'])?$estimateNode->field_project_installation_type['und'][0]['value']:'',
      'spend_start_date' => isset($estimateNode->field_project_spend_start_date['und'])?$estimateNode->field_project_spend_start_date['und'][0]['value']:'',
      'spend_end_date' => isset($estimateNode->field_project_spend_end_date['und'])?$estimateNode->field_project_spend_end_date['und'][0]['value']:'',
      'estimate_set_date' => isset($estimateNode->field_project_estimate_set_date['und'])?$estimateNode->field_project_estimate_set_date['und'][0]['value']:'',
      'plan_budget' => isset($estimateNode->field_plan_budget['und'])?$estimateNode->field_plan_budget['und'][0]['value']:'',
      'capital_contingency' => isset($estimateNode->field_capital_contingency['und'])?$estimateNode->field_capital_contingency['und'][0]['value']:'10',
      'estimate_approver' => isset($estimateNode->field_estimate_approver['und'])?$estimateNode->field_estimate_approver['und'][0]['value']:'',
      'comment' => isset($estimateNode->body['und'])?$estimateNode->body['und'][0]['value']:'',       
    );
    $reqDate = $storage_project['request_date']!=''?date('m/d/Y', strtotime($storage_project['request_date'])):'';
    $agreeDate = $storage_project['agree_date']!=''?date('m/d/Y', strtotime($storage_project['agree_date'])):'';
    $comDate = $storage_project['planed_completion_date']!=''?date('m/d/Y', strtotime($storage_project['planed_completion_date'])):'';
    $subDate = $storage_project['submit_date']!=''?date('m/d/Y', strtotime($storage_project['submit_date'])):'';
    $appDate = $storage_project['approval_date']!=''?date('m/d/Y', strtotime($storage_project['approval_date'])):'';
    $spenStart = $storage_project['spend_start_date']!=''?date('m/d/Y', strtotime($storage_project['spend_start_date'])):'';
    $spenEnd = $storage_project['spend_end_date']!=''?date('m/d/Y', strtotime($storage_project['spend_end_date'])):'';
    $setDate = $storage_project['estimate_set_date']!=''?date('m/d/Y', strtotime($storage_project['estimate_set_date'])):'';
  $commands[] = ajax_command_invoke("input.estimate_name", 'val',array($storage_project['estimate_name']));
    $commands[] = ajax_command_invoke("select.estimate_status", 'val',array($storage_project['estimate_status']));
    $commands[] = ajax_command_invoke("input.request_date", 'val',array($reqDate)); 
    $commands[] = ajax_command_invoke("input.agree_date", 'val',array($agreeDate));
    $commands[] = ajax_command_invoke("input.planed_completion_date", 'val',array($comDate));
    $commands[] = ajax_command_invoke("input.submit_date", 'val',array($subDate));
    $commands[] = ajax_command_invoke("input.approval_date", 'val',array($appDate));
    $commands[] = ajax_command_invoke("input.estimate_amount", 'val',array($storage_project['estimate_amount']));
    $commands[] = ajax_command_invoke("select.installation_type", 'val',array($storage_project['installation_type']));
    $commands[] = ajax_command_invoke("input.spend_start_date", 'val',array($spenStart));
    $commands[] = ajax_command_invoke("input.spend_end_date", 'val',array($spenEnd));
    $commands[] = ajax_command_invoke("input.estimate_set_date", 'val',array($setDate));
    $commands[] = ajax_command_invoke("input.plan_budget", 'val',array($storage_project['plan_budget']));
    $commands[] = ajax_command_invoke("input.capital_contingency", 'val',array($storage_project['capital_contingency'])); 
    $commands[] = ajax_command_invoke("select.estimate_approver", 'val',array($storage_project['estimate_approver']));
  $commands[] = ajax_command_html("#programe-estimate-cost-code", get_estimate_budget_listing_table_data($estimateNode->field_project_reference['und'][0]['nid']));
  $commands[] = ajax_command_html("#programe-estimate-listing-by-project", get_estimate_listing_table_data($estimateNode->field_project_reference['und'][0]['nid']));
  }
  else { 
    $commands[] = ajax_command_replace("#project_estimatesub_main_container", render($form['main-container'])); 
    $commands[] = ajax_command_html("#programe-estimate-cost-code", get_estimate_budget_listing_table_data($triggeringElement['#value']));
    $commands[] = ajax_command_html("#programe-estimate-listing-by-project", get_estimate_listing_table_data($triggeringElement['#value']));
    $commands[] = ajax_command_invoke("input.project-number", 'val',array(''));
    $commands[] = ajax_command_invoke("input.estimate_name", 'val',array(''));
    $commands[] = ajax_command_invoke("select.estimate_status", 'val',array(''));
    $commands[] = ajax_command_invoke("input.request_date", 'val',array(''));
    $commands[] = ajax_command_invoke("input.agree_date", 'val',array(''));
    $commands[] = ajax_command_invoke("input.planed_completion_date", 'val',array(''));
    $commands[] = ajax_command_invoke("input.submit_date", 'val',array(''));
    $commands[] = ajax_command_invoke("input.approval_date", 'val',array(''));
    $commands[] = ajax_command_invoke("input.estimate_amount", 'val',array(''));
    $commands[] = ajax_command_invoke("select.installation_type", 'val',array(''));
    $commands[] = ajax_command_invoke("input.spend_start_date", 'val',array(''));
    $commands[] = ajax_command_invoke("input.spend_end_date", 'val',array(''));
    $commands[] = ajax_command_invoke("input.estimate_set_date", 'val',array(''));
    $commands[] = ajax_command_invoke("input.plan_budget", 'val',array(''));
    $commands[] = ajax_command_invoke("input.capital_contingency", 'val',array('10'));
    $commands[] = ajax_command_invoke("select.estimate_approver", 'val',array(''));
    $commands[] = ajax_command_invoke("select.project-program-sel-est-details", 'val',array(''));
  }
  return array('#type' => 'ajax', '#commands' => $commands);
}

function estimate_approve_status_change_callback($projectNode,$ajax=TRUE) {
  $query= db_select('field_data_field_project_reference','pr');
  $query->fields('pr', array('entity_id'));
  $query->condition('pr.field_project_reference_nid', $projectNode, '=');
  $query->condition('pr.bundle','project_estimate','=');
  $getEstimateNode = $query->execute()->fetchCol();     
  foreach($getEstimateNode as $estVal) {
    $nodeStatus = node_load($estVal);
    if(isset($nodeStatus->field_project_estimate_status['und'])) {
      if($nodeStatus->field_project_estimate_status['und'][0]['value'] == 'approved') { 
        drupal_json_output(array('appvovedNodeName'=> $nodeStatus->title,'approvedNid' => $nodeStatus->nid));
        drupal_exit(0);
      }
    }
  }   
}

function status_mark_callback($bundle,$projectNode,$ajax=TRUE) {
  $query= db_select('field_data_field_project_reference','pr');
  $query->fields('pr', array('entity_id'));
  $query->condition('pr.field_project_reference_nid', $projectNode, '=');
  $query->condition('pr.bundle',$bundle,'=');
  $getNode = $query->execute()->fetchCol();
  foreach($getNode as $nodeVal) {
    $nodeStatus = node_load($nodeVal);
    if($bundle == 'project_safety') {
      if(isset($nodeStatus->field_safety_status['und'])) {
        if($nodeStatus->field_safety_status['und'][0]['value'] != '') { 
          drupal_json_output(array('Mark'=> $nodeStatus->field_safety_status['und'][0]['value'],'nodeNid' => $nodeStatus->nid));
          drupal_exit(0);
        }
      }
    }
    else if($bundle == 'project_schedule') {
      if(isset($nodeStatus->field_schedule_status['und'])) {
        if($nodeStatus->field_schedule_status['und'][0]['value'] != '') { 
          drupal_json_output(array('Mark'=> $nodeStatus->field_schedule_status['und'][0]['value'],'nodeNid' => $nodeStatus->nid));
          drupal_exit(0);
        }
      }
    } 
    else if($bundle == 'project_etc') {
      if(isset($nodeStatus->field_etc_status_mark['und'])) {
        if($nodeStatus->field_etc_status_mark['und'][0]['value'] != '') { 
          drupal_json_output(array('Mark'=> $nodeStatus->field_etc_status_mark['und'][0]['value'],'nodeNid' => $nodeStatus->nid));
          drupal_exit(0);
        }
      }
    }
  }   
}

function project_estimate_submit(&$form, &$form_state) {  
  global $user; 
  global $company;
  $formVal = $form_state['values'];
  // Check if new estimate or old one
  if(empty($formVal['project_est_ref_nid'])) {
    $estNode = new stdClass();
    $estNode->type = 'project_estimate';
    $estNode->title = $formVal['estimate_name'];
    $estNode->body['und'][0]['value'] = $formVal['comment'];
    $estNode->uid = $user->uid;
    $estNode->language = en;
    $estNode->status = 1; 
    if($formVal['approve_status_previous_approved'] != '') {
      if($formVal['approve-status-drop'] == 'ok') {
        $previousNodeId = $formVal['approve_status_previous_approved'];
        $estimateNodePre = node_load($previousNodeId);
        $estimateNodePre->field_project_estimate_status['und'][0]['value'] = 'pending';   
        node_save($estimateNodePre);
        $estNode->field_project_estimate_status['und'][0]['value'] = 'approved';
      }
      else {
        $estNode->field_project_estimate_status['und'][0]['value'] = 'pending';
      }
    }
    else {
      $estNode->field_project_estimate_status['und'][0]['value'] = $formVal['estimate_status'];
    } 
    $estNode->og_group_ref['und'][0]['target_id'] = $company->nid;
    $estNode->field_project_estimate_amount['und'][0]['value'] = $formVal['estimate_amount']!=''?str_replace(',','',str_replace("$","",$formVal['estimate_amount'])):0;
    $estNode->field_project_installation_type['und'][0]['value'] = $formVal['installation_type'];
    $estNode->field_plan_budget['und'][0]['value'] = $formVal['plan_budget']!=''?str_replace(',','',str_replace("$","",$formVal['plan_budget'])):0;
    $estNode->field_capital_contingency['und'][0]['value'] = $formVal['capital_contingency']!=''?str_replace("%","",$formVal['capital_contingency']):10;
    $estNode->field_estimate_approver['und'][0]['value'] = $formVal['estimate_approver']; 
    $estNode->field_project_reference['und'][0]['nid'] = $formVal['select-estimate'];
    if(arg(1) == 'cm') {
      $estNode->field_product_status['und'][0]['value'] = 'cmtrue';
    }
    else {
      $estNode->field_product_status['und'][0]['value'] = 'cmfalse';
    }
    node_save($estNode);
    if(!empty($formVal['budgetData'])) {
      foreach($formVal['budgetData'] as $budgetKey => $budVal) {
        $node = new stdClass();
        $node->type = 'estimate_detail';
        $node->title = 'estimate detail '.REQUEST_TIME;    
        $node->uid = $user->uid;
        $node->language = en;
        $node->status = 1;  
        $node->og_group_ref['und'][0]['target_id'] = $company->nid;
        $node->field_est_cost_code['und'][0]['value'] = $budVal['cost_code'];
        if($budVal['field_data_status'] == 'HasAmt') {    
          $node->field_est_line_item_amt['und'][0]['value'] = $budVal['line_item_amt']!=''?str_replace(',','',str_replace("$","",$budVal['line_item_amt'])):'';
        }
        else {
          $node->field_conigency_percentage['und'][0]['value'] = $budVal['line_item_per']!=''?str_replace("%","",$budVal['line_item_per']):'';
        } 
        $node->field_conigency_status['und'][0]['value'] = $budVal['field_conigency_status'];
        $node->field_project_reference['und'][0]['nid'] = $formVal['select-estimate'];
        $node->field_estimate_reference['und'][0]['nid'] = $estNode->nid;
        if(arg(1) == 'cm') {
          $node->field_product_status['und'][0]['value'] = 'cmtrue';
       }
       else {
         $node->field_product_status['und'][0]['value'] = 'cmfalse';
       }
       // get total cost code amount based on selected budget  
       $query = db_select('field_data_field_project_reference','pr');
       $query->join('field_data_field_estimate_reference','ed','ed.entity_id=pr.entity_id');
       $query->join('field_data_field_est_line_item_amt' ,'elia', 'elia.entity_id=pr.entity_id');
       if(arg(1) == 'cm') {
         $query->join('field_data_field_product_status‎','ps','ps.entity_id=n.nid');
         $query->condition('ps.field_product_status_value', 'cmtrue', '=');
       }
       $query->addExpression('SUM(elia.field_est_line_item_amt_value)');
       $query->condition('pr.field_project_reference_nid', $formVal['select-estimate'], '=');
       $query->condition('ed.field_estimate_reference_nid',$estNode->nid,'=');
       $query->condition('pr.bundle','estimate_detail','=');
       $query->groupBy('ed.field_estimate_reference_nid');
       $totalLineItemAmout = $query->execute()->fetchField();  
       if($budVal['field_data_status'] == 'HasAmt') {
         $lineItemAmt = preg_replace("/[^0-9]/","",$budVal['line_item_amt']);
         $estimateBudgetTotal = $totalLineItemAmout + $lineItemAmt;  
       }
       else {
         $estimateBudgetTotal = $totalLineItemAmout;
       }
       $nodeEstimate = node_load($estNode->nid);
       $nodeEstimate->field_project_estimate_amount[LANGUAGE_NONE][0]['value'] = $estimateBudgetTotal;
       field_attach_update('node', $nodeEstimate);         
       node_save($node);  
     }   
    }
    drupal_goto('/program/estimates', array('query'=>array('pid'=>$formVal['select-estimate'],'bid' => $estNode->nid)));
    drupal_set_message('New Budget : '.$formVal['estimate_name'].' created successfully!');
  }
  else {
    $estimateNode = node_load($formVal['project_est_ref_nid']);
    $estimateNode->title = $formVal['estimate_name'];
    $estimateNode->body['und'][0]['value'] = $formVal['comment'];
    if($formVal['approve_status_previous_approved'] != '') {
      if($formVal['approve_status_previous_approved'] != $formVal['project_est_ref_nid']) {   
        if($formVal['approve-status-drop'] == 'ok') {
          $previousNodeId = $formVal['approve_status_previous_approved'];
          $estimateNodePre = node_load($previousNodeId);
          $estimateNodePre->field_project_estimate_status['und'][0]['value'] = 'pending';   
          node_save($estimateNodePre);
          $estimateNode->field_project_estimate_status['und'][0]['value'] = 'approved';
        }
    else {
          $estimateNode->field_project_estimate_status['und'][0]['value'] = 'pending';
        }
      }
    }
    else {
      $estimateNode->field_project_estimate_status['und'][0]['value'] = $formVal['estimate_status'];
    } 
    $estimateNode->field_project_estimate_amount['und'][0]['value'] = $formVal['estimate_amount']!=''?str_replace(',','',str_replace("$","",$formVal['estimate_amount'])):0;
    $estimateNode->field_project_installation_type['und'][0]['value'] = $formVal['installation_type'];
    $estimateNode->field_plan_budget['und'][0]['value'] = $formVal['plan_budget']!=''?str_replace(',','',str_replace("$","",$formVal['plan_budget'])):0;
    $estimateNode->field_capital_contingency['und'][0]['value'] = $formVal['capital_contingency']!=''?str_replace("%","",$formVal['capital_contingency']):10;
    $estimateNode->field_estimate_approver['und'][0]['value'] = $formVal['estimate_approver'];  
    if(arg(1) == 'cm') {
      $estimateNode->field_product_status['und'][0]['value'] = 'cmtrue';
    }
    else {
      $estimateNode->field_product_status['und'][0]['value'] = 'cmfalse';
    }
    node_save($estimateNode);
    drupal_goto('/program/estimates', array('query'=>array('pid'=>$formVal['select-estimate'],'bid' => $estimateNode->nid)));
    drupal_set_message('Budget '.$formVal['estimate_name'].' updated successfully!');
  }   
}

function program_modify_estimates_detail_form($form,&$form_state) {
  global $company;  
  drupal_add_js(drupal_get_path('module', 'm6connect_program') . '/js/m6connect_program.js');
  drupal_add_js(drupal_get_path('module', 'm6connect_program') . '/js/Prototype_Price_Format_0.1.js');    
  // For adding new cost code get the 
  // Project id and estimate id Via form state
  $projectId = $form_state['projectId'];
  $estimateNid = $form_state['estimateId'];  
  $formType = '';
  $getEstimateByProject = array();
  if(is_numeric(arg(1))) {
    $projectId = arg(1);
    $getNode = node_load($projectId);
    if($getNode->type == 'project_management') {
      $getEstimateByProject = _project_get_estimate_nodes_ny_project($company->nid, $projectId);
      $formType = 'new';    
    }
    else {
      $formType = 'edit';
    }
  }  
  // Get all estimate list by company
  $getEstimateByCompany = _project_get_estimate_cost_code_list($company->nid);
  $estListByCom = array('0' => '- None -');
  foreach($getEstimateByCompany as $key => $val) {
    $estListByCom[$key] = $val;
  }
  $form['#attached']['js'][] = array(
    'data'=>drupal_get_path('module', 'm6connect_routing') . '/js/routing_type_slip_form.js',
    'type'=>'file'
  );
  $form['#attributes']['class'] = array('program_modify_estimates_detail_form');
  if($formType == 'new') {
    if(!empty($getEstimateByProject)) {   
      $form['select-estimate-details-node'] = array(
        '#type' => 'select',
        '#title'=> 'Select Budget',
        '#options' => $getEstimateByProject,
        '#attributes' => array('class'=> array('form-control')),
        '#default_value' => $estimateNid != ''?$estimateNid:arg(2),
        '#disabled' =>TRUE,
        '#prefix' => '<div class="clearfix"><div class="pull-left form-inline">',
        '#suffix' => '</div></div>',
      );
    }
  }
  else {
    $form['select-estimate-details'] = array(
      '#type' => 'select',
      '#title'=> 'Select Project',
      '#options' => $getEstimateByCompany,
      '#attributes' => array('class'=> array('form-control project-program-sel-details')),
      '#ajax' => array(
        'callback'=> 'change_program_estimate_detail_callback',
        'wrapper' => 'project_estimate_main_container',
        'effect' => 'fade',
      ),
      '#prefix' => '<div class="clearfix" style="display:none;"><div class="pull-left form-inline">',
      '#suffix' => '</div></div>',
    );
  }    
  $form_state['storage_project_estimate_details'] = array();
  if(isset($form_state['values'],$form_state['input'],$form_state['triggering_element'],$form_state['triggering_element']['#type'],$form_state['triggering_element']['#name']) && $form_state['triggering_element']['#type']=='select' && $form_state['triggering_element']['#name']=='select-estimate-details'){
    $triggeringElement = $form_state['triggering_element']; 
    $estimateNode = node_load($triggeringElement['#value']);    
    $form_state['storage_project_estimate_details'] = array(    
      'estimate_cost_code' => $estimateNode->field_est_cost_code['und'][0]['value'],
      'estimate_description' => $estimateNode->field_project_est_description['und'][0]['value'],
      'line_item_amt' => $estimateNode->field_est_line_item_amt['und'][0]['value'],
      'estimate_comments' => $estimateNode->field_project_est_comment['und'][0]['value'],
      'estimate_attachment' => $estimateNode->field_project_est_attachment['und'][0]['fid'],  
    );    
  }    
  $form['main-container']= array(
    '#type' => 'container',
    '#attributes' => array('class'=>array('row')), 
    '#prefix' => '<div class="clearfix"><div id="project_estimate_details_main_container" class="project-detail">',
    '#process' => array('project_estimate_details_main_container_process'), 
  );        
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#submit'=> array('project_estimate_detail_submit'),
    '#value' => 'Save',
    '#attributes' => array('class'=> array('custom-line-item-sub')),
    '#prefix' => '<div class="clearfix">', 
  );  
  $form['close'] = array(
    '#markup' => '&nbsp;&nbsp;' . l('<input type="button" class="btn btn primary form-submit" value="Cancel" />', 'javascript:void(0);', array('external' => TRUE, 'html' => TRUE, 'attributes' => array('class' => array('assign-bid-packages-popup-close'), 'onclick' => 'jQuery("span.popups-close").click();'))),
  '#suffix' => '</div></div></div>',  
  );
  return $form; 
}

function project_estimate_details_main_container_process($element, &$form_state) {
  global $company;  
  drupal_add_js(drupal_get_path('module', 'm6connect_program') . '/js/m6connect_program.js');
  drupal_add_js(drupal_get_path('module', 'm6connect_program') . '/js/Prototype_Price_Format_0.1.js');  
  // Get list of all active cost code
  $query= db_select('node','n'); 
  $query->join('field_data_field_manager_cost_code','mcc','mcc.entity_id = n.nid');
  $query->join('og_membership','om','om.etid=n.nid AND om.entity_type=:entityType', array(':entityType'=>'node'));
  $query->join('field_data_field_cost_code_status','ccs','ccs.entity_id = n.nid');  
  $query->join('field_data_field_cost_code_description','ccd','ccd.entity_id = n.nid');  
  $query->fields('mcc',array('field_manager_cost_code_value')); 
  $query->fields('ccd',array('field_cost_code_description_value'));   
  $query->condition('ccs.field_cost_code_status_value', '1', '=');
  $query->condition('om.gid', $company->nid, '=');
  $query->condition('n.type', 'project_cost_code', '=');
  $getCostCodeData = $query->execute()->fetchAllKeyed(0,1);
  $costCodeList = array();
  foreach($getCostCodeData as $ccKey => $ccVal) {
    $costCodeList[$ccKey] = $ccKey.' - '.$ccVal;
  }  
  // =================================  
  $defaultValues = $form_state['storage_project_estimate_details'];
  $element['main-container']['full-container']= array(
    '#type' => 'container',
    '#attributes' => array('class'=>array('col-md-12','col-sm-12','col-xs-12','project-details-full','margin-bottom-10')),
  );    
  $element['main-container']['full-container']['project_ref_nid']= array(
    '#type' => 'hidden',
    '#title_display' => 'invisible',
    '#attributes' => array('class'=> array('form-control project_ref_nid')),  
  ); 
  $element['main-container']['full-container']['line_item_contigency_status']= array(
    '#type' => 'hidden',
  '#title_display' => 'invisible',
  '#attributes' => array('class'=> array('form-control line_item_contigency_status')),  
  ); 
  $element['main-container']['left-container']['project_est_details_nid']= array(
    '#type' => 'hidden',
  '#title_display' => 'invisible',
  '#attributes' => array('class'=> array('form-control project_est_details_nid')),
  '#default_value' => is_numeric(arg(1))?arg(1):'',
  );
  $element['main-container']['full-container']['estimate_cost_code']= array(
    '#type' => 'select',
  '#title' => 'Cost Code',
  '#options'=> $costCodeList, 
  '#empty_option' => '- Select -',
  '#attributes' => array('class'=> array('form-control estimate_cost_code')),
  '#default_value' => isset($defaultValues['estimate_cost_code'])?$defaultValues['estimate_cost_code']:'',  
  '#prefix' => '<div class="clearfix form-item">',
  '#suffix' => '</div>',
  );   
  $element['main-container']['full-container']['estimate_description']= array(
    '#type' => 'textfield',
  '#title' => 'Description',
  '#attributes' => array('class'=> array('form-control estimate_description')),
  '#default_value' => isset($defaultValues['estimate_description'])?$defaultValues['estimate_description']:'',
  );   
  
  $element['main-container']['full-container']['contigency']= array(
    '#type' => 'container',
  '#attributes' => array('class'=> array('contigency','row','clearfix')),
  ); 
  
  $element['main-container']['full-container']['contigency']['left-container']= array(
    '#type' => 'container',
  '#attributes' => array('class'=>array('col-md-6','col-sm-12','col-xs-12','project-details-full','margin-bottom-10')),
  ); 
  $element['main-container']['full-container']['contigency']['middle-container']= array(
    '#type' => 'container',
  '#attributes' => array('class'=>array('col-md-1','col-sm-12','col-xs-12','project-details-full','margin-bottom-10')),
  ); 
  $element['main-container']['full-container']['contigency']['right-container']= array(
    '#type' => 'container',
  '#attributes' => array('class'=>array('col-md-5','col-sm-12','col-xs-12','project-details-full','margin-bottom-10')),
  );  
  
  $element['main-container']['full-container']['line_item_amt']= array(
    '#type' => 'textfield',
  '#title' => 'Line Item Amount',
  '#attributes' => array('class'=> array('form-control line_item_amt')),
  '#default_value' => isset($defaultValues['line_item_amt'])?$defaultValues['line_item_amt']:'',
  );  
  $element['main-container']['full-container']['contigency']['left-container']['line_item_amt_contgency']= array(
    '#type' => 'textfield',
  '#title' => 'Line Item Amount',
  '#attributes' => array('class'=> array('form-control line_item_amt_contgency')),
  '#default_value' => isset($defaultValues['line_item_amt_contgency'])?$defaultValues['line_item_amt_contgency']:'',
  '#weight' => 3,
  '#prefix' => '<div class="budget-contigency-section" style="display:none;">',
  '#suffix' => '</div>',
  );  
  $element['main-container']['full-container']['contigency']['middle-container']['between-contigency'] = array(
    '#markup' => '<div>&nbsp;</div><div>&nbsp;</div><h5>OR</h5>',
  '#prefix' => '<div class="budget-contigency-section" style="display:none;">',
  '#suffix' => '</div>',
  );
  $element['main-container']['full-container']['contigency']['right-container']['line_item_per_contgency']= array(
    '#type' => 'textfield',
  '#title' => 'Allow Percentage',
  '#attributes' => array('class'=> array('form-control line_item_per_contgency')),
  '#default_value' => isset($defaultValues['line_item_per_contgency'])?$defaultValues['line_item_per_contgency']:'',
  '#weight' => 4,
  '#prefix' => '<div class="budget-contigency-section" style="display:none;">',
  '#suffix' => '</div>',
  );  
  $element['main-container']['full-container']['estimate_comments']= array(
    '#type' => 'textarea',
  '#title' => 'Comment',
  '#attributes' => array('class'=> array('form-control estimate_comments')),
  '#default_value' => isset($defaultValues['estimate_comments'])?strip_tags($defaultValues['estimate_comments']):'',
  '#weight' => 5,
  );    
  $element['main-container']['full-container']['estimate_attachment']= array(
    '#type' => 'file',
  '#title' => 'Attachment',
  '#upload_location' => 'public://',
  '#field_prefix' => '<div class="image-preview-est-attach"></div>',
  '#default_value' => isset($defaultValues['estimate_attachment'])?$defaultValues['estimate_attachment']:'',
  '#weight' => 6,
  );
  return $element;
}

function change_program_estimate_detail_callback($form,&$form_state){
  $commands = array();
  $triggeringElement = $form_state['triggering_element'];  
  if(!empty($triggeringElement['#value'])) {
  $estimateNode = node_load($triggeringElement['#value']);            
  if(isset($estimateNode->field_conigency_status['und'])) {
    if($estimateNode->field_conigency_status['und'][0]['value'] == 'TRUE') {
      $storage_project = array(
        'estimate_cost_code' => $estimateNode->field_est_cost_code['und'][0]['value'],
        'estimate_description' => $estimateNode->field_project_est_description['und'][0]['value'],
      'line_item_per' => $estimateNode->field_conigency_percentage['und'][0]['value'],
        'line_item_amt_con' => $estimateNode->field_est_line_item_amt['und'][0]['value'],
        'estimate_comments' => strip_tags($estimateNode->field_project_est_comment['und'][0]['value']),
        'estimate_attachment' => isset($estimateNode->field_project_est_attachment['und'])?$estimateNode->field_project_est_attachment['und'][0]['uri']:'',
      'field_conigency_status' => 'TRUE',
      );
    }
    else {
      $storage_project = array(
        'estimate_cost_code' => $estimateNode->field_est_cost_code['und'][0]['value'],
        'estimate_description' => $estimateNode->field_project_est_description['und'][0]['value'],
        'line_item_amt' => $estimateNode->field_est_line_item_amt['und'][0]['value'],
        'estimate_comments' => strip_tags($estimateNode->field_project_est_comment['und'][0]['value']),
        'estimate_attachment' => isset($estimateNode->field_project_est_attachment['und'])?$estimateNode->field_project_est_attachment['und'][0]['uri']:'',
      'field_conigency_status' => 'FALSE',
      );
    }
  }
  
  if($storage_project['line_item_per'] != '') {   
    $commands[] = ajax_command_invoke("input.line_item_per_contgency", 'val',array($storage_project['line_item_per']));
    $commands[] = ajax_command_css('.budget-contigency-section', array('display' => 'block'));
    $commands[] = ajax_command_css('.form-item-line-item-amt', array('display' => 'none'));
  }
  if($storage_project['line_item_amt_con'] != '') {   
    $commands[] = ajax_command_invoke("input.line_item_amt_contgency", 'val',array($storage_project['line_item_amt_con']));
    $commands[] = ajax_command_css('.budget-contigency-section', array('display' => 'block'));
    $commands[] = ajax_command_css('.form-item-line-item-amt', array('display' => 'none'));   
  }   
  $commands[] = ajax_command_invoke("input.line_item_contigency_status", 'val',array($storage_project['field_conigency_status']));  
  $commands[] = ajax_command_invoke("select.estimate_cost_code", 'val',array($storage_project['estimate_cost_code']));  
  $commands[] = ajax_command_invoke("input.estimate_description", 'val',array($storage_project['estimate_description'])); 
  $commands[] = ajax_command_invoke("input.line_item_amt", 'val',array($storage_project['line_item_amt'])); 
  $commands[] = ajax_command_invoke("input.line_item_amt", 'trigger',array('keyup')); 
  $commands[] = ajax_command_invoke("input.line_item_per_contgency", 'trigger',array('keyup')); 
  $commands[] = ajax_command_invoke("input.line_item_amt_contgency", 'trigger',array('keyup')); 
  $commands[] = ajax_command_invoke("textarea.estimate_comments", 'val',array($storage_project['estimate_comments']));  
  if($storage_project['estimate_attachment'] != '') {
    $attachImg = '<img src="'.image_style_url('thumbnail', $storage_project['estimate_attachment']).'">'; 
    $commands[] = ajax_command_html(".image-preview-est-attach", $attachImg.'<p>&nbsp;</p>');   
  }
  }
  else{
  $commands[] = ajax_command_invoke("select.estimate_cost_code", 'val',array(''));  
  $commands[] = ajax_command_invoke("input.estimate_description", 'val',array('')); 
  $commands[] = ajax_command_invoke("input.line_item_amt", 'val',array(''));  
  $commands[] = ajax_command_invoke("textarea.estimate_comments", 'val',array('')); 
  $commands[] = ajax_command_invoke("input.line_item_per_contgency", 'val',array(''));  
  $commands[] = ajax_command_invoke("input.line_item_contigency_status", 'val',array(''));  
  }
  return array('#type' => 'ajax', '#commands' => $commands);
}

function program_modify_estimates_detail_form_validate($form, &$form_state) {
  if($_FILES['files']['name']['estimate_attachment'] != '') {
    $file = file_save_upload('estimate_attachment', array(
      //'file_validate_is_image' => array(),
      'file_validate_extensions' => array('jpg jpeg gif png txt doc docx xls xlsx pdf ppt pptx pps ppsx odt ods odp mp3 mov mp4 m4a m4v mpeg avi ogg oga ogv weba webp webm html csv xls'),
  ));
  if ($file) {    
    if ($file = file_move($file, 'public://')) {
    $form_state['values']['estimate_attachment'] = $file;
      } 
  }
  }
}

function project_estimate_detail_submit(&$form, &$form_state) {  
  //echo  '<pre>';  print_r($form_state['values']);  die;
  global $user; 
  global $company;
  $formVal = $form_state['values'];      
  if(isset($formVal['select-estimate-details-node'])) {
    // Treat as new cost code node    
    $node = new stdClass();
    $node->type = 'estimate_detail';
    $node->title = 'estimate detail '.REQUEST_TIME;    
  $node->uid = $user->uid;
  $node->language = en;
  $node->status = 1;  
  $node->og_group_ref['und'][0]['target_id'] = $company->nid;
  $node->field_est_cost_code['und'][0]['value'] = $formVal['estimate_cost_code'];
  $node->field_project_est_description['und'][0]['value'] = $formVal['estimate_description'];
  if($formVal['line_item_amt'] != '') {
    $node->field_est_line_item_amt['und'][0]['value'] = $formVal['line_item_amt']!=''?str_replace(',','',str_replace("$","",$formVal['line_item_amt'])):'';  
  }
  else if($formVal['line_item_amt_contgency'] != '' && $formVal['line_item_per_contgency'] == '') {   
    $node->field_est_line_item_amt['und'][0]['value'] = $formVal['line_item_amt_contgency']!=''?str_replace(',','',str_replace("$","",$formVal['line_item_amt_contgency'])):'';
  }
  else {
    $node->field_conigency_percentage['und'][0]['value'] = $formVal['line_item_per_contgency']!=''?str_replace("%","",$formVal['line_item_per_contgency']):'';
  } 
  $node->field_conigency_status['und'][0]['value'] = $formVal['line_item_contigency_status'];
  $node->field_project_est_comment['und'][0]['value'] = $formVal['estimate_comments'];
  $node->field_project_reference['und'][0]['nid'] = $formVal['project_ref_nid'];
  $node->field_estimate_reference['und'][0]['nid'] = $formVal['select-estimate-details-node'];
  $file_arr = (array)file_load($formVal['estimate_attachment']->fid);
    $file_arr['display'] = 1;
  $node->field_project_est_attachment['und'][0] = $file_arr;
  // get total cost code amount based on selected budget  
    $query= db_select('field_data_field_project_reference','pr');
    $query->join('field_data_field_estimate_reference','ed','ed.entity_id=pr.entity_id');
    $query->join('field_data_field_est_line_item_amt' ,'elia', 'elia.entity_id=pr.entity_id');
    $query->addExpression('SUM(elia.field_est_line_item_amt_value)');
    $query->condition('pr.field_project_reference_nid', $formVal['project_ref_nid'], '=');
    $query->condition('ed.field_estimate_reference_nid',$formVal['select-estimate-details-node'],'=');
    $query->condition('pr.bundle','estimate_detail','=');
    $query->groupBy('ed.field_estimate_reference_nid');
    $totalLineItemAmout = $query->execute()->fetchField();  
  if($formVal['line_item_amt']!= '') {
    $lineItemAmt = preg_replace("/[^0-9-]/","",$formVal['line_item_amt']);
    $estimateBudgetTotal = $totalLineItemAmout + $lineItemAmt;  
  }
  else {
    $estimateBudgetTotal = $totalLineItemAmout;
  }
  $nodeEstimate = node_load($formVal['select-estimate-details-node']);
    $nodeEstimate->field_project_estimate_amount[LANGUAGE_NONE][0]['value'] = $estimateBudgetTotal;
    field_attach_update('node', $nodeEstimate);         
  node_save($node);     
  if((isset($form_state['ajax']))?(($form_state['ajax']==1)?true:false):false) {
      $form_state['ajax_commands'][] = ctools_modal_command_dismiss();    
    $form_state['ajax_commands'][] = ajax_command_invoke(".project-program-sel-est-details", 'trigger',array('change'));
    $form_state['ajax_commands'][] = ajax_command_html("#programe-estimate-listing-by-project", get_estimate_listing_table_data($formVal['project_ref_nid']));
    $form_state['ajax_commands'][] = ajax_command_html("#programe-estimate-cost-code", estimate_budget_details_content($formVal['select-estimate-details-node']));
    $form_state['ajax_commands'][] = ajax_command_invoke("table.m6connect-program-estimate-table-main-estimate tr.estimate-tr", 'removeClass',array('bg-info'));
    $form_state['ajax_commands'][] = ajax_command_invoke("table.m6connect-program-estimate-table-main-estimate tr.estimate-tr-".$formVal['select-estimate-details-node'], 'removeClass',array('odd'));  
    $form_state['ajax_commands'][] = ajax_command_invoke("table.m6connect-program-estimate-table-main-estimate tr.estimate-tr-".$formVal['select-estimate-details-node'], 'removeClass',array('even')); 
    $form_state['ajax_commands'][] = ajax_command_invoke("table.m6connect-program-estimate-table-main-estimate tr.estimate-tr-".$formVal['select-estimate-details-node'], 'addClass',array('bg-info')); 
    }
    else {
      $form_state['redirect'] = 'program/estimates'; 
    }
  }
  else {  
    $costCodeNode = node_load($formVal['project_est_details_nid']);
  $getEstId = $costCodeNode->field_estimate_reference['und'][0]['nid'];
  $costCodeNode->field_est_cost_code['und'][0]['value'] = $formVal['estimate_cost_code'];
  $costCodeNode->field_project_est_description['und'][0]['value'] = $formVal['estimate_description'];
  $amt = str_replace("$","",$formVal['line_item_amt']);
  $amtCont = str_replace("$","",$formVal['line_item_amt_contgency']);
  $per = str_replace("%","",$formVal['line_item_per_contgency']);
  if($amt != '') {
    $costCodeNode->field_est_line_item_amt['und'][0]['value'] = $formVal['line_item_amt']!=''?str_replace(',','',$amt):'';  
  }
  else if($amtCont != '' && $per == '') {   
    $costCodeNode->field_est_line_item_amt['und'][0]['value'] = $formVal['line_item_amt_contgency']!=''?str_replace(',','',$amtCont):'';
  }
  else {
    $costCodeNode->field_conigency_percentage['und'][0]['value'] = $formVal['line_item_per_contgency']!=''?$per:'';
  } 
  $costCodeNode->field_conigency_status['und'][0]['value'] = $formVal['line_item_contigency_status'];   
  $costCodeNode->field_project_est_comment['und'][0]['value'] = $formVal['estimate_comments'];    
  $file_arr = (array)file_load($formVal['estimate_attachment']->fid);
    $file_arr['display'] = 1;
  $costCodeNode->field_project_est_attachment['und'][0] = $file_arr;  
  // get total cost code amount based on selected budget  
    $query= db_select('node','n');  
  $query->join('field_data_field_project_reference' ,'pr', 'pr.entity_id=n.nid'); 
    $query->join('field_data_field_estimate_reference','ed','ed.entity_id=pr.entity_id');
    $query->join('field_data_field_est_line_item_amt' ,'elia', 'elia.entity_id=pr.entity_id');  
  $query->join('field_data_field_conigency_status','cs','cs.entity_id=pr.entity_id');
    $query->addExpression('SUM(elia.field_est_line_item_amt_value)');
    $query->condition('pr.field_project_reference_nid', $formVal['project_ref_nid'], '=');
    $query->condition('ed.field_estimate_reference_nid',$getEstId,'=');
  $query->condition('cs.field_conigency_status_value','FALSE','=');
  $query->condition('n.nid',$formVal['project_est_details_nid'],'!=');
    $query->condition('pr.bundle','estimate_detail','=');
    $query->groupBy('ed.field_estimate_reference_nid');
    $totalLineItemAmout = $query->execute()->fetchField();
  if($formVal['line_item_amt']!= '') {
    $lineItemAmt = preg_replace("/[^0-9-]/","",$formVal['line_item_amt']);
    $estimateBudgetTotal = $totalLineItemAmout + $lineItemAmt;  
  }
  else {
    $estimateBudgetTotal = $totalLineItemAmout;
  }
  $nodeEstimate = node_load($getEstId);
    $nodeEstimate->field_project_estimate_amount[LANGUAGE_NONE][0]['value'] = $estimateBudgetTotal;
    field_attach_update('node', $nodeEstimate); 
  node_save($costCodeNode); 
  if((isset($form_state['ajax']))?(($form_state['ajax']==1)?true:false):false) {
    $form_state['ajax_commands'][] = ajax_command_invoke(".project-program-sel-est-details", 'trigger',array('change'));  
    $form_state['ajax_commands'][] = ajax_command_html("#programe-estimate-listing-by-project", get_estimate_listing_table_data($costCodeNode->field_project_reference['und'][0]['nid']));  
      $form_state['ajax_commands'][] = ctools_modal_command_dismiss();      
    $form_state['ajax_commands'][] = ajax_command_html("#programe-estimate-cost-code", estimate_budget_details_content($getEstId));     
    $form_state['ajax_commands'][] = ajax_command_invoke("table.m6connect-program-estimate-table-main-estimate tr.estimate-tr", 'removeClass',array('bg-info'));
    $form_state['ajax_commands'][] = ajax_command_invoke("table.m6connect-program-estimate-table-main-estimate tr.estimate-tr-".$getEstId, 'removeClass',array('odd')); 
    $form_state['ajax_commands'][] = ajax_command_invoke("table.m6connect-program-estimate-table-main-estimate tr.estimate-tr-".$getEstId, 'removeClass',array('even'));  
    $form_state['ajax_commands'][] = ajax_command_invoke("table.m6connect-program-estimate-table-main-estimate tr.estimate-tr-".$getEstId, 'addClass',array('bg-info'));  
    }
    else {
      $form_state['redirect'] = 'program/estimates'; 
    }
  }  
}

function get_estimate_budget_listing_table_data($prjectId=0) {    
  global $company;
  setlocale(LC_MONETARY, 'en_US');
  drupal_add_js(drupal_get_path('module', 'm6connect_program') . '/js/m6connect_program.js');
  $getEstimateByCompany = _project_list_by_company($company->nid, 'estimate_detail');     
  $rows = array();
  $header = array(
    //array('data'=>'Budget Name','class'=>array('text-center')), 
  array('data'=>'Cost Code and Description','class'=>array('text-center')),
  array('data'=>'Line Item Amount','class'=>array('text-center')),
  array('data'=>'Line Item Amount Total','class'=>array('text-center')),
  array('data'=>'Action','class'=>array('text-center')),
  );    
  $query= db_select('field_data_field_project_reference','pr');
  $query->join('field_data_field_estimate_reference','ed','ed.entity_id=pr.entity_id');
  $query->join('node','es_node','es_node.nid=ed.field_estimate_reference_nid');
  $query->fields('pr', array('entity_id'));
  $query->addField('es_node','nid','es_node_nid');
  $query->addField('es_node','title','es_node_title');
  $query->condition('pr.field_project_reference_nid', $prjectId, '=');
  $query->condition('pr.bundle','estimate_detail','=');
  $getEstimateNid = $query->execute()->fetchAll(); 
  $lineAmoutTotal =$lineAmoutTotal;
  $rowsByEstimate = array();
  if(!empty($getEstimateNid)){    
  foreach($getEstimateNid as $estId => $estVal){
    $estimateNode = node_load($estVal->entity_id);  
    $costCode = isset($estimateNode->field_est_cost_code['und'])?$estimateNode->field_est_cost_code['und'][0]['value']:'- None -';
    $estDesc = isset($estimateNode->field_project_est_description['und'])?$estimateNode->field_project_est_description['und'][0]['value']:'- None -';
    $lineAmt = isset($estimateNode->field_est_line_item_amt['und'])?$estimateNode->field_est_line_item_amt['und'][0]['value']:'$0.00';
    $estComment = isset($estimateNode->field_project_est_comment['und'])?$estimateNode->field_project_est_comment['und'][0]['value']:'- None -';      
    $estimateRef = isset($estimateNode->field_estimate_reference['und'])?$estimateNode->field_estimate_reference['und'][0]['nid']:'';
    if($estimateRef != '') {
      $estimateName = node_load($estimateRef)->title;
    }
    else {
      $estimateName = 'None';
    }
    $estmateNid = $estimateNode->nid;         
    $action = '<div class="project-action">
            <div class="btn-group"><div class="dropdown">
              <button id="dLabel" class="btn btn-success" type="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"> Actions</button>
          <ul class="dropdown-menu" role="menu" aria-labelledby="dLabel">
          <li>'.l('Edit','edit-est-details/'.$estmateNid.'/nojs',array('attributes' => array('class' => 'ctools-modal-assign-dashboard-popup-style ctools-use-modal edit-estmate-details', 'for' => $estmateNid))).'</li>
          <li>'.l('Delete', url('node-delete/nojs/'.$estmateNid), array( 'external'=>TRUE, 'attributes'=> array('class'=>array('use-ajax ctools-modal-assign-dashboard-popup-style ctools-use-modal'))) ).'</li>
          </ul>
          </div></div></div>';

    if(!isset($lineAmoutTotal[$estVal->es_node_nid])){
    $lineAmoutTotal[$estVal->es_node_nid] =0;  
    }
    $lineAmoutTotal[$estVal->es_node_nid] += (isset($estimateNode->field_est_line_item_amt['und']) && !empty($estimateNode->field_est_line_item_amt['und'][0]['value']))?$estimateNode->field_est_line_item_amt['und'][0]['value']:0;
    //$rows[] = array($costCode.' | '.$estDesc,$lineAmt,$action);
    $rowsByEstimate[$estVal->es_node_nid][] = array($costCode.' - '.$estDesc,'$'.number_format($lineAmt,2),$action); 
  }
  }
  $rows= array();
  $rowClass = 'custom-even';
  foreach($rowsByEstimate as $estimateId => $estimateRows){
  $rowConut = count($estimateRows);
  $rowClass = ($rowClass=='custom-even')?'custom-odd':'custom-even';
  foreach($estimateRows as $index => $esrow){
    if($index== 0){
    $rows[] = array(
      'data' => array(
        array('data'=>$esrow[0]),
      array('data'=>$esrow[1]),
      array('data'=>'$'.number_format($lineAmoutTotal[$estimateId],2),'rowspan'=>$rowConut),
      array('data'=>$esrow[2]),
      ),
      'class' => array($rowClass),
    );  
    }else{
     $rows[] = array(
      'data' => array(
        array('data'=>$esrow[0]),
      array('data'=>$esrow[1]),
      array('data'=>$esrow[2]),
      ),
      'class' => array($rowClass),
    );  
    }
  }
  }
  return theme('table', array('header'=>$header,'rows'=>$rows,'empty'=>'No Budget created yet','attributes'=>array('class'=>array('table','m6connect-custom-table','m6connect-custom-program-table','m6connect-remove-vertical-top','m6connect-program-estimate-table-cost-code','table-hover','table-bordered','text-center'))));
}

// Generating Estimate records data table
function get_estimate_listing_table_data($projectId=0){
  global $company;
  drupal_add_js(drupal_get_path('theme', 'm6connect') . '/js/jquery.dataTables.min.js');
  drupal_add_css(drupal_get_path('theme', 'm6connect') . '/css/jquery.dataTables.min.css');
  setlocale(LC_MONETARY, 'en_US');
  $getEstimateByCompany = _project_list_by_company($company->nid, 'project_estimate');
  $query= db_select('field_data_field_project_reference','pr');
  $query->fields('pr', array('entity_id'));
  $query->condition('pr.field_project_reference_nid', $projectId, '=');
  $query->condition('pr.bundle','project_estimate','=');
  $getEstimateNid = $query->execute()->fetchAll();    
  $rows = array();
  $header = array( 
  array('data'=>'Budget Name','class'=>array('text-left')),
  array('data'=>'Budget Status','class'=>array('text-left')),
  array('data'=>'Installation Type','class'=>array('text-left')),
  //array('data'=>'Contingency','class'=>array('text-center')),
  array('data'=>'Plan Budget','class'=>array('text-center')),
  array('data'=>'Total Budget','class'=>array('text-center')),
  array('data'=>'Action','class'=>array('text-center','no-sort')),
  );
  if(!empty($getEstimateNid)){
  foreach($getEstimateNid as $estId => $estVal){
    $estimateNode = node_load($estVal->entity_id);  
    $estStatus = isset($estimateNode->field_project_estimate_status['und'])?$estimateNode->field_project_estimate_status['und'][0]['value']:'None';
    $capitalContigency = isset($estimateNode->field_capital_contingency['und'])?$estimateNode->field_capital_contingency['und'][0]['value']:'10';
    if(isset($estimateNode->field_project_installation_type['und']) && $estimateNode->field_project_installation_type['und'][0]['value'] != '') {   
    $estInstallationType = $estimateNode->field_project_installation_type['und'][0]['value'];  
    }
    else {
    $estInstallationType = 'None';  
    }
    if(isset($estimateNode->field_capital_contingency['und']) && $estimateNode->field_capital_contingency['und'][0]['value'] != '') {   
    $estCCPer = number_format($estimateNode->field_capital_contingency['und'][0]['value'], 2, '.', '').' %';
    }
    else {
    $estCCPer = '0.00%';  
    }
    if(isset($estimateNode->field_plan_budget['und']) && $estimateNode->field_plan_budget['und'][0]['value'] != '') {   
    $estPlanBudget = '$'.number_format($estimateNode->field_plan_budget['und'][0]['value'],2);
    }
    else {
    $estPlanBudget = '$0.00';
    }
    $query= db_select('field_data_field_project_reference','pr');
      $query->join('field_data_field_estimate_reference','ed','ed.entity_id=pr.entity_id');
      $query->join('field_data_field_est_line_item_amt' ,'elia', 'elia.entity_id=pr.entity_id');
    $query->join('field_data_field_conigency_status','cs','cs.entity_id=pr.entity_id');
      $query->addExpression('SUM(elia.field_est_line_item_amt_value)');
      $query->condition('pr.field_project_reference_nid', $projectId, '=');
      $query->condition('ed.field_estimate_reference_nid',$estimateNode->nid,'=');
    $query->condition('cs.field_conigency_status_value','FALSE','=');
      $query->condition('pr.bundle','estimate_detail','=');
      $query->groupBy('ed.field_estimate_reference_nid');
      $totalLineItemAmout = $query->execute()->fetchField();
    if(!empty($totalLineItemAmout)) {
      $estEstimateAmt = '$'.number_format($totalLineItemAmout,2);
    }
    else {
      $estEstimateAmt = '';
    }  
    
    // ===== Get total budget by contigengy ==== //
    $query= db_select('node','n');
      $query->join('field_data_field_estimate_reference','ed','ed.entity_id=n.nid');
      $query->join('field_data_field_conigency_status','cs','cs.entity_id=n.nid');
      $query->fields('ed', array('entity_id'));
      $query->condition('ed.field_estimate_reference_nid', $estimateNode->nid, '=');
      $query->condition('cs.field_conigency_status_value','TRUE','=');
      $query->condition('ed.bundle','estimate_detail','=');
      $getEstimateNidContigency = $query->execute()->fetchAll();
    $finalBudget = $totalLineItemAmout;
    if(!empty($getEstimateNidContigency)) {
    $finalAMTTotal  = 0;
      foreach($getEstimateNidContigency as $contiKey => $contiVal) {
        $contigencyNode = node_load($contiVal->entity_id);
        $getConPerTotal = 0;
        $getConAmtTotal = 0;
        if(isset($contigencyNode->field_conigency_percentage['und'])) {
          $getConPerTotal = $contigencyNode->field_conigency_percentage['und'][0]['value'];
        }
        else {
          $getConAmtTotal = $contigencyNode->field_est_line_item_amt['und'][0]['value'];
        }
        if($getConAmtTotal != 0) {    
        $finalAMTTotal += $getConAmtTotal; 
        }
        if($getConPerTotal != 0) {      
          $percent = ($totalLineItemAmout * $getConPerTotal)/100;     
        $finalAMTTotal += $percent;     
        }
      }   
      $finalBudget = $totalLineItemAmout + $finalAMTTotal;
    }  
    $action = '<div class="project-action">
            <div class="btn-group">
            <div class="dropdown">
            <button id="dLabel" class="btn btn-success" type="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"> Actions</button>
              <ul class="dropdown-menu" role="menu" aria-labelledby="dLabel">
              <li>'.get_current_project_id($projectId,$estimateNode->nid).'</li>
              <li>'.l('Edit','edit/'.$estimateNode->nid,array('attributes' => array('class' => 'edit-est', 'for' => $estimateNode->nid))).'</li>
              <li>'.l('Delete', url('node-delete/nojs/'.$estimateNode->nid), array( 'external'=>TRUE, 'attributes'=> array('class'=>array('use-ajax ctools-modal-assign-dashboard-popup-style ctools-use-modal'))) ).'</li>
            </ul></div></div>';           
    
    $rows[] = array(
      'data' => array(
      array('data'=>l(ucwords($estimateNode->title), 'load-est-budget/'.$estimateNode->nid.'/nojs?total='.$totalBudget, array('attributes' => array('class' => array('use-ajax'),'id'=>'estimate-td-'.$estimateNode->nid))), 'class' => array('text-left','est-load-budget')),
      array('data' => ucwords($estStatus), 'class' => array('text-left')),
      array('data' => ucwords($estInstallationType), 'class' => array('text-left')),
      //array('data' => number_format($estCCPer, 2, '.', '').' %'),
      array('data' => $estPlanBudget,'class' => array('text-right')),
      array('data'=>'$'.number_format($finalBudget,2),'class' => array('text-right')),
      array('data'=>$action),
    ),
    'class' => array('estimate-tr-'.$estimateNode->nid,'estimate-tr', 'custom-odd'),
    );
    
  } 
  }
  return theme('table', array('header'=>$header,'rows'=>$rows,'empty'=>'No Budget created yet','attributes'=>array('class'=>array('table','m6connect-custom-program-table','m6connect-program-estimate-table-main-estimate','table-hover','table-bordered','text-center')))); 
}


// =================================
// End Estimates Slide (Tab) Section
// =================================
// Start Commitments slide (Tab)Section
// ====================================
function program_project_commitments_content(){
  global $company;    
  $getCommitmentProjectByCompany = _project_list_by_company($company->nid, 'project_management');   
  $commitmentProject = key($getCommitmentProjectByCompany);  
  $getCommitementByCompany = _project_commitment_list_by_company($company->nid);  
  $firstProject = key( $getCommitementByCompany);  
  $elements = array();
  $elements['commitment_form']= array(
    '#markup' => drupal_render(drupal_get_form('program_modify_commitment_form')),
    '#prefix' => '<div class="clearfix margin-bottom-10">',
    '#suffix' => '</div>',
  ); 
  $elements['prgram-commitment-listing'] = array(
    '#markup' => get_commitment_listing_table_data(),
    '#prefix' => '<div class="clearfix"><div class="prgram-commitment-listing" id="programe-commitment-details">',
    '#suffix' => '</div></div>',
  ); 
  return $elements;
}

function program_modify_commitment_form($form,&$form_state){
  global $user;
  global $company;  
  drupal_add_js(drupal_get_path('module', 'm6connect_program') . '/js/m6connect_program.js');
  drupal_add_js(drupal_get_path('module', 'm6connect_program') . '/js/Prototype_Price_Format_0.1.js');
  // Get project estimate list by company     
  $getCommitementByCompany = _project_commitment_list_by_company($company->nid);  
  $getProjectByCompany = _project_list_by_company($company->nid, 'project_management');   
  drupal_add_js(drupal_get_path('module', 'm6connect_program') . '/js/jquery.multiselect.js');
  drupal_add_css(drupal_get_path('module', 'm6connect_program') . '/js/jquery.multiselect.css');
  // Commitment number calculation
  $currentYear = date('Y');
  $myCounter = variable_get('CommitmentNumber');
  $makeSr = str_pad($myCounter + 1, 6, "0", STR_PAD_LEFT);
  $commitmentNumber = 'COM'.$makeSr.'-'.$currentYear;  
  
  // Generating vendor number
  $currentYear = date('Y');
  $myCounter = variable_get('vendorNumber');  
  $makeSr = str_pad($myCounter + 1, 6, "0", STR_PAD_LEFT);
  $vendorNumber = 'VEN'.$makeSr.'-'.$currentYear;
  
  $form['#attached']['js'][] = array(
    'data'=>drupal_get_path('module', 'm6connect_routing') . '/js/routing_type_slip_form.js',
  'type'=>'file'

  );    
  $form['#attributes']['enctype'] = "multipart/form-data";
  $form['#attributes']['class'] = array('program_modify_commitment_form');
  if(empty($form_state['commitmentNumber'])){
    $form_state['commitmentNumber'] = $commitmentNumber;  
  }
  $form['estimate-nodata-dialog']= array(
    '#markup' => '',
  '#prefix' => '<div id="po-item-nodata-dialog">',
  '#suffix' => '</div>',
  );  
  if(isset($_GET['pid'])) {
    if($_SESSION['ACTIVEPROJECT'] != check_plain($_GET['pid'])) {
      drupal_goto('program/commitments');
    }
  }
  if(isset($_GET['pid'])) {
    $defaultPro = check_plain($_GET['pid']);
  }
  else if(isset($_SESSION['ACTIVEPROJECT'])) {
    $defaultPro = $_SESSION['ACTIVEPROJECT'];
  }
  else {
    $defaultPro = '';
  }
  $form['select-commitment'] = array(
    '#type' => 'select',
    '#title'=> 'Select Project',
    '#options' => $getProjectByCompany,
    '#default_value' => $defaultPro,
    '#attributes' => array('class'=> array('form-control project-program-commitment-sel')),
    '#ajax' => array(
      'callback'=> 'change_program_commitment_callback',
      'wrapper' => 'project_commitment_main_container',
      'effect' => 'fade',
    ),
    '#prefix' => '<div class="clearfix"><div class="pull-left form-inline" style="width:334px;">',
    '#suffix' => '</div><div id="commitment-total-main" style="float:left"></div><div class="add-new-commitment-btn pull-right" id="add-commitment-button-custom">'. l('<input type="button" value="Add New Commitment" class="form-submit new-record-cus-btn" />', '#', array('html' => TRUE, 'external' => TRUE, 'attributes' => array('class' => array('new-commitment-link')))).''.l('<input type="button" value="Reset Settings" class="form-submit new-record-reset-setting-btn" />', '/reseting/commit/nojs', array('html' => TRUE, 'external' => TRUE, 'attributes' => array('class' => array('new-reset-setting-link', 'use-ajax')))).'</div></div>',
  );
  $form['get-commitment'] = array(
    '#type' => 'select',
  '#title'=> 'Select Project',
  '#options' => $getCommitementByCompany,
  '#default_value' => isset($_GET['cid'])?check_plain($_GET['cid']):0,
  '#attributes' => array('class'=> array('form-control project-program-sel-commitment')),
  '#ajax' => array(
    'callback'=> 'change_program_commitment_callback',
    'wrapper' => 'project_commitment_main_container',
    'effect' => 'fade',
  ),
  '#prefix' => '<div class="clearfix" style="display:none;"><div class="pull-left form-inline">',
  '#suffix' => '</div></div>',
  ); 
  $form['prgram-project-menu-items'] = array(
    '#markup' => program_project_menu_links_content(),
  '#prefix' => '<div class="clearfix">',
  '#suffix' => '</div>',
  );          
  $form_state['storage_commitment_project'] = array();
  if($form_state['triggering_element']['#name'] == 'commitment_for_etc'){ 
    $etcIdsArr = array();  
  $triggeringElement = $form_state['triggering_element'];
  $previousData = $form_state['po_storage_default_value'];
  $itemCount = 1;
  $form_state['invite_m6_storage'] = array();
  $getIds = array_values($triggeringElement['#value']);
  $getEtcNids = explode(',',$getIds[0]);  
  foreach($getEtcNids as $etcId => $etcVal) {  
   $getEtcData = node_load($etcVal);
      $getEtcDataBody = $getEtcData->body['und'][0]['value']!=''?$getEtcData->body['und'][0]['value']:'None';
      $getEtcNo = $getEtcData->field_etc_number_calc['und'][0]['value']!=''?$getEtcData->field_etc_number_calc['und'][0]['value']:'None';
      $etcAmt = $getEtcData->field_etc_amount['und'][0]['value'];
      $etcCostCode = $getEtcData->field_etc_cost_code['und'][0]['value'];   
    $tempIdentifer = uniqid();    
    $form_state['invite_m6_storage'][]  = $tempIdentifer;   
    $form_state['po_storage_default_value'][$tempIdentifer] = array(
      'item_number' => count($form_state['invite_m6_storage']),
      'unitCost' => $etcAmt,
      'commitmentQuantity' => 1,
      'unitMeasure' => '',
      'wsCode' => '',
      'wsCodeHidden' => $etcCostCode,   
      'poTotal' => $etcAmt,
      'poFinalTotal' => $etcAmt,
      'poDesc' => '',
      'etc_status_id' => $getEtcData->nid,      
      'itemCount' => $itemCount,      
    );    
  $itemCount++;
  } 
  }
  if(isset($form_state['values'],$form_state['input'],$form_state['triggering_element'],$form_state['triggering_element']['#type'],$form_state['triggering_element']['#name']) && $form_state['triggering_element']['#type']=='select' && $form_state['triggering_element']['#name']=='get-commitment'){
  $triggeringElement = $form_state['triggering_element'];
  $projectNode = node_load($triggeringElement['#value']);
  $form_state['invite_m6_storage'] = array();
  foreach($projectNode->field_commitment_unit_cost['und'] as $commitmentId => $comimitmetVal) {
    $tempIdentifer = uniqid();
    $form_state['invite_m6_storage'][]  = $tempIdentifer;
      $form_state['po_storage_default_value'][$tempIdentifer] = array(
      'unitCost' => isset($projectNode->field_commitment_unit_cost['und'])?$projectNode->field_commitment_unit_cost['und'][$commitmentId]['value']:'',
      'commitmentQuantity' => isset($projectNode->field_commitment_quantity['und'])?$projectNode->field_commitment_quantity['und'][$commitmentId]['value']:'',
    'unitMeasure' => isset($projectNode->field_commitments_unit_measure['und'])?$projectNode->field_commitments_unit_measure['und'][$commitmentId]['value']:'',
    'wsCode' => isset($projectNode->field_commitment_ws_code['und'])?$projectNode->field_commitment_ws_code['und'][$commitmentId]['value']:'',
    'wsCodeHidden' => isset($projectNode->field_commitment_ws_code['und'])?$projectNode->field_commitment_ws_code['und'][$commitmentId]['value']:'',    
    'poTotal' => isset($projectNode->field_commitment_po_total['und'])?$projectNode->field_commitment_po_total['und'][$commitmentId]['value']:'',
    'poFinalTotal' => isset($projectNode->field_commitment_po_final_total['und'])?$projectNode->field_commitment_po_final_total['und'][$commitmentId]['value']:'',
    'poDesc' => isset($projectNode->field_commitment_item_descriptio['und'])?$projectNode->field_commitment_item_descriptio['und'][$commitmentId]['value']:'',
    'etc_status_id' => isset($projectNode->field_po_commitment_etc_id['und'])?$projectNode->field_po_commitment_etc_id['und'][$commitmentId]['value']:'',   
    'itemCount' => isset($projectNode->field_po_commitment_item_count['und'])?$projectNode->field_po_commitment_item_count['und'][$commitmentId]['value']:'', 
    );
  }
  
  $form_state['storage_commitment_project'] = array(
    'commitment_number' => isset($projectNode->field_commitment_number_calculat['und'])?$projectNode->field_commitment_number_calculat['und'][0]['value']:'',
    'project_number' => isset($projectNode->field_project_mgmt_number['und'][0])?$projectNode->field_project_mgmt_number['und'][0]['value']:'',
    'vendor' => isset($projectNode->field_vendor['und'][0])?$projectNode->field_vendor['und'][0]['value']:'',
    'cost_code' => isset($projectNode->field_cost_code['und'])?$projectNode->field_cost_code['und'][0]['value']:'',
    'commitment_status' => isset($projectNode->field_commitment_status['und'])?$projectNode->field_commitment_status['und'][0]['value']:'',
    'commitment_type' => isset($projectNode->field_commitment_type['und'])?$projectNode->field_commitment_type['und'][0]['value']:'',
    'entered_date' => isset($projectNode->field_entered_date['und'])?$projectNode->field_entered_date['und'][0]['value']:'',
    'delever_date' => isset($projectNode->field_delivery_date['und'])?$projectNode->field_delivery_date['und'][0]['value']:'',
    'commitment_description' => isset($projectNode->body['und'])?$projectNode->body['und'][0]['value']:'',
  );  

  }
  if(isset($form_state['values'],$form_state['input'],$form_state['triggering_element'],$form_state['triggering_element']['#type'],$form_state['triggering_element']['#name']) && $form_state['triggering_element']['#type']=='select' && $form_state['triggering_element']['#name']=='commitment_number_select_old'){
  $triggeringElement = $form_state['triggering_element'];
  $projectNode = node_load($triggeringElement['#value']);
  $form_state['invite_m6_storage'] = array();
  foreach($projectNode->field_commitment_unit_cost['und'] as $commitmentId => $comimitmetVal) {
    $tempIdentifer = uniqid();
    $form_state['invite_m6_storage'][]  = $tempIdentifer;
      $form_state['po_storage_default_value'][$tempIdentifer] = array(
      'unitCost' => isset($projectNode->field_commitment_unit_cost['und'])?$projectNode->field_commitment_unit_cost['und'][$commitmentId]['value']:'',
      'commitmentQuantity' => isset($projectNode->field_commitment_quantity['und'])?$projectNode->field_commitment_quantity['und'][$commitmentId]['value']:'',
    'unitMeasure' => isset($projectNode->field_commitments_unit_measure['und'])?$projectNode->field_commitments_unit_measure['und'][$commitmentId]['value']:'',
    'wsCode' => isset($projectNode->field_commitment_ws_code['und'])?$projectNode->field_commitment_ws_code['und'][$commitmentId]['value']:'',
    'wsCodeHidden' => isset($projectNode->field_commitment_ws_code['und'])?$projectNode->field_commitment_ws_code['und'][$commitmentId]['value']:'',
    'poTotal' => isset($projectNode->field_commitment_po_total['und'])?$projectNode->field_commitment_po_total['und'][$commitmentId]['value']:'',
    'poFinalTotal' => isset($projectNode->field_commitment_po_final_total['und'])?$projectNode->field_commitment_po_final_total['und'][$commitmentId]['value']:'',
    'poDesc' => isset($projectNode->field_commitment_item_descriptio['und'])?$projectNode->field_commitment_item_descriptio['und'][$commitmentId]['value']:'',
    );
  }
  
  $form_state['storage_commitment_project'] = array(
    'commitment_number' => isset($projectNode->field_commitment_number_calculat['und'])?$projectNode->field_commitment_number_calculat['und'][0]['value']:'',
    'project_number' => isset($projectNode->field_project_mgmt_number['und'][0])?$projectNode->field_project_mgmt_number['und'][0]['value']:'',
    'vendor' => isset($projectNode->field_vendor['und'][0])?$projectNode->field_vendor['und'][0]['value']:'',
    'cost_code' => isset($projectNode->field_cost_code['und'])?$projectNode->field_cost_code['und'][0]['value']:'',
    'commitment_status' => isset($projectNode->field_commitment_status['und'])?$projectNode->field_commitment_status['und'][0]['value']:'',
    'commitment_type' => isset($projectNode->field_commitment_type['und'])?$projectNode->field_commitment_type['und'][0]['value']:'',
    'entered_date' => isset($projectNode->field_entered_date['und'])?$projectNode->field_entered_date['und'][0]['value']:'',
    'commitment_description' => isset($projectNode->body['und'])?$projectNode->body['und'][0]['value']:'',
  );  
  }
  
  if(isset($form_state['values'],$form_state['input'],$form_state['triggering_element'],$form_state['triggering_element']['#type'],$form_state['triggering_element']['#name']) && $form_state['triggering_element']['#type']=='select' && $form_state['triggering_element']['#name']=='select-commitment'){
  $form_state['invite_m6_storage'] = array();
    $commitemtnData = _node_list_by_company_project($company->nid,'project_commitement',$form_state['triggering_element']['#value']);
  $form_state['commitment_number_select_list'] = $commitemtnData; 
  // Get ETC by project id
  $query= db_select('node','n');
  $query->join('field_data_field_project_reference','pr','pr.entity_id = n.nid');
  $query->join('field_data_field_etc_number_calc','etn','etn.entity_id = n.nid'); 
    $query->fields('n', array('nid','title'));
  $query->fields('etn', array('field_etc_number_calc_value'));
    $query->condition('pr.field_project_reference_nid', $form_state['triggering_element']['#value'], '=');
    $query->condition('pr.bundle','project_etc','=');
    $getEtcNodes = $query->execute()->fetchAllKeyed(0,1); 
  $form_state['commitment_for_etc'] = $getEtcNodes; 
  }  
  if(empty($form_state['commitment_number_select_list'])){
    $form_state['commitment_number_select_list'] = array();
  }
  if(empty($form_state['commitment_for_etc'])){
    $form_state['commitment_for_etc'] = array();
  } 
  if(empty($form_state['invite_m6_storage'])){
    $tempIdentifer = uniqid();
    $form_state['invite_m6_storage'][]  = $tempIdentifer;
  }  
  $_SESSION['commitment_number_select_list'] = $form_state['commitment_number_select_list'];
  $_SESSION['commitment_for_etc'] = $form_state['commitment_for_etc'];  
  $form['main-container']= array(
    '#type' => 'container',
  '#attributes' => array('class'=>array('row')), 
  '#prefix' => '<div class="clearfix"><div id="project_commitment_main_container" class="project-detail">',
  '#suffix' => '</div></div>', 
  '#process' => array('project_commitment_main_container_process'), 
  );      
  $form['main_container2'] = array(
    '#type' => 'container',
    '#theme' => 'invite_m6_theme',
    '#attributes' => array('class'=>array('alert-container-section')),
    '#prefix' => '<div class="clearfix" id="main-class" style="display:none;"><div id="alert-container-section" class="add-new-alert-detail">', 
    //'#prefix' => '<div class="clearfix"><div id="alert-container-section" class="add-new-alert-detail">', 
    '#suffix' => '</div></div>',
    '#process' => array('invite_to_m6_process'),
  );  
  $form['commitment-save-btn-submit'] = array(
    '#markup' =>  l('<input type="button" value="Save" class="form-submit custom-commit-submit" />', '#', array('html' => TRUE, 'external' => TRUE, 'attributes' => array('class' => array('custom-commit-submit-link')))),
  '#prefix' => '<div class="simple-button-for-commit get-total-section margin-top-10" style="display:none;">',
  '#suffix' => '</div></div>',
  );
  $form['lock-duration-dialog']= array(
    '#markup' => '',
    '#prefix' => '<div id="custom-commit-dialog">',
    '#suffix' => '</div>',
  );    
  $form['from-etc-dialog']= array(
    '#markup' => '',
  '#prefix' => '<div id="from-etc-dialog-container">',
  '#suffix' => '</div>',
  ); 
   $form['actions']['reset'] = array(
    '#type' => 'markup',
    '#markup' => '<input type="button" value="Cancel" class="form-submit custom-reset-button">',
  '#prefix' => '<div class="clearfix get-total-section margin-top-10"><div class="pull-left custom-submit-commitment-reset margin-bottom-10">',
  );  
  $form['actions']['submit'] = array(
    '#type' => 'submit',
  '#validate' => array('program_modify_commitment_form_custom_validate'),
  '#submit'=> array('project_commitment_submit'), 
  '#attributes' => array('class'=>array('main-commitment-submit-call')), 
  '#value' => 'Save',
  '#prefix' => '<div class="pull-left custom-submit-commitment margin-bottom-10">', 
  );  
  $form['actions']['custom-submit-commit'] = array(
    '#type' => 'markup',
    '#markup' => '<input type="button" value="Save" class="form-submit custom-submit-commit">',
  '#prefix' => '<div class="clearfix"><div class="pull-left custom-submit-commit margin-bottom-10" style="display:none;">',
  '#suffix' => '</div></div></div></div></div>', 
  
  );     
  return $form; 
}

function project_ecommitment_email_validate($element, &$form_state, $form){
  $value = $element['#value'];
  if($value != '') {
    if (!valid_email_address($value)) {
      form_error($element, t('Please enter a valid email address.'));
    }
  }
}

function project_commitment_invite_m6_mail($form,&$form_state) {
  global $user;   
  $commands = array();
  $errors = form_get_errors();
  $commands[] = ajax_command_remove('div.messages--error.messages');
  if(!empty($errors)){
  $commands[] = ajax_command_prepend('#content div.content-page', theme('status_messages'));
  return array('#type' => 'ajax', '#commands' => $commands);
  }
  $values = $form_state['values'];  
  $getEmail = $values['invite_to_m6'];
  //==========================
  // Invite user by mail to M6
  $message = '<p>Welocme to M6</p>';
  $params = array(
    'subject' => 'M6 invite you for commitment',
  'body' => $message,
  'sender' => $user->mail,
  'language' => language_default(),
  'module' => 'm6connect_misc',
  'key' => 'commitment_mail___invite_2_m6_notify',
  'build' => TRUE,
  );
  drupal_mail($params['module'], $params['key'], $getEmail, $params['language'], $params);  
  drupal_set_message('Successfully invited');
  $commands[] = ajax_command_prepend('#content div.content-page', theme('status_messages'));  
  return array('#type' => 'ajax', '#commands' => $commands);  
}

function load_etc_data_callback($form,&$form_state){
  global $company;  
  $commands = array();    
  $triggeringElement = $form_state['triggering_element'];  
  $formVal = $form_state['values'];
  if($form_state['triggering_element']['#name'] == 'commitment_for_etc') {
    if(!empty($triggeringElement['#value'])) {
    //drup_msg()  
    $getEtcNids = array_values($triggeringElement['#value']);   
    $commands[] = ajax_command_invoke('.form-item-test input','val', array($getEtcNids));   
    $triggeringElement = $form_state['triggering_element'];
    $getEtcNids = explode(',',$getEtcNids[0]);
    $etcDataLoaded = '';
    $etcDataLoaded .= '<div class="etc-loaded-data-inner">';    
    $rowNo = 1;
    foreach($getEtcNids as $etcIdVal) {   
      $getEtcData = node_load($etcIdVal);
        $getEtcDataBody = $getEtcData->body['und'][0]['value']!=''?' | '.$getEtcData->body['und'][0]['value']:'';
        $getEtcNo = $getEtcData->field_etc_number_calc['und'][0]['value']!=''?$getEtcData->field_etc_number_calc['und'][0]['value']:'None';
      $etcDataLoaded .= '<div class="clearfix load-etc-main" id="etc-'.$rowNo.'" data="'.$getEtcData->nid.'"><label class="load-etc-number"><span class="btn btn-primary">'.$getEtcNo.'<i class="fa fa-times remove-etc-cust pull-right" aria-hidden="true" id="'.$rowNo.'"></i></span></label><label class="form-control" style="border-radius:0;padding: 0 0 0 10px;">'.$getEtcData->title.''.substr($getEtcDataBody, 0 ,35).'</label></div>';
    $etcNids[] = $getEtcData->nid;
    $rowNo ++;
    } 
    $etcDataLoaded .= '</div>';   
    $commands[] = ajax_command_invoke('input.etc_data_status','val', array('1'));
    $commands[] = ajax_command_invoke('.main-commitment-submit-call','hide');
    $commands[] = ajax_command_invoke('.custom-submit-commit','show');
    $commands[] = ajax_command_replace("#alert-container-section", render($form['main_container2']));   
    $commands[] = ajax_command_html("#etc-loaded-data-container", $etcDataLoaded);
    /*$commands[] = ajax_command_append("#alert-container-section", render($form['main_container2']));    
    $commands[] = ajax_command_append("#etc-loaded-data-container", $etcDataLoaded);*/
    
  }
  }
  else {
    $commands[] = ajax_command_html("#etc-loaded-data-container", '');
  $commands[] = ajax_command_invoke('.etc_data_status','val', array(''));   
  }  
  return array('#type' => 'ajax', '#commands' => $commands);
}

function change_program_commitment_callback($form,&$form_state){
  global $company;  
  $commands = array();
  $triggeringElement = $form_state['triggering_element'];  
  if($form_state['triggering_element']['#name']=='get-commitment') {
    if(!empty($triggeringElement['#value'])) {        
      $myCounter = variable_get('CommitmentNumber'); 
      $makeSr = str_pad($myCounter + 1, 6, "0", STR_PAD_LEFT);
      $commitmentNumber = 'COM'.$makeSr.'-'.date('Y');  
	  // Generating vendor number
	  $myCounter = variable_get('vendorNumber');  
      $makeSr = str_pad($myCounter + 1, 6, "0", STR_PAD_LEFT);
      $vendorNumber = 'VEN'.$makeSr.'-'.date('Y');  
	
      $commitmentNode = node_load($triggeringElement['#value']);  
      $storage_project = array(
        'commitment_number' => isset($commitmentNode->field_commitment_number_calculat['und'])?$commitmentNode->field_commitment_number_calculat['und'][0]['value']:'',
        'project_number' => isset($commitmentNode->field_project_mgmt_number['und'])?$commitmentNode->field_project_mgmt_number['und'][0]['value']:'',
        'vendor' => isset($commitmentNode->field_vendor['und'])?$commitmentNode->field_vendor['und'][0]['value']:'',
        'invite_to_m6' => isset($commitmentNode->field_invite_to_m6['und'])?$commitmentNode->field_invite_to_m6['und'][0]['value']:'',
        'cost_code' => isset($commitmentNode->field_cost_code['und'])?$commitmentNode->field_cost_code['und'][0]['value']:'',
        'commitment_status' => isset($commitmentNode->field_commitment_status['und'])?$commitmentNode->field_commitment_status['und'][0]['value']:'',
        'commitment_type' => isset($commitmentNode->field_commitment_type['und'])?$commitmentNode->field_commitment_type['und'][0]['value']:'',
        'entered_date' => isset($commitmentNode->field_entered_date['und'])?$commitmentNode->field_entered_date['und'][0]['value']:'',
        'vendor_number' => isset($commitmentNode->field_vendor_number['und'])?$commitmentNode->field_vendor_number['und'][0]['value']:'',
        'delever_date' => isset($commitmentNode->field_delivery_date['und'])?$commitmentNode->field_delivery_date['und'][0]['value']:'',
        'commitment_description' => isset($commitmentNode->body['und'])?$commitmentNode->body['und'][0]['value']:'',
        'company_nid' => isset($commitmentNode->field_vendor['und'])?$commitmentNode->field_vendor['und'][0]['value']:'',   
        'notes_and_ins' => isset($commitmentNode->field_po_notes_and_instructions['und'])?$commitmentNode->field_po_notes_and_instructions['und'][0]['value']:'',
		'po_amt_dis' => isset($commitmentNode->field_po_subtotal_discount['und'])?$commitmentNode->field_po_subtotal_discount['und'][0]['value']:'',
        'po_sales_tax_amt' => isset($commitmentNode->field_po_sales_tax_amt['und'])?$commitmentNode->field_po_sales_tax_amt['und'][0]['value']:'',    
        'po_sales_tax_per' => isset($commitmentNode->field_po_sales_tax_per['und'])?$commitmentNode->field_po_sales_tax_per['und'][0]['value']:'',    
        'po_other_cost' => isset($commitmentNode->field_po_other_cost['und'])?$commitmentNode->field_po_other_cost['und'][0]['value']:'',   
        'po_sh' => isset($commitmentNode->field_po_sandh['und'])?$commitmentNode->field_po_sandh['und'][0]['value']:'',   
        'po_final_total_amt' => isset($commitmentNode->field_commitment_po_final_total['und'])?$commitmentNode->field_commitment_po_final_total['und'][0]['value']:'',
        'etcStatus' => isset($commitmentNode->field_etc_enable_status['und'])?$commitmentNode->field_etc_enable_status['und'][0]['value']:'',
        'etcLoadedContainer' => isset($commitmentNode->field_etc_loaded_data_container['und'])?$commitmentNode->field_etc_loaded_data_container['und'][0]['value']:'',
      );        
      $enteredDate = $storage_project['entered_date']!=''?date('m/d/Y', strtotime($storage_project['entered_date'])):'';
      $deleveryDate = $storage_project['delever_date']!=''?date('m/d/Y', strtotime($storage_project['delever_date'])):'';
      if($storage_project['vendor'] != '' && is_numeric($storage_project['vendor'])) {
        $venoderName = node_load($storage_project['vendor'])->title;
        $companyNid = $commitmentNode->field_vendor['und'][0]['value'];
        $getCompanyDetails = node_load($companyNid);
        if(isset($getCompanyDetails->field_logo['und'])) {
          $companyLogo = '<img src="'.image_style_url('thumbnail', $getCompanyDetails->field_logo['und'][0]['uri']).'">'; 
        }
        else {
          $companyLogo = '<img src="/sites/all/themes/m6connect/images/default_company_profile.jpg" style="height:100px; width:66px;">';
        }
        $commands[] = ajax_command_html(".company-details-by-email", '<label>&nbsp;</label>'.$companyLogo.'<strong>&nbsp;&nbsp;&nbsp;'.$getCompanyDetails->title.'</strong>');
        $commands[] = ajax_command_invoke("input.outside_company", 'val',array('no'));
      }
      else if($storage_project['vendor'] != ''){
        $venoderName = $storage_project['vendor'];
        $commands[] = ajax_command_html(".company-details-by-email", '<label>&nbsp;</label><strong>'.$venoderName.'</strong>');
        $commands[] = ajax_command_invoke("input.outside_company", 'val',array('yes'));
      }   
      else {
        $commands[] = ajax_command_html(".company-details-by-email", '');
      } 
      $commands[] = ajax_command_invoke("input.commitment_number_select", 'val',array($storage_project['commitment_number']));
      $commands[] = ajax_command_html("#etc-loaded-data-container", '');    
      if($storage_project['etcStatus'] == 1 && $storage_project['etcStatus'] == '1') {
        $commands[] = ajax_command_invoke('.etc_data_status','val', array('1'));
        $commands[] = ajax_command_invoke('.main-commitment-submit-call','hide');
        $commands[] = ajax_command_invoke('.custom-submit-commit','show');    
        $commands[] = ajax_command_append("#etc-loaded-data-container", $storage_project['etcLoadedContainer']);    
      }
      else {
        $commands[] = ajax_command_invoke('.etc_data_status','val', array(''));
        $commands[] = ajax_command_html("#etc-loaded-data-container", '');    
    }
	$vendorNumber = $storage_project['vendor_number']!=''?$storage_project['vendor_number']:$vendorNumber;
    $commands[] = ajax_command_invoke("input.commitment_number_select", 'val',array($storage_project['commitment_number']));
    $commands[] = ajax_command_invoke("input.commitment_number", 'val',array($storage_project['commitment_number']));
    $commands[] = ajax_command_invoke("select.project_number", 'val',array($storage_project['project_number']));
    $commands[] = ajax_command_invoke("input.vendor_number", 'val',array($vendorNumber));
    $commands[] = ajax_command_invoke("input.vendor", 'val',array($venoderName));     
    $commands[] = ajax_command_invoke("select.cost_code", 'val',array($storage_project['cost_code']));
    $commands[] = ajax_command_invoke("select.commitment_status", 'val',array($storage_project['commitment_status']));
    $commands[] = ajax_command_invoke("select.commitment_type", 'val',array($storage_project['commitment_type']));
    $commands[] = ajax_command_invoke("input.entered_date", 'val',array($enteredDate)); 
    $commands[] = ajax_command_invoke("input.company_nid", 'val',array($storage_project['company_nid']));     
    $commands[] = ajax_command_invoke("textarea.commitment_description", 'val',array($storage_project['commitment_description']));  
    $commands[] = ajax_command_html("#proposal-attachment-link", '<a href="/proposal-attachment/'.$commitmentNode->nid.'/nojs" class="ctools-use-modal ctools-modal-assign-dashboard-popup-style custom-proposal-attachment">Attach files from proposal</a>');  
    // Check for clone commitments  
    if(isset($commitmentNode->field_total_commit_clone['und']) && $commitmentNode->field_total_commit_clone['und'][0]['value'] == 1) {
      $commitmentNo = $commitmentNode->field_commitment_number_calculat['und'][0]['value'];       
    }
    $getCommitmentType = isset($commitmentNode->field_commitment_type['und'])?$commitmentNode->field_commitment_type['und'][0]['value']:'';     
      if($getCommitmentType != '') {
        if($getCommitmentType == 'purchase order' || $getCommitmentType == 'contract') {  
        $commands[] = ajax_command_invoke("#commitment_number_input_cust", 'attr',array('data', 'clsActive'));  
        $commands[] = ajax_command_invoke("#commitment_number_select_cust", 'attr',array('data', ''));       
      }
      else {
        $commands[] = ajax_command_invoke("#commitment_number_select_cust", 'attr',array('data', 'clsActive'));
        $commands[] = ajax_command_invoke("#commitment_number_input_cust", 'attr',array('data', ''));
      }
      }
    if(isset($commitmentNode->field_commitment_proposal_attech['und'])) {
      $attachment = $commitmentNode->field_commitment_proposal_attech['und'][0]['value'];   
      if($attachment != '') {
        $attachmentArr = explode(',', $attachment);
      foreach($attachmentArr as $fileId) {
        if($fileId == 0) { continue; }  
        $fileData = file_load($fileId);       
        $attachContent .= '<p>'.l(substr($fileData->filename,0,10), file_create_url($fileData->uri), array('attributes' => array('class' => 'proposal-image'))).'</p>';
        $commands[] = ajax_command_html(".proposal-attachment-preview", $attachContent);
      }
      }
    }
    else {
      $commands[] = ajax_command_html(".proposal-attachment-preview", '');
    } 
    if(isset($commitmentNode->field_commitment_attachment['und'])) {
      foreach($commitmentNode->field_commitment_attachment['und'] as $addKey => $addVal) {
      $getFid = $commitmentNode->field_commitment_attachment['und'][$addKey]['fid'];
      $getAdditionalImageSrc[] = '<p><label class="checkbox"><i class="fa fa-times padding-5" style="float:left; cursor:pointer;"></i><input type="checkbox" checked="checked" class="image-remove-update sr-only" value="'.$getFid.'" for="'.$commitmentNode->nid.'">'.l($commitmentNode->field_commitment_attachment['und'][$addKey]['filename'], file_create_url($commitmentNode->field_commitment_attachment['und'][$addKey]['uri'])).'</label></p>'; 
      }     
      $commands[] = ajax_command_html(".commitment-image-preview", '<div class="image-preview">'.implode('', $getAdditionalImageSrc).'</div>');
    }
    else {
      $commands[] = ajax_command_html(".commitment-image-preview", '');
    }
    $commands[] = ajax_command_invoke("input.unit_cost", 'trigger',array('keyup'));   
    $commands[] = ajax_command_invoke("input.po_total", 'trigger',array('keyup'));
    $triggerId = $commitmentNode->field_project_reference['und'][0]['nid'];
    $commands[] = ajax_command_html("#programe-commitment-details", get_commitment_listing_table_data($triggerId,'','','',0,50));
    $commands[] = ajax_command_html("#programe-commitment-filter-form-data", _get_filter_form($triggerId));   
    $commands[] = ajax_command_html("#po-item-button-custom", _generating_button_for_new_po_item($commitmentNode->nid));
    $commands[] = ajax_command_html("#commitment-total-main", _get_total_commitments_total($company->nid, $triggerId)); 
    $commands[] = ajax_command_replace("#alert-container-section", render($form['main_container2']));   
     //* ==== Work for additional invoice calculation field ==== *//
     $commands[] = ajax_command_invoke("textarea.final_total_instructions", 'val',array($storage_project['notes_and_ins']));    
    $commands[] = ajax_command_invoke("input.po_amt_discount_form", 'val',array($storage_project['po_amt_dis']));     
    $commands[] = ajax_command_invoke("input.po_amt_sales_tax_amt_form", 'val',array($storage_project['po_sales_tax_amt']));      
    $commands[] = ajax_command_invoke("input.po_amt_sales_tax_per_form", 'val',array($storage_project['po_sales_tax_per']));      
    $commands[] = ajax_command_invoke("input.po_amt_other_cost_form", 'val',array($storage_project['po_other_cost']));  
    $commands[] = ajax_command_invoke("input.po_amt_discount_sh_form", 'val',array($storage_project['po_sh']));     
    $commands[] = ajax_command_invoke("input.po_amt_discount", 'val',array($storage_project['po_amt_dis']));      
    $commands[] = ajax_command_invoke("input.po_amt_sales_tax_amt", 'val',array($storage_project['po_sales_tax_amt']));     
    $commands[] = ajax_command_invoke("input.po_amt_sales_tax_per", 'val',array($storage_project['po_sales_tax_per']));     
    $commands[] = ajax_command_invoke("input.po_amt_other_cost", 'val',array($storage_project['po_other_cost'])); 
    $commands[] = ajax_command_invoke("input.po_amt_discount_sh", 'val',array($storage_project['po_sh']));        
    $commands[] = ajax_command_invoke("input.po_amt_discount", 'trigger',array('keyup'));     
    $commands[] = ajax_command_invoke("input.po_amt_sales_tax_amt", 'trigger',array('keyup'));      
    $commands[] = ajax_command_invoke("input.po_amt_sales_tax_per", 'trigger',array('keyup'));      
    $commands[] = ajax_command_invoke("input.po_amt_other_cost", 'trigger',array('keyup')); 
    $commands[] = ajax_command_invoke("input.po_amt_discount_sh", 'trigger',array('keyup'));  
  }
  else {        
    $myCounter = variable_get('CommitmentNumber'); 
    $makeSr = str_pad($myCounter + 1, 6, "0", STR_PAD_LEFT);

      $commitmentNumber = 'COM'.$makeSr.'-'.date('Y');  
    $proNode = node_load($_SESSION['ACTIVEPROJECT']);
    $myCounter = variable_get('CommitmentNumber'); 
    $makeSr = str_pad($myCounter + 1, 6, "0", STR_PAD_LEFT);
      $commitmentNumber = 'COM'.$makeSr.'-'.date('Y');      
    $commitemtnData = _node_list_by_company_project($company->nid,'project_commitement',$_SESSION['ACTIVEPROJECT']);
    $query= db_select('node','n');
    $query->join('field_data_field_project_reference','pr','pr.entity_id = n.nid');
      $query->fields('n', array('nid','title'));
      $query->condition('pr.field_project_reference_nid', $_SESSION['ACTIVEPROJECT'], '=');
      $query->condition('pr.bundle','project_etc','=');
      $getEtcNodes = $query->execute()->fetchAllKeyed(0,1);     
    if(!empty($commitemtnData)) {
    $commands[] = ajax_command_invoke("select.commitment_type", 'addClass',array('commitment_type_full'));
    $commands[] = ajax_command_invoke("select.commitment_type", 'removeClass',array('commitment_type_half'));     
    $commands[] = ajax_command_replace("#commitment_number_select_cust_old", render($form['main-container']['main-container']['left-container']['commitment_number_select_old']));
    $commands[] = ajax_command_replace("#commitment_number_select_cust", render($form['main-container']['main-container']['left-container']['commitment_number_select']));
    }
    else {
    $commands[] = ajax_command_invoke("select.commitment_type", 'removeClass',array('commitment_type_full'));
    $commands[] = ajax_command_invoke("select.commitment_type", 'addClass',array('commitment_type_half'));    
    }
    if(!empty($getEtcNodes)) { 
      $commands[] = ajax_command_replace("#for-etc-list", render($form['main-container']['main-container']['left-container']['commitment_for_etc']));   
    }   
    $commands[] = ajax_command_invoke('.etc_data_status','val', array(''));
    $commands[] = ajax_command_html("#etc-loaded-data-container", '');    
    $commands[] = ajax_command_invoke("input.project_commitment_nid", 'val',array('')); 
    $commands[] = ajax_command_invoke("input.commitment_number", 'val',array($commitmentNumber));     
    $commands[] = ajax_command_invoke("select.project_number", 'val',array($proNode->field_project_mgmt_number['und'][0]['value']));  
    $commands[] = ajax_command_html("#programe-commitment-details", get_commitment_listing_table_data($_SESSION['ACTIVEPROJECT'],'','','',0,50));
    $commands[] = ajax_command_html("#programe-commitment-filter-form-data", _get_filter_form($_SESSION['ACTIVEPROJECT']));
    $commands[] = ajax_command_html("#po-item-button-custom", _generating_button_for_new_po_item($_SESSION['ACTIVEPROJECT']));  
    $commands[] = ajax_command_invoke("input.vendor", 'val',array(''));
    $commands[] = ajax_command_invoke("input.outside_company", 'val',array(''));
    $commands[] = ajax_command_html(".company-details-by-email", '');
    $commands[] = ajax_command_invoke("select.cost_code", 'val',array(''));
    $commands[] = ajax_command_invoke("select.commitment_status", 'val',array(''));
    $commands[] = ajax_command_invoke("select.commitment_type", 'val',array(''));
    $commands[] = ajax_command_invoke("input.entered_date", 'val',array(''));
    $commands[] = ajax_command_invoke("input.delever_date", 'val',array(''));
    $commands[] = ajax_command_invoke("textarea.commitment_description", 'val',array(''));
    $commands[] = ajax_command_html("#proposal-attachment-link", '<a href="/proposal-attachment/0/nojs" class="ctools-use-modal ctools-modal-assign-dashboard-popup-style custom-proposal-attachment">Attach files from proposal</a>');
    $commands[] = ajax_command_html(".proposal-attachment-preview", '');
    $commands[] = ajax_command_html(".commitment-image-preview", '');
    $commands[] = ajax_command_html("#commitment-total-main", _get_total_commitments_total($company->nid, $_SESSION['ACTIVEPROJECT'])); 
    $commands[] = ajax_command_replace("#alert-container-section", render($form['main_container2']));
    $commands[] = ajax_command_invoke("textarea.final_total_instructions", 'val',array(''));  
    $commands[] = ajax_command_invoke("input.po_amt_discount_form", 'val',array(''));     
    $commands[] = ajax_command_invoke("input.po_amt_sales_tax_amt_form", 'val',array(''));      
    $commands[] = ajax_command_invoke("input.po_amt_sales_tax_per_form", 'val',array(''));      
    $commands[] = ajax_command_invoke("input.po_amt_other_cost_form", 'val',array('')); 
    $commands[] = ajax_command_invoke("input.po_amt_discount_sh_form", 'val',array(''));      
    $commands[] = ajax_command_invoke("input.po_amt_discount", 'val',array(''));      
    $commands[] = ajax_command_invoke("input.po_amt_sales_tax_amt", 'val',array(''));     
    $commands[] = ajax_command_invoke("input.po_amt_sales_tax_per", 'val',array(''));     
    $commands[] = ajax_command_invoke("input.po_amt_other_cost", 'val',array(''));  
    $commands[] = ajax_command_invoke("input.po_amt_discount_sh", 'val',array('')); 
    $commands[] = ajax_command_html(".total_po_amount_final", '<div class="total_po_amount_final test"></div>');        
  }
  } 
  else if(!empty($triggeringElement['#value']) && $form_state['triggering_element']['#name']=='commitment_number_select_old') {
    $myCounter = variable_get('CommitmentNumber');
    $makeSr = str_pad($myCounter + 1, 6, "0", STR_PAD_LEFT);
    $commitmentNumber = 'COM'.$makeSr.'-'.date('Y');
  $commitmentNode = node_load($triggeringElement['#value']);
  $storage_project = array(
    'commitment_number' => isset($commitmentNode->field_commitment_number_calculat['und'])?$commitmentNode->field_commitment_number_calculat['und'][0]['value']:'',
    'project_number' => isset($commitmentNode->field_project_mgmt_number['und'])?$commitmentNode->field_project_mgmt_number['und'][0]['value']:'',
    'vendor' => isset($commitmentNode->field_vendor['und'])?$commitmentNode->field_vendor['und'][0]['value']:'',
    'invite_to_m6' => isset($commitmentNode->field_invite_to_m6['und'])?$commitmentNode->field_invite_to_m6['und'][0]['value']:'',
    'cost_code' => isset($commitmentNode->field_cost_code['und'])?$commitmentNode->field_cost_code['und'][0]['value']:'',
    'commitment_status' => isset($commitmentNode->field_commitment_status['und'])?$commitmentNode->field_commitment_status['und'][0]['value']:'',
    'commitment_type' => isset($commitmentNode->field_commitment_type['und'])?$commitmentNode->field_commitment_type['und'][0]['value']:'',
    'entered_date' => isset($commitmentNode->field_entered_date['und'])?$commitmentNode->field_entered_date['und'][0]['value']:'',
    'delever_date' => isset($commitmentNode->field_delivery_date['und'])?$commitmentNode->field_delivery_date['und'][0]['value']:'',
    'commitment_description' => isset($commitmentNode->body['und'])?$commitmentNode->body['und'][0]['value']:'',
    'company_nid' => isset($commitmentNode->field_vendor['und'])?$commitmentNode->field_vendor['und'][0]['value']:'',   
  );        
  $enteredDate = $storage_project['entered_date']!=''?date('m/d/Y', strtotime($storage_project['entered_date'])):'';
  $deleveryDate = $storage_project['delever_date']!=''?date('m/d/Y', strtotime($storage_project['delever_date'])):'';
  if($storage_project['vendor'] != '' && is_numeric($storage_project['vendor'])) {
    $venoderName = node_load($storage_project['vendor'])->title;
  }
  else {
    $venoderName = $storage_project['vendor'];
  }
  //$commands[] = ajax_command_invoke("input.commitment_number", 'val',array($storage_project['commitment_number']));
  $commands[] = ajax_command_invoke("select.project_number", 'val',array($storage_project['project_number']));
  $commands[] = ajax_command_invoke("input.vendor", 'val',array($venoderName));
  if($venoderName != '') {
    $companyNid = $commitmentNode->field_vendor['und'][0]['value'];
    $getCompanyDetails = node_load($companyNid);
    if(isset($getCompanyDetails->field_logo['und'])) {
      $companyLogo = '<img src="'.image_style_url('thumbnail', $getCompanyDetails->field_logo['und'][0]['uri']).'">'; 
    }
    else {
      $companyLogo = '<img src="/sites/all/themes/m6connect/images/default_company_profile.jpg" style="height:100px; width:66px;">';
    }
    $commands[] = ajax_command_html(".company-details-by-email", '<label>&nbsp;</label>'.$companyLogo.'<strong>&nbsp;&nbsp;&nbsp;'.$getCompanyDetails->title.'</strong>');
  }
  else {
    $commands[] = ajax_command_html(".company-details-by-email", '');
  }   
  $commands[] = ajax_command_invoke("select.cost_code", 'val',array($storage_project['cost_code']));
  $commands[] = ajax_command_invoke("input.commitment_cost_code_clone", 'val',array($storage_project['cost_code']));
  $commands[] = ajax_command_invoke("select.commitment_status", 'val',array($storage_project['commitment_status']));
  
  //$commands[] = ajax_command_invoke("select.commitment_type", 'val',array($storage_project['commitment_type']));
  $commands[] = ajax_command_invoke("input.entered_date", 'val',array($enteredDate)); 
  $commands[] = ajax_command_invoke("input.delever_date", 'val',array($deleveryDate));  
  $commands[] = ajax_command_invoke("input.company_nid", 'val',array($storage_project['company_nid']));     
  $commands[] = ajax_command_invoke("textarea.commitment_description", 'val',array($storage_project['commitment_description']));  
  $commands[] = ajax_command_html("#proposal-attachment-link", '<a href="/proposal-attachment/'.$commitmentNode->nid.'/nojs" class="ctools-use-modal ctools-modal-assign-dashboard-popup-style custom-proposal-attachment">Attach files from proposal</a>');
  if(isset($commitmentNode->field_commitment_proposal_attech['und'])) {
    $attachment = $commitmentNode->field_commitment_proposal_attech['und'][0]['value'];   
    if($attachment != '') {
      $attachmentArr = explode(',', $attachment);
    foreach($attachmentArr as $fileId) {
      if($fileId == 0) { continue; }  
      $fileData = file_load($fileId);       
      $attachContent .= '<p>'.l(substr($fileData->filename,0,10), file_create_url($fileData->uri), array('attributes' => array('class' => 'proposal-image'))).'</p>';
      $commands[] = ajax_command_html(".proposal-attachment-preview", $attachContent);
    }
    $commands[] = ajax_command_invoke("input.proposal_attachment_storage", 'val',array($attachment));
    }   
  }
  else {
    $commands[] = ajax_command_html(".proposal-attachment-preview", '');
    $commands[] = ajax_command_invoke("input.proposal_attachment_storage", 'val',array(''));
  }
  
  if(isset($commitmentNode->field_commitment_attachment['und'])) {
    foreach($commitmentNode->field_commitment_attachment['und'] as $addKey => $addVal) {
      $getAdditionalImageSrc[] = l($commitmentNode->field_commitment_attachment['und'][$addKey]['filename'], file_create_url($commitmentNode->field_commitment_attachment['und'][$addKey]['uri'])); 
    }     
    $commands[] = ajax_command_html(".commitment-image-preview", '<div class="image-preview">'.implode(',', $getAdditionalImageSrc).'</div>');
  }
  else {
    $commands[] = ajax_command_html(".commitment-image-preview", '');
  }
  $commands[] = ajax_command_invoke("input.unit_cost", 'trigger',array('keyup'));   
  $commands[] = ajax_command_invoke("input.po_total", 'trigger',array('keyup'));
  $commands[] = ajax_command_invoke("select.commitment_number_select_cust", 'show',array(''));
  $triggerId = $commitmentNode->field_project_reference['und'][0]['nid'];
  $commands[] = ajax_command_html("#programe-commitment-details", get_commitment_listing_table_data($triggerId,'','','',0,0));
  $commands[] = ajax_command_html("#programe-commitment-filter-form-data", _get_filter_form($triggerId));   
  $commands[] = ajax_command_html("#po-item-button-custom", _generating_button_for_new_po_item($commitmentNode->nid));
  $commands[] = ajax_command_html("#commitment-total-main", _get_total_commitments_total($company->nid, $triggerId)); 
  $commands[] = ajax_command_replace("#alert-container-section", render($form['main_container2']));
  $commands[] = ajax_command_invoke("textarea.final_total_instructions", 'val',array(''));  
  $commands[] = ajax_command_invoke("input.po_amt_discount_form", 'val',array(''));     
  $commands[] = ajax_command_invoke("input.po_amt_sales_tax_amt_form", 'val',array(''));      
  $commands[] = ajax_command_invoke("input.po_amt_sales_tax_per_form", 'val',array(''));      
  $commands[] = ajax_command_invoke("input.po_amt_other_cost_form", 'val',array('')); 
  $commands[] = ajax_command_invoke("input.po_amt_discount_sh_form", 'val',array(''));      
  $commands[] = ajax_command_invoke("input.po_amt_discount", 'val',array(''));      
  $commands[] = ajax_command_invoke("input.po_amt_sales_tax_amt", 'val',array(''));     
  $commands[] = ajax_command_invoke("input.po_amt_sales_tax_per", 'val',array(''));     
  $commands[] = ajax_command_invoke("input.po_amt_other_cost", 'val',array(''));  
  $commands[] = ajax_command_invoke("input.po_amt_discount_sh", 'val',array('')); 
  $commands[] = ajax_command_html(".total_po_amount_final", '<div class="total_po_amount_final test"></div>');  
  }   
  else {    
    if((isset($_SESSION['ACTIVEPROJECT']) && $_SESSION['ACTIVEPROJECT']!=$triggeringElement['#value']) || (!isset($_SESSION['ACTIVEPROJECT'])) || (empty($_SESSION['ACTIVEPROJECT']))){
      $_SESSION['ACTIVEPROJECT'] = $triggeringElement['#value'];
    }
    $myCounter = variable_get('CommitmentNumber'); 
    $makeSr = str_pad($myCounter + 1, 6, "0", STR_PAD_LEFT);
    $commitmentNumber = 'COM'.$makeSr.'-'.date('Y');
  
  $myCounter = variable_get('vendorNumber');  
    $makeSr = str_pad($myCounter + 1, 6, "0", STR_PAD_LEFT);
    $vendorNumber = 'VEN'.$makeSr.'-'.date('Y');  
  
    $proNode = node_load($triggeringElement['#value']);
    $commitemtnData = _node_list_by_company_project($company->nid,'project_commitement',$triggeringElement['#value']);  
  // Get ETC By Project id
  $query= db_select('node','n');
  $query->join('field_data_field_project_reference','pr','pr.entity_id = n.nid');
  $query->join('field_data_field_etc_number_calc','etn','etn.entity_id = n.nid'); 
    $query->fields('n', array('nid'));
  $query->fields('etn', array('field_etc_number_calc_value'));
    $query->condition('pr.field_project_reference_nid', $triggeringElement['#value'], '=');
    $query->condition('pr.bundle','project_etc','=');
    $getEtcData = $query->execute()->fetchAllKeyed(0,1);  
  //$getEtcNodes = array('0' => 'None');  
  foreach($getEtcData as $etcId => $etcTitle) {
    $getEtcNodes[$etcId] = $etcTitle; 
    }   
    if(!empty($commitemtnData)) {
    $commands[] = ajax_command_invoke("select.commitment_type", 'addClass',array('commitment_type_full'));
    $commands[] = ajax_command_invoke("select.commitment_type", 'removeClass',array('commitment_type_half'));     
    $commands[] = ajax_command_replace("#commitment_number_select_cust_old", render($form['main-container']['main-container']['left-container']['commitment_number_select_old']));
    $commands[] = ajax_command_replace("#commitment_number_select_cust", render($form['main-container']['main-container']['left-container']['commitment_number_select']));
    }
  else {
    $commands[] = ajax_command_invoke("select.commitment_type", 'removeClass',array('commitment_type_full'));
    $commands[] = ajax_command_invoke("select.commitment_type", 'addClass',array('commitment_type_half'));    
  }
  if(!empty($getEtcNodes)) { 
    $commands[] = ajax_command_replace("#for-etc-list", render($form['main-container']['main-container']['left-container']['commitment_for_etc']));   
  }
  else {
    $commands[] = ajax_command_replace("#for-etc-list", render($form['main-container']['main-container']['left-container']['commitment_for_etc']['#options'] = array('none')));   
  } 
  $commands[] = ajax_command_invoke('.etc_data_status','val', array(''));
  $commands[] = ajax_command_html("#etc-loaded-data-container", '');   
  $commands[] = ajax_command_invoke("input.commitment_number", 'val',array($commitmentNumber)); 
  $commands[] = ajax_command_invoke("select.project_number", 'val',array($proNode->field_project_mgmt_number['und'][0]['value']));  
  $commands[] = ajax_command_html("#programe-commitment-details", get_commitment_listing_table_data($triggeringElement['#value'],'','','',0,50)); 
  $commands[] = ajax_command_html("#programe-commitment-filter-form-data", _get_filter_form($triggeringElement['#value']));
  $commands[] = ajax_command_html("#po-item-button-custom", _generating_button_for_new_po_item($triggeringElement['#value']));  
  $commands[] = ajax_command_invoke("input.vendor", 'val',array(''));
  $commands[] = ajax_command_invoke("input.outside_company", 'val',array(''));
  $commands[] = ajax_command_html(".company-details-by-email", '');
  $commands[] = ajax_command_invoke("select.cost_code", 'val',array(''));
  $commands[] = ajax_command_invoke("input.vendor_number", 'val',array($vendorNumber));
  $commands[] = ajax_command_invoke("select.commitment_status", 'val',array(''));
  $commands[] = ajax_command_invoke("select.commitment_type", 'val',array(''));
  $commands[] = ajax_command_invoke("input.entered_date", 'val',array(''));
  $commands[] = ajax_command_invoke("input.delever_date", 'val',array('')); 
  $commands[] = ajax_command_invoke("textarea.commitment_description", 'val',array(''));
  $commands[] = ajax_command_html("#proposal-attachment-link", '<a href="/proposal-attachment/0/nojs" class="ctools-use-modal ctools-modal-assign-dashboard-popup-style custom-proposal-attachment">Attach files from proposal</a>');
  $commands[] = ajax_command_html(".proposal-attachment-preview", '');
  $commands[] = ajax_command_html(".commitment-image-preview", '');
  $commands[] = ajax_command_html("#commitment-total-main", _get_total_commitments_total($company->nid, $triggeringElement['#value'])); 
  $commands[] = ajax_command_replace("#alert-container-section", render($form['main_container2']));     
  $commands[] = ajax_command_invoke("textarea.final_total_instructions", 'val',array(''));            
  $commands[] = ajax_command_invoke("input.po_amt_discount_form", 'val',array(''));     
  $commands[] = ajax_command_invoke("input.po_amt_sales_tax_amt_form", 'val',array(''));      
  $commands[] = ajax_command_invoke("input.po_amt_sales_tax_per_form", 'val',array(''));      
  $commands[] = ajax_command_invoke("input.po_amt_other_cost_form", 'val',array('')); 
  $commands[] = ajax_command_invoke("input.po_amt_discount_sh_form", 'val',array(''));      
  $commands[] = ajax_command_invoke("input.po_amt_discount", 'val',array(''));      
  $commands[] = ajax_command_invoke("input.po_amt_sales_tax_amt", 'val',array(''));     
  $commands[] = ajax_command_invoke("input.po_amt_sales_tax_per", 'val',array(''));     
  $commands[] = ajax_command_invoke("input.po_amt_other_cost", 'val',array(''));  
  $commands[] = ajax_command_invoke("input.po_amt_discount_sh", 'val',array('')); 
  $commands[] = ajax_command_html(".total_po_amount_final", '<div class="total_po_amount_final test"></div>');
  }
  return array('#type' => 'ajax', '#commands' => $commands);
}

function project_commitment_main_container_process($element, &$form_state) {
  global $user;
  global $company;
  $getProjectByCompany = _project_list_by_company($company->nid, 'project_management');
  $projectManager = _get_user_mappping_by_group_company_nid($company->nid);      
  $commitmentNumber = $form_state['commitmentNumber'];  
  if($commitmentNumber == '') {
  // Commitment number calculation
    $currentYear = date('Y');
    $myCounter = variable_get('CommitmentNumber');
    $makeSr = str_pad($myCounter + 1, 6, "0", STR_PAD_LEFT);
    $commitmentNumber = 'COM'.$makeSr.'-'.$currentYear;
  }  
  // Generating vendor number
  $currentYear = date('Y');
  $myCounter = variable_get('vendorNumber');  
  $makeSr = str_pad($myCounter + 1, 6, "0", STR_PAD_LEFT);
  $vendorNumber = 'VEN'.$makeSr.'-'.$currentYear;
  
  $projectNo = array();
  foreach($getProjectByCompany as $projectID => $projectTitle) {
    $projectNode = node_load($projectID);
    if(isset($projectNode->field_project_mgmt_number['und'])) {
      $projectNo[$projectNode->field_project_mgmt_number['und'][0]['value']] = $projectNode->title.'|'.$projectNode->field_project_mgmt_number['und'][0]['value'];
    }
  }
  $defaultValues = $form_state['storage_commitment_project'];
  if($defaultValues['vendor'] != '') {
    $vendorVal = node_load($defaultValues['vendor'])->title;
  }
  else {
    $vendorVal = '';
  }
  $storage = $form_state['invite_m6_storage'];
  $comppanyListing = array();
  if(empty($form_state['project_commitment_vender'])){
    $form_state['project_commitment_vender'] = _get_all_organigation_mapping();
    $_SESSION['project_commitment_vender'] = $form_state['project_commitment_vender'];
    $comppanyListing = $form_state['project_commitment_vender']; 
  }
  $element['main-container']['left-container']= array(
    '#type' => 'container',
    '#attributes' => array('class'=>array('col-md-6','col-sm-6','col-xs-12','project-details-left')),
    '#weight' => 1,
  );  
  $element['main-container']['right-container']= array(
    '#type' => 'container',
  '#attributes' => array('class'=>array('col-md-6','col-sm-6','col-xs-12','project-details-right')),
  '#weight' => 2,
  );  
  $element['main-container']['left-container']['project_commitment_nid']= array(
    '#type' => 'hidden',
  '#title_display' => 'invisible',
  '#attributes' => array('class'=> array('form-control project_commitment_nid')),
  );
  $element['main-container']['left-container']['commitment_type']= array(
    '#type' => 'select',
    '#title' => 'Commitment Type',
    '#options'=> array('purchase order' => 'Purchase Order', 'change purchase order' => 'Change Purchase Order','potential change order' => 'Potential Change Order', 'change order' => 'Change Order','contract' => 'Contract','contract amendment' => 'Contract Amendment'),
    '#empty_option' => '- Select -',
    '#attributes' => array('class'=> array('form-control','commitment_type')),
    '#default_value' => isset($defaultValues['commitment_type'])?$defaultValues['commitment_type']:'',
    '#prefix' => '<div class="project-details-border"><div class="clearfix form-item">',
    '#suffix' => '</div>',
  );
  $element['main-container']['left-container']['commitment_for_etc']= array(
    '#type' => 'select',
  '#title' => 'From ETC',
  '#options'=> $form_state['commitment_for_etc'],
  //'#limit_validation_errors' => array(),
  '#validated' => TRUE,
  '#multiple' => TRUE,
  //'#chosen' => TRUE,
  //'#size' => 3,
  '#attributes' => array('class'=> array('form-control commitment_for_etc')),
  '#prefix' => '<div class="clearfix form-item" id="for-etc-list">',
  '#suffix' => '</div>',
  '#ajax' => array(
    'callback'=> 'load_etc_data_callback',
    'wrapper' => 'etc-loaded-data-container',
    'effect' => 'fade',
    'event' => 'blur',
  ),  
  );
  
  $element['main-container']['left-container']['commitment_for_etc_ids']= array(
    '#type' => 'submit',
    '#value' => decode_entities('&#xf014;'),
    '#name' => $uniqId,
    '#parents' => array('testing', $uniqId, 'etc'),
    "#limit_validation_errors" => array(),
    '#prefix' => '<div class="clearfix form-item-test" style="display:none;">',
    '#suffix' => '</div>',
    //'#submit'=> array('remove_invite_m6_row_handler_test'),
    '#ajax' => array(
      'callback' => 'remove_m6_invite_row_callback_test',
      'wrapper' => 'etc-loaded-data-container',
      'method' => 'replace',
      'effect' => 'fade',
      'progress' => array('type'=> 'throbber', 'message'=> NULL),
    ),    
    );
  $element['main-container']['left-container']['etc_data_status']= array(
    '#type' => 'textfield',
  '#attributes' => array('class'=> array('etc_data_status')),
  //'#required' => TRUE,
  '#prefix' => '<div style="display:none;">',
  '#suffix' => '</div>',
  );
  $element['main-container']['left-container']['etc_data_ids']= array(
    '#type' => 'textfield',
  '#attributes' => array('class'=> array('etc_data_ids')),
  //'#required' => TRUE,
  '#prefix' => '<div style="display:none;">',
  '#suffix' => '</div>',
  );
  $element['main-container']['left-container']['etc_data_status_val']= array(
    '#type' => 'textfield',
  '#attributes' => array('class'=> array('etc_data_status_val')),
  //'#required' => TRUE,
  '#prefix' => '<div style="display:none;">',
  '#suffix' => '</div>',
  );
  $element['main-container']['left-container']['etc_loaded_data']= array(
    '#markup' => '<div class="etc-loaded-data-inner"><label></label><div class="etc-description"></div></div>',
  '#prefix' => '<div class="clearfix form-item" id="etc-loaded-data-container">',
  '#suffix' => '</div>',  
  );
  $element['main-container']['right-container']['etc-loaded-data-container-area']= array(
    '#type' => 'textarea',
  '#attributes' => array('class'=> array('form-control etc-loaded-data-container-area')), 
  '#prefix' => '<div style="display:none;">',
  '#suffix' => '</div>',
  );  
  $element['main-container']['left-container']['commitment_number_select_old']= array(
    '#type' => 'select',
  '#title' => 'Commitment Number',
  '#attributes' => array('class'=> array('form-control commitment_number_select_old')),
  '#options'=> $form_state['commitment_number_select_list'],
  '#empty_option' => '- Select Project Number -',
  '#ajax' => array(
    'callback'=> 'change_program_commitment_callback',
    'wrapper' => 'project_commitment_main_container',
    'effect' => 'fade',
  ),
  '#prefix' => '<div class="clearfix form-item" id="commitment_number_select_cust_old" style="display:none;">',
  '#suffix' => '</div>',
  );
   $element['main-container']['left-container']['commitment_number_select'] = array(
  '#type' => 'textfield',
  '#title' => 'Commitment Number',
  '#attributes'=> array('class'=> array('form-control','commitment_number_select'),'placeholder'=>'Enter Commitment Number'),
  '#autocomplete_path' => 'commitment-number-company/autocomplete',
  '#ajax' => array(
      'callback' => 'commitment_number_autocomplete_callback',
      'event' => 'blur',
      'wrapper' => 'workflow-container-section',
      'method' => 'replace',
      'effect' => 'fade',
    ), 
  '#prefix' => '<div class="clearfix form-item" id="commitment_number_select_cust">',
  '#suffix' => '</div>',
  );      
  $element['main-container']['left-container']['commitment_number_select_2']= array(
    '#type' => 'hidden',
  '#title_display' => 'invisible',
  '#attributes' => array('class'=> array('form-control commitment_number_select_2')),
  );
  $element['main-container']['left-container']['commitment_number']= array(
    '#type' => 'textfield',
  '#title' => 'Commitment Number',
  '#attributes' => array('class'=> array('form-control commitment_number')),
  //'#required' => TRUE,
  '#default_value' => $defaultValues['commitment_number']!=''?$defaultValues['commitment_number']:$commitmentNumber,
  '#prefix' => '<div class="clearfix form-item" id="commitment_number_input_cust">',
  '#suffix' => '</div>',
  '#field_suffix' => '<div class="pull-right project-avail-status"><span class="text-danger"></span><span class="text-success"></span></div>'
  );
  /*$element['main-container']['left-container']['cost_code']= array(
    '#type' => 'select',
  '#title' => 'Cost Code',
  //'#options'=> array(),
  '#validate' => TRUE,
  '#attributes' => array('class'=> array('form-control cost_code')),
  '#prefix' => '<div class="disbled-section"><div class="clearfix form-item">',
  '#suffix' => '</div>',
  );*/
  $element['main-container']['left-container']['project_number']= array(
  '#type' => 'select',
  '#title' => 'Project',
  '#options'=> $projectNo,
  '#empty_option' => '- Select Project Number -',
  '#attributes' => array('class'=> array('form-control project_number')),
  '#default_value' => isset($defaultValues['project_number'])?$defaultValues['project_number']:'',
  '#prefix' => '<div class="disbled-section"><div class="clearfix form-item">',
  '#suffix' => '</div>',
  );
  $element['main-container']['left-container']['vendor']= array(
    '#type' => 'textfield',
    '#title' => 'Vendor',
    '#field_prefix' => '<div class="form-inline">',
    '#field_suffix' => '<div class="form-group"><a href="/sendinvite-tom6-users/nojs" class="ctools-use-modal ctools-modal-assign-dashboard-popup-style invite-directto-m6"> + Invite to M6</a></div></div>',
    '#attributes'=> array('class'=> array('form-control vendor','workflow-auto'),'placeholder'=>'Enter the vendor name'),
    '#autocomplete_path' => 'commitment-company/autocomplete',
    '#ajax' => array(
      'callback' => 'commitment_autocomplete_callback',
      'event' => 'blur',
      'wrapper' => 'workflow-container-section',
      'method' => 'replace',
      'effect' => 'fade',
    ), 
    '#default_value' => $vendorVal, 
    '#prefix' => '<div class="clearfix form-item"'.$defaultValues['vendor'].'>',
    '#suffix' => '</div>',
  );    
  $element['main-container']['left-container']['vendor_number']= array(
    '#title' => 'Vendor Number',
    '#type' => 'textfield',
    '#attributes' => array('class'=> array('form-control vendor_number')),
  '#default_value' => $defaultValues['vendor_number']!=''?$defaultValues['vendor_number']:$vendorNumber,
    '#prefix' => '<div class="clearfix form-item">',
    '#suffix' => '</div>',
  );  
  $element['main-container']['left-container']['company_nid']= array(
    '#type' => 'hidden',
    '#title_display' => 'invisible',
    '#attributes' => array('class'=> array('form-control company_nid')),
  );
  $element['main-container']['left-container']['datatable_page_id']= array(
    '#type' => 'hidden',
    '#title_display' => 'invisible',
    '#attributes' => array('class'=> array('form-control datatable_page_id')),
  );
  $element['main-container']['left-container']['page_number_id']= array(
    '#type' => 'hidden',
    '#title_display' => 'invisible',
    '#attributes' => array('class'=> array('form-control page_number_id')),
  );  
  $element['main-container']['left-container']['outside_company']= array(
    '#type' => 'hidden',
    '#title_display' => 'invisible',
    '#attributes' => array('class'=> array('form-control outside_company')),
  );
  $element['main-container']['left-container']['commitment_clone']= array(
    '#type' => 'hidden',
  '#attributes' => array('class'=> array('form-control commitment_clone')),
  );
  $element['main-container']['left-container']['commitment_status']= array(
    '#type' => 'select',
  '#title' => 'Status',
  '#options'=> array('approved' => 'Approved', 'in-process' => 'In Process', 'closed' => 'Closed'),
  '#empty_option' => '- Select -',
  '#attributes' => array('class'=> array('form-control commitment_status')),
  //'#required' => TRUE,
  '#default_value' => isset($defaultValues['commitment_status'])?$defaultValues['commitment_status']:'',
  '#prefix' => '<div class="clearfix form-item">',
  '#suffix' => '</div>',
  );  
  /*$element['main-container']['left-container']['commitment_type']= array(
    '#type' => 'select',
  '#title' => 'Commitment Type',
  '#options'=> array('purchase order' => 'Purchase Order', 'change purchase order' => 'Change Purchase Order','potential change order' => 'Potential Change Order', 'change order' => 'Change Order','contract' => 'Contract','contract amendment' => 'Contract Amendment'),
  '#empty_option' => '- Select -',
  '#attributes' => array('class'=> array('form-control commitment_type')),
  '#default_value' => isset($defaultValues['commitment_type'])?$defaultValues['commitment_type']:'',
  '#prefix' => '<div class="clearfix form-item">',
  '#suffix' => '</div>',
  );*/
  $element['main-container']['left-container']['entered_date']= array(
  '#title' => 'Entered Date',
  '#type' => 'date_popup',
  '#date_format' => 'm/d/Y',  
    '#date_year_range' => '-3:+3',
  '#attributes' => array('class'=> array('form-control entered_date'),'autocomplete' => 'off'),
  '#pre_render' => array('m6connect_programe_date_prerender'),
  '#default_value' => isset($defaultValues['entered_date'])?$defaultValues['entered_date']:'',
  '#prefix' => '<div class="clearfix form-item">',
  '#suffix' => '</div>',
  );  
  $element['main-container']['left-container']['delever_date']= array(
  '#title' => 'Delivery Date',
  '#type' => 'date_popup',
  '#date_format' => 'm/d/Y',  
    '#date_year_range' => '-3:+3',
  '#attributes' => array('class'=> array('form-control delever_date'),'autocomplete' => 'off'),
  '#pre_render' => array('m6connect_programe_date_prerender'),
  '#default_value' => isset($defaultValues['delever_date'])?$defaultValues['delever_date']:'',
  '#prefix' => '<div class="clearfix form-item">',
  '#suffix' => '</div></div>',
  );  
  $element['main-container']['left-container']['entered_date-container'] = array(
    '#markup' => '<div class="company-details-by-email"></div>',
  '#prefix' => '<div class="clearfix form-item">',
  '#suffix' => '</div></div>',
  );  
  $element['main-container']['right-container']['commitment_description']= array(
    '#type' => 'textarea',
  '#title' => 'Description',
  '#attributes' => array('class'=> array('form-control commitment_description')),
  '#after_build' => array('description_custom_field_remove_format_filter_after_build'),
  '#default_value' => isset($defaultValues['commitment_description'])?$defaultValues['commitment_description']:'',
  '#prefix' => '<div class="disbled-section"><div class="clearfix">',
  '#suffix' => '</div>',
  );  
  /*$element['main-container']['right-container']['proposal_attachment'] = array(
    '#type' => 'markup',
  '#markup' => '<div class="proposal-attachment-preview"></div><div class="form-group" id="proposal-attachment-link"><a href="/proposal-attachment/0/nojs" class="ctools-use-modal ctools-modal-assign-dashboard-popup-style custom-proposal-attachment">Attach files from proposal</a></div>',
  );*/
  
  $element['main-container']['right-container']['proposal_attachment_storage'] = array(
    '#type' => 'hidden',
  '#title_display' => 'invisible',
  '#attributes' => array('class'=> array('form-control proposal_attachment_storage')),
  );
  /*$element['main-container']['right-container']['commitment_attachment'] = array(
    '#type' => 'managed_file',
  '#title' => 'Attachment',
  '#upload_location' => 'private://',
  '#prefix' => '<div class="clearfix form-item" id="custom-commit-attach">',
  '#suffix' => '</div>',
  );*/    
  $element['main-container']['right-container']['commitment_attachment'] = array(
    '#type' => 'file',
  '#title' => 'Attachment',
    '#name' => 'files[]',
  '#upload_location' => 'private://', 
  '#field_prefix' => '<div class="commitment-image-preview"></div>',
  '#description' => t('Use CTRL + Click to choose multiple attachments.'),
    '#attributes' => array('multiple' => 'multiple'),    
  '#prefix' => '<div class="clearfix form-item" id="custom-commit-attach">',
  '#suffix' => '</div></div>',
  );
  return $element;
}

function program_modify_commitment_form_custom_validate($form, &$form_state) {
  //echo  '<pre>';  print_r($form_state['values']);  die;
  if($_FILES['files']['name'] != '')  {
  $fileCount = count($_FILES['files']['name']);
  for ($i = 0; $i < $fileCount; $i++) {
      $file = file_save_upload($i, array( 
      'file_validate_extensions' => array('jpg jpeg gif png txt doc docx xls xlsx pdf ppt pptx pps ppsx odt ods odp mp3 mov mp4 m4a m4v mpeg avi ogg oga ogv weba webp webm html csv xls'),
    ));
    if ($file) {    
      if ($file = file_move($file, 'private://')) {
      $form_state['values']['commitment_attachment'][$i] = $file;
        } 
    }
  }
  }
}

function project_commitment_submit(&$form, &$form_state) {  
  global $user; 
  global $company;
  $formVal = $form_state['values'];  
  $alert = $formVal['alert'];  
  //Check for updated commitment or new one
  if($formVal['project_commitment_nid'] != '') {
    $nodeDetails = node_load($formVal['project_commitment_nid']);
    $nodeDetails->body['und'][0]['value'] = $formVal['commitment_description'];
    $nodeDetails->field_commitment_number_calculat['und'][0]['value'] = $formVal['commitment_number'];
    if($formVal['project_number'] != '') {
      $query= db_select('field_data_field_project_mgmt_number','pr');
      $query->fields('pr', array('entity_id'));
      $query->condition('pr.field_project_mgmt_number_value', $formVal['project_number'], '=');
      $query->condition('pr.bundle','project_management','=');
      $projectNid = $query->execute()->fetchField();
      if($projectNid != $formVal['select-commitment']) {
        $newRedirection = 'diff';
        $nodeDetails->field_project_reference['und'][0]['nid'] = $projectNid;
    // Get all the spending by commitment   
        $query= db_select('field_data_field_project_reference','pr');
        $query->join('field_data_field_invoice_commitment','ic','ic.entity_id = pr.entity_id');
      $query->fields('ic', array('entity_id'));
      $query->condition('ic.field_invoice_commitment_nid', $formVal['project_commitment_nid'], '=');
      $query->condition('pr.field_project_reference_nid', $formVal['select-commitment'], '=');
      $query->condition('pr.bundle','project_spending','=');
      $getSpendingNodes = $query->execute()->fetchCol(); 
      if(!empty($getSpendingNodes)) {
          foreach($getSpendingNodes as $delta => $nids) {
            $spendingNodes = node_load($nids);
          $spendingNodes->field_project_reference['und'][0]['nid'] = $projectNid;
            field_attach_update('node', $spendingNodes);
            node_save($spendingNodes);
          }
        }
    // Get all the ETC by commitment    
      $query= db_select('field_data_field_project_reference','pr');
      $query->join('field_data_field_etc_commitment','ec','ec.entity_id = pr.entity_id');
      $query->fields('ec', array('entity_id'));
      $query->condition('ec.field_etc_commitment_nid', $formVal['project_commitment_nid'], '=');
      $query->condition('pr.field_project_reference_nid', $formVal['select-commitment'], '=');
      $query->condition('pr.bundle','project_etc','=');
      $getEtcNodes = $query->execute()->fetchCol(); 
      if(!empty($getEtcNodes)) {
          foreach($getEtcNodes as $delta => $nids) {
            $etcNodes = node_load($nids);
          $etcNodes->field_project_reference['und'][0]['nid'] = $projectNid;
            field_attach_update('node', $etcNodes);
            node_save($etcNodes);
          }
        }   
      }
      else {
        $newRedirection = $formVal['select-commitment'];
      $nodeDetails->field_project_reference['und'][0]['nid'] = $formVal['select-commitment'];
      $nodeDetails->field_cost_code['und'][0]['value'] = $formVal['cost_code'];
      $newRedirection = 'Notdiff';
      }   
    $nodeDetails->field_project_mgmt_number['und'][0]['value'] = $formVal['project_number'];  
  }
    else {
      $newRedirection = '';
    }
    $nodeDetails->field_vendor['und'][0]['value'] = $formVal['company_nid'];  
    $nodeDetails->field_outside_company['und'][0]['value'] = $formVal['outside_company'];
    $nodeDetails->field_invite_to_m6['und'][0]['value'] = $formVal['invite_to_m6']; 
    $nodeDetails->field_commitment_status['und'][0]['value'] = $formVal['commitment_status']; 
    $nodeDetails->field_commitment_type['und'][0]['value'] = $formVal['commitment_type'];
    $nodeDetails->field_entered_date['und'][0]['value'] = $formVal['entered_date']; 
    $nodeDetails->field_delivery_date['und'][0]['value'] = $formVal['delever_date'];    
  $nodeDetails->field_vendor_number['und'][0]['value'] = $formVal['vendor_number'];
  $count = 0;
    if(count($alert >0)) {
      unset($nodeDetails->field_commitement_item_no['und']);
      unset($nodeDetails->field_commitments_unit_measure['und']);
      unset($nodeDetails->field_commitment_unit_cost['und']);
      unset($nodeDetails->field_commitment_quantity['und']);
      unset($nodeDetails->field_commitment_ws_code['und']);
      unset($nodeDetails->field_commitment_item_descriptio['und']);
      unset($nodeDetails->field_commitment_po_total['und']);
      unset($nodeDetails->field_po_commitment_etc_id['und']);
    }
    foreach ($alert as $key => $alert_detail) {
      $nodeDetails->field_commitments_unit_measure['und'][$count]['value'] = $alert_detail['unit_measure']; 
      $nodeDetails->field_commitment_unit_cost['und'][$count]['value'] = $alert_detail['unit_cost'];
      $nodeDetails->field_commitment_quantity['und'][$count]['value'] = $alert_detail['quantity'];
      $nodeDetails->field_commitment_ws_code['und'][$count]['value'] = $alert_detail['ws_code'];        
      $nodeDetails->field_commitment_item_descriptio['und'][$count]['value'] = $alert_detail['po_item_description'];
      $nodeDetails->field_commitment_po_total['und'][$count]['value'] = $alert_detail['po_total']!= ''?str_replace(',','',str_replace("$","",$alert_detail['po_total'])):0;
      $nodeDetails->field_po_commitment_etc_id['und'][$count]['value'] = $alert_detail['etc_status_id']!= ''?$alert_detail['etc_status_id']:0;    
      $nodeDetails->field_po_commitment_item_count['und'][$count]['value'] = $alert_detail['itemCount']!= ''?$alert_detail['itemCount']:0;      
      if($alert_detail['etc_status_id'] != '' && $formVal['etc_data_status_val'] != '') {
        if($formVal['etc_data_status_val'] == 'RemoveEtc') {
          node_delete($alert_detail['etc_status_id']);
        }
        if($formVal['etc_data_status_val'] == 'unCheck') {
          $getEtcDetail = node_load($alert_detail['etc_status_id']);
      // Perform updation on etc node uncheck IN ETC from etc node
          $getEtcDetail->field_etc_operation_done['und'] = array_filter($getEtcDetail->field_etc_operation_done['und'], function($v, $k) {
          return $v['value'] != 'In ETC';
          }, ARRAY_FILTER_USE_BOTH);
          if(empty($getEtcDetail->field_etc_operation_done['und'])) {
            unset($getEtcDetail->field_etc_operation_done['und']);
          }
          field_attach_update('node', $getEtcDetail);
          node_save($getEtcDetail);  
        }  
      }
      $count++;
    }
    $nodeDetails->field_etc_enable_status['und'][$count]['value'] = $formVal['etc_data_status']!= ''?$formVal['etc_data_status']:0;   
    $nodeDetails->field_po_notes_and_instructions['und'][0]['value'] = $formVal['notes_and_instructions'];  
    $nodeDetails->field_po_subtotal_discount['und'][0]['value'] = $formVal['final_total_details_dis'];
    $nodeDetails->field_po_sales_tax_amt['und'][0]['value'] = $formVal['final_total_details_sales_tax_amt'];
    $nodeDetails->field_po_sales_tax_per['und'][0]['value'] = $formVal['final_total_details_sales_tax_per'];
    $nodeDetails->field_po_other_cost['und'][0]['value'] = $formVal['final_total_details_other_cost'];
    $nodeDetails->field_po_sandh['und'][0]['value'] = $formVal['final_total_details_sandh'];      
    $nodeDetails->field_commitment_po_cost_code['und'][$count]['value'] = $formVal['cost_code'];
    $nodeDetails->field_commitment_po_final_total['und'][0]['value'] = $formVal['final_total']!= ''?str_replace(',','',str_replace("$","",$formVal['final_total'])):0;
    $nodeDetails->field_commitment_proposal_attech['und'][0]['value'] = $formVal['proposal_attachment_storage'];
    $nodeDetails->field_commitment_clone_status['und'][0]['value'] = 0;
    if($formVal['etc-loaded-data-container-area'] != '') {
      $nodeDetails->field_etc_loaded_data_container['und'][0]['value'] = $formVal['etc-loaded-data-container-area'];  
    }
    if(isset($formVal['commitment_attachment']) && !empty($formVal['commitment_attachment'])) {
      foreach ($form_state['values']['commitment_attachment'] as $imgkey => $file) {
        if(!isset($nodeDetails->field_commitment_attachment['und'])){
          $nodeDetails->field_commitment_attachment['und'] = array();
        }
        $new_file = file_load($file->fid);
        $file_arr = (array)$new_file;
        $file_arr['display'] = 1;   
        $nodeDetails->field_commitment_attachment['und'][] = $file_arr;
      }
    }
    node_save($nodeDetails);
    if($formVal['final_total'] == '') {
      $amount = '$0.00';
    }
    else {
      $amount = '$'.number_format($formVal['final_total'],2);
    }
    drupal_set_message('Commitment '.$formVal['commitment_number'].' in the amount of '.$amount.' has beed updated.');
  }
  else if($formVal['commitment_number_select_2'] != '' && $formVal['commitment_clone'] == 1) {
    $getPreviousNode = node_load($formVal['commitment_number_select_2']);
    $getCommitNumber = $getPreviousNode->field_commitment_number_calculat['und'][0]['value'];
    $query= db_select('field_data_field_commitment_number_calculat','cn');
    $query->fields('cn', array('entity_id'));
    $query->condition('cn.field_commitment_number_calculat_value', $getCommitNumber, '=');
    $query->condition('cn.bundle','project_commitement','=');
    $getCommitmentNodes = $query->execute()->fetchCol(); 
    $totalCommit = count($getCommitmentNodes);  
    $node = new stdClass();
    $node->type = 'project_commitement';
    $node->title = 'Commitement'.date('m-d-Y H:i:s'); 
    $node->body['und'][0]['value'] = $formVal['commitment_description'];
    $node->uid = $user->uid;
    $node->language = en;
    $node->status = 1;
    $node->og_group_ref['und'][0]['target_id'] = $company->nid; 
    $node->field_commitment_number_calculat['und'][0]['value'] = $getCommitNumber;
    $node->field_total_commit_clone['und'][0]['value'] = $totalCommit;
    $node->field_project_mgmt_number['und'][0]['value'] = $formVal['project_number']; 
    $node->field_vendor['und'][0]['value'] = $formVal['company_nid']; 
    $node->field_cost_code['und'][0]['value'] = $formVal['cost_code']!=''?$formVal['cost_code']:$formVal['commitment_cost_code'];
    $node->field_commitment_status['und'][0]['value'] = $formVal['commitment_status'];  
    $node->field_commitment_type['und'][0]['value'] = $formVal['commitment_type'];
    $node->field_entered_date['und'][0]['value'] = $formVal['entered_date'];
    $node->field_delivery_date['und'][0]['value'] = $formVal['delever_date'];
    $node->field_project_reference['und'][0]['nid'] = $formVal['select-commitment'];
  $node->field_vendor_number['und'][0]['value'] = $formVal['vendor_number'];
    $count = 0;
    foreach ($alert as $key => $alert_detail) {
      $node->field_commitments_unit_measure['und'][$count]['value'] = $alert_detail['unit_measure'];  
      $node->field_commitment_unit_cost['und'][$count]['value'] = $alert_detail['unit_cost'];
      $node->field_commitment_quantity['und'][$count]['value'] = $alert_detail['quantity'];
      $node->field_commitment_ws_code['und'][$count]['value'] = $alert_detail['ws_code'];       
      $node->field_commitment_item_descriptio['und'][$count]['value'] = $alert_detail['po_item_description'];
      $node->field_commitment_po_total['und'][$count]['value'] = $alert_detail['po_total'];
      $count++;
    }
  $nodeDetails->field_po_notes_and_instructions['und'][0]['value'] = $formVal['notes_and_instructions'];  
  $nodeDetails->field_po_subtotal_discount['und'][0]['value'] = $formVal['final_total_details_dis'];
  $nodeDetails->field_po_sales_tax_amt['und'][0]['value'] = $formVal['final_total_details_sales_tax_amt'];
  $nodeDetails->field_po_sales_tax_per['und'][0]['value'] = $formVal['final_total_details_sales_tax_per'];
  $nodeDetails->field_po_other_cost['und'][0]['value'] = $formVal['final_total_details_other_cost'];
  $nodeDetails->field_po_sandh['und'][0]['value'] = $formVal['final_total_details_sandh'];    
  $node->field_commitment_po_cost_code['und'][$count]['value'] = $formVal['cost_code']!=''?$formVal['cost_code']:$formVal['commitment_cost_code'];
  $node->field_commitment_po_final_total['und'][0]['value'] = $formVal['final_total'];  
  $node->field_commitment_proposal_attech['und'][0]['value'] = $formVal['proposal_attachment_storage'];
  $node->field_commitment_clone_status['und'][0]['value'] = 1;
  if($formVal['commitment_attachment'] != '' && !empty($formVal['commitment_attachment'])) {
    foreach ($form_state['values']['commitment_attachment'] as $imgkey => $file) {
      $new_file = file_load($file->fid);
      $file_arr = (array)$new_file;
    $file_arr['display'] = 1; 
    $node->field_commitment_attachment['und'][$imgkey] = $file_arr;
    }     
  }
    node_save($node);
  drupal_goto('/program/commitments', array('query'=>array('pid'=>$formVal['select-commitment'],'cid' => $node->nid)));
    drupal_set_message('Commitment created successfully!'); 
  }
  else {
    $node = new stdClass();
    $node->type = 'project_commitement';
    $node->title = 'Commitement'.date('m-d-Y H:i:s'); 
    $node->body['und'][0]['value'] = $formVal['commitment_description'];
    $node->uid = $user->uid;
    $node->language = en;
    $node->status = 1;
    $node->og_group_ref['und'][0]['target_id'] = $company->nid; 
    $node->field_commitment_number_calculat['und'][0]['value'] = $formVal['commitment_number']; 
    if($formVal['project_number'] != '') {
      $query= db_select('field_data_field_project_mgmt_number','pr');
      $query->fields('pr', array('entity_id'));
      $query->condition('pr.field_project_mgmt_number_value', $formVal['project_number'], '=');
      $query->condition('pr.bundle','project_management','=');
      $projectNid = $query->execute()->fetchField();
      if($projectNid != $formVal['select-commitment']) {
        $newRedirection = $projectNid;
        $node->field_project_reference['und'][0]['nid'] = $projectNid;    
        $newRedirection = 'diff';
      }
      else {
        $newRedirection = $formVal['select-commitment'];
        $node->field_project_reference['und'][0]['nid'] = $formVal['select-commitment'];
        $node->field_cost_code['und'][0]['value'] = $formVal['cost_code'];
        $newRedirection = 'Notdiff';
      }   
      $node->field_project_mgmt_number['und'][0]['value'] = $formVal['project_number']; 
    }
    else {
      $newRedirection = '';
    }
    $node->field_vendor['und'][0]['value'] = $formVal['company_nid'];
    $node->field_outside_company['und'][0]['value'] = $formVal['outside_company'];
    $node->field_commitment_status['und'][0]['value'] = $formVal['commitment_status'];  
    $node->field_commitment_type['und'][0]['value'] = $formVal['commitment_type'];
    $node->field_entered_date['und'][0]['value'] = $formVal['entered_date'];
    $node->field_delivery_date['und'][0]['value'] = $formVal['delever_date'];
  $node->field_vendor_number['und'][0]['value'] = $formVal['vendor_number'];
  $count = 0;
    foreach ($alert as $key => $alert_detail) {
      $node->field_commitments_unit_measure['und'][$count]['value'] = $alert_detail['unit_measure'];  
      $node->field_commitment_unit_cost['und'][$count]['value'] = $alert_detail['unit_cost'];
      $node->field_commitment_quantity['und'][$count]['value'] = $alert_detail['quantity'];
      $node->field_commitment_ws_code['und'][$count]['value'] = $alert_detail['ws_code'];       
      $node->field_commitment_item_descriptio['und'][$count]['value'] = $alert_detail['po_item_description'];
      $node->field_commitment_po_total['und'][$count]['value'] = $alert_detail['po_total']!= ''?str_replace(',','',str_replace("$","",$alert_detail['po_total'])):0;
      $node->field_po_commitment_etc_id['und'][$count]['value'] = $alert_detail['etc_status_id']!= ''?$alert_detail['etc_status_id']:0;   
      $node->field_po_commitment_item_count['und'][$count]['value'] = $alert_detail['itemCount']!= ''?$alert_detail['itemCount']:0;   
      if($alert_detail['etc_status_id'] != '' && $formVal['etc_data_status_val'] != '') {
        if($formVal['etc_data_status_val'] == 'RemoveEtc') {
          node_delete($alert_detail['etc_status_id']);
        }
        if($formVal['etc_data_status_val'] == 'unCheck') {
          $getEtcDetail = node_load($alert_detail['etc_status_id']);
          // Perform updation on etc node uncheck IN ETC from etc node
          $getEtcDetail->field_etc_operation_done['und'] = array_filter($getEtcDetail->field_etc_operation_done['und'], function($v, $k) {
            return $v['value'] != 'In ETC';
          }, ARRAY_FILTER_USE_BOTH);
          if(empty($getEtcDetail->field_etc_operation_done['und'])) {
            unset($getEtcDetail->field_etc_operation_done['und']);
          }
          field_attach_update('node', $getEtcDetail);
          node_save($getEtcDetail);  
        }   
      }
      $count++;
    }
    $node->field_etc_enable_status['und'][$count]['value'] = $formVal['etc_data_status']!= ''?$formVal['etc_data_status']:0;    
    $node->field_po_notes_and_instructions['und'][0]['value'] = $formVal['notes_and_instructions'];
    $node->field_po_subtotal_discount['und'][0]['value'] = $formVal['final_total_details_dis'];
    $node->field_po_sales_tax_amt['und'][0]['value'] = $formVal['final_total_details_sales_tax_amt'];
    $node->field_po_sales_tax_per['und'][0]['value'] = $formVal['final_total_details_sales_tax_per'];
    $node->field_po_other_cost['und'][0]['value'] = $formVal['final_total_details_other_cost'];
    $node->field_po_sandh['und'][0]['value'] = $formVal['final_total_details_sandh']; 
    $node->field_commitment_po_cost_code['und'][$count]['value'] = $formVal['cost_code'];
    $node->field_commitment_po_final_total['und'][0]['value'] = $formVal['final_total']!= ''?str_replace(',','',str_replace("$","",$formVal['final_total'])):0; 
    $node->field_commitment_proposal_attech['und'][0]['value'] = $formVal['proposal_attachment_storage'];
    $node->field_commitment_clone_status['und'][0]['value'] = 0;
    if($formVal['etc-loaded-data-container-area'] != '') {
      $node->field_etc_loaded_data_container['und'][0]['value'] = $formVal['etc-loaded-data-container-area']; 
    }
    if(isset($formVal['commitment_attachment']) && !empty($formVal['commitment_attachment'])) {
      foreach ($form_state['values']['commitment_attachment'] as $imgkey => $file) {
        $new_file = file_load($file->fid);
        $file_arr = (array)$new_file;
        $file_arr['display'] = 1; 
        $node->field_commitment_attachment['und'][$imgkey] = $file_arr;
      }     
    }     
    $myCounter = variable_get('CommitmentNumber');
    variable_set('CommitmentNumber',$myCounter + 1);
    node_save($node);   
    if($formVal['final_total'] == '') {
      $amount = '$0.00';
    }
    else {
      $amount = '$'.number_format($formVal['final_total'],2);
    }
    drupal_set_message('Commitment '.$formVal['commitment_number'].' in the amount of '.$amount.' has beed saved.');
  }  
}

function cost_manager_filter_form($form, &$form_state,$key,$type) {
  $projectId = $_SESSION['ACTIVEPROJECT'];
  if((isset($_SESSION['FILTERTYPE']) && $_SESSION['FILTERTYPE']!= $type) || (!isset($_SESSION['FILTERTYPE'])) || (empty($_SESSION['FILTERTYPE']))){
    $_SESSION['FILTERTYPE'] = $type;
  }
  $type = $_SESSION['FILTERTYPE']; 
  $query= db_select('node','n'); 
  $query->join('field_data_field_project_reference','pr','pr.entity_id = n.nid');
  if($type == 'comNo') {
  $query->join('field_data_field_commitment_number_calculat','cn','cn.entity_id = n.nid');
  $query->fields('cn', array('field_commitment_number_calculat_value'));
  $query->groupBy('cn.field_commitment_number_calculat_value');
  }
  if($type == 'CompanyName') {
  $query->join('field_data_field_vendor','fv','fv.entity_id = n.nid');
  $query->fields('fv', array('field_vendor_value'));
  $query->groupBy('fv.field_vendor_value');
  }
  if($type == 'recType') {
    $query->join('field_data_field_commitment_type','ct','ct.entity_id = n.nid');
  $query->fields('ct', array('field_commitment_type_value'));
  $query->groupBy('ct.field_commitment_type_value');
  }
  if($type == 'commitCostCode') {
    $query->join('field_data_field_commitment_ws_code','ccc','ccc.entity_id = n.nid');
  $query->fields('ccc', array('field_commitment_ws_code_value'));
  $query->groupBy('ccc.field_commitment_ws_code_value');
  }  
  $query->condition('pr.field_project_reference_nid', $projectId, '=');
  $query->condition('pr.bundle','project_commitement','=');  
  $getCommitmentNodes = $query->execute()->fetchAllKeyed(0,0);  
  
  if($type == 'CompanyName') {
    $vendorArr = array();  
  foreach($getCommitmentNodes as $vendorKey => $vendorVal) {
    if($vendorVal == '')  { continue; } //$vendorArr['none'] = 'none'; }
    else if(is_numeric($vendorVal)) {
        $vendorName = node_load($vendorVal)->title;
        $vendorArr[$vendorVal] = ucfirst($vendorName);
      }
    else {
      $vendorArr[$vendorVal] = ucfirst($vendorVal);
      }
    }
  }    
  if($type == 'commitCostCode') {
    $ccArr = array();  
  foreach($getCommitmentNodes as $ccCode) {       
    if($ccCode == 0) { continue; }          
    if($ccCode == '') { continue; }
    $getDesc = get_description_by_cost_code_mod($ccCode);   
    $ccArr[$ccCode] = $getDesc;
  }
  }    
  if($type == 'comNo') {
    $form['select-commitment-number'] = array(
    '#type' => 'select',
    //'#title'=> 'Choose Commitment number',
    '#options' => $getCommitmentNodes,
    '#chosen' => TRUE,
    '#multiple' => TRUE,
    '#default_value' => isset($_SESSION['ACTIVEFILTERVAL-commitNumber'])?$_SESSION['ACTIVEFILTERVAL-commitNumber'][$projectId]:'',
    '#attributes' => array('class'=> array('project_programe_reports_sections')),
    '#ajax' => array(
    'callback'=> 'commitment_filter_callback',
    'wrapper' => 'project_program_reports_main_container',
    'effect' => 'fade',
    ),
    '#prefix' => '<div class="clearfix">',
    '#suffix' => '</div>',
  );
  $form['fileter-for'] = array(
    '#type' => 'hidden',
    '#value' => 'commitment-no',
  );
  }
  if($type == 'CompanyName') {
    $form['select-company-name'] = array(
    '#type' => 'select',
    //'#title'=> 'Choose Commitment number',
    '#options' => $vendorArr,
    '#chosen' => TRUE,
    '#multiple' => TRUE,
    '#default_value' => isset($_SESSION['ACTIVEFILTERVAL-commitCompanyName'])?$_SESSION['ACTIVEFILTERVAL-commitCompanyName'][$projectId]:'',
    '#attributes' => array('class'=> array('project_programe_reports_sections')),
    '#ajax' => array(
    'callback'=> 'commitment_filter_callback',
    'wrapper' => 'project_program_reports_main_container',
    'effect' => 'fade',
    ),
    '#prefix' => '<div class="clearfix">',
    '#suffix' => '</div>',
  );
  $form['fileter-for'] = array(
    '#type' => 'hidden',
    '#value' => 'company-name',
  );
  }      
  if($type == 'recType') {
    $form['select-record-type'] = array(
    '#type' => 'select',
    //'#title'=> 'Choose Commitment number',
    '#options' => $getCommitmentNodes,
    '#chosen' => TRUE,
    '#multiple' => TRUE,
    '#attributes' => array('class'=> array('project_programe_reports_sections')),
    '#default_value' => isset($_SESSION['ACTIVEFILTERVAL-commitRecType'])?$_SESSION['ACTIVEFILTERVAL-commitRecType'][$projectId]:'',
    '#ajax' => array(
    'callback'=> 'commitment_filter_callback',
    'wrapper' => 'project_program_reports_main_container',
    'effect' => 'fade',
    ),
    '#prefix' => '<div class="clearfix">',
    '#suffix' => '</div>',
  );
  $form['fileter-for'] = array(
    '#type' => 'hidden',
    '#value' => 'record-type',
  );
  }
  if($type == 'commitCostCode') {
    $form['select-cost-code'] = array(
    '#type' => 'select',
    //'#title'=> 'Choose Commitment number',
    '#options' => $ccArr,
    '#chosen' => TRUE,
    '#multiple' => TRUE,
    '#attributes' => array('class'=> array('project_programe_reports_sections')),
    '#default_value' => isset($_SESSION['ACTIVEFILTERVAL-commitCostCode'])?$_SESSION['ACTIVEFILTERVAL-commitCostCode'][$projectId]:'',
    '#ajax' => array(
    'callback'=> 'commitment_filter_callback',
    'wrapper' => 'project_program_reports_main_container',
    'effect' => 'fade',
    ),
    '#prefix' => '<div class="clearfix">',
    '#suffix' => '</div>',
  );
  $form['fileter-for'] = array(
    '#type' => 'hidden',
    '#value' => 'commit-cost-code',
  );
  }
  $form['project-for'] = array(
    '#type' => 'hidden',
    '#value' => $projectId,
  );
  return $form;
}

function commitment_filter_callback($form,&$form_state) { 
  global $company;  
  $formVal = $form_state['values'];  
  //echo  '<pre>';  print_r($formVal['select-commitment-number']);  die;
  $commands = array();
  $triggeringElement = $form_state['triggering_element'];  
  if(!empty($triggeringElement['#value']) && $triggeringElement['#value'] != 0 && $triggeringElement['#value'] != ''){
    if($formVal['fileter-for'] == 'company-name') {
    if(isset($formVal['select-company-name'])) {  
     if((isset($_SESSION['ACTIVEFILTERVAL-commitCompanyName']) && $_SESSION['ACTIVEFILTERVAL-commitCompanyName'][$_SESSION['ACTIVEFILTERVAL-commitCompanyName']] != $formVal['fileter-for']) || (!isset($_SESSION['ACTIVEFILTERVAL-commitCompanyName'])) || (empty($_SESSION['ACTIVEFILTERVAL-commitCompanyName']))){
        $_SESSION['ACTIVEFILTERVAL-commitCompanyName'][$_SESSION['ACTIVEPROJECT']] = $formVal['select-company-name'];
      }
        $commands[] = ajax_command_html("#programe-commitment-details", get_commitment_listing_table_data($formVal['project-for'], $formVal['fileter-for'],$formVal['select-company-name'],'',0,0));    
    }
    else {
      $commands[] = ajax_command_html("#programe-commitment-details", get_commitment_listing_table_data($formVal['project-for'], $formVal['fileter-for'],array(),'',0,0));
    }
  } 
  else if($formVal['fileter-for'] == 'commitment-no') {
    if(isset($formVal['select-commitment-number'])) {
      if((isset($_SESSION['ACTIVEFILTERVAL-commitNumber']) && $_SESSION['ACTIVEFILTERVAL-commitNumber'][$_SESSION['ACTIVEFILTERVAL-commitNumber']] != $formVal['fileter-for']) || (!isset($_SESSION['ACTIVEFILTERVAL-commitNumber'])) || (empty($_SESSION['ACTIVEFILTERVAL-commitNumber']))){
        $_SESSION['ACTIVEFILTERVAL-commitNumber'][$_SESSION['ACTIVEPROJECT']] = $formVal['select-commitment-number'];
      }
    $commands[] = ajax_command_html("#programe-commitment-details", get_commitment_listing_table_data($formVal['project-for'], $formVal['fileter-for'],$formVal['select-commitment-number'],'',0,0));
    }
    else {
      $commands[] = ajax_command_html("#programe-commitment-details", get_commitment_listing_table_data($formVal['project-for'], $formVal['fileter-for'],array(),'',0,0));
    }
    }
  else if($formVal['fileter-for'] == 'record-type') {
    if(isset($formVal['select-record-type'])) {
      if((isset($_SESSION['ACTIVEFILTERVAL-commitRecType']) && $_SESSION['ACTIVEFILTERVAL-commitRecType'][$_SESSION['ACTIVEFILTERVAL-commitRecType']] != $formVal['fileter-for']) || (!isset($_SESSION['ACTIVEFILTERVAL-commitRecType'])) || (empty($_SESSION['ACTIVEFILTERVAL-commitRecType']))){
        $_SESSION['ACTIVEFILTERVAL-commitRecType'][$_SESSION['ACTIVEPROJECT']] = $formVal['select-record-type'];
      } 
    $commands[] = ajax_command_html("#programe-commitment-details", get_commitment_listing_table_data($formVal['project-for'], $formVal['fileter-for'],$formVal['select-record-type'],'',0,0));
    }
    else {
      $commands[] = ajax_command_html("#programe-commitment-details", get_commitment_listing_table_data($formVal['project-for'], $formVal['fileter-for'],array(),'',0,0));
    }
    }
  else if($formVal['fileter-for'] == 'commit-cost-code')  {
    if(isset($formVal['select-cost-code'])) {
    if((isset($_SESSION['ACTIVEFILTERVAL-commitCostCode']) && $_SESSION['ACTIVEFILTERVAL-commitCostCode'][$_SESSION['ACTIVEFILTERVAL-commitCostCode']] != $formVal['fileter-for']) || (!isset($_SESSION['ACTIVEFILTERVAL-commitCostCode'])) || (empty($_SESSION['ACTIVEFILTERVAL-commitCostCode']))){
        $_SESSION['ACTIVEFILTERVAL-commitCostCode'][$_SESSION['ACTIVEPROJECT']] = $formVal['select-cost-code'];
      }   
      $commands[] = ajax_command_html("#programe-commitment-details", get_commitment_listing_table_data($formVal['project-for'], $formVal['fileter-for'],$formVal['select-cost-code'],'',0,0));
    }
    else {
      $commands[] = ajax_command_html("#programe-commitment-details", get_commitment_listing_table_data($formVal['project-for'], $formVal['fileter-for'],array(),'',0,0));
    }
    }   
  }
  return array('#type' => 'ajax', '#commands' => $commands);
}

function get_commitment_listing_table_data($projectId = 0,$filterFor = '', $filterVal='',$ajax=FALSE,$startRange=0, $endRange=50) { 
  global $company;  
  setlocale(LC_MONETARY, 'en_US');
  drupal_add_js(drupal_get_path('module', 'm6connect_program') . '/js/m6connect_program.js');
  drupal_add_js(drupal_get_path('module', 'm6connect_program') . '/js/Prototype_Price_Format_0.1.js');
  drupal_add_js(drupal_get_path('theme', 'm6connect') . '/js/jquery.dataTables.min.js');
  drupal_add_css(drupal_get_path('theme', 'm6connect') . '/css/jquery.dataTables.min.css');
  $getCommitementByCompany = _project_commitment_list_by_company($company->nid);  
  $rows = array();
  $formIndex = 1;
  $header = array(
  array('data'=>'Commitment Number <i id="commitment-number-filter" class="fa fa-caret-down filter-sort" aria-hidden="true"></i><br><span class="commitment-number-filter-def resesting" style="color:#ef6f6f; display:none; cursor:pointer;">Reset</span><div class="commitment-number-filter" style="display:none;" data="hiddenCus">'.render(drupal_get_form('cost_manager_filter_form_100', 100, 'comNo')).'<div class="clearfix margin-bottom-10"><span class="fa-times-filter padding-5" id="commitment-number-filter" style="cursor:pointer;">Close</span><div class="rest-all-filter-commit display-inline-block" ><span class="resesting" aria-hidden="true" style="color:#ef6f6f;">Reset</span></div></div></div>','class'=>array('text-center')),  
    
  array('data'=>'Company Name <i id="company-name-filter" class="fa fa-caret-down filter-sort" aria-hidden="true"></i><br><span class="company-name-filter-def resesting" style="color:#ef6f6f; display:none; cursor:pointer;">Reset</span><div class="company-name-filter" style="display:none;" data="hiddenCus">'.render(drupal_get_form('cost_manager_filter_form_200', 200,'CompanyName')).'<div class="clearfix margin-bottom-10"><span class="fa-times-filter padding-5" id="company-name-filter" style="cursor:pointer;">Close</span><div class="rest-all-filter-commit display-inline-block" ><span class="resesting" aria-hidden="true" style="color:#ef6f6f;">Reset</span></div></div></div>','class'=>array('text-center')),  
  
  array('data'=>'Record Type <i id="record-type-filter" class="fa fa-caret-down filter-sort" aria-hidden="true"></i><br><span class="record-type-filter-def resesting" style="color:#ef6f6f; display:none; cursor:pointer;">Reset</span><div class="record-type-filter" style="display:none;" data="hiddenCus">'.render(drupal_get_form('cost_manager_filter_form_300', 300, 'recType')).'<div class="clearfix margin-bottom-10"><span class="fa-times-filter padding-5" id="record-type-filter" style="cursor:pointer;">Close</span><div class="rest-all-filter-commit display-inline-block" ><span class="resesting" aria-hidden="true" style="color:#ef6f6f;">Reset</span></div></div></div>','class'=>array('text-center')),  
  
  array('data'=>'Cost Code <i id="cost-code-filter" class="fa fa-caret-down filter-sort" aria-hidden="true"></i><br><span class="cost-code-filter-def resesting" style="color:#ef6f6f; display:none; cursor:pointer;">Reset</span><div class="cost-code-filter" style="display:none;" data="hiddenCus">'.render(drupal_get_form('cost_manager_filter_form_400', 400, 'commitCostCode')).'<div class="clearfix margin-bottom-10"><span class="fa-times-filter padding-5" id="cost-code-filter" style="cursor:pointer;">Close</span><div class="rest-all-filter-commit display-inline-block" ><span class="resesting" aria-hidden="true" style="color:#ef6f6f;">Reset</span></div></div></div>','class'=>array('text-center')),
  
  array('data'=>'Commitment Total','class'=>array('text-center')),
  array('data'=>'Invoice Total','class'=>array('text-center')),
  array('data'=>'PO Balance','class'=>array('text-center')),
  array('data'=>'Date','class'=>array('text-center')),
  array('data'=>'Actions <br><div class="rest-all-filter-commit" style="display:none;"><input type="button" value="Reset All" class="text-danger"></div>','class'=>array('text-center','no-data')),
  );
  $query = db_select('field_data_field_project_reference','pr');
  $query->fields('pr', array('entity_id'));
  $query->join('og_membership','om','om.etid=pr.entity_id AND om.entity_type=:entityType', array(':entityType'=>'node'));
  $query->condition('pr.field_project_reference_nid', $projectId, '=');
  if($filterVal != '') {
    if($filterFor == 'commitment-no') { 
      $query->join('field_data_field_commitment_number_calculat','cn','cn.entity_id = pr.entity_id');
    $query->condition('cn.field_commitment_number_calculat_value', $filterVal, 'IN');   
    }
    if($filterFor == 'company-name') {
    rsort($filterVal);
    $query->join('field_data_field_vendor','fv','fv.entity_id = pr.entity_id');
    $query->condition('fv.field_vendor_value', $filterVal, 'IN');
    }
  if($filterFor == 'record-type') {
    rsort($filterVal);  
      $query->join('field_data_field_commitment_type','ct','ct.entity_id = pr.entity_id');
    $query->condition('ct.field_commitment_type_value', $filterVal, 'IN');
    } 
  if($filterFor == 'commit-cost-code') {
    rsort($filterVal);
    $query->join('field_data_field_commitment_ws_code','ccc','ccc.entity_id = pr.entity_id');
    $query->condition('ccc.field_commitment_ws_code_value', $filterVal, 'IN');
  }
  $query->condition('om.gid', $company->nid, '=');
    $query->condition('pr.bundle','project_commitement','=');  
    $query->orderBy('pr.entity_id', 'DESC');
    $aded = clone $query;
    $aded_sayi = $aded->execute();
    $rakam = $aded_sayi->rowCount();  
    $getCommitmentNodes = $query->execute()->fetchAll(); 
  }
  else {
    $query->condition('om.gid', $company->nid, '=');
    $query->condition('pr.bundle','project_commitement','=');  
    $query->orderBy('pr.entity_id', 'DESC');
    $aded = clone $query;
    $aded_sayi = $aded->execute();
    $rakam = $aded_sayi->rowCount();       
  if($startRange == 'select') {
    $getCommitmentNodes = $query->range(0,$endRange)->execute()->fetchAll();
  }
  else {
    $getCommitmentNodes = $query->range($startRange,50)->execute()->fetchAll();
  }
  }
  if(!empty($getCommitmentNodes)) {  
    $attachContent = '';
  $fileiconsdata = array();
  $ccIconsdata = array();
  $fileArr = array();
  $cCodeArr = array();
  foreach($getCommitmentNodes as $commitmentId => $commitmentVal) {
    $commitmentNode = node_load($commitmentVal->entity_id);  
    $commitmentTotal = '$0.00';  
    $fileiconsdata = array(); 
    $ccIconsdata = array(); 
    $fileArr = array();
    $cCodeArr = array();
    // End work of commitment total
    $commitmentTotal = isset($commitmentNode->field_commitment_po_final_total['und'])?$commitmentNode->field_commitment_po_final_total['und'][0]['value']:'0.00';
    if($commitmentTotal < 0) {
        $commitmentTotalAdd = '<span class="text-danger">$'.number_format($commitmentTotal, 2).'</span>';
      }
      else {
       $commitmentTotalAdd = '<span>$'.number_format($commitmentTotal, 2).'</span>';
      }
    $commitmentNo = isset($commitmentNode->field_commitment_number_calculat['und'])?$commitmentNode->field_commitment_number_calculat['und'][0]['value']:'None';
    
    if(isset($commitmentNode->field_vendor['und']) && is_numeric($commitmentNode->field_vendor['und'][0]['value'])) {
      $companyName = node_load($commitmentNode->field_vendor['und'][0]['value'])->title;
    }
    else {
      $companyName = $commitmentNode->field_vendor['und'][0]['value'];
    }
    $recordType = isset($commitmentNode->field_commitment_type['und'])?$commitmentNode->field_commitment_type['und'][0]['value']:'None';  
    $costCode = isset($commitmentNode->field_cost_code['und'])?$commitmentNode->field_cost_code['und'][0]['value']:'None';
    if(isset($commitmentNode->field_total_commit_clone['und'])) {
     if($commitmentNode->field_total_commit_clone['und'][0]['value'] != 0) {    
       $commitmentNo = $commitmentNo.' - '.$commitmentNode->field_total_commit_clone['und'][0]['value'];
     }
     else {
       $commitmentNo = $commitmentNo;
     }
    }
    else {
      $commitmentNo = $commitmentNo;
    }
    $attachContent = '';
    if(isset($commitmentNode->field_commitment_proposal_attech['und'])) {
      $attachment = $commitmentNode->field_commitment_proposal_attech['und'][0]['value'];   
    if($attachment != '') {     
        $attachmentArr = explode(',', $attachment);
      foreach($attachmentArr as $fileId) {
        if($fileId == 0) { continue; }  
        $fileData = file_load($fileId);       
      $attachContent .= '<p><a href="file_create_url($fileData->uri)" target="_blank" class="proposal-image">'.substr($fileData->filename,0,10).'</a></p>';
      }
      }
    }
    //$fileArr = array();
    $fileModuleIconPath = '/'.drupal_get_path('module','file').'/icons/';
    $fileIconPath = array(
      'image' => $fileModuleIconPath.'image-x-generic.png',
    'pdf' => $fileModuleIconPath.'application-pdf.png',
    'document' => $fileModuleIconPath.'x-office-document.png',
    'text' => $fileModuleIconPath.'text-plain.png',
    );
    if(isset($commitmentNode->field_commitment_attachment['und'])) {  
      foreach($commitmentNode->field_commitment_attachment['und'] as $addKey => $addVal) {
      /*if (strpos($addVal['filemime'], 'pdf')!==FALSE) {
      $fileArr['pdf'][] = array('filename'=>$addVal['filename'],'uri'=>$addVal['uri']); //l($addVal['filename'], file_create_url($addVal['uri']));  
      }
      if(strpos($addVal['filemime'], 'image')!==FALSE) {
      $fileArr['image'][] = array('filename'=>$addVal['filename'],'uri'=>$addVal['uri']); //l($addVal['filename'], file_create_url($addVal['uri']));  
      }
      if(strpos($addVal['filemime'], 'document')!==FALSE) {
      $fileArr['document'][] = array('filename'=>$addVal['filename'],'uri'=>$addVal['uri']); //l($addVal['filename'], file_create_url($addVal['uri']));  
      }
      if(strpos($addVal['filemime'],'text')!==FALSE) {
      $fileArr['text'][] = array('filename'=>$addVal['filename'],'uri'=>$addVal['uri']); //l($addVal['filename'], file_create_url($addVal['uri']));  
      }*/
      $fileArr['image'][] = array('filename'=>$addVal['filename'],'uri'=>$addVal['uri']); //l($addVal['filename'], file_create_url($addVal['uri']));  
    } 
    //$fileiconsdata = array();
    if(!empty($fileArr)) {
      foreach($fileArr as $fileKey => $fileVal) {
      $itemCount = count($fileVal);
      //$fileiconsdata[$fileKey] = '<div class="dropdown pull-left padding-10">'; 
      $fileiconsdata[$fileKey] = '<span class="dropdown padding-10">'; 
      if($itemCount>1){
        $fileiconsdata[$fileKey] .= '<a href="#" id="action-document-'.$commitmentNode->nid.'-'.$fileKey.'" class="dropdown-toggle"  data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">' ;  
        //$fileiconsdata[$fileKey] .= '<img src="'.$fileIconPath[$fileKey].'" /><i class="fa fa-paperclip" aria-hidden="true"></i>' ;
        $fileiconsdata[$fileKey] .= '<i class="fa fa-paperclip" aria-hidden="true" style="font-size:20px;"></i>' ;
        $fileiconsdata[$fileKey] .= '<span class="caret"></span></a>' ;
        $fileiconsdata[$fileKey] .= '<ul class="dropdown-menu" role="menu" aria-labelledby="action-document-'.$commitmentNode->nid.'-'.$fileKey.'">' ;
        foreach($fileVal as $delta => $fileData){
        $fileiconsdata[$fileKey] .= '<li><a target="_blank" href="'.file_create_url($fileData['uri']).'">'.$fileData['filename'].'</a>'; 
        }
        $fileiconsdata[$fileKey] .= '</ul>';
      }else{
         $fileiconsdata[$fileKey] .= '<a  target="_blank" href="'.file_create_url($fileVal[0]['uri']).'" id="action-document-'.$commitmentNode->nid.'-'.$fileKey.'">' ;
         //$fileiconsdata[$fileKey] .= '<img src="'.$fileIconPath[$fileKey].'" />' ;
         $fileiconsdata[$fileKey] .= '<i class="fa fa-paperclip" aria-hidden="true" style="font-size:20px;"></i>' ;
         $fileiconsdata[$fileKey] .= '</a>' ;
      }
      $fileiconsdata[$fileKey] .= '</span>';
      } 
    }
    }
    if(isset($commitmentNode->field_commitment_ws_code['und']) && $commitmentNode->field_commitment_ws_code['und'][0]['value'] != '') {  
      foreach($commitmentNode->field_commitment_ws_code['und'] as $ccKey => $ccVal) {    
      $cCodeArr['costCode'][] = array('ccName' => $ccVal['value'],'poAmt' => $commitmentNode->field_commitment_po_total['und'][$ccKey]['value']);
    }
    if(!empty($cCodeArr)) {
      foreach($cCodeArr as $fileKey => $fileVal) {
      $itemCount = count($fileVal);     
      $ccIconsdata[$fileKey] = '';
      //$ccIconsdata[$fileKey] = '<span class="dropdown padding-10">';
      if($itemCount > 1){
        $ccIconsdata[$fileKey] = '<span class="padding-10">'; 
        $ccIconsdata[$fileKey] .= '<a href="#" id="action-document-cc-'.$commitmentNode->nid.'-'.$fileKey.'" class="dropdown-toggle"  data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">' ; 
        $ccIconsdata[$fileKey] .= 'Multiple' ;
        $ccIconsdata[$fileKey] .= '<span class="caret"></span></a>' ;
        $ccIconsdata[$fileKey] .= '<ul class="dropdown-menu dropdown-menu-upper-arrow" role="menu" aria-labelledby="action-document-cc-'.$commitmentNode->nid.'-'.$fileKey.'">' ;
        foreach($fileVal as $delta => $fileData){
        $poAmount = $fileData['poAmt'] != ''?number_format($fileData['poAmt'],2):'0.00';
        $ccIconsdata[$fileKey] .= '<li><a href="javascript:void(0)">'.get_description_by_cost_code_mod($fileData['ccName']).' - $'.$poAmount.'</a></li>'; 
        }
        $ccIconsdata[$fileKey] .= '</ul>';
        $ccIconsdata[$fileKey] .= '</span>';  
      }else{
         $poAmount = $fileVal[0]['poAmt'] != ''?number_format($fileVal[0]['poAmt'], 2):0.00;
         //$ccIconsdata[$fileKey] .= get_description_by_cost_code_mod($fileVal[0]['ccName']).' - $'.$poAmount;
         $ccIconsdata[$fileKey] .= get_description_by_cost_code_mod($fileVal[0]['ccName']);
      }
      
      } 
    }
    }
    else {    
      $ccIconsdata[$fileKey] .= isset($commitmentNode->field_cost_code['und'])?get_description_by_cost_code_mod($commitmentNode->field_cost_code['und'][0]['value']):'None';    
    }
    $string = htmlentities($costCode, null, 'utf-8');
    $content = str_replace("&nbsp;", " ", $string);
    $upCCode = html_entity_decode($content);
    if($costCode != '' && $costCode != 'None') {
      $query= db_select('node','n'); 
    $query->join('field_data_field_estimate_reference','er','er.entity_id = n.nid');
    $query->join('node','enode','enode.nid=er.field_estimate_reference_nid');
    $query->join('field_data_field_project_estimate_status','es','es.entity_id = enode.nid');   
    $query->leftjoin('field_data_field_est_cost_code','cc','cc.entity_id=n.nid');
    $query->fields('cc',array('field_est_cost_code_value'));
    $query->condition('es.field_project_estimate_status_value', 'approved', '=');   
    $query->orderBy('cc.field_est_cost_code_value', 'ASC');
    $getCostCode = $query->execute()->fetchCol();   
    $query= db_select('node','n'); 
        $query->join('field_data_field_manager_cost_code','mcc','mcc.entity_id = n.nid');      
        $query->join('field_data_field_cost_code_description','ccd','ccd.entity_id = n.nid');       
        $query->fields('ccd',array('field_cost_code_description_value'));   
        $query->condition('mcc.field_manager_cost_code_value', $upCCode, '=');
        $query->condition('n.type', 'project_cost_code', '=');
        $getCostCodeDesc = $query->execute()->fetchField();       
    if(!in_array($upCCode, $getCostCode)) {
      $costCode = $upCCode.'|'.$getCostCodeDesc.'<br><span style="color:#f00;">Unapproved</span>';  
    }
    else {
      $costCode = $upCCode.'|'.$getCostCodeDesc;
    }
    }
    // Get invoice spending amount
    $query= db_select('node','n'); 
    $query->join('field_data_field_project_reference','pr','pr.entity_id = n.nid');
    $query->join('field_data_field_invoice_commitment','ic','ic.entity_id = n.nid');
    $query->join('field_data_field_invoice_amount','ia','ia.entity_id = n.nid');
    $query->addExpression('SUM(ia.field_invoice_amount_value)','finalTotal');
    $query->condition('n.type','project_spending','=');
    $query->condition('ic.field_invoice_commitment_nid',$commitmentNode->nid,'=');
    $query->condition('pr.field_project_reference_nid', $projectId, '=');
    $query->groupBy('ic.field_invoice_commitment_nid');
    $getTotalSpending = $query->execute()->fetchField();      
    $invoice = $getTotalSpending!= ''?$getTotalSpending:'0.00';
    if($invoice < 0) {
        $invoiceTotal = '<span class="text-danger">$'.number_format($invoice,2).'</span>';
      }
      else {
        $invoiceTotal = '$'.number_format($invoice,2);
      }
    $poBalance = ($commitmentTotal - $invoice);
    if($poBalance < 0) {
        $poBalanceTotal = '<span class="text-danger">$'.number_format($poBalance,2).'</span>';
      }
      else {
        $poBalanceTotal = '$'.number_format($poBalance,2);
      }
    $date = date('m/d/Y', $commitmentNode->created);    
    $POItems = l('[View]', 'view/'.$commitmentId);
    $action = '<div class="project-action"><div class="btn-group">
           <div class="dropdown">
             <button id="dLabel" class="btn btn-success" type="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"> Actions</button>
               <ul class="dropdown-menu" role="menu" aria-labelledby="dLabel">
                   <li>'.l('Edit', 'edit/'.$commitmentNode->nid.'/details', array('attributes' => array('class' => 'edit-commitment-detail', 'for' => $commitmentNode->nid))).'</li>
          <li>'.l('Delete', url('node-delete/nojs/'.$commitmentNode->nid), array( 'external'=>TRUE, 'attributes'=> array('class'=>array('use-ajax ctools-modal-assign-dashboard-popup-style ctools-use-modal'))) ).'</li>
              </ul></div></div>';           
    $rows[] = array(
    'data' => array(
          //array('data' => l($commitmentNo, 'edit/'.$commitmentNode->nid.'/details', array('attributes' => array('class' => 'edit-commitment-detail'), 'for' => $commitmentNode->nid)),'class' => array('text-left')),
          array('data' => l('<span class="commitment-nu-cust">'.$commitmentNo.'</span>', 'edit/'.$commitmentNode->nid.'/details', array('html' => TRUE, 'external' => TRUE,'attributes' => array('class' => 'edit-commitment-detail', 'for' => $commitmentNode->nid))).''.implode('&nbsp;',$fileiconsdata),'class' => array('text-left')),                    
          //array('data' => $attachContent!=''?$attachContent:'None','class' => array('text-left')),
          //array('data' => implode('&nbsp;',$fileiconsdata),'class' => array('text-left')),          
          array('data' => $companyName!=''?ucwords($companyName):'None','class' => array('text-left')),
          array('data' => $recordType!=''?ucwords($recordType):'None','class' => array('text-left')),
          //array('data' => $costCode,'class' => array('text-left')),         
          array('data' => implode('&nbsp;',$ccIconsdata),'class' => array('text-left')),
          array('data' => $commitmentTotalAdd,'class' => array('text-right')),
          array('data' => $invoiceTotal,'class' => array('text-right')),
          array('data' => $poBalanceTotal,'class' => array('text-right')),
          array('data' => $date,'class' => array('text-left')),
          array('data' => $action,'class' => array('text-center')),
          ),  
          //'class' => array('custom-odd'),
    );
  }
  }
  $outputBefore = _get_pager_option_data_list($projectId,'commit');
  if(!$ajax){
    $output = theme('table', array('header'=>$header,'rows'=>$rows,'empty'=>'No Commitment created yet','attributes'=>array('class'=>array('table','m6connect-custom-table','m6connect-custom-program-table','m6connect-program-commitment-table','table-hover','table-bordered','text-center'))));       
  }
  else{
    $output = theme('feedback_table_rows', array('header' => array(), 'rows' => $rows));
  }
  $pagerGene = '';
  if($rakam > 50) {
    $pagerGene .= '<div class="item-list"><ul class="pager">';
    $pagerGene .= '<li class="pager-current">'.l('<< First', 'get-next-page-data/commit/0/'.$projectId.'/nojs', array('attributes' => array('class' => array('use-ajax','page-range-0')))).'</li>';
    if($rakam > 50) {
      $getpageLimit = $rakam/50;
    $getpageLimit = ceil($getpageLimit);
    }
    for($i = 1; $i<=$getpageLimit; $i++) {
      $pagerGene .= '<li class="pager-current">'.l($i, 'get-next-page-data/commit/'.$i.'/'.$projectId.'/nojs', array('attributes' => array('class' => array('use-ajax','page-range-'.$i)))).'</li>';
    }
    $pagerGene .= '<li class="pager-current">'.l('Last >>', 'get-next-page-data/commit/'.$getpageLimit.'/'.$projectId.'/nojs', array('attributes' => array('class' => array('use-ajax','page-range-0')))).'</li>';
    $pagerGene .= '</ul></div>';
  }
  return $outputBefore.$output.$pagerGene;
}

function _get_filter_form($proId = 0) { 
  return '<div class="nav-clibrate form-inline margin-bottom-10">             
            <div class="form-group">  
              <label>Number of items</label>
              <select class="commitment-data-load-more-to form-control" name="pager-navigation" for="'.$proId.'">
                <option value="10">10</option>
                <option value="20">20</option>
              <option value="30">30</option>
              <option value="40">40</option>
                <option value="50">50</option>
              <option value="100">100</option>
              <option value="200">200</option>
              <option value="all">All</option>
              </select>
              </div>
          <input type="button" value="Apply" class="filter-custom-range btn btn-primary" for="'.$proId.'" />
          </div>';
}

function m6connect_program_forms($form_id, $args) {
  $forms = array();
  if (strpos($form_id,'cost_manager_filter_form_')!==FALSE) {
    $forms['cost_manager_filter_form_'.$args[0]] = array('callback' => 'cost_manager_filter_form');
  }
  if (strpos($form_id,'cost_manager_spending_filter_form_')!==FALSE) {
    $forms['cost_manager_spending_filter_form_'.$args[0]] = array('callback' => 'cost_manager_spending_filter_form');
  }
  
  return $forms;
}
// ===================================
// End Commitments Slide (Tab) Section

// ===================================
// Start Spending Slide (Tab) Section
// ===================================
function program_project_spending_content(){
  global $company;    
  $getEstimateByCompany = _project_list_by_company($company->nid, 'project_management');    
  reset( $array );
  $firstProject = key( $getEstimateByCompany );       
  $elements = array();
  $elements['spending_form']= array(
    '#markup' => drupal_render(drupal_get_form('program_modify_spending_form')),
    '#prefix' => '<div class="clearfix margin-bottom-10">',
    '#suffix' => '</div>',
  );  
  $elements['prgram-spending-listing'] = array(
    '#markup' => get_spending_listing_table_data($firstProject),
    '#prefix' => '<div class="clearfix"><div class="prgram-spending-listing prgram-commitment-listing" id="programe-spending-details">',
    '#suffix' => '</div></div>',
   );   
  return $elements;
}

function program_modify_spending_form($form,&$form_state) {
  global $user;
  global $company;
  drupal_add_js(drupal_get_path('module', 'm6connect_program') . '/js/m6connect_program_spending.js');
  drupal_add_js(drupal_get_path('module', 'm6connect_program') . '/js/Prototype_Price_Format_0.1.js');
  drupal_add_css('.select2-disabled {display:none !important;} ', 'inline');
  drupal_add_css('.spending-image-preview img { height: auto; width: 200px; }', array('type' => 'inline'));

  // Get project estimate list by company     
  $getCommitementByCompany = _project_spending_list_by_company($company->nid);  
  $getProjectByCompany = _project_list_by_company($company->nid, 'project_management');   

  // Spending invoice number calculation
  $myCounter = variable_get('SpendingNumber');
  $makeSr = str_pad($myCounter + 1, 6, "0", STR_PAD_LEFT);
  $spendingNumber = 'INV'.$makeSr.'-'.date('Y');

  $form['#attached']['js'][] = array(
    'data'=>drupal_get_path('module', 'm6connect_routing') . '/js/routing_type_slip_form.js',
  'type'=>'file'
  );
  $form['#attributes']['enctype'] = "multipart/form-data";
  $form['#attributes']['class'] = array('program_modify_spending_form');

  if (empty($form_state['spendingNumber'])) {
    $form_state['spendingNumber'] = $spendingNumber;
  }
  if (empty($form_state['asset_cat_storage_default_value_remove_data'])) {
    $form_state['asset_cat_storage_default_value_remove_data'] = array();
  }
  

  $form['no-amt-in-field']= array(
    '#markup' => '',
    '#prefix' => '<div id="nothingin-amt-field-dialog">',
    '#suffix' => '</div>',
  );
  $form['clear-split-spread']= array(
    '#markup' => '',
    '#prefix' => '<div id="clear-split-spread">',
    '#suffix' => '</div>',
  );
  $form['file-remove-dialog']= array(
    '#markup' => '',
    '#prefix' => '<div id="file-remove-dialog">',
    '#suffix' => '</div>',
  );
  $form['select-spending'] = array(
    '#type'=>'select',
    '#title'=> 'Select Project',
    '#options' => $getProjectByCompany,
    '#default_value' => isset($_SESSION['ACTIVEPROJECT'])?$_SESSION['ACTIVEPROJECT']:'',
    // '#empty_option' => ' -None- ',
    '#attributes' => array('class'=> array('form-control project-program-spending-sel')),
    '#ajax' => array(
      'callback'=> 'change_program_spending_callback',
      'wrapper' => 'project_spending_main_container',
      'effect' => 'fade',
    ),
    '#prefix' => '<div class="clearfix"><div class="pull-left form-inline" style="width:326px;">',
    '#suffix' => '</div><div id="spending-total-main" style="float:left;"></div>'. l('<input type="button" value="Add New Invoice" class="form-submit new-record-cus-btn" />', '#', array('html' => TRUE, 'external' => TRUE, 'attributes' => array('class' => array('new-spending-link')))).''.l('<input type="button" style="margin-left:5px" value="Reset Settings" class="form-submit new-record-reset-setting-btn" />', '/reseting/spending/nojs', array('html' => TRUE, 'external' => TRUE, 'attributes' => array('class' => array('new-reset-setting-link', 'use-ajax')))).'</div></div>',
    '#suffix' => '</div><div id="spending-total-main" style="float:left;"></div><div class="add-assign-invoice-btn pull-right" id="add-assign-invoice-custom">'. l('<input type="button" value="Add New Invoice" class="form-submit new-record-cus-btn" />', '#', array('html' => TRUE, 'external' => TRUE, 'attributes' => array('class' => array('new-spending-link')))).''.l('<input type="button" style="margin-left:5px" value="Reset Settings" class="form-submit new-record-reset-setting-btn" />', '/reseting/spending/nojs', array('html' => TRUE, 'external' => TRUE, 'attributes' => array('class' => array('new-reset-setting-link', 'use-ajax')))).'</div></div>',
  );
  $form['get-spending'] = array(
    '#type'=>'select',
    '#title'=> 'Select Project',
    '#options' => $getCommitementByCompany,
    '#attributes' => array('class'=> array('form-control project-program-sel-spending')),
    '#ajax' => array(
      'callback'=> 'change_program_spending_callback',
      'wrapper' => 'project_spending_main_container',
      'effect' => 'fade',
    ),
    '#prefix' => '<div class="clearfix" style="display:none;"><div class="pull-left form-inline">',
    '#suffix' => '</div></div>',
  ); 
  $form['prgram-project-menu-items'] = array(
    '#markup' => program_project_menu_links_content(),
    '#prefix' => '<div class="clearfix">',
    '#suffix' => '</div>',
  );  
  $form['datatable_page_id']= array(
    '#type' => 'hidden',
    '#title_display' => 'invisible',
    '#attributes' => array('class'=> array('form-control datatable_page_id')),
  );
  $form['page_number_id']= array(
    '#type' => 'hidden',
    '#title_display' => 'invisible',
    '#attributes' => array('class'=> array('form-control page_number_id')),
  );

  $form_state['storage_spending_project'] = array();

  if (empty($form_state['storage_spending_project_default_options'])) {
    $form_state['storage_spending_project_default_options'] = array();
  }

  if (isset($form_state['values'],$form_state['input'],$form_state['triggering_element'],$form_state['triggering_element']['#type'],$form_state['triggering_element']['#name']) && $form_state['triggering_element']['#type']=='select') {
    $triggeringElement = $form_state['triggering_element'];
    if ($form_state['triggering_element']['#name']=='get-spending') {
      $spendingNode = node_load($triggeringElement['#value']);
      $form_state['storage_spending_project'] = array(
        'invoice_number' => isset($spendingNode->field_invoice_number_cal['und'])?$spendingNode->field_invoice_number_cal['und'][0]['value']:'',
        'invoice_date' => isset($spendingNode->field_invoice_date['und'][0])?$spendingNode->field_invoice_date['und'][0]['value']:'',
        'invoice_amount' => isset($spendingNode->field_invoice_amount['und'][0])?$spendingNode->field_invoice_amount['und'][0]['value']:'',
        'invoice_cost_code' => isset($spendingNode->field_invoice_cost_code['und'])?$spendingNode->field_invoice_cost_code['und'][0]['value']:'',
        'invoice_commitment' => isset($spendingNode->field_invoice_commitment['und'])?$spendingNode->field_invoice_commitment['und'][0]['nid']:'',
        'invoice_description' => isset($spendingNode->field_invoice_description‎['und'])?$spendingNode->field_invoice_description‎['und'][0]['value']:'',
        'invoice_vendor' => isset($spendingNode->field_invoice_vendor‎['und'])?$spendingNode->field_invoice_vendor‎['und'][0]['value']:'',
        'invoice_reconciled' => isset($spendingNode->field_invoice_is_reconciled['und'])?$spendingNode->field_invoice_is_reconciled['und'][0]['value']:'', 
      'company_nid' => isset($spendingNode->field_invoice_vendor['und'])?$spendingNode->field_invoice_vendor['und'][0]['value']:'',
      'invoice_attechment' => isset($spendingNode->field_invoice_attechment['und'])?$spendingNode->field_invoice_attechment['und'][0]['fid']:'',
      );
      $form_state['storage_spending_project_default_options']['commitments'] = get_etc_by_project($spendingNode->field_project_reference['und'][0]['nid'],'commitments');
      $form_state['storage_spending_project_default_options']['cost_code'] = get_etc_by_project($spendingNode->field_project_reference['und'][0]['nid'],'costCode');
    }
    else if($form_state['triggering_element']['#name'] == 'select-spending'){ 
      $form_state['storage_spending_project_default_options']['commitments'] = get_etc_by_project($triggeringElement['#value'],'commitments');
      $form_state['storage_spending_project_default_options']['cost_code'] = get_etc_by_project($triggeringElement['#value'],'costCode');
    }
  }
  
  if ($form_state['triggering_element']['#name'] == 'get-spending') {
    $form_state['asset_cat_m6_storage'] = array();
    $form_state['asset_cat_storage_default_value'] = array();
    $spendId = $form_state['triggering_element']['#value'];
    $spendData = node_load($spendId);
    $hasAsset = $spendData->field_has_asset['und'][0]['value']!=''?$spendData->field_has_asset['und'][0]['value']:'FALSE';
    $assetType = $spendData->field_asset_type['und'][0]['value']!=''?$spendData->field_asset_type['und'][0]['value']:'';
    if ($hasAsset == 'TRUE' && ($assetType == 'Split' || $assetType == 'Spread')) {
      if ($assetType == 'Split') {
        $form_state['asset_cat_m6_storage'] = array();
        foreach ($spendData->field_asset_category_split['und'] as $delta => $assetNid) {
          $assetCat = $spendData->field_asset_category_split['und'][$delta]['value'];
          $assetDesc = $spendData->field_asset_description_spending ['und'][$delta]['value'];
          $assetCost = $spendData->field_asset_cost['und'][$delta]['value'];  
          $assetInst = $spendData->field_asset_installation['und'][$delta]['value'];
          $assetConst = $spendData->field_asset_outside_consultant['und'][$delta]['value'];
          $assetInterCharge = $spendData->field_asset_internal_charge['und'][$delta]['value'];
          $tempIdentifer = uniqid();
          $form_state['asset_cat_m6_storage'][]  = $tempIdentifer;
          $form_state['asset_cat_storage_default_value'][$tempIdentifer] = array(
            'AssetType' => 'Split',
            'assetCategory' => $assetCat!=''?$assetCat:'',
            'assetDesc' => $assetDesc,
            'assetCost' => $assetCost!=''?$assetCost:0,
            'assetInst' => $assetInst!=''?$assetInst:0,
            'assetConst' => $assetConst!=''?$assetConst:0,
            'assetInternalCharge' => $assetInterCharge!=''?$assetInterCharge:0,
          );
        }
          // Adding a blank row at the end.
          $tempIdentifer = uniqid();
          $form_state['asset_cat_m6_storage'][]  = $tempIdentifer;
      }
      if ($assetType == 'Spread') {
        $spread_auto = $spendData->field_spread_auto['und'][0]['value'] != '' ? $spendData->field_spread_auto['und'][0]['value'] : '';
        $form_state['asset_cat_m6_storage'] = array();
        if (!empty($spread_auto) && $spread_auto == 'No') {
          foreach ($spendData->field_asset_category_spread['und'] as $delta => $assetNid) {
          // Getting the Asset Desc Spending.
          $assetDesc = !empty($spendData->field_asset_description_spending['und'][$delta]['value']) ? $spendData->field_asset_description_spending['und'][$delta]['value'] : '';

          $assetCategory = !empty($spendData->field_asset_category_spread['und'][$delta]['value']) ? $spendData->field_asset_category_spread['und'][$delta]['value'] : '';

          // Getting the Asset NID.
          $assetNid = isset($spendData->field_asset_reference['und'][$delta]['nid']) ? $spendData->field_asset_reference['und'][$delta]['nid'] : '';

          if (empty($assetNid)) {
            // In case we did not get the Asset NID, trying to get it the other
            // way.
            if (!empty($assetDesc)) {
              $assetDesc_split = explode('-', $assetData);
              $assetNid = $assetDesc_split[0];
            }
          }
          // Getting the Asset Node.
          if (!empty($assetNid)) {
            $assetNode = node_load($assetNid);
          }

          // Getting Current Asset Value.
          if (!empty($assetNode)) {
            $cuurentAssetVal = isset($assetNode->field_current_asset_value['und'][0]['value']) ? $assetNode->field_current_asset_value['und'][0]['value'] : 0;
          }

          $tempIdentifer = uniqid();
          $form_state['asset_cat_m6_storage'][]  = $tempIdentifer;
          $form_state['asset_cat_storage_default_value'][$tempIdentifer] = array(
            'AssetType' => 'Spread',
            'assetCategory' => $assetCategory,
            'assetName' => $assetDesc,
            'currentAssetVal' => !empty($cuurentAssetVal) ? $cuurentAssetVal : 0,
          );
          } // End foreach

          // Adding a blank row at the end.
          $tempIdentifer = uniqid();
          $form_state['asset_cat_m6_storage'][]  = $tempIdentifer;
        }
        if (!empty($spread_auto) && $spread_auto == 'Yes') {
          // If the spread asset is Auto, then we need to just trigger the
          // spread option to yes. So we need to make an element in the form
          // by which we can judge in JS.
          $tempIdentifer = uniqid();
          $form_state['asset_cat_m6_storage'][]  = $tempIdentifer;
          $form_state['asset_cat_storage_default_value']['spread_auto_yes'] = 'Yes';
        }
      }
    }
  }
  
  if ($form_state['triggering_element']['#name'] == 'spread_options') {
    if ($form_state['triggering_element']['#value'] == 'Yes') {
      if (!empty($form_state['values']['select-spending'])) {
        $projectId = $form_state['values']['select-spending'];
      } 
      else {
        $projectId = $_SESSION['ACTIVEPROJECT'];
      }

      $query= db_select('node','n');
      $query->join('og_membership','om','om.etid=n.nid AND om.entity_type=:entityType', array(':entityType'=>'node'));
      $query->join('field_data_field_project_reference','pr','pr.entity_id = n.nid');
      $query->join('field_data_field_system_asset_type','at','at.entity_id = n.nid');
      $query->fields('n', array('nid'));  
      $query->condition('n.type', 'program_assets', '=');
      $query->condition('om.gid', $company->nid, '=');
      $query->condition('pr.field_project_reference_nid', $projectId, '=');
      $assetListing = $query->execute()->fetchCol();
      $form_state['asset_cat_m6_storage'] = array();
      $form_state['asset_cat_storage_default_value'] = array();

      foreach ($assetListing as $delta => $assetNid) {
        $assetNode = node_load($assetNid);
        $assetType = isset($assetNode->field_system_asset_type['und']) ? $assetNode->field_system_asset_type['und'][0]['value'] : '';
        $assetDesc = $assetNode->nid . '-' . $assetNode->field_system_asset_type['und'][0]['value'];
        $curentAsstVal = ($assetNode->field_current_asset_value['und']) ? $assetNode->field_current_asset_value['und'][0]['value'] : 0;
        $tempIdentifer = uniqid();
        $form_state['asset_cat_m6_storage'][] = $tempIdentifer;
        $form_state['asset_cat_storage_default_value'][$tempIdentifer] = array(
          'assetCategory' => isset($assetNode->field_system_asset_type['und'])? $assetNode->field_system_asset_type['und'][0]['value'] : '',
          'assetName' => $assetNode->nid . '-' . $assetNode->field_system_asset_type['und'][0]['value'],
          'currentAssetVal' => isset($assetNode->field_current_asset_value['und']) ? $assetNode->field_current_asset_value['und'][0]['value'] : 0,
        );
      }
    }
    elseif ($form_state['triggering_element']['#value'] == 'No') {
        $form_state['asset_cat_m6_storage']  = array();  
        $tempIdentifer = uniqid();
        $form_state['asset_cat_m6_storage'][]  = $tempIdentifer;
        $form_state['asset_cat_storage_default_value'] = array();
    }
  }
  $form['main-container']= array(
    '#type' => 'container',
    '#attributes' => array('class'=>array('row')), 
    '#prefix' => '<div class="clearfix margin-bottom-10"><div id="project_spending_main_container" class="project-detail project_spending_main_cust">', 
    '#suffix' => '</div></div>',
    '#process' => array('project_spending_main_container_process'), 
  );
  if(empty($form_state['asset_cat_m6_storage'])){
    $tempIdentifer = uniqid();
    $form_state['asset_cat_m6_storage'][]  = $tempIdentifer;
  } 
  $form['asset_form_title_custom'] = array(
    '#markup' => '<div id="asset-form-title-custom" style="display:none;"><strong>Add to Asset(s) - </strong> </div>',
    '#attributes'=> array('class'=> array('asset_form_title_custom')),
    '#prefix' => '<div class="project-detail main-aset-container">',
  );
  $style_options = array('Split' => 'Split - apply portion of the invoice amount to the respective asset.', 'Spread' => 'Spread - spread the invoice proportionately across the asset(s).');
  $style_option_attributes = array( 'Split' => array('class' => array('form-group')), 'Spread' => array('class' => array('form-group')));
  $form['asset_category'] = array(
    '#type' => 'radios',
    '#options' => $style_options,
    // '#option_attributes' => $style_option_attributes,
    '#attributes' => array('class'=> array('asset-category-radio form-inline custom-form-inline-radio')),
    '#prefix' => '<div class="clearfix margin-bottom-10" id="custom-form-inline-radio">', 
    '#suffix' => '</div>',
    // '#after_build' => array('_m6connct_program_options_after_build')
  );

  $style_options = array('Yes' => 'Yes', 'No' => 'No');
  $style_option_attributes = array( 'Yes' => array('class' => array('form-group')), 'No' => array('class' => array('form-group')));

  $form['spread_options'] = array(
    '#type' => 'radios',
    '#title' => 'Would you like to spread this invoice amount proportionately to all assets?',
    '#options' => $style_options,
    '#ajax' => array(
      'callback' => '_getting_all_asset_for_spread_callback',
      'wrapper' => 'alert-container-section',
      'method' => 'replace',
      'effect' => 'fade',
      'progress' => array('type'=> 'throbber', 'message'=> NULL),
     ),
    '#attributes' => array('class'=> array('spread-category-radio form-inline custom-form-inline-radio')),
    '#prefix' => '<div class="clearfix margin-bottom-10 spread-options-custom">', 
    '#suffix' => '</div>',
    '#after_build' => array('_m6connct_program_options_after_build')
  );

  $form['adding_new_assets_amount'] = array(
    '#markup' => '<div  style="display:none"; class="asset-loader2 text-center" style="position: absolute; width: 100%; top:134px;"><img src="/sites/all/themes/m6connect/images/cpmloader.gif" style="width:125px;"></div>',
    '#attributes'=> array('class'=> array('adding-new-assets-amount')),
  );
  $form['main-container2'] = array(
    '#type' => 'container',
    '#theme' => 'assets_form_theme',
    '#attributes' => array('class'=>array('alert-container-section')),
    '#prefix' => '<div class="clearfix" id="main-class-assets"><div id="alert-container-section" class="add-new-alert-detail">', 
    '#suffix' => '</div></div>',
    '#process' => array('assets_form_theme_process'),
  );
  $form['asset_actions']['cancel_test'] = array(
    '#type' => 'markup',
    '#markup' => '<input type="button" value="Cancel" class="form-submit custom-cancel-button">',
    '#prefix' => '<div class="clearfix margin-top-10 main-asset-custom-btn"><div class="pull-left custom-submit-cancel margin-bottom-10"><div class="custom-asset-clearall-section pull-right" id="asset-clearall-section-container"></div>',
  );
  $form['asset_actions']['confirm'] = array(
    '#type' => 'markup',
    '#markup' => '<input type="button" value="Confirm" class="form-submit custom-confirm-button">',
    '#prefix' => '<div class="pull-left custom-confirm-spending margin-bottom-10">',
    '#suffix' => '</div></div></div></div>', 
  );

  /*$form['invoice_attechment'] = array(
    '#type' => 'file',
    '#title' => 'Attachment',
    '#name' => 'files[]',
    '#multiple' => TRUE,
    '#upload_location' => 'public://',
    '#description' => t('Use CTRL + Click to choose multiple attachments.'),
    // '#field_prefix' => '<div class="spending-image-preview"></div>',
    '#attributes' => array('multiple' => 'multiple', 'onchange' => 'handleFiles(this.files)'),
    '#prefix' => '<div class="upload_attachment_container"><div class="spending-image-preview"></div><div id="dvPreview" class="clearfix margin-bottom-10" style="display:none;"></div><div id="dvPreviewIframe" class="clearfix margin-bottom-10"></div><div class="asset-data-rendration" style="display:none;">',
    '#suffix' => '</div><div classs="clearfix"><div class="upload-btn"><i class="btn btn-primary btn-lg glyphicon glyphicon-plus" id="upload_plus"></i></div></div></div>',
  );*/

  $form['reset_split_table'] = array(
    '#type' => 'submit',
    '#name' => 'reset_split_table_trigger',
    '#value' => 'Reset Split',
    "#limit_validation_errors" => array(),
    '#attributes'=> array('class'=>array('reset-split-table-trigger')),
    '#submit'=> array('reset_split_table_submit'),
    '#ajax' => array(
      'callback' => 'reset_split_table_callback',
      'wrapper' => 'main-class-assets',
      'method' => 'replace',
      'effect' => 'fade',
      'progress' => array('type'=> 'throbber', 'message'=> NULL),
    ),
    '#prefix' => '<div class="clearfix margin-bottom-10" style="display:none;">',
    '#suffix' => '</div>',
  );

  $form['actions']['reset'] = array(
    '#type' => 'markup',
    '#markup' => '<input type="button" value="Cancel" class="form-submit custom-reset-button">',
    '#prefix' => '<div class="clearfix get-total-section margin-top-10"><div class="pull-left custom-submit-reset margin-bottom-10">',
  );
  
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#validate' => array('program_modify_spending_form_custom_validate'),
    '#submit'=> array('project_spending_submit'), 
    // '#validate' => array('project_spending_validate'),  
    '#value' => 'Save', 
    '#prefix' => '<div class="pull-left custom-submit-spending margin-bottom-10">',
    '#suffix' => '</div></div></div>', 
  );
  return $form; 
}

/**
 * Submit handler for clearing split table.
 */
function reset_split_table_submit($form, &$form_state) {
  // If we need to reset the table for split.
  $form_state['asset_cat_m6_storage'] = array();
  $tempIdentifer = uniqid();
  $form_state['asset_cat_m6_storage'][]  = $tempIdentifer;

  $form_state['rebuild'] = TRUE;
}

/**
 * Ajax callback for clearing split table.
 */
function reset_split_table_callback(&$form, &$form_state) {
  $commands = array();
  $commands[] = ajax_command_replace("#main-class-assets", render($form['main-container2']));
  return array('#type' => 'ajax', '#commands' => $commands);
}

function project_spending_main_container_process($element, &$form_state) {
  global $user;
  global $company;
  $getProjectByCompany = _project_list_by_company($company->nid, 'project_management');
  $projectManager = _get_user_mappping_by_group_company_nid($company->nid);
  $myCounter = variable_get('spendingNumber');
  $makeSr = str_pad($myCounter + 1, 6, "0", STR_PAD_LEFT);
  $spendingNumber = 'INV'.$makeSr.'-'.date('Y');
  
  $projectNo = array();
  foreach($getProjectByCompany as $projectID => $projectTitle) {
  $projectNode = node_load($projectID);    
  if(isset($projectNode->field_project_mgmt_number['und'])) {
      $projectNo[$projectNode->field_project_mgmt_number['und'][0]['value']] = $projectNode->field_project_mgmt_number['und'][0]['value'].'/'.$projectNode->title;
  }
  }      
  $defaultValues = $form_state['storage_spending_project'];
  if($defaultValues['invoice_vendor'] != '') {
    $vendorVal = node_load($defaultValues['invoice_vendor'])->title;
  }
  else {
    $vendorVal = '';
  }
  $comppanyListing = array();
  if(empty($form_state['project_spending_vender'])){
  /*$vendorNameArr = _get_all_organigation_mapping();  
  $query = db_select('field_data_field_vendor', 'cv');
    $query->join('field_data_field_outside_company', 'oc', 'oc.entity_id=cv.entity_id');
  $query->join('og_membership','om','om.etid=cv.entity_id AND om.entity_type=:entityType', array(':entityType'=>'node'));
  $query->fields('cv',array('field_vendor_value'));
  $query->condition('oc.field_outside_company_value', 'yes', '=');
  $query->condition('om.gid', $company->nid, '=');
  $companyList = $query->execute()->fetchCol();
  if(!empty($companyList)) {
    $updatedComList = array_merge($companyList, $vendorNameArr);
  }
  else {
    $updatedComList = $vendorNameArr;
  }*/   
  $form_state['project_spending_vender'] = _get_all_organigation_mapping();
  $_SESSION['project_spending_vender'] = $form_state['project_spending_vender'];
  $comppanyListing = $form_state['project_spending_vender']; 
  }      
  $element['main-container']['left-container']= array(
    '#type' => 'container',
  '#attributes' => array('class'=>array('col-md-6','col-sm-6','col-xs-12','project-details-left')),
  '#weight' => 1,
  );  
  $element['main-container']['right-container']= array(
    '#type' => 'container',
  '#attributes' => array('class'=>array('col-md-6','col-sm-6','col-xs-12','project-details-right')),
  '#weight' => 2,
  );  
  $element['main-container']['left-container']['project_spending_nid']= array(
    '#type'=>'hidden',
  '#title_display' => 'invisible',
  '#default_value' => 0,  
  '#attributes' => array('class'=> array('form-control project_spending_nid')),
  );
  $element['main-container']['left-container']['datatable_page_id']= array(
    '#type' => 'hidden',
  '#title_display' => 'invisible',
  '#attributes' => array('class'=> array('form-control datatable_page_id')),
  );
  $element['main-container']['left-container']['page_number_id']= array(
    '#type' => 'hidden',
  '#title_display' => 'invisible',
  '#attributes' => array('class'=> array('form-control page_number_id')),
  );  
  $element['main-container']['left-container']['invoice_number']= array(
    '#type'=>'textfield',
  '#title' => 'Invoice Number',
  '#attributes' => array('class'=> array('form-control invoice_number')),
  '#required' => TRUE,
  '#default_value' => $defaultValues['invoice_number']!=''?$defaultValues['invoice_number']:$spendingNumber,
  '#prefix' => '<div class="project-details-border"><div class="clearfix form-item">',
  '#suffix' => '</div>',
  '#field_suffix' => '<div class="pull-right project-avail-status"><span class="text-danger"></span><span class="text-success"></span></div>'
  //'#disabled' => TRUE,
  );
  $element['main-container']['left-container']['invoice_amount']= array(
    '#type'=>'textfield',
  '#title' => 'Invoice Amount',
  '#attributes' => array('class'=> array('form-control invoice_amount')),
  '#required' => TRUE,
  '#size' => 55,
  '#default_value' => $defaultValues['invoice_amount']!=''?$defaultValues['invoice_amount']:'',
  '#prefix' => '<div class="clearfix form-item">',
  '#suffix' => '</div>',
  '#field_prefix' => '<div class="form-inline">', 
  '#field_suffix' => '<div class="pull-right project-avail-status-amt"><span class="text-danger"></span><span class="text-success"></span></div><div class="form-group" id="adding-asset-by-pro"><a href="#" class="invite-directto-m6 form-submit" id="main-add-sset-btnm-cus" style="display:none;"> Add to Asset(s)</a><a style="display:none; background:#307f26;" href="javascript:void(0);" class="form-submit custom-add-asset-button-success text-white" style="margin:0;"><i style="color:#fff" class="fa fa-check-circle" aria-hidden="true"></i> Asset(s)</a><a href="javascript:void(0);" class="form-submit custom-add-asset-button text-white" style="margin:0;">Add to Asset(s)</a></div></div><div class="pull-right project-avail-status-amt"><span class="text-danger"></span><span class="text-success"></span></div>',

  );
  $element['main-container']['left-container']['invoice_commitment']= array(
    '#type'=>'select',
  '#title' => 'Commitment',
  '#options'=> array(), 
  '#validated' => 'true',
  '#empty_option' => '- Select Commitment -',
  '#attributes' => array('class'=> array('form-control invoice_commitment')),
  '#default_value' => isset($defaultValues['invoice_commitment'])?$defaultValues['invoice_commitment']:'',  
  '#select2' => array(
        //'width' => '250',
        'minimumResultsForSearch' => '5',
      ),
  '#prefix' => '<div class="clearfix form-item asset-data-rendration">',
  '#suffix' => '</div>',
  );  
  /*$element['main-container']['left-container']['invoice_commitment'] = array(
  '#type' => 'textfield',
  '#title' => 'Commitment',
  '#attributes'=> array('class'=> array('form-control','commitment_number_select','invoice_commitment'),'placeholder'=>'Enter Commitment Number'),
  '#autocomplete_path' => 'commitment-number-company/autocomplete',
  '#ajax' => array(
      'callback' => 'commitment_number_autocomplete_callback',
      'event' => 'blur',
      'wrapper' => 'workflow-container-section',
      'method' => 'replace',
      'effect' => 'fade',
    ), 
  '#prefix' => '<div class="clearfix form-item" id="spending_commitment_number_select_cust">',
  '#suffix' => '</div>',
  );*/      
  $element['main-container']['left-container']['invoice_cost_code']= array(
    '#type'=>'select',
  '#title' => 'Cost Code',
  '#options'=> _get_approved_cost_code_by_project(),
  '#empty_option' => '- Select Cost Code-',
  '#validated' => 'true',
  '#attributes' => array('class'=> array('form-control invoice_cost_code')),
  '#required' => TRUE,
  '#default_value' => isset($defaultValues['invoice_cost_code'])?$defaultValues['invoice_cost_code']:'',
  '#prefix' => '<div class="clearfix form-item asset-data-rendration">',
  '#suffix' => '</div>',
  );      
  $element['main-container']['left-container']['invoice_cost_code_value']= array(
    '#type'=>'hidden',
  '#title_display' => 'invisible',
  '#attributes' => array('class'=> array('form-control invoice_cost_code_value')),
  );     
  $element['main-container']['left-container']['spending_invoice_paid_date_2'] = array(
  '#title' => 'Paid Date',
  '#type' => 'date_popup',
  '#date_format' => 'm/d/Y',
    '#date_year_range' => '-3:+3',  
  '#attributes' => array('class'=> array('form-control invoice_paid_date'),'autocomplete' => 'off'),
  '#pre_render' => array('m6connect_programe_date_prerender'),
  //'#required' => TRUE,
  '#default_value' => isset($defaultValues['invoice_date'])?$defaultValues['invoice_date']:'',
  '#prefix' => '<div class="clearfix form-item asset-data-rendration">',
  '#suffix' => '</div>',
  ); 
   $element['main-container']['left-container']['invoice_reconciled']= array(
    '#type' =>'checkboxes',
  '#attributes'=> array('class'=> array('invoice_reconciled')),
  '#options' => array(
    '1'=>'Reconciled',
    '#default_value' => isset($defaultValues['invoice_reconciled'])?$defaultValues['invoice_reconciled']:'',  
  ),
  '#prefix' => '<div class="clearfix form-item asset-data-rendration">',
  '#suffix' => '</div></div>',
  );
  $element['main-container']['right-container']['invoice_date']= array(
  '#title' => 'Invoice Date',
  '#type' => 'date_popup',
  '#date_format' => 'm/d/Y',
    '#date_year_range' => '-3:+3',  
  '#attributes' => array('class'=> array('form-control invoice_date'),'autocomplete' => 'off'),
  '#pre_render' => array('m6connect_programe_date_prerender'),
  '#required' => TRUE,
  '#default_value' => isset($defaultValues['invoice_date'])?$defaultValues['invoice_date']:'',
  '#prefix' => '<div class="project-details-border"><div class="clearfix form-item">',
  '#suffix' => '</div>',
  );                  
  $element['main-container']['right-container']['invoice_description']= array(
    '#type'=>'textfield',
  '#title' => 'Invoice Description',
  '#attributes' => array('class'=> array('form-control invoice_description')),
  '#default_value' => $defaultValues['invoice_description']!=''?$defaultValues['invoice_description']:'',
  '#prefix' => '<div class="clearfix form-item">',
  '#suffix' => '</div>',
  );
  $element['company_nid']= array(
    '#type'=>'hidden',
  '#title_display' => 'invisible',
  '#attributes' => array('class'=> array('form-control company_nid')),
  '#default_value' => $defaultValues['company_nid'],  
  );
  $element['main-container']['left-container']['outside_company']= array(
    '#type' => 'hidden',
  '#title_display' => 'invisible',
  '#attributes' => array('class'=> array('form-control outside_company')),
  );
  $element['main-container']['right-container']['invoice_vendor']= array(
    '#type' => 'textfield',
  '#title' => 'Vendor Name',
  //'#required' => TRUE,
  //'#title_display' => 'invisible',
  '#attributes'=> array('class'=> array('form-control invoice_vendor','workflow-auto'),'placeholder'=>'Enter the vendor name'),
  //'#parents' => array($inviteType,$uniqueId,'autocompany'),
  '#autocomplete_path' => 'commitment-company/autocomplete',
    '#ajax' => array(
      'callback' => 'spending_autocomplete_callback',
      'event' => 'blur',
      'wrapper' => 'workflow-container-section',
      'method' => 'replace',
      'effect' => 'fade',
    ), 
    '#default_value' => $vendorVal, 
  '#prefix' => '<div class="clearfix form-item"'.$defaultValues['invoice_vendor'].'>',
  '#suffix' => '</div>',
  );  
  $element['main-container']['right-container']['invoice_attechment'] = array(
    '#type' => 'file',
    '#title' => 'Attachment',
    '#name' => 'files[]',
    '#upload_location' => 'public://',  
    '#field_prefix' => '<div class="spending-image-preview"></div>',
    '#description' => t('Use CTRL + Click to choose multiple attachments.'),
    '#attributes' => array('multiple' => 'multiple'),  
    '#prefix' => '<div class="clearfix form-item asset-data-rendration">',
  '#suffix' => '</div></div>',   
  );
  
  /*$element['main-container']['right-container']['invoice_attechment'] = array(
    '#type' => 'file',
  '#title' => 'Attachment',
    '#name' => 'files[]',
  '#upload_location' => 'public://',  
  '#field_prefix' => '<div class="spending-image-preview"></div>',
  '#description' => t('Use CTRL + Click to choose multiple attachments.'),
    '#attributes' => array('multiple' => 'multiple'),    
  '#prefix' => '<div class="clearfix form-item asset-data-rendration">',
  '#suffix' => '</div></div>',  
  );*/
  // $element['main-container']['right-container']['invoice_attechment'] = array(
  //   '#type' => 'file',
  //   '#title' => 'Attachment',
  //   '#name' => 'files[]',
  //   '#multiple' => TRUE,
  //   '#upload_location' => 'public://',
  //   '#description' => t('Use CTRL + Click to choose multiple attachments.'),
  //   '#attributes' => array('multiple' => 'multiple', 'onchange' => 'handleFiles(this.files)'),
  //   '#prefix' => '<div class="spending-image-preview"></div><div id="dvPreview" class="clearfix margin-bottom-10"></div><div id="dvPreviewIframe" class="clearfix margin-bottom-10"></div><div style="display:none;"><div class="asset-data-rendration">',
  //   '#suffix' => '</div></div><div classs="clearfix"><div class="upload-btn"><i class="btn btn-primary btn-lg glyphicon glyphicon-plus" id="upload_plus" style="clear:both;"></i></div></div>',
  // );
  /*$element['main-container']['full-container']['invoice_reconciled']= array(
    '#type' =>'checkboxes',
  '#attributes'=> array('class'=> array('invoice_reconciled')),
  '#options' => array(
    '1'=>'Is Reconciled',
    '#default_value' => isset($defaultValues['invoice_reconciled'])?$defaultValues['invoice_reconciled']:'',  
  ),
  '#prefix' => '<div class="clearfix form-item">',
  '#suffix' => '</div>',
  );*/  
 
  return $element;  
}

function change_program_spending_callback($form,&$form_state) {
  global $company;  
  $commands = array();
  // Checking if asset filter is applied.
  $default_asset = '';
  if (!empty($_SESSION['change_asset_filter'])) {
    $default_asset = $_SESSION['change_asset_filter'];
  }
  $triggeringElement = $form_state['triggering_element'];  
  $myCounter = variable_get('spendingNumber');
  $makeSr = str_pad($myCounter + 1, 6, "0", STR_PAD_LEFT);
  $spendingNumber = 'INV'.$makeSr.'-'.date('Y');
  $commands[] = ajax_command_remove('#split-edit-value');
  if($form_state['triggering_element']['#name']=='get-spending') {
    if(!empty($triggeringElement['#value'])) {
    $spendingNode = node_load($triggeringElement['#value']);
    $storage_project = array(
      'invoice_number' => isset($spendingNode->field_invoice_number_cal['und'])?$spendingNode->field_invoice_number_cal['und'][0]['value']:$spendingNumber,
      'invoice_date' => isset($spendingNode->field_invoice_date['und'])?$spendingNode->field_invoice_date['und'][0]['value']:'',
      'invoice_amount' => isset($spendingNode->field_invoice_amount['und'])?$spendingNode->field_invoice_amount['und'][0]['value']:'',
      'invoice_cost_code' => isset($spendingNode->field_invoice_cost_code['und'])?$spendingNode->field_invoice_cost_code['und'][0]['value']:'',
      'invoice_commitment' => isset($spendingNode->field_invoice_commitment['und'])?$spendingNode->field_invoice_commitment['und'][0]['nid']:'',
      'invoice_description' => isset($spendingNode->field_invoice_description['und'])?$spendingNode->field_invoice_description['und'][0]['value']:'',
      'invoice_vendor' => isset($spendingNode->field_invoice_vendor['und'])?$spendingNode->field_invoice_vendor['und'][0]['value']:'',
      'invoice_reconciled' => isset($spendingNode->field_invoice_is_reconciled['und'])?$spendingNode->field_invoice_is_reconciled['und'][0]['value']:'',
      'company_nid' => isset($spendingNode->field_invoice_vendor['und'])?$spendingNode->field_invoice_vendor['und'][0]['value']:'',
      'invoice_paid_date' => isset($spendingNode->field_invoice_paid_date['und'])?$spendingNode->field_invoice_paid_date['und'][0]['value']:'',
      'invoice_attechment' => isset($spendingNode->field_invoice_attechment['und'])?$spendingNode->field_invoice_attechment['und'][0]['fid']:0,
      'asset_status' => isset($spendingNode->field_has_asset['und'])?$spendingNode->field_has_asset['und'][0]['value']:'FALSE',
    );
    if($storage_project['asset_status'] == 'TRUE') {
    if($spendingNode->field_asset_type['und'][0]['value'] == 'Spread' && $spendingNode->field_spread_auto['und'][0]['value'] == 'Yes') {
      $commands[] = ajax_command_html("#asset-clearall-section-container", '<div>'.l('Delete All', 'delete-asset-data-spread/'.$spendingNode->nid.'/nojs', array('attributes' => array('class' => array('use-ajax hidden main-clear-all-button')))).l('Delete All', '#', array('attributes' => array('class' => array('custom-clearall-first btn btn-primary')))).'</div>');    
    }
      else {
      $commands[] = ajax_command_html("#asset-clearall-section-container", '<div>'.l('Clear All', 'clear-asset-data/'.$spendingNode->nid.'/nojs', array('attributes' => array('class' => array('use-ajax hidden main-clear-all-button')))).l('Clear All', '#', array('attributes' => array('class' => array('custom-clearall-first btn btn-primary')))).'</div>');    
    }
    }
    else {
      $commands[] = ajax_command_html("#asset-clearall-section-container", '');
    }
    if($storage_project['invoice_vendor'] != '' && is_numeric($storage_project['invoice_vendor'])) {
      $venoderName = node_load($storage_project['invoice_vendor'])->title;
      $commands[] = ajax_command_invoke("input.outside_company", 'val',array('no'));
    }
    else {
    $venoderName = $storage_project['invoice_vendor'];
    $commands[] = ajax_command_invoke("input.outside_company", 'val',array('yes'));
    }   
    if(isset($spendingNode->field_invoice_attechment['und'])) {
        foreach($spendingNode->field_invoice_attechment['und'] as $addKey => $addVal) {        
          $getFid = $spendingNode->field_invoice_attechment['und'][$addKey]['fid'];
          $getAdditionalImageSrc[] = '<p><label class="checkbox"><i class="fa fa-times padding-5" style="float:left; cursor:pointer;"></i><input type="checkbox" checked="checked" class="image-remove-update sr-only" value="'.$getFid.'" for="'.$spendingNode->nid.'">'.l($spendingNode->field_invoice_attechment['und'][$addKey]['filename'], file_create_url($spendingNode->field_invoice_attechment['und'][$addKey]['uri'])).'</label></p>';            
        }     
        $commands[] = ajax_command_html(".spending-image-preview", '<div class="image-preview">'.implode('', $getAdditionalImageSrc).'</div>');
      }
    else {
      $commands[] = ajax_command_html(".spending-image-preview", '');
    } 
    $invoiceDate = $storage_project['invoice_date']!=''?date('m/d/Y', strtotime($storage_project['invoice_date'])):'';
    $invoicePaidDate = $storage_project['invoice_paid_date']!=''?date('m/d/Y', strtotime($storage_project['invoice_paid_date'])):'';
    $triggerId = $spendingNode->field_project_reference['und'][0]['nid'];       
    $commands[] = ajax_command_html("#dvPreview", '');  
    $commands[] = ajax_command_html("#dvPreviewIframe", '');  
    
    $commands[] = ajax_command_html("#programe-spending-details", get_spending_listing_table_data($triggerId, $default_asset, '', '', '', 0, 10));
    $commands[] = ajax_command_html("#spending-total-main", _get_total_spending_total($company->nid, $triggerId));
    $commands[] = ajax_command_invoke("input.invoice_number", 'val',array($storage_project['invoice_number']));
    $commands[] = ajax_command_invoke("input.invoice_date", 'val',array($invoiceDate));
    $commands[] = ajax_command_invoke("input.invoice_amount", 'val',array($storage_project['invoice_amount']));   
    $commands[] = ajax_command_invoke("input.invoice_amount", 'trigger',array('keyup'));    
    $commands[] = ajax_command_invoke("select.invoice_cost_code", 'val',array($storage_project['invoice_cost_code']));
    $commands[] = ajax_command_invoke("input.invoice_cost_code_value", 'val',array($storage_project['invoice_cost_code']));
    $commands[] = ajax_command_invoke("select.invoice_commitment", 'val',array($storage_project['invoice_commitment']));
    $commands[] = ajax_command_invoke("input.invoice_description", 'val',array($storage_project['invoice_description']));
    $commands[] = ajax_command_invoke("input.invoice_vendor", 'val',array($venoderName));
    $commands[] = ajax_command_invoke("input.company_nid", 'val',array($storage_project['company_nid']));
    $commands[] = ajax_command_invoke("input.invoice_paid_date", 'val',array($invoicePaidDate));
    $commands[] = ajax_command_replace("#main-class-assets", render($form['main-container2']));   
    if($storage_project['invoice_reconciled'] == 1){
    $commands[] = ajax_command_invoke('.invoice_reconciled input[type="checkbox"]', 'attr',array('checked', 'true')); 
    }
    else{
    $commands[] = ajax_command_invoke('input[type="checkbox"].invoice_reconciled','removeAttr',array('checked')); 
    }         
    $commands[] = ajax_command_invoke("input.invoice_commitment", 'trigger',array('change'));
  }
  else {
    $projectDataId = $_SESSION['ACTIVEPROJECT'];
    //$commands[] = ajax_command_invoke('.asset-category-radio', 'prop',array('checked', 'false'));
    $commands[] = ajax_command_html("#programe-spending-details", get_spending_listing_table_data($projectDataId, $default_asset, '', '', '', 0, 10));  
    $commands[] = ajax_command_html("#programe-spending-filter-form-data", _get_filter_form($projectDataId));     
    $commands[] = ajax_command_html("#spending-total-main", _get_total_spending_total($company->nid, $projectDataId));  
    $commands[] = ajax_command_invoke("input.invoice_number", 'val',array($spendingNumber));    
    $commands[] = ajax_command_invoke("input.project_spending_nid", 'val',array(0));
    $commands[] = ajax_command_invoke("input.invoice_date", 'val',array(''));
    $commands[] = ajax_command_invoke("input.invoice_amount", 'val',array(''));   
    $commands[] = ajax_command_invoke("select.invoice_cost_code", 'val',array(''));
    $commands[] = ajax_command_invoke("input.invoice_cost_code_value", 'val',array(''));
    $commands[] = ajax_command_invoke("select.invoice_commitment", 'val',array(''));
    $commands[] = ajax_command_invoke("input.invoice_paid_date", 'val',array(''));  
    $commands[] = ajax_command_invoke("input.invoice_description", 'val',array(''));
    $commands[] = ajax_command_invoke("input.invoice_vendor", 'val',array(''));
    $commands[] = ajax_command_invoke("input.company_nid", 'val',array(''));    
    $commands[] = ajax_command_invoke('input[type="checkbox"].invoice_reconciled','removeAttr',array('checked')); 
    $commands[] = ajax_command_html(".spending-image-preview", '');
    $commands[] = ajax_command_html("#dvPreview", '');  
    $commands[] = ajax_command_html("#dvPreviewIframe", '');
    $commands[] = ajax_command_invoke("input.invoice_commitment", 'trigger',array('change'));
  }
  $commands[] = ajax_command_html('#adding-asset-by-pro','<a href="/adding-assets/'.$projectDataId.'/nojs" class="ctools-use-modal ctools-modal-assign-asset-category-popup-style invite-directto-m6 form-submit" id="main-add-sset-btnm-cus" style="display:none;"> Add to Asset(s)</a><a style="display:none; background:#307f26;" href="javascript:void(0);" class="form-submit custom-add-asset-button-success text-white" style="margin:0;"><i style="color:#fff" class="fa fa-check-circle" aria-hidden="true"></i> Asset(s)</a><a href="javascript:void(0);" class="form-submit custom-add-asset-button text-white" style="margin:0;">Add to Asset(s)</a>');
  }
  else{ 
    if((isset($_SESSION['ACTIVEPROJECT']) && $_SESSION['ACTIVEPROJECT']!=$triggeringElement['#value']) || (!isset($_SESSION['ACTIVEPROJECT'])) || (empty($_SESSION['ACTIVEPROJECT'])) && is_numeric($triggeringElement['#value'])){
    $_SESSION['ACTIVEPROJECT'] = $triggeringElement['#value'];
  }
  $commands[] = ajax_command_html("#programe-spending-details", get_spending_listing_table_data($triggeringElement['#value'], $default_asset, '', '', $ajax =FALSE, 0, 10));
  $commands[] = ajax_command_html("#programe-spending-filter-form-data", _get_filter_form($triggeringElement['#value']));     
  $commands[] = ajax_command_invoke('input[type="checkbox"].invoice_reconciled','removeAttr',array('checked'));   
  $commands[] = ajax_command_invoke("input.invoice_date", 'val',array(''));
  $commands[] = ajax_command_invoke("input.invoice_amount", 'val',array(''));
  $commands[] = ajax_command_invoke("select.invoice_cost_code", 'val',array(''));
  $commands[] = ajax_command_invoke("input.invoice_cost_code_value", 'val',array(''));
  $commands[] = ajax_command_invoke("select.invoice_commitment", 'val',array(''));
  $commands[] = ajax_command_invoke("input.outside_company", 'val',array(''));
  $commands[] = ajax_command_invoke("input.invoice_description", 'val',array(''));
  $commands[] = ajax_command_invoke("input.invoice_vendor", 'val',array(''));
  $commands[] = ajax_command_invoke("input.company_nid", 'val',array(''));
  $commands[] = ajax_command_invoke("input.invoice_paid_date", 'val',array(''));  
  $commands[] = ajax_command_html(".spending-image-preview", '');
  $commands[] = ajax_command_invoke("input.project_spending_nid", 'val',array('')); 
  $commands[] = ajax_command_invoke("input.invoice_number", 'val',array($spendingNumber));  
  $commands[] = ajax_command_html("#dvPreview", '');  
  $commands[] = ajax_command_html("#dvPreviewIframe", '');
  $commands[] = ajax_command_html("#spending-total-main", _get_total_spending_total($company->nid, $triggeringElement['#value']));
  $commands[] = ajax_command_invoke("input.invoice_commitment", 'trigger',array('change'));
  $commands[] = ajax_command_html('#adding-asset-by-pro','<a href="/adding-assets/'.$triggeringElement['#value'].'/nojs" class="ctools-use-modal ctools-modal-assign-asset-category-popup-style invite-directto-m6 form-submit" id="main-add-sset-btnm-cus" style="display:none;">Add to Asset(s)</a><a style="display:none; background:#307f26;" href="javascript:void(0);" class="form-submit custom-add-asset-button-success text-white" style="margin:0;"><i style="color:#fff" class="fa fa-check-circle" aria-hidden="true"></i> Asset(s)</a><a href="javascript:void(0);" class="form-submit custom-add-asset-button text-white" style="margin:0;">Add to Asset(s)</a>');
  }
  return array('#type' => 'ajax', '#commands' => $commands);
}

function program_modify_spending_form_custom_validate($form, &$form_state) {
  if($form_state['values']['invoice_cost_code_value'] == '') {
    form_set_error('invoice_cost_code','Cost code field is required.');
  } 
  if($_FILES['files']['name'] != '')  {
  $fileCount = count($_FILES['files']['name']);
  for ($i = 0; $i < $fileCount; $i++) {
      $file = file_save_upload($i, array(
      //'file_validate_is_image' => array(),
      'file_validate_extensions' => array('jpg jpeg gif png txt doc docx xls xlsx pdf ppt pptx pps ppsx odt ods odp mp3 mov mp4 m4a m4v mpeg avi ogg oga ogv weba webp webm html csv xls'),
    
    ));
    if ($file) {    
      if ($file = file_move($file, 'private://')) {
      $form_state['values']['invoice_attechment'][$i] = $file;
        } 
    }
  }
  }
}

function project_spending_submit(&$form, &$form_state) {
  watchdog('form_state_custom', print_r($form_state, 1));
  global $user; 
  global $company;  
  $formVal = $form_state['values']; 
  //Check for updated project or new one
  if($formVal['project_spending_nid'] != 0) {
    // $resetSpent = 'No';
    $spendingNode = node_load($formVal['project_spending_nid']);

    if(!empty($form_state['asset_cat_storage_default_value_remove_data'])) {
      // If it is a spread node, we shall be needing it.
      $asset_nids_to_be_deleted = array();

      foreach($form_state['asset_cat_storage_default_value_remove_data'] as $stateDelta => $stateVal) {
        if($stateVal['AssetType'] == 'Split') {
          $assetNode_split = explode('-', $stateVal['assetDesc']);
          if (!empty($assetNode_split[0]) && is_numeric($assetNode_split[0]) && $assetNode = node_load($assetNode_split[0])) {
          $getAssetCost = $assetNode->field_asset_cost['und'][0]['value']==0?$stateVal['assetCost']:$assetNode->field_asset_cost['und'][0]['value'] - $stateVal['assetCost'];
          $getAssetCost = $getAssetCost < 0 ? 0 : $getAssetCost;
          
          $getAssetInst = $assetNode->field_asset_installation['und'][0]['value']==0?$stateVal['assetInst']:$assetNode->field_asset_installation['und'][0]['value'] - $stateVal['assetInst'];
          $getAssetInst = $getAssetInst < 0 ? 0 : $getAssetInst;

          $getAssetOutSide = $assetNode->field_asset_outside_consultant['und'][0]['value']==0?$stateVal['assetConst']:$assetNode->field_asset_outside_consultant['und'][0]['value'] - $stateVal['assetConst'];
          $getAssetOutSide = $getAssetOutSide < 0 ? 0 : $getAssetOutSide;

          $getAssetInter = $assetNode->field_asset_internal_charge['und'][0]['value']==0?$stateVal['assetInternalCharge']:$assetNode->field_asset_internal_charge['und'][0]['value'] - $stateVal['assetInternalCharge'];
          $getAssetInter = $getAssetInter < 0 ? 0 : $getAssetInter;

          $assetNode->field_asset_cost['und'][0]['value'] = $getAssetCost;
          $assetNode->field_asset_installation['und'][0]['value'] = $getAssetInst;
          $assetNode->field_asset_outside_consultant['und'][0]['value'] = $getAssetOutSide;
          $assetNode->field_asset_internal_charge['und'][0]['value'] = $getAssetInter;

          // $getAllTotal = $getAssetCost + $getAssetInst + $getAssetOutSide + $getAssetInter;

          // $getCurrentAsstVal = $assetNode->field_current_asset_value['und'][0]['value']==0?$getAllTotal:$assetNode->field_current_asset_value['und'][0]['value'] - $getAllTotal;
          // $getCurrentAsstVal= $getCurrentAsstVal < 0 ? 0 : $getCurrentAsstVal;
          // $assetNode->field_current_asset_value['und'][0]['value'] = $getCurrentAsstVal;

          // $getNewAsstVal = $assetNode->field_new_asset_value['und'][0]['value']==0?$getAllTotal:$assetNode->field_new_asset_value['und'][0]['value'] - $getAllTotal;
          // $getNewAsstVal= $getNewAsstVal < 0 ? 0 : $getNewAsstVal;
          
          // $assetNode->field_new_asset_value['und'][0]['value'] = $getNewAsstVal;

          field_attach_presave('node', $assetNode);
          field_attach_update('node', $assetNode);
          entity_get_controller('node')->resetCache(array($assetNode->nid)); 
          }
        }
        else {
          $assetNode_split = explode('-', $stateVal['assetName']);
          if (!empty($assetNode_split[0]) && is_numeric($assetNode_split[0]) && $assetNode = node_load($assetNode_split[0])) {

            // Need to save the asset nodes, which are being updated. We ought
            // to delete the assets afterwords.
            $asset_nids_to_be_deleted[] = $assetNode->nid;

            $spread_amount_real = _get_spread_amount_from_table($spendingNode->nid, $assetNode->nid);
            $spread_amount_real = !empty($spread_amount_real) ? $spread_amount_real : 0;

            $getAssetSpread = $assetNode->field_asset_spread_amount['und'][0]['value'] == 0 ? 0 : $assetNode->field_asset_spread_amount['und'][0]['value'] - $spread_amount_real;

            $getAssetSpread = $getAssetSpread < 0 ? 0 : $getAssetSpread;

            $assetNode->field_asset_spread_amount['und'][0]['value'] = number_format($getAssetSpread, 2, '.', '');
            field_attach_presave('node', $assetNode);
            field_attach_update('node', $assetNode);
            entity_get_controller('node')->resetCache(array($assetNode->nid));
          }
        }
      }

      // Deleting asset nids from table, if any.
      if (!empty($asset_nids_to_be_deleted)) {
        _delete_assets_from_table($spendingNode->nid, $asset_nids_to_be_deleted);
      }
    }
    
    $invoiceNumber = $spendingNode->field_invoice_number_cal['und'][0]['value'];
    $invAmount = $formVal['invoice_amount']!= '' ? $formVal['invoice_amount'] : '';
    $spendingNode->field_invoice_number_cal['und'][0]['value'] = $formVal['invoice_number'];
    $spendingNode->field_invoice_is_reconciled['und'][0]['value'] = $formVal['invoice_reconciled'][1];
    $spendingNode->field_invoice_date['und'][0]['value'] = $formVal['invoice_date'];
    $spendingNode->field_invoice_amount['und'][0]['value'] = $formVal['invoice_amount']!= ''?str_replace(',','',str_replace("$","",$formVal['invoice_amount'])):'';
    $spendingNode->field_invoice_cost_code['und'][0]['value'] = ($formVal['invoice_cost_code_value'] != '')?$formVal['invoice_cost_code_value']:$formVal['invoice_cost_code'];  
    $spendingNode->field_invoice_commitment['und'][0]['nid'] = is_numeric($formVal['invoice_commitment'])?$formVal['invoice_commitment']:0;   
    $spendingNode->field_invoice_description['und'][0]['value'] = $formVal['invoice_description'];  
    $spendingNode->field_invoice_vendor['und'][0]['value'] = $formVal['company_nid']; 
    $spendingNode->field_invoice_paid_date['und'][0]['value'] = $formVal['spending_invoice_paid_date_2'];
    $spendingNode->field_outside_company['und'][0]['value'] = $formVal['outside_company'];

    if(isset($formVal['invoice_attechment']) && !empty($formVal['invoice_attechment'])) {
      foreach ($form_state['values']['invoice_attechment'] as $imgkey => $file) {
        if(!isset($spendingNode->field_invoice_attechment['und'])){
          $spendingNode->field_invoice_attechment['und'] = array();     
        }
        $new_file = file_load($file->fid);
        $file_arr = (array)$new_file;
        $file_arr['display'] = 1;
        $spendingNode->field_invoice_attechment['und'][] = $file_arr;
      }
    }

    if ($formVal['asset_category'] == 'Split') {
      $spendingNode->field_asset_type['und'][0]['value'] = 'Split';
      // Clearing all fields of spending node, as we need to save new values.
        unset($spendingNode->field_asset_category_split['und']);
        unset($spendingNode->field_asset_category_spread['und']);
        unset($spendingNode->field_asset_reference['und']);
        unset($spendingNode->field_asset_description_spending['und']);
      // If the node is being updated with Split Asset.
        // if (empty($formVal['alert'])) {
        //   // If there are no values in form, then we check if the node has some
        //   // values, and if it has then removing those values. As probably, user had
        //   // previously saved some spending but is removing this time.
        //   $resetSpent = 'Yes';
        // }
        if (!empty($formVal['alert'])) {
          // If we have some data to work on!
          $i = 0;
          $spendingNode->field_has_asset['und'][0]['value'] = 'TRUE';
          foreach ($formVal['alert'] as $key => $value) {
            if (!empty($value['asset_description'])) {
              $assetNode_split = explode('-', $value['asset_description']);
              if (!empty($assetNode_split[0]) && is_numeric($assetNode_split[0]) && $assetNode = node_load($assetNode_split[0])) {
                $prevCost = !empty($spendingNode->field_asset_cost['und'][$i]['value']) ? $spendingNode->field_asset_cost['und'][$i]['value'] : 0;
                $prevInst = !empty($spendingNode->field_asset_installation['und'][$i]['value']) ? $spendingNode->field_asset_installation['und'][$i]['value'] : 0;
                $prevOutside = !empty($spendingNode->field_asset_outside_consultant['und'][$i]['value']) ? $spendingNode->field_asset_outside_consultant['und'][$i]['value'] : 0;
                $prevInternal = !empty($spendingNode->field_asset_internal_charge['und'][$i]['value']) ? $spendingNode->field_asset_internal_charge['und'][$i]['value'] : 0;
                $curCost = !empty($value['asset_cost']) ? str_replace(',','',str_replace("$","",$value['asset_cost'])):0;
                $curInst = !empty($value['asset_installation']) ? str_replace(',','',str_replace("$","",$value['asset_installation'])):0;
                $curOutside = !empty($value['asset_outside_consultants']) ? str_replace(',','',str_replace("$","",$value['asset_outside_consultants'])):0;
                $curInternal = !empty($value['asset_internal_charges']) ? str_replace(',','',str_replace("$","",$value['asset_internal_charges'])):0;
                $actionCost = 'none';
                $actionInst = 'none';
                $actionOutside = 'none';
                $actionInternal = 'none'; 
                $actionCost = $curCost > $prevCost ? 'add' : ($curCost < $prevCost ? 'subtract' : 'no-action');
                $actionInst = $curInst > $prevInst ? 'add' : ($curInst < $prevInst ? 'subtract' : 'no-action');
                $actionOutside = $curOutside > $prevOutside ? 'add' : ($curOutside < $prevOutside ? 'subtract' : 'no-action');
                $actionInternal = $curInternal > $prevInternal ? 'add' : ($curInternal < $prevInternal ? 'subtract' : 'no-action');
                if ($actionCost == 'add') {
                  $assetNode->field_asset_cost['und'][0]['value'] = $assetNode->field_asset_cost['und'][0]['value'] + ($curCost - $prevCost);
                  $spendingNode->field_asset_cost['und'][$i]['value'] = $curCost;
                  // $assetNode->field_current_asset_value['und'][0]['value'] += $curCost - $prevCost;
                  // $assetNode->field_new_asset_value['und'][0]['value'] += $curCost - $prevCost;
                }
                if ($actionCost == 'subtract') {
                  $assetNode->field_asset_cost['und'][0]['value'] = $assetNode->field_asset_cost['und'][0]['value'] - ($prevCost - $curCost);
                  $spendingNode->field_asset_cost['und'][$i]['value'] = $curCost;
                  // $assetNode->field_current_asset_value['und'][0]['value'] -= $prevCost - $curCost;
                  // $assetNode->field_new_asset_value['und'][0]['value'] -= $prevCost - $curCost;
                }
                if ($actionInst == 'add') {
                  $assetNode->field_asset_installation['und'][0]['value'] = $assetNode->field_asset_installation['und'][0]['value'] + ($curInst - $prevInst);
                  $spendingNode->field_asset_installation['und'][$i]['value'] = $curInst;
                  // $assetNode->field_current_asset_value['und'][0]['value'] += $curInst - $prevInst;
                  // $assetNode->field_new_asset_value['und'][0]['value'] += $curInst - $prevInst;
                }
                if ($actionInst == 'subtract') {
                  $assetNode->field_asset_installation['und'][0]['value'] = $assetNode->field_asset_installation['und'][0]['value'] - ($prevInst - $curInst);
                  $spendingNode->field_asset_installation['und'][$i]['value'] = $curInst;
                  // $assetNode->field_current_asset_value['und'][0]['value'] -= $prevInst - $curInst;
                  // $assetNode->field_new_asset_value['und'][0]['value'] -= $prevInst - $curInst;
                }
                if ($actionOutside == 'add') {
                  $assetNode->field_asset_outside_consultant['und'][0]['value'] = $assetNode->field_asset_outside_consultant['und'][0]['value'] + ($curOutside - $prevOutside);
                  $spendingNode->field_asset_outside_consultant['und'][$i]['value'] = $curOutside;
                  // $assetNode->field_current_asset_value['und'][0]['value'] += $curOutside - $prevOutside;
                  // $assetNode->field_new_asset_value['und'][0]['value'] += $curOutside - $prevOutside;
                }
                if ($actionOutside == 'subtract') {
                  $assetNode->field_asset_outside_consultant['und'][0]['value'] = $assetNode->field_asset_outside_consultant['und'][0]['value'] - ($prevOutside - $curOutside);
                  $spendingNode->field_asset_outside_consultant['und'][$i]['value'] = $curOutside;
                  // $assetNode->field_current_asset_value['und'][0]['value'] -= $prevOutside - $curOutside;
                  // $assetNode->field_new_asset_value['und'][0]['value'] -= $prevOutside - $curOutside;
                }
                if ($actionInternal == 'add') {
                  $assetNode->field_asset_internal_charge['und'][0]['value'] = $assetNode->field_asset_internal_charge['und'][0]['value'] + ($curInternal - $prevInternal);
                  $spendingNode->field_asset_internal_charge['und'][$i]['value'] = $curInternal;
                  // $assetNode->field_current_asset_value['und'][0]['value'] += $curInternal - $prevInternal;
                  // $assetNode->field_new_asset_value['und'][0]['value'] += $curInternal - $prevInternal;
                }
                if ($actionInternal == 'subtract') {
                  $assetNode->field_asset_internal_charge['und'][0]['value'] = $assetNode->field_asset_internal_charge['und'][0]['value'] - ($prevInternal - $curInternal);
                  $spendingNode->field_asset_internal_charge['und'][$i]['value'] = $curInternal;
                  // $assetNode->field_current_asset_value['und'][0]['value'] -= $prevInternal - $curInternal;
                  // $assetNode->field_new_asset_value['und'][0]['value'] -= $prevInternal - $curInternal;
                }
                field_attach_presave('node', $assetNode);
                field_attach_update('node', $assetNode);
                entity_get_controller('node')->resetCache(array($assetNode->nid));
                
                $spendingNode->field_asset_reference['und'][$i]['nid'] = $assetNode->nid;
                $spendingNode->field_asset_category_split['und'][$i]['value'] = $value['asset_category_all_split'];
                $spendingNode->field_asset_description_spending['und'][$i]['value'] = $value['asset_description'];

                $i++;
              }
            }
          }
        }

        // if($resetSpent == 'Yes') {
        //   $spendingNode->field_has_asset['und'][0]['value'] = 'FALSE';
        // }
        // else {
        //   $spendingNode->field_has_asset['und'][0]['value'] = 'TRUE';
        // }
    }
    if ($formVal['asset_category'] == 'Spread') {
      // Possible bug -- 
      // If this spending node was split before editing, and now user has made
      // it spread, then alongwith unsetting the asset cost, inst, internal values
      // from spending node, we also need to subtract those values from the asset node.
      // @todo - need to work on it, discuss with bhuv sir.
      $spendingNode->field_spread_auto['und'][0]['value'] = $formVal['spread_options'] == 'No' ? 'No' : 'Yes';

      // Checking if any asset was deleted manually by user, if yes then the
      // spread auto will always be No.
      $spendingNode->field_spread_auto['und'][0]['value'] = !empty($form_state['asset_cat_storage_default_value_remove_data']) ? 'No' : $spendingNode->field_spread_auto['und'][0]['value'];

        $spendingNode->field_asset_type['und'][0]['value'] = 'Spread';

      // Clearing all fields of spending node, as we need to save new values.
      unset($spendingNode->field_asset_category_split['und']);
      unset($spendingNode->field_asset_category_spread['und']);
      unset($spendingNode->field_asset_cost['und']);
      unset($spendingNode->field_asset_installation['und']);
      unset($spendingNode->field_asset_outside_consultant['und']);
      unset($spendingNode->field_asset_internal_charge['und']);
      unset($spendingNode->field_asset_reference['und']);
      unset($spendingNode->field_asset_description_spending['und']);
      // If it is a spread spending.
      if (!empty($formVal['alert'])) {
        $rowCount = 0;
        $spending_amounts = array();
        $spread_auto_yes_no = $spendingNode->field_spread_auto['und'][0]['value'] == 'No' ? 0 : 1;
        $spendingNode->field_has_asset['und'][0]['value'] = 'TRUE';

        foreach ($formVal['alert'] as $assetData) {
          if (empty($assetData['asset_category_all_spread'])) {
            // Skipping if spread category not available.
            continue;
          }
          // Check for existing or new asset creation
          $getAssetNode = explode('-', $assetData['asset_description']);
          $getAssetNid = $getAssetNode[0];
          $loadAssetData = node_load($getAssetNid);
          // Get submitted data
          // $getCurrentAsset = $loadAssetData->field_current_asset_value['und'][0]['value'];
          // $getCurrentSpread = !empty($loadAssetData->field_asset_spread_amount['und'][0]['value']) ? $loadAssetData->field_asset_spread_amount['und'][0]['value'] : 0;

          // $getCurrentAsset = $getCurrentAsset + $getCurrentSpread;

          $getCurrentAsset = _get_current_asset_value('', $getAssetNid, TRUE);

          $getInvAmt = $assetData['asset_node_nid'];
          $totalAssetVal = $assetData['total_current_asset_val'];

          $spreadAsmt = ($getCurrentAsset / $totalAssetVal) * $getInvAmt;
          $spreadAsmt = number_format($spreadAsmt, 2, '.', '');
          $spending_amounts[$getAssetNid] = $spreadAsmt;

          // Getting the old stored spread amount of this spending and asset.
          $old_spread_amount = _get_spread_amount_from_table($spendingNode->nid, $getAssetNid);
          $old_spread_amount = !empty($old_spread_amount) ? $old_spread_amount : 0;

          // First subtracting the old value and then adding the new value.
          $loadAssetData->field_asset_spread_amount['und'][0]['value'] -= $old_spread_amount;

          // Checking if the spread amount is not less then 0.
          if ($loadAssetData->field_asset_spread_amount['und'][0]['value'] < 0) {
            $loadAssetData->field_asset_spread_amount['und'][0]['value'] = 0;
          }

          // Adding again the new value.
          $loadAssetData->field_asset_spread_amount['und'][0]['value'] += $spreadAsmt;
          watchdog('pagala kahi ka', print_r($loadAssetData,1));

          field_attach_presave('node', $loadAssetData);
          field_attach_update('node', $loadAssetData);
          entity_get_controller('node')->resetCache(array($loadAssetData->nid));

          $spendingNode->field_asset_reference['und'][$rowCount]['nid'] = $getAssetNid;
          $spendingNode->field_asset_category_spread['und'][$rowCount]['value'] = $assetData['asset_category_all_spread'];  
          $spendingNode->field_asset_description_spending['und'][$rowCount]['value'] = $assetData['asset_description'];
          $rowCount++;
        }
      }

      if (!empty($spending_amounts)) {
        // If the spending was spread, then updating data in custom table.
        _update_spending_calculations($spending_amounts, $spendingNode->nid, $spread_auto_yes_no);
      }

      // if (empty($formVal['alert'])) {
      //   // If there are no values in form, then we check if the node has some
      //   // values, and if it has then removing those values. As probably, user had
      //   // previously saved some spending but is removing this time.
      //   $resetSpent = 'Yes';
      // }
      // if($resetSpent == 'Yes') {
      //   $spendingNode->field_has_asset['und'][0]['value'] = 'FALSE';
      // }
      // else {
      //   $spendingNode->field_has_asset['und'][0]['value'] = 'TRUE';
      // }
    }

    // Saving node.
    node_save($spendingNode);

    // Checking again if spending has any asset or not.
    if (count($spendingNode->field_asset_reference['und']) < 1) {
      // If no asset reference, then there are no assets.
      $spendingNode->field_has_asset['und'][0]['value'] = 'FALSE';
      unset($spendingNode->field_asset_type['und']);
      unset($spendingNode->field_spread_auto['und']);

      // Again saving node....pufff!!!
      field_attach_presave('node', $spendingNode);
      field_attach_update('node', $spendingNode);
      entity_get_controller('node')->resetCache(array($spendingNode->nid));
    }

    if($invAmount == '') {
        $amount = '$0.00';
    }
    else {
      $amount = $invAmount;
    }

    drupal_set_message('Invoice '.$formVal['invoice_number'].' in the amount of '.$amount.' has been updated.');
  }
  else {
    $node = new stdClass();
    $node->type = 'project_spending';
    $node->title = date('m-d-Y H:i:s');
    $node->uid = $user->uid;
    $node->language = en;
    $node->status = 1;
    $invAmount = $formVal['invoice_amount'] != '' ? $formVal['invoice_amount'] : '';
    $node->og_group_ref['und'][0]['target_id'] = $company->nid; 
    $node->field_invoice_number_cal['und'][0]['value'] = $formVal['invoice_number'];
    $node->field_invoice_amount['und'][0]['value'] = $formVal['invoice_amount'] != '' ? str_replace(',','',str_replace("$","",$formVal['invoice_amount'])) : '';
    $node->field_invoice_date['und'][0]['value'] = $formVal['invoice_date'];
    $node->field_invoice_cost_code['und'][0]['value'] = $formVal['invoice_cost_code_value'] != '' ? $formVal['invoice_cost_code_value'] : $formVal['invoice_cost_code'];
    $node->field_invoice_commitment['und'][0]['nid'] = is_numeric($formVal['invoice_commitment']) ? $formVal['invoice_commitment'] : 0;
    $node->field_outside_company['und'][0]['value'] = $formVal['outside_company'];
    $node->field_invoice_description['und'][0]['value'] = $formVal['invoice_description'];
    $node->field_invoice_vendor['und'][0]['value'] = $formVal['company_nid']; 
    $node->field_invoice_is_reconciled['und'][0]['value'] = $formVal['invoice_reconciled'][1];
    $node->field_project_reference['und'][0]['nid'] = $formVal['select-spending'];
    $node->field_invoice_paid_date['und'][0]['value'] = $formVal['spending_invoice_paid_date_2'];
    
    if(!empty($formVal['asset_category']) && $formVal['asset_category'] != '') {
      $assetType = $formVal['asset_category'];
      if ($assetType == 'Split') {
        $rowCount = 0;
        $node->field_has_asset['und'][0]['value'] = 'TRUE';
        foreach ($formVal['alert'] as $assetData) {
          if ($assetData['asset_category_all_split'] == '') {
            continue;
          }
          // Check for existing or new asset creationg
          if (!empty($assetData['asset_description'])) {
            $assetNode = explode('-',$assetData['asset_description']);
            $assetNode = $assetNode[0];
            if (is_numeric($assetNode)) {
              $loadAssetData = node_load($assetNode);
              // $getCurrentAsset = $loadAssetData->field_current_asset_value['und'][0]['value'];

              $getAssetCost = !empty($loadAssetData->field_asset_cost['und'][0]['value']) ? $loadAssetData->field_asset_cost['und'][0]['value'] : 0;
              $getInstallation = !empty($loadAssetData->field_asset_installation['und'][0]['value']) ? $loadAssetData->field_asset_installation['und'][0]['value'] : 0;
              $getOutside = !empty($loadAssetData->field_asset_outside_consultant['und'][0]['value']) ? $loadAssetData->field_asset_outside_consultant['und'][0]['value'] : 0;
              $getInternal = !empty($loadAssetData->field_asset_internal_charge['und'][0]['value']) ? $loadAssetData->field_asset_internal_charge['und'][0]['value'] : 0;

              // $getCurrentAsset = _get_current_asset_value('', $assetNode, TRUE);

              if (!empty($getAssetCost) && $getAssetCost != '') {
                $currentAssetCost = ($assetData['asset_cost'] != '') ? str_replace(',','',str_replace("$","",$assetData['asset_cost'])) : 0;
                $newAssetCost = $currentAssetCost + str_replace(',','',str_replace("$","",$getAssetCost));
              }
              else {
                $newAssetCost = ($assetData['asset_cost'] != '') ? str_replace(',','',str_replace("$","",$assetData['asset_cost'])) : 0;
              }
              if (!empty($getInstallation) && $getInstallation != '') {
                $currentInstallation = ($assetData['asset_installation'] != '') ? str_replace(',','',str_replace("$","",$assetData['asset_installation'])) : 0;
                $newinstalCost = $currentInstallation + str_replace(',','',str_replace("$","",$getInstallation));
              }
              else {
                $newinstalCost = ($assetData['asset_installation'] != '') ? str_replace(',','',str_replace("$","",$assetData['asset_installation'])) : 0;
              }
              if (!empty($getOutside) && $getOutside != '') {
                $currentOutsideCost = ($assetData['asset_outside_consultants'] != '') ? str_replace(',','',str_replace("$","",$assetData['asset_outside_consultants'])) : 0;
                $newOutsideCost = $currentOutsideCost + str_replace(',','',str_replace("$","",$getOutside));
              }
              else {
                $newOutsideCost = ($assetData['asset_outside_consultants'] != '') ? str_replace(',','',str_replace("$","",$assetData['asset_outside_consultants'])) : 0;
              }
              if (!empty($getInternal) && $getInternal != '') {
                $currentIntCost = ($assetData['asset_internal_charges'] != '') ? str_replace(',','',str_replace("$","",$assetData['asset_internal_charges'])) : 0;
                $newIntCost = $currentIntCost + str_replace(',','',str_replace("$","",$getInternal));
              }
              else {
                $newIntCost = ($assetData['asset_internal_charges'] != '') ? preg_replace("/[^0-9]/","",$assetData['asset_internal_charges']) : 0;
              }

              // if (!empty($getCurrentAsset) && $getCurrentAsset != '') {
              //   $currentAssetVal = ($newAssetCost + $newIntCost + $newOutsideCost + $newinstalCost);
              //   $newassVal = str_replace(',','',str_replace("$","",$getCurrentAsset)) + $currentAssetVal;
              // }
              // else {
              //   $currentAssetVal = ($newAssetCost + $newIntCost + $newOutsideCost + $newinstalCost);
              //   $newassVal = 0;
              // }

              $loadAssetData->field_asset_cost['und'][0]['value'] = $newAssetCost;
              $loadAssetData->field_asset_installation['und'][0]['value'] = $newinstalCost;
              $loadAssetData->field_asset_outside_consultant['und'][0]['value'] = $newOutsideCost;
              $loadAssetData->field_asset_internal_charge['und'][0]['value'] = $newIntCost;
              // $loadAssetData->field_current_asset_value['und'][0]['value'] = $currentAssetVal;
              // $loadAssetData->field_new_asset_value['und'][0]['value'] = $newassVal;

              field_attach_presave('node', $loadAssetData);
              field_attach_update('node', $loadAssetData);
              entity_get_controller('node')->resetCache(array($loadAssetData->nid));
            }

            if ($assetData['asset_description'] == 'spread-only') {
              continue;
            }
          
            $node->field_asset_reference['und'][$rowCount]['nid'] = $assetNode;
            $node->field_asset_category_split['und'][$rowCount]['value'] = $assetData['asset_category_all_split'];  
            // $node->field_asset_category_spread['und'][$rowCount]['value'] = $assetData['asset_category_all_spread'];  

            $node->field_asset_description_spending['und'][$rowCount]['value'] = $assetData['asset_description'];
            $node->field_asset_cost['und'][$rowCount]['value'] = ($assetData['asset_cost'] != '')?str_replace(',','',str_replace("$","",$assetData['asset_cost'])):0;
            $node->field_asset_installation['und'][$rowCount]['value'] = ($assetData['asset_installation'] != '')?str_replace(',','',str_replace("$","",$assetData['asset_installation'])):0;
            $node->field_asset_outside_consultant['und'][$rowCount]['value'] = ($assetData['asset_outside_consultants'] != '')?str_replace(',','',str_replace("$","",$assetData['asset_outside_consultants'])):0;
            $node->field_asset_internal_charge['und'][$rowCount]['value'] = ($assetData['asset_internal_charges'] != '')?str_replace(',','',str_replace("$","",$assetData['asset_internal_charges'])):0;
            $node->field_asset_type['und'][0]['value'] = 'Split';
          }
          $rowCount++;
        }
      }
      elseif ($assetType == 'Spread') {
        $spending_amounts = array();
        $spread_auto_yes_no = 0;
        $node->field_has_asset['und'][0]['value'] = 'TRUE';
        $node->field_spread_auto['und'][0]['value'] = $formVal['spread_options'] == 'No' ? 'No' : 'Yes';

        // Checking if any asset was deleted manually by user, if yes then the
        // spread auto will always be No.
        $node->field_spread_auto['und'][0]['value'] = !empty($form_state['asset_cat_storage_default_value_remove_data']) ? 'No' : $node->field_spread_auto['und'][0]['value'];

        $spread_auto_yes_no = $node->field_spread_auto['und'][0]['value'] == 'No' ? 0 : 1;

        $node->field_asset_type['und'][0]['value'] = 'Spread';
        $rowCount = 0;
        foreach ($formVal['alert'] as $assetData) {
          if ($assetData['asset_category_all_spread'] == '') {
            continue;
          }
          // Check for existing or new asset creationg
          $getAssetNode = explode('-',$assetData['asset_description']);
          $getAssetNid = $getAssetNode[0];
          $loadAssetData = node_load($getAssetNid);

          // Get submitted data
          // $getCurrentAsset = $loadAssetData->field_current_asset_value['und'][0]['value'];
          $getCurrentAsset = _get_current_asset_value('', $getAssetNid, TRUE);
          // $getCurrentSpread = !empty($loadAssetData->field_asset_spread_amount['und'][0]['value']) ? $loadAssetData->field_asset_spread_amount['und'][0]['value'] : 0;

          // $getCurrentAsset = $getCurrentAsset + $getCurrentSpread;

          $getInvAmt = $assetData['asset_node_nid'];
          $totalAssetVal = $assetData['total_current_asset_val'];
          $spreadAsmt = ($getCurrentAsset/$totalAssetVal)*$getInvAmt;
          $loadAssetData->field_asset_spread_amount['und'][0]['value'] += number_format($spreadAsmt, 2, '.', '');

          // Updating spreading_amount array. m6connect_spending_spread_calculations
          $spending_amounts[$getAssetNid] = number_format($spreadAsmt, 2, '.', '');

          field_attach_presave('node', $loadAssetData);
          field_attach_update('node', $loadAssetData);
          entity_get_controller('node')->resetCache(array($loadAssetData->nid));

          $node->field_asset_reference['und'][$rowCount]['nid'] = $getAssetNid;
          $node->field_asset_category_spread['und'][$rowCount]['value'] = $assetData['asset_category_all_spread'];  
          $node->field_asset_description_spending['und'][$rowCount]['value'] = $assetData['asset_description'];
          $rowCount++;
        }
      }
    }

    if(isset($formVal['invoice_attechment']) && !empty($formVal['invoice_attechment'])) {
      foreach ($form_state['values']['invoice_attechment'] as $imgkey => $file) {
        $new_file = file_load($file->fid);
        $file_arr = (array)$new_file;
        $file_arr['display'] = 1; 
        $node->field_invoice_attechment['und'][$imgkey] = $file_arr;
      }
    }

    node_save($node);
    if (!empty($spending_amounts)) {
      // If the spending was spread, then updating data in custom table.
      _update_spending_calculations($spending_amounts, $node->nid, $spread_auto_yes_no);
    }
    $amount = ($invAmount == '') ? '$0.00' : $invAmount;
    drupal_set_message('Invoice '.$formVal['invoice_number'].' in the amount of '.$amount.' has been saved.');
  }
}

function cost_manager_spending_filter_form($form, &$form_state,$key,$type) {
  $projectId = $_SESSION['ACTIVEPROJECT'];
  if((isset($_SESSION['FILTERTYPESPEND']) && $_SESSION['FILTERTYPESPEND']!= $type) || (!isset($_SESSION['FILTERTYPESPEND'])) || (empty($_SESSION['FILTERTYPESPEND']))){
    $_SESSION['FILTERTYPESPEND'] = $type;
  }
  $type = $_SESSION['FILTERTYPESPEND'];
  $query= db_select('node','n'); 
  $query->join('field_data_field_project_reference','pr','pr.entity_id = n.nid');
  if($type == 'invNo') {
  $query->join('field_data_field_invoice_number_cal','invn','invn.entity_id = n.nid');
  $query->fields('invn', array('field_invoice_number_cal_value'));
  $query->groupBy('invn.field_invoice_number_cal_value');
  }
  if($type == 'vendorName') {
  $query->join('field_data_field_invoice_vendor','inv','inv.entity_id = n.nid');
  $query->fields('inv', array('field_invoice_vendor_value'));
  $query->groupBy('inv.field_invoice_vendor_value');
  }
  if($type == 'SpendingCostCode') {
    $query->join('field_data_field_invoice_cost_code','icc','icc.entity_id = n.nid');
  $query->fields('icc', array('field_invoice_cost_code_value'));
  $query->groupBy('icc.field_invoice_cost_code_value');
  }  
  if($type == 'commitmentSpending') {
    $query->join('field_data_field_invoice_commitment','inc','inc.entity_id = n.nid');
  $query->fields('inc', array('field_invoice_commitment_nid'));
  $query->groupBy('inc.field_invoice_commitment_nid');
  } 
  $query->condition('pr.field_project_reference_nid', $projectId, '=');
  $query->condition('pr.bundle','project_spending','=');  
  $getInvNodes = $query->execute()->fetchAllKeyed(0,0);   
  
  if($type == 'vendorName') {
    $vendorArr = array();  
  foreach($getInvNodes as $vendorKey => $vendorVal) {
    if($vendorVal == '')  { $vendorArr['none'] = 'none'; }
    else if(is_numeric($vendorVal)) {
        $vendorName = node_load($vendorVal)->title;
        $vendorArr[$vendorVal] = $vendorName;
      }
    else {
      $vendorArr[$vendorVal] = $vendorVal;
      }
    }
  }    
  if($type == 'SpendingCostCode') {
    $ccArr = array();  
  foreach($getInvNodes as $ccCode) {        
    $getDesc = get_description_by_cost_code_mod($ccCode);   
    $ccArr[$ccCode] = $getDesc;
  }
  }   
  if($type == 'commitmentSpending') {
  $comitArr = array();  
    foreach($getInvNodes as $invKey => $invVal) {
    $commitNode = node_load($invVal); 
    if(isset($commitNode->field_commitment_number_calculat['und'])) {
      $comitArr[$invVal] = $commitNode->field_commitment_number_calculat['und'][0]['value'];
    }
  }
  } 
  if($type == 'invNo') {
    $form['select-invoice-number'] = array(
    '#type' => 'select',
    //'#title'=> 'Choose Commitment number',
    '#options' => $getInvNodes,
    '#chosen' => TRUE,
    '#multiple' => TRUE,
    '#default_value' => isset($_SESSION['ACTIVEFILTERVALSPEND-spend-invNo'])?$_SESSION['ACTIVEFILTERVALSPEND-spend-invNo'][$projectId]:'',
    '#attributes' => array('class'=> array('project_programe_spending_filter_form')),
    '#ajax' => array(
    'callback'=> 'commitment_filter_spending_callback',
    'wrapper' => 'project_program_reports_main_container',
    'effect' => 'fade',
    ),
    '#prefix' => '<div class="clearfix">',
    '#suffix' => '</div>',
  );
  $form['fileter-for'] = array(
    '#type' => 'hidden',
    '#value' => 'inv-no',
  );
  }
  
  if($type == 'vendorName') {
    $form['select-company-name'] = array(
    '#type' => 'select',
    //'#title'=> 'Choose Commitment number',
    '#options' => $vendorArr,
    '#chosen' => TRUE,
    '#multiple' => TRUE,
    '#default_value' => isset($_SESSION['ACTIVEFILTERVALSPEND-spend-Vendor'])?$_SESSION['ACTIVEFILTERVALSPEND-spend-Vendor'][$projectId]:'',
    '#attributes' => array('class'=> array('project_programe_spending_filter_form')),
    '#ajax' => array(
    'callback'=> 'commitment_filter_spending_callback',
    'wrapper' => 'project_program_reports_main_container',
    'effect' => 'fade',
    ),
    '#prefix' => '<div class="clearfix">',
    '#suffix' => '</div>',
  );
  $form['fileter-for'] = array(
    '#type' => 'hidden',
    '#value' => 'spending-company-name',
  );
  }        
  if($type == 'SpendingCostCode') {
    $form['select-cost-code'] = array(
    '#type' => 'select',
    //'#title'=> 'Choose Commitment number',
    '#options' => $ccArr,
    '#chosen' => TRUE,
    '#multiple' => TRUE,
    '#default_value' => isset($_SESSION['ACTIVEFILTERVALSPEND-spend-CostCode'])?$_SESSION['ACTIVEFILTERVALSPEND-spend-CostCode'][$projectId]:'',
    '#attributes' => array('class'=> array('project_programe_spending_filter_form')),
    '#ajax' => array(
    'callback'=> 'commitment_filter_spending_callback',
    'wrapper' => 'project_program_reports_main_container',
    'effect' => 'fade',
    ),
    '#prefix' => '<div class="clearfix">',
    '#suffix' => '</div>',
  );
  $form['fileter-for'] = array(
    '#type' => 'hidden',
    '#value' => 'spending-cost-code',
  );
  }
  if($type == 'commitmentSpending') {
    $form['select-commitment-type'] = array(
    '#type' => 'select',
    //'#title'=> 'Choose Commitment number',
    '#options' => $comitArr,
    '#chosen' => TRUE,
    '#multiple' => TRUE,
    '#default_value' => isset($_SESSION['ACTIVEFILTERVALSPEND-spend-commitType'])?$_SESSION['ACTIVEFILTERVALSPEND-spend-commitType'][$projectId]:'',
    '#attributes' => array('class'=> array('project_programe_spending_filter_form')),
    '#ajax' => array(
    'callback'=> 'commitment_filter_spending_callback',
    'wrapper' => 'project_program_reports_main_container',
    'effect' => 'fade',
    ),
    '#prefix' => '<div class="clearfix">',
    '#suffix' => '</div>',
  );
  $form['fileter-for'] = array(
    '#type' => 'hidden',
    '#value' => 'commit-type',
  );
  }
  $form['project-for'] = array(
    '#type' => 'hidden',
    '#value' => $projectId,
  );
  return $form;
}

function commitment_filter_spending_callback($form,&$form_state) {  
  global $company;  
  $formVal = $form_state['values'];  
  //echo  '<pre>';  print_r($formVal['select-commitment-number']);  die;
  $commands = array();
  $triggeringElement = $form_state['triggering_element'];  
  if(!empty($triggeringElement['#value']) && $triggeringElement['#value'] != 0){
    if($formVal['fileter-for'] == 'spending-company-name') {
    if(isset($formVal['select-company-name'])) {  
       if((isset($_SESSION['ACTIVEFILTERVALSPEND-spend-Vendor']) && $_SESSION['ACTIVEFILTERVALSPEND-spend-Vendor'][$_SESSION['ACTIVEPROJECT']] != $formVal['fileter-for']) || (!isset($_SESSION['ACTIVEFILTERVALSPEND-spend-Vendor'])) || (empty($_SESSION['ACTIVEFILTERVALSPEND-spend-Vendor']))){
        $_SESSION['ACTIVEFILTERVALSPEND-spend-Vendor'][$_SESSION['ACTIVEPROJECT']] = $formVal['select-company-name'];
      }
        $commands[] = ajax_command_html("#programe-spending-details", get_spending_listing_table_data($formVal['project-for'],'', $formVal['fileter-for'],$formVal['select-company-name'],'',0,0));
    }
    else {
     $commands[] = ajax_command_html("#programe-spending-details", get_spending_listing_table_data($formVal['project-for'],'' ,$formVal['fileter-for'],array(),'',0,0));
    }
  } 
  else if($formVal['fileter-for'] == 'inv-no')  {
    if(isset($formVal['select-invoice-number'])) {
    if((isset($_SESSION['ACTIVEFILTERVALSPEND-spend-invNo']) && $_SESSION['ACTIVEFILTERVALSPEND-spend-invNo'][$_SESSION['ACTIVEPROJECT']] != $formVal['fileter-for']) || (!isset($_SESSION['ACTIVEFILTERVALSPEND-spend-invNo'])) || (empty($_SESSION['ACTIVEFILTERVALSPEND-spend-invNo']))){
        $_SESSION['ACTIVEFILTERVALSPEND-spend-invNo'][$_SESSION['ACTIVEPROJECT']] = $formVal['select-invoice-number'];
      }  
      $commands[] = ajax_command_html("#programe-spending-details", get_spending_listing_table_data($formVal['project-for'],'',$formVal['fileter-for'],$formVal['select-invoice-number'],'',0,0));
    }
    else {
      $commands[] = ajax_command_html("#programe-spending-details", get_spending_listing_table_data($formVal['project-for'],'',$formVal['fileter-for'],array(),'',0,0));
    }
    }
  else if($formVal['fileter-for'] == 'commit-type') {
    if(isset($formVal['select-commitment-type'])) {
    if((isset($_SESSION['ACTIVEFILTERVALSPEND-spend-commitType']) && $_SESSION['ACTIVEFILTERVALSPEND-spend-commitType'][$_SESSION['ACTIVEPROJECT']] != $formVal['fileter-for']) || (!isset($_SESSION['ACTIVEFILTERVALSPEND-spend-commitType'])) || (empty($_SESSION['ACTIVEFILTERVALSPEND-spend-commitType']))){
        $_SESSION['ACTIVEFILTERVALSPEND-spend-commitType'][$_SESSION['ACTIVEPROJECT']] = $formVal['select-commitment-type'];
      }
      $commands[] = ajax_command_html("#programe-spending-details", get_spending_listing_table_data($formVal['project-for'],'',$formVal['fileter-for'],$formVal['select-commitment-type'],'',0,0));
    }
    else {
      $commands[] = ajax_command_html("#programe-spending-details", get_spending_listing_table_data($formVal['project-for'],'',$formVal['fileter-for'],array(),'',0,0));
    }
    }
  else if($formVal['fileter-for'] == 'spending-cost-code')  {
    if(isset($formVal['select-cost-code'])) {
    if((isset($_SESSION['ACTIVEFILTERVALSPEND-spend-CostCode']) && $_SESSION['ACTIVEFILTERVALSPEND-spend-CostCode'][$_SESSION['ACTIVEPROJECT']] != $formVal['fileter-for']) || (!isset($_SESSION['ACTIVEFILTERVALSPEND-spend-CostCode'])) || (empty($_SESSION['ACTIVEFILTERVALSPEND-spend-CostCode']))){
        $_SESSION['ACTIVEFILTERVALSPEND-spend-CostCode'][$_SESSION['ACTIVEPROJECT']] = $formVal['select-cost-code'];
      }
      $commands[] = ajax_command_html("#programe-spending-details", get_spending_listing_table_data($formVal['project-for'],'',$formVal['fileter-for'],$formVal['select-cost-code'],'',0,0));
    }
    else {
      $commands[] = ajax_command_html("#programe-spending-details", get_spending_listing_table_data($formVal['project-for'],'', $formVal['fileter-for'],array(),'',0,0));
    }
    }   
  }
  $commands[] = ajax_command_invoke("input.datatable_page_id", 'val',array(''));  
  return array('#type' => 'ajax', '#commands' => $commands);
}
function get_spending_listing_table_data($projectId = 0 ,$assetNode='',$filterFor = '', $filterVal='', $ajax=FALSE, $startRange=0, $endRange=5,$pageNo = '') { 
  global $company;  
  drupal_add_js(drupal_get_path('module', 'm6connect_program') . '/js/m6connect_program_spending.js');
  drupal_add_js(drupal_get_path('module', 'm6connect_program') . '/js/Prototype_Price_Format_0.1.js');
  drupal_add_js(drupal_get_path('theme', 'm6connect') . '/js/jquery.dataTables.min.js');
  drupal_add_css(drupal_get_path('theme', 'm6connect') . '/css/jquery.dataTables.min.css');
  $invNoForm = drupal_get_form('cost_manager_spending_filter_form_500', 500, 'invNo');
  $vendorForm = drupal_get_form('cost_manager_spending_filter_form_600', 600, 'vendorName');
  $ccForm = drupal_get_form('cost_manager_spending_filter_form_700', 700, 'SpendingCostCode');
  $commitForm = drupal_get_form('cost_manager_spending_filter_form_800', 800, 'commitmentSpending');
  $rows = array();
  $header = array(
    array('data'=>'Reconciled','class'=>array('text-center')),
	array('data'=>'Invoice Number &nbsp;<i id="invoice-number-filter" class="fa fa-caret-down filter-sort" aria-hidden="true"></i><br><span class="invoice-number-filter-def resesting" style="color:#ef6f6f; display:none; cursor:pointer;">Reset</span><div class="invoice-number-filter" style="display:none;" data="hiddenCus">'.render($invNoForm).'<div class="clearfix margin-bottom-10"><span class="fa-times-filter padding-5" id="invoice-number-filter" style="cursor:pointer;">Close</span><div class="rest-all-filter-spending display-inline-block" ><span class="resesting" aria-hidden="true" style="color:#ef6f6f;">Reset</span></div></div></div>','class'=>array('text-center')),
	array('data'=>'Cost Code &nbsp;<i id="cost-code-name-filter" class="fa fa-caret-down filter-sort" aria-hidden="true"></i><br><span class="cost-code-name-filter-def resesting" style="color:#ef6f6f; display:none; cursor:pointer;">Reset</span><div class="cost-code-name-filter" style="display:none;" data="hiddenCus">'.render($ccForm).'<div class="clearfix margin-bottom-10"><span class="fa-times-filter padding-5" id="cost-code-name-filter" style="cursor:pointer;">Close</span><div class="rest-all-filter-spending display-inline-block"><span class="resesting" aria-hidden="true" style="color:#ef6f6f;">Reset</span></div></div></div>','class'=>array('text-center')),
	array('data'=>'Spending Status','class'=>array('text-center')),
	array('data'=>'Vendor Name &nbsp;<i id="vendor-name-filter" class="fa fa-caret-down filter-sort" aria-hidden="true"></i><br><span class="vendor-name-filter-def resesting" style="color:#ef6f6f; display:none; cursor:pointer;">Reset</span><div class="vendor-name-filter" style="display:none;" data="hiddenCus">'.render($vendorForm).'<div class="clearfix margin-bottom-10"><span class="fa-times-filter padding-5" id="vendor-name-filter" style="cursor:pointer;">Close</span><div class="rest-all-filter-spending display-inline-block"><span class="resesting" aria-hidden="true" style="color:#ef6f6f;">Reset</span></div></div></div>','class'=>array('text-center')),
    array('data'=>'Invoice Date','class'=>array('text-center')),
    array('data'=>'Invoice Amount','class'=>array('text-center')),  
    array('data'=>'Actions <br><div class="rest-all-filter-spending" style="display:none;"><input type="button" value="Reset All" class="text-danger"></div>','class'=>array('text-center','no-data')),
  );
  $query = db_select('node','n');
  $query->join('og_membership','om','om.etid=n.nid AND om.entity_type=:entityType', array(':entityType'=>'node'));
  $query->join('field_data_field_project_reference','pr', 'pr.entity_id = n.nid');
  $query->fields('n', array('nid'));
  $query->condition('pr.field_project_reference_nid', $projectId, '=');  
  if($assetNode != '') {
    $query->join('field_data_field_asset_description_spending','ad','n.nid=ad.entity_id');
    $query->condition('ad.field_asset_description_spending_value', '%' . db_like($assetNode) . '%', 'LIKE') ;
  }
  if($filterVal != '') {
    if($filterFor == 'inv-no') {  
      $query->join('field_data_field_invoice_number_cal','cn','cn.entity_id = n.nid');
      $query->condition('cn.field_invoice_number_cal_value', $filterVal, 'IN');   
    }
    if($filterFor == 'spending-company-name') {
      $query->join('field_data_field_invoice_vendor','fv','fv.entity_id = n.nid');
      $query->condition('fv.field_invoice_vendor_value', $filterVal, 'IN');
    }
    if($filterFor == 'spending-cost-code') {
      $query->join('field_data_field_invoice_cost_code','ccc','ccc.entity_id = n.nid');
      $query->condition('ccc.field_invoice_cost_code_value', $filterVal, 'IN');
    }
    if($filterFor == 'commit-type') {
      $query->join('field_data_field_invoice_commitment','ct','ct.entity_id = n.nid');
      $query->condition('ct.field_invoice_commitment_nid', $filterVal, 'IN');
    }
    $query->condition('n.type','project_spending','=');
    $query->condition('om.gid', $company->nid, '=');
    $query->orderBy('n.nid', 'DESC');
    $aded = clone $query;
    $aded_sayi = $aded->execute();
    $rakam = $aded_sayi->rowCount();  
    $getSpendingNodes = $query->execute()->fetchCol();
  }
  else {
    $query->condition('n.type','project_spending','=');
    $query->condition('om.gid', $company->nid, '=');
    $query->orderBy('n.nid', 'DESC');
    $aded = clone $query;
    $aded_sayi = $aded->execute();
    $rakam = $aded_sayi->rowCount();  
    if($startRange == 'select') {
      $getSpendingNodes = $query->range(0,$endRange)->execute()->fetchCol();
    }
    else {
      $getSpendingNodes = $query->range($endRange,5)->execute()->fetchCol();
    }
  }
  $assetCost = '';  
  $assetInst = ''; 
  $assetConst =''; 
  $assetInterCharge = ''; 
  $remain = '';
  if(!empty($getSpendingNodes)) {
    foreach($getSpendingNodes as $spendingId => $spendingVal){
      $fileiconsdata = array(); 
      $fileArr = array(); 
      $spendingNode = node_load($spendingVal);  
      if(isset($spendingNode->field_invoice_is_reconciled['und'])) {
        if($spendingNode->field_invoice_is_reconciled['und'][0]['value'] == 1) { 
          $reconciled = '<input type="checkbox" checked="checked" class="invoice-recon-update" value="1" for="'.$spendingNode->nid.'">'; 
        } 
        else { 
          $reconciled = '<input type="checkbox" class="invoice-recon-update" value="0" for="'.$spendingNode->nid.'">';
        }
      }
      if(isset($spendingNode->field_invoice_commitment['und'])) {
        $commitId = node_load($spendingNode->field_invoice_commitment['und'][0]['nid']);
        $getCcode = $commitId->field_cost_code['und'][0]['value'];
        if($getCcode == '') {
          $getCcode = $spendingNode->field_invoice_cost_code['und'][0]['value'];
        }
        $query= db_select('node','n');
        $query->join('field_data_field_manager_cost_code','mcc','mcc.entity_id = n.nid');
        $query->join('field_data_field_cost_code_description','ccd','ccd.entity_id = n.nid');
        $query->fields('ccd',array('field_cost_code_description_value'));
        $query->condition('mcc.field_manager_cost_code_value', $getCcode, '=');
        $query->condition('n.type', 'project_cost_code', '=');
        $getCostCodeDesc = $query->execute()->fetchField();
        $getCcode = $getCcode.'|'.$getCostCodeDesc;
        $getCommitNumber = $commitId->field_commitment_number_calculat['und'][0]['value'];
      }
      else {
        $getCcode = 'None';
        $getCommitNumber = 'None';
      }   
      $invoiceNumber = isset($spendingNode->field_invoice_number_cal['und'])?$spendingNode->field_invoice_number_cal['und'][0]['value']:'None';
      $invoiceDate = isset($spendingNode->field_invoice_date['und'])?date('m/d/Y', strtotime($spendingNode->field_invoice_date['und'][0]['value'])):'None';
    $invoiceAmount = isset($spendingNode->field_invoice_amount['und'])?'$'.number_format($spendingNode->field_invoice_amount['und'][0]['value'],2):'$0.00';
    //$invoiceVendor = isset($spendingNode->field_invoice_vendor['und'])?node_load($spendingNode->field_invoice_vendor['und'][0]['value'])->title:'None';
    if(isset($spendingNode->field_invoice_vendor['und']) && is_numeric($spendingNode->field_invoice_vendor['und'][0]['value'])) {
        $invoiceVendor = node_load($spendingNode->field_invoice_vendor['und'][0]['value'])->title;
      }
      else {
        $invoiceVendor = $spendingNode->field_invoice_vendor['und'][0]['value'];
      }  
    $fileModuleIconPath = '/'.drupal_get_path('module','file').'/icons/';
      $fileIconPath = array(
        'image' => $fileModuleIconPath.'image-x-generic.png',
        'pdf' => $fileModuleIconPath.'application-pdf.png',
        'document' => $fileModuleIconPath.'x-office-document.png',
        'text' => $fileModuleIconPath.'text-plain.png',
      );
      if(isset($spendingNode->field_invoice_attechment['und'])) {  
        foreach($spendingNode->field_invoice_attechment['und'] as $addKey => $addVal) {
          $fileArr['image'][] = array('filename'=>$addVal['filename'],'uri'=>$addVal['uri']); //l($addVal['filename'], file_create_url($addVal['uri']));  
        } 
        //$fileiconsdata = array();
        if(!empty($fileArr)) {
          foreach($fileArr as $fileKey => $fileVal) {
            $itemCount = count($fileVal);
            $fileiconsdata[$fileKey] = '<span class="dropdown padding-10">'; 
            if($itemCount>1){
              $fileiconsdata[$fileKey] .= '<a href="#" id="action-document-'.$spendingNode->nid.'-'.$fileKey.'" class="dropdown-toggle"  data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">';
              $fileiconsdata[$fileKey] .= '<i class="fa fa-paperclip" aria-hidden="true" style="font-size:20px;"></i>' ;
            $fileiconsdata[$fileKey] .= '<span class="caret"></span></a>' ;
            $fileiconsdata[$fileKey] .= '<ul class="dropdown-menu" role="menu" aria-labelledby="action-document-'.$spendingNode->nid.'-'.$fileKey.'">' ;
            foreach($fileVal as $delta => $fileData){
              $fileiconsdata[$fileKey] .= '<li><a href="'.file_create_url($fileData['uri']).'" target="_bank">'.$fileData['filename'].'<a></li>'; 
            }
        $fileiconsdata[$fileKey] .= '</ul>';
            }
      else{
            $fileiconsdata[$fileKey] .= '<a href="'.file_create_url($fileVal[0]['uri']).'" id="action-document-'.$commitmentNode->nid.'-'.$fileKey.'" target="_bank">';
        $fileiconsdata[$fileKey] .= '<i class="fa fa-paperclip" aria-hidden="true" style="font-size:20px;"></i>';
        $fileiconsdata[$fileKey] .= '</a>' ;
      }
      $fileiconsdata[$fileKey] .= '</span>';
          }
    }
      }
    $invoiceAttachment = isset($spendingNode->field_invoice_vendor['und'])?node_load($spendingNode->field_invoice_vendor['und'][0]['value'])->title:'None';
    $commitment = '';
    $action = '<div class="project-action"><div class="btn-group"><div class="dropdown">
             <button id="dLabel" class="btn btn-success" type="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"> Actions</button>
           <ul class="dropdown-menu" role="menu" aria-labelledby="dLabel">
           <li>'.l('Edit', 'edit/'.$spendingNode->nid.'/details', array('attributes' => array('class' => 'edit-spending-detail', 'for' => $spendingNode->nid))).'</li>
           <li>'.l('Delete', url('node-delete/nojs/'.$spendingNode->nid), array( 'external'=>TRUE, 'attributes'=> array('class'=>array('use-ajax ctools-modal-assign-dashboard-popup-style ctools-use-modal'))) ).'</li>
           </ul></div></div></div>';   
    $spendingStatus = 'No Asset';
    $spreadStatus = '';
    $assetCost = '';  $assetInst = ''; $assetConst =''; $assetInterCharge = '';  
    $remain = '';
      if($spendingNode->field_has_asset['und'][0]['value'] == 'TRUE') {
      //Checking if amount remain in split section
    if($spendingNode->field_asset_type['und'][0]['value'] == 'Split') {
      foreach ($spendingNode->field_asset_category_split['und'] as $delta => $assetNid) { 
            $assetCost += $spendingNode->field_asset_cost['und'][$delta]['value'];  
            $assetInst += $spendingNode->field_asset_installation['und'][$delta]['value'];
            $assetConst += $spendingNode->field_asset_outside_consultant['und'][$delta]['value'];
            $assetInterCharge += $spendingNode->field_asset_internal_charge['und'][$delta]['value'];
      }
      $getTotalAmount = $assetCost +  $assetInst + $assetConst + $assetInterCharge;       
      if($spendingNode->field_invoice_amount['und'][0]['value'] > $getTotalAmount) {
        $remain = 'Yes';
      $assetStatus = '<span style="border-radius: 15px; line-height: 16px; font-size: 10px; background: #FFF; height: 20px; width: 20px; text-align: center; font-weight: bold; margin: 0 0 0 5px; border: 2px solid #ff0000; color: #ff0000; padding:3px 5px 3px 5px;">A</span>';
      }
      else {
        $assetStatus = '<span style="border-radius: 15px; line-height: 16px; font-size: 10px; background: #FFF; height: 20px; width: 20px; text-align: center; font-weight: bold; margin: 0 0 0 5px; border: 2px solid #49a049; color: #49a049; padding:3px 5px 3px 5px;">A</span>';
      }
    }         
      
    $spendingStatus = $spendingNode->field_asset_type['und'][0]['value'];
    if($spendingStatus == 'Spread') {
      $spreadStatus = '- ('.$spendingNode->field_spread_auto['und'][0]['value'].')';
    }
    }
    else {
        $assetStatus = '';
    }
    $rows[] = array(
        'data' => array(
          array('data' => $reconciled.l('<span class="commitment-nu-cust">'.$assetStatus.' - '.$remain.'</span>', 'edit/'.$spendingNode->nid.'/details', array('html' => TRUE, 'external' => TRUE,'attributes' => array('class' => 'edit-spending-detail', 'for' => $spendingNode->nid))).' '.implode('&nbsp;',$fileiconsdata),'class' => array('text-left')),
      array('data' => l('<span class="commitment-nu-cust">'.$invoiceNumber.'</span>', 'edit/'.$spendingNode->nid.'/details', array('html' => TRUE, 'external' => TRUE,'attributes' => array('class' => 'edit-spending-detail', 'for' => $spendingNode->nid))),'class' => array('text-left')),
      array('data' => $getCcode,'class' => array('text-left')),
      //array('data' => $getCommitNumber,'class' => array('text-left')),
      array('data' => $spendingStatus.''.$spreadStatus,'class' => array('text-left')),      
          array('data' => $invoiceVendor!=''?ucwords($invoiceVendor):'None','class' => array('text-left')),       
          array('data' => $invoiceDate,'class' => array('text-left')),
          array('data' => $invoiceAmount,'class' => array('text-right')),                   
          array('data' => $action,'class' => array('text-center')),
        ),  
    //'class' => array('custom-odd'),
      );
    }
  }
  $outputBefore = _get_pager_option_data_list($projectId,'spend');
  $outputBefore .= _get_filter_by_asset_list($projectId, $assetNode);
  if(!$ajax){
    $output = theme('table', array('header'=>$header,'rows'=>$rows,'empty'=>'No Spending created yet','attributes'=>array('class'=>array('table','m6connect-custom-table','m6connect-custom-program-table','m6connect-program-commitment-table','table-hover','table-bordered','text-center')))); 
  }
  else{
    $output = theme('feedback_table_rows', array('header' => array(), 'rows' => $rows)); 
  }  
  $pagerGene = '';
  
  if($rakam > 5) {
    $pagerGene .= '<div class="item-list"><ul class="pager">';
    $pagerGene .= '<li class="pager-current">'.l('<< First', 'get-next-page-data/spend/0/'.$projectId.'/'.$rakam.'/nojs', array('attributes' => array('class' => array('use-ajax','page-range-0')))).'</li>';
    if($rakam > 5) {
      $getpageLimit = $rakam/5;
      $getpageLimit = ceil($getpageLimit);
    }
  if(!empty($pageNo) && $pageNo >= 6) {
    $iStart = $pageNo - 4;
    $iEnd = $pageNo + 4;
    if($getpageLimit >= $iEnd) {
      for($i = $iStart; $i<=$iEnd; $i++) {
          $pagerGene .= '<li class="pager-current">'.l($i, 'get-next-page-data/spend/'.$i.'/'.$projectId.'/'.$rakam.'/nojs', array('attributes' => array('class' => array('use-ajax','page-range-'.$i)))).'</li>';
        }
    }
    else {
      for($i = 1; $i<=$getpageLimit; $i++) {
          $pagerGene .= '<li class="pager-current">'.l($i, 'get-next-page-data/spend/'.$i.'/'.$projectId.'/'.$rakam.'/nojs', array('attributes' => array('class' => array('use-ajax','page-range-'.$i)))).'</li>';
        }
    }
  }
  else {
    if($getpageLimit < 9) {
      for($i = 1; $i<=$getpageLimit; $i++) {
          $pagerGene .= '<li class="pager-current">'.l($i, 'get-next-page-data/spend/'.$i.'/'.$projectId.'/'.$rakam.'/nojs', array('attributes' => array('class' => array('use-ajax','page-range-'.$i)))).'</li>';
        }
    } 
    else {
      for($i = 1; $i<=9; $i++) {
          $pagerGene .= '<li class="pager-current">'.l($i, 'get-next-page-data/spend/'.$i.'/'.$projectId.'/'.$rakam.'/nojs', array('attributes' => array('class' => array('use-ajax','page-range-'.$i)))).'</li>';
        }
    }   
  }
  $pagerGene .= '<li class="pager-current">'.l('Last >>', 'get-next-page-data/spend/'.$getpageLimit.'/'.$projectId.'/'.$rakam.'/nojs', array('attributes' => array('class' => array('use-ajax','page-range-0')))).'</li>';
    $pagerGene .= '</ul></div>';
  }
  return $outputBefore.$output.$pagerGene;
}
// ================================
// End Spending Slide (Tab) Section
// Start ETC Slide (Tab) Section
// ================================
function program_project_etc_content(){
  global $company;    
  $getEstimateByCompany = _project_list_by_company($company->nid, 'project_management');    
  reset( $array );
  $firstProject = key( $getEstimateByCompany );   
  $elements = array();
  $elements['etc_form']= array(
    '#markup' => drupal_render(drupal_get_form('program_modify_etc_form')),
  '#prefix' => '<div class="clearfix margin-bottom-10">',
  '#suffix' => '</div>',
  );
  $elements['prgram-etc-listing'] = array(
    '#markup' => get_etc_listing_table_data($firstProject),
  '#prefix' => '<div class="clearfix"><div class="prgram-etc-listing" id="prgram-etc-listing-table">',
  '#suffix' => '</div></div>',
   ); 
  return $elements;
}

function program_modify_etc_form($form,&$form_state){
  global $user;
  global $company;  
   // Get project list by company  
  $getProjectByCompany = _project_list_by_company($company->nid, 'project_management');
  $getEtcByCompany = _project_etc_list_by_company($company->nid);  
  // ETC number calculation
  $myCounter = variable_get('ETCNumber');
  $makeSr = str_pad($myCounter + 1, 6, "0", STR_PAD_LEFT);
  $etcNumber = 'ETC'.$makeSr.'-'.date('Y');  
  $defaultValues = $form_state['storage_etc_project'];
  $form['#attached']['js'][] = array(
    'data'=>drupal_get_path('module', 'm6connect_routing') . '/js/routing_type_slip_form.js',
  'type'=>'file'
  );  
  $form['#attributes']['class'] = array('program_modify_etc_form');
  $form['select-etc'] = array(
    '#type'=>'select',
  '#title'=> 'Select Project',
  '#options' => $getProjectByCompany,
  '#default_value' => isset($_SESSION['ACTIVEPROJECT'])?$_SESSION['ACTIVEPROJECT']:'',
  '#attributes' => array('class'=> array('form-control project-program-etc-sel')),
  '#ajax' => array(
    'callback'=> 'change_program_etc_callback',
    'wrapper' => 'project_etc_main_container',
    'effect' => 'fade',
  ),  
  '#prefix' => '<div class="clearfix"><div class="pull-left form-inline">',
  '#suffix' => '</div><div class="add-new-etc-btn pull-right" id="add-etc-button-custom">'. l('<input type="button" value="Add New ETC" class="form-submit new-record-cus-btn" />', '#', array('html' => TRUE, 'external' => TRUE, 'attributes' => array('class' => array('new-etc-link')))).'</div></div>',
  );  
  $form['get-etc'] = array(
    '#type'=>'select',
  '#title'=> 'Select Project',
  '#options' => $getEtcByCompany,
  '#default_value' => isset($_GET['eid'])?check_plain($_GET['eid']):0,
  '#attributes' => array('class'=> array('form-control project-program-sel-etc')),
  '#ajax' => array(
    'callback'=> 'change_program_etc_callback',
    'wrapper' => 'project_etc_main_container',
    'effect' => 'fade',
  ),
  '#prefix' => '<div class="clearfix" style="display:none;"><div class="pull-left form-inline">',
  '#suffix' => '</div></div>',
  ); 
  $form['prgram-project-menu-items'] = array(
    '#markup' => program_project_menu_links_content(),
  '#prefix' => '<div class="clearfix">',
  '#suffix' => '</div>',
  );  
  /*$form['schedule_form_button'] = array(
    '#markup' => '<div class="add-new-etc-btn pull-left" id="add-etc-button-custom">'. l('<input type="button" value="Add New Record" class="form-submit new-record-cus-btn" />', '#', array('html' => TRUE, 'external' => TRUE, 'attributes' => array('class' => array('new-etc-link', 'btn btn-primary ')))).'</div>',
  '#prefix' => '<div class="clearfix margin-bottom-10">',
  )*/;
  $form['set-etc-status'] = array(
    '#type'=>'select',
  '#title'=> 'Select Status',
  '#options' => array('reds' =>  'Red', 'greens' => 'Green','yellows' => 'Yellow'),
  '#empty_option' => 'Choose Status',
  '#attributes' => array('class'=> array('form-control', 'program-etc-status')),
  '#default_value' => isset($defaultValues['program-etc-status'])?$defaultValues['program-etc-status']:'',  
  '#prefix' => '<div class="pull-right form-inline program-etc-status-btn"><div class="status-mark form-group"><i class="fa fa-check-circle"></i></div><div class="form-group">',
  '#suffix' => '</div></div></div>',
  ); 
  $form_state['storage_etc_project'] = array();
  if(empty($form_state['storage_etc_project_default_options'])){
   $form_state['storage_etc_project_default_options'] = array(); 
  }
  if(isset($form_state['values'],$form_state['input'],$form_state['triggering_element'],$form_state['triggering_element']['#type'],$form_state['triggering_element']['#name']) && $form_state['triggering_element']['#type']=='select'){
  $triggeringElement = $form_state['triggering_element'];
  if($form_state['triggering_element']['#name'] == 'get-etc') {
    $etcNode = node_load($triggeringElement['#value']);
    $form_state['storage_etc_project'] = array(
    'etc_title' => $etcNode->title,
    'etc_number' => isset($etcNode->field_etc_number_calc['und'])?$etcNode->field_etc_number_calc['und'][0]['value']:'',
    'reference' => isset($etcNode->field_etc_reference['und'])?$etcNode->field_etc_reference['und'][0]['value']:'',
    'etc_date' => isset($etcNode->field_etc_date['und'])?$etcNode->field_etc_date['und'][0]['value']:'',
    'cost_code' => isset($etcNode->field_etc_cost_code['und'])?$etcNode->field_etc_cost_code['und'][0]['value']:'',
    'etc_amount' => isset($etcNode->field_etc_amount['und'])?$etcNode->field_etc_amount['und'][0]['value']:'',
    'etc_status' => isset($etcNode->field_etc_status['und'])?$etcNode->field_etc_status['und'][0]['value']:'',
    'etc_commitment' => isset($etcNode->field_etc_commitment‎ ['und'])?$etcNode->field_etc_commitment‎ ['und'][0]['nid']:'',
    'reason_code' => isset($etcNode->field_etc_reason_code['und'])?$etcNode->field_etc_reason_code['und'][0]['value']:'',
    'etc_description' => isset($etcNode->body['und'])?$etcNode->body['und'][0]['value']:'',
    'program-etc-status' => isset($etcNode->field_etc_status_mark['und'])?$etcNode->field_etc_status_mark['und'][0]['value']:''
    //'etc_attachment' => $projectNode->body['und'][0]['value'],
    );    
    $form_state['storage_etc_project_default_options']['commitments'] = get_etc_by_project($etcNode->field_project_reference['und'][0]['nid'],'commitments');
    $form_state['storage_etc_project_default_options']['cost_code'] = get_etc_by_project($etcNode->field_project_reference['und'][0]['nid'],'costCode');
  }
  else if($form_state['triggering_element']['#name']=='select-etc'){
    //$projectNode = node_load($triggeringElement['#value']);
    $form_state['storage_etc_project_default_options']['commitments'] = get_etc_by_project($triggeringElement['#value'],'commitments');
    $form_state['storage_etc_project_default_options']['cost_code'] = get_etc_by_project($triggeringElement['#value'],'costCode');
  }
  }
  $form['main-container']= array(
    '#type' => 'container',
  '#attributes' => array('class'=>array('row')), 
  '#prefix' => '<div class="clearfix"><div id="project_etc_main_container" class="project-detail project_etc_main_cust">',
  '#suffix' => '</div></div></div>',
  '#process' => array('project_etc_main_container_process'),  
  );            
  
  $form['actions']['reset'] = array(
    '#type' => 'markup',
    '#markup' => '<input type="button" value="Cancel" class="form-submit custom-reset-button cancel-button">',
  '#prefix' => '<div class="clearfix get-total-section margin-top-10"><div class="pull-left custom-submit-etc custom-submit-etc-reset margin-bottom-10">',
  );  
  $form['actions']['submit'] = array(
    '#type' => 'submit',
  '#validate' => array('program_modify_etc_form_custom_validate'),
  '#submit'=> array('projct_etc_submit'), 
  '#attributes' => array('class'=>array('main-commitment-submit-call')), 
  '#value' => 'Save',
  '#prefix' => '<div class="pull-left custom-submit-commitment margin-bottom-10">', 
  '#suffix' => '</div></div></div>',  
  );  
  
  
  /*$form['actions']['submit'] = array(
    '#type' => 'submit',
  '#value' => 'Save',
  '#validate' => array('program_modify_etc_form_custom_validate'),
  '#submit' => array('projct_etc_submit'),
  '#prefix' => '<div class="clearfix custom-submit-etc margin-bottom-10">',
  '#suffix' => '</div>',
  );*/    

  return $form;
}

function project_etc_main_container_process($element, &$form_state) {    
  global $user;
  global $company;  
  // Get the list of commitement based on company!
  // ETC number calculation
  $myCounter = variable_get('ETCNumber');
  $makeSr = str_pad($myCounter + 1, 6, "0", STR_PAD_LEFT);
  $etcNumber = 'ETC'.$makeSr.'-'.date('Y');
  $defaultValues = $form_state['storage_etc_project'];     
  
  $element['main-container']['left-container']= array(
    '#type' => 'container',
  '#attributes' => array('class'=>array('col-md-8','col-sm-8','col-xs-12','project-details-left')),
  '#weight' => 1,
  );  
  $element['main-container']['left-container']['left-main-container']= array(
    '#type' => 'container',
  '#attributes' => array('class'=>array('row')),
  '#weight' => 10,
  );  
  $element['main-container']['left-container']['left-main-container']['inner-left-container']= array(
    '#type' => 'container',
  '#attributes' => array('class'=>array('col-md-6','col-sm-6','col-xs-12','project-details-left')),
  );  
  $element['main-container']['left-container']['left-main-container']['inner-right-container']= array(
    '#type' => 'container',
  '#attributes' => array('class'=>array('col-md-6','col-sm-6','col-xs-12','project-details-left')),
  );  
  $element['main-container']['right-container']= array(
    '#type' => 'container',
  '#attributes' => array('class'=>array('col-md-4','col-sm-4','col-xs-12','project-details-right')),
  '#weight' => 2,

  );  
  $element['main-container']['full-container']= array(
    '#type' => 'container',
  '#attributes' => array('class'=>array('col-md-12','col-sm-12','col-xs-12','project-details-full',)),
  '#weight' => 3,
  );  
  $element['main-container']['left-container']['project_etc_nid']= array(
    '#type'=>'hidden',
  '#title_display' => 'invisible',
  '#attributes' => array('class'=> array('form-control project_etc_nid')),
  );
  $element['main-container']['left-container']['datatable_page_id']= array(
    '#type' => 'hidden',
  '#title_display' => 'invisible',
  '#attributes' => array('class'=> array('form-control datatable_page_id')),
  );
  $element['main-container']['left-container']['page_number_id']= array(
    '#type' => 'hidden',
  '#title_display' => 'invisible',
  '#attributes' => array('class'=> array('form-control page_number_id')),
  );  
  $element['main-container']['left-container']['etc_commitment_nid']= array(
    '#type'=>'hidden',
  '#title_display' => 'invisible',
  '#attributes' => array('class'=> array('form-control etc_commitment_nid')),
  );
  $element['main-container']['left-container']['status_mark_data_id']= array( 
    '#type'=>'hidden',
  '#title_display' => 'invisible',
  '#attributes' => array('class'=> array('form-control status_mark_data_id')),
  );
  $element['main-container']['left-container']['etc_title']= array(
    '#type'=> 'textfield',
  '#title' => 'Title',
  '#attributes' => array('class'=> array('form-control etc_title')),
  '#required' => TRUE,
  '#weight' => 9,
  '#default_value' => isset($defaultValues['etc_title'])?$defaultValues['etc_title']:'',  
  '#prefix' => '<div class="project-details-border"><div class="clearfix form-item">',
  '#suffix' => '</div>',
  '#field_suffix' => '<div class="pull-right project-avail-status-title"><span class="text-danger"></span><span class="text-success"></span></div>',
  );  
  $element['main-container']['left-container']['left-main-container']['inner-left-container']['etc_number']= array(
    '#type'=> 'textfield',
  '#title' => 'ETC Number',
  '#attributes' => array('class'=> array('form-control etc_number')),
  '#required' => TRUE,
  '#default_value' => $etcNumber, 
  '#prefix' => '<div class="clearfix form-item">',
  '#suffix' => '</div>',
  '#field_suffix' => '<div class="pull-right project-avail-status"><span class="text-danger"></span><span class="text-success"></span></div>'
  );  
  $element['main-container']['left-container']['left-main-container']['inner-left-container']['reference']= array(
    '#type'=> 'textfield',
  '#title' => 'Reference #',
  '#attributes' => array('class'=> array('form-control reference')),
  //'#required' => TRUE,
  '#default_value' => isset($defaultValues['reference'])?$defaultValues['reference']:'',  
  '#prefix' => '<div class="clearfix form-item">',
  '#suffix' => '</div>',
  );  
  $element['main-container']['left-container']['left-main-container']['inner-left-container']['etc_date']= array(    
  '#title' => 'Date',
  '#type' => 'date_popup',
  '#date_format' => 'm/d/Y',
    '#date_year_range' => '-3:+3',  
  '#attributes' => array('class'=> array('form-control etc_date'),'autocomplete' => 'off'),
  '#pre_render' => array('m6connect_programe_date_prerender'),
  //'#required' => TRUE,
  '#default_value' => isset($defaultValues['etc_date'])?$defaultValues['etc_date']:'',  
  '#prefix' => '<div class="clearfix form-item">',
  '#suffix' => '</div>',
  );  
  $element['main-container']['left-container']['left-main-container']['inner-left-container']['etc_amount']= array(
    '#type'=>'textfield',
  '#title' => 'Amount',
  '#attributes' => array('class'=> array('form-control etc_amount')),
  //'#required' => TRUE,
  '#default_value' => isset($defaultValues['etc_amount'])?$defaultValues['etc_amount']:'',  
  '#prefix' => '<div class="clearfix form-item">',
  '#suffix' => '</div>',
  );  
  $element['main-container']['left-container']['left-main-container']['inner-left-container']['etc_status']= array(
    '#type'=>'select',

  '#title' => 'Status',
  '#options'=> array('active' => 'Active', 'on-hold' => 'On Hold'),
  '#empty_option' => '-- Select --',
  '#attributes' => array('class'=> array('form-control etc_status')),
  //'#required' => TRUE,
  '#default_value' => isset($defaultValues['etc_status'])?$defaultValues['etc_status']:'',  
  '#prefix' => '<div class="clearfix form-item">',
  '#suffix' => '</div>',
  );  
  
  $element['main-container']['left-container']['etc_commitment_type_value']= array(
    '#type'=>'hidden',
  '#title_display' => 'invisible',
  '#attributes' => array('class'=> array('form-control etc_commitment_type_value')),
  );
  $element['main-container']['left-container']['left-main-container']['inner-right-container']['etc_commitment_type']= array(
    '#type'=>'select',
  '#title' => 'Commitment Type',
  '#options'=> array('purchase order' => 'Purchase Order', 'change purchase order' => 'Change Purchase Order','potential change order' => 'Potential Change Order', 'change order' => 'Change Order','contract' => 'Contract','contract amendment' => 'Contract Amendment'),  
  '#empty_option' => '-- Select --',
  '#attributes' => array('class'=> array('form-control etc_commitment_type')),
  //'#required' => TRUE,
  '#default_value' => isset($defaultValues['etc_commitment_type'])?$defaultValues['etc_commitment_type']:'',
  '#prefix' => '<div class="clearfix form-item">',
  '#suffix' => '</div>',
  //'#field_prefix' => _generating_cost_commitment_link(),
  );    
  $element['main-container']['left-container']['left-main-container']['inner-right-container']['etc_commitment']= array(
    '#type'=>'select',
  '#title' => 'Commitment',
  '#options'=> array(), 
  '#empty_option' => '- Select Commitment -',
  '#attributes' => array('class'=> array('form-control etc_commitment')),
  '#default_value' => isset($defaultValues['etc_commitment'])?$defaultValues['etc_commitment']:'',
  '#prefix' => '<div class="clearfix form-item">',
  '#suffix' => '</div>',
  );  
  $element['main-container']['left-container']['left-main-container']['inner-right-container']['etc_cost_code']= array(
    '#type'=>'select',
  '#title' => 'Cost Code',
  '#options'=> _get_approved_cost_code_by_project(),
  '#empty_option' => '- Select cost code -',
  '#attributes' => array('class'=> array('form-control etc_cost_code')),
  //'#required' => TRUE,
  '#default_value' => isset($defaultValues['etc_cost_code'])?$defaultValues['etc_cost_code']:'',
  '#prefix' => '<div class="clearfix form-item">',
  '#suffix' => '</div>',
  );
  $element['main-container']['etc_cost_code_value']= array(
    '#type'=>'hidden',
  '#title_display' => 'invisible',
  '#attributes' => array('class'=> array('form-control etc_cost_code_value')),
  );  
  $element['main-container']['left-container']['left-main-container']['inner-right-container']['reason_code']= array(
    '#type'=>'select',
  '#title' => 'Reason Code',
  '#options'=> array('design change' => 'Design Change','error and omission' => 'Error and Omission','estimate shortfall' => 'Estimate Shortfall','field condition' => 'Field Condition','force majeure' => 'Force Majeure','future commitment' => 'Future Commitment','market change' => 'Market Change','performance failure' => 'Performance Failure','risk' => 'Risk','schedule impact' => 'Schedule Impact','scope change' => 'Scope Change','unforeseen conditions' => 'Unforeseen Conditions','general revision' => 'General Revision'),
  '#empty_option' => '- Select Reason Code -',
  '#attributes' => array('class'=> array('form-control reason_code')),
  //'#required' => TRUE,
  '#default_value' => isset($defaultValues['reason_code'])?$defaultValues['reason_code']:'',  
  '#prefix' => '<div class="clearfix form-item">',
  '#suffix' => '</div></div>',
  );  
  $element['main-container']['right-container']['operation_done']= array(
    '#type' =>'checkboxes',
  '#options' => array(
    'Risk Management'=>'Risk Management',
    'Scope Change'=>'Scope Change',
    'In Report'=>'In Reports',
    'In ETC'=>'In ETC Forecast',
    '#default_value' => isset($defaultValues['operation_done'])?$defaultValues['operation_done']:'',  
  ),
  '#attributes' => array('class'=> array('operation-done')),
  '#prefix' => '<div class="clearfix form-item">',
  '#suffix' => '</div>',
  );
  $element['main-container']['full-container']['etc_description']= array(
    '#type' => 'textarea',
  '#title' => 'Description',
  '#attributes' => array('class'=> array('form-control etc_description')),
  '#after_build' => array('description_custom_field_remove_format_filter_after_build'),
  '#weight' =>11,
  '#default_value' => isset($defaultValues['etc_description'])?$defaultValues['etc_description']:'',  
  '#prefix' => '<div class="clearfix form-item">',
  '#suffix' => '</div>',
  );
 $element['main-container']['full-container']['etc_attachment']= array(
    '#type' => 'file',
  '#title' => 'Attachment',
    '#name' => 'files[]',
  '#upload_location' => 'private://', 
  '#field_prefix' => '<div class="etc-image-preview"></div>',
  '#description' => t('Use CTRL + Click to choose multiple attachments.'),
    '#attributes' => array('multiple' => 'multiple'),    
  '#prefix' => '<div class="clearfix form-item" id="custom-etc-attach">',
  '#suffix' => '</div>',
  ); 
  
  if(isset($form_state['storage_etc_project_default_options'],$form_state['storage_etc_project_default_options']['commitments'])){
  $element['main-container']['left-container']['left-main-container']['inner-right-container']['etc_commitment']['#options'] = $form_state['storage_etc_project_default_options']['commitments']; 
  $element['main-container']['left-container']['left-main-container']['inner-right-container']['etc_commitment']['#default_value'] ='';   
  }
  if(isset($form_state['storage_etc_project_default_options'],$form_state['storage_etc_project_default_options']['cost_code'])) {
    $element['main-container']['left-container']['left-main-container']['inner-left-container']['cost_code']['#options'] = $form_state['storage_etc_project_default_options']['cost_code']; 
  $element['main-container']['left-container']['left-main-container']['inner-left-container']['cost_code']['#default_value'] ='';
  }
  return $element;
}

function program_modify_etc_form_custom_validate($form, &$form_state) {
  //echo  '<pre>';  print_r($form_state['values']);  die;
  if($_FILES['files']['name'] != '')  {
  $fileCount = count($_FILES['files']['name']);
  for ($i = 0; $i < $fileCount; $i++) {
      $file = file_save_upload($i, array( 
      'file_validate_extensions' => array('jpg jpeg gif png txt doc docx xls xlsx pdf ppt pptx pps ppsx odt ods odp mp3 mov mp4 m4a m4v mpeg avi ogg oga ogv weba webp webm html csv xls'),
    ));
    if ($file) {    
      if ($file = file_move($file, 'private://')) {
      $form_state['values']['etc_attachment'][$i] = $file;
        } 
    }
  }
  }
}

function change_program_etc_callback($form,&$form_state) {
  $commands = array();
    $triggeringElement = $form_state['triggering_element'];
    if(!empty($triggeringElement['#value']) && $form_state['triggering_element']['#name'] == 'get-etc'){
      $etcNode = node_load($triggeringElement['#value']);
    $storage_project = array(
      'etc_title' => $etcNode->title,
      'etc_number' => isset($etcNode->field_etc_number_calc['und'])?$etcNode->field_etc_number_calc['und'][0]['value']:'',
      'reference' => isset($etcNode->field_etc_reference['und'])?$etcNode->field_etc_reference['und'][0]['value']:'',
      'etc_date' => isset($etcNode->field_etc_date['und'])?$etcNode->field_etc_date['und'][0]['value']:'',
      'etc_cost_code_value' => isset($etcNode->field_etc_cost_code['und'])?$etcNode->field_etc_cost_code['und'][0]['value']:'',
      'etc_amount' => isset($etcNode->field_etc_amount['und'])?$etcNode->field_etc_amount['und'][0]['value']:'',
      'etc_status' => isset($etcNode->field_etc_status['und'])?$etcNode->field_etc_status['und'][0]['value']:'',
      'etc_commitment_type' => isset($etcNode->field_etc_commitment_type['und'])?$etcNode->field_etc_commitment_type['und'][0]['value']:'',
    'etc_commitment_nid' => isset($etcNode->field_etc_commitment['und'])?$etcNode->field_etc_commitment['und'][0]['nid']:'',
      'reason_code' => isset($etcNode->field_etc_reason_code['und'])?$etcNode->field_etc_reason_code['und'][0]['value']:'',
      'etc_description' => isset($etcNode->body['und'])?$etcNode->body['und'][0]['value']:'',   
    'program_etc_status' => isset($etcNode->field_etc_status_mark['und'])?$etcNode->field_etc_status_mark['und'][0]['value']:'',
    );
    if(isset($etcNode->field_etc_attachment['und'])) {
      foreach($etcNode->field_etc_attachment['und'] as $addKey => $addVal) {
        $getAdditionalImageSrc[] = l($etcNode->field_etc_attachment['und'][$addKey]['filename'], file_create_url($etcNode->field_etc_attachment['und'][$addKey]['uri'])); 
      }     
      $commands[] = ajax_command_html(".etc-image-preview", '<div class="image-preview">'.implode(',', $getAdditionalImageSrc).'</div>');
    }
    $etcDate = $storage_project['etc_date']!=''?date('m/d/Y', strtotime($storage_project['etc_date'])):'';  
    $commands[] = ajax_command_invoke("input.etc_title", 'val',array($storage_project['etc_title']));   
    $commands[] = ajax_command_invoke("input.reference", 'val',array($storage_project['reference']));
    $commands[] = ajax_command_invoke("input.etc_date", 'val',array($etcDate));
    $commands[] = ajax_command_invoke("input.etc_cost_code_value", 'val',array($storage_project['etc_cost_code_value']));
    $commands[] = ajax_command_invoke("input.etc_amount", 'val',array($storage_project['etc_amount']));
    $commands[] = ajax_command_invoke("input.etc_amount", 'trigger',array('keyup'));
    $commands[] = ajax_command_invoke("select.etc_status", 'val',array($storage_project['etc_status']));  
    $commands[] = ajax_command_invoke("select.etc_commitment_type", 'val',array($storage_project['etc_commitment_type']));  
    $commands[] = ajax_command_invoke("input.etc_commitment_nid", 'val',array($storage_project['etc_commitment_nid'])); 
    $commands[] = ajax_command_invoke("select.etc_commitment", 'val',array($storage_project['etc_commitment_nid']));      
    $commands[] = ajax_command_invoke("select.etc_cost_code", 'val',array($storage_project['etc_cost_code_value']));
    $commands[] = ajax_command_invoke("select.reason_code", 'val',array($storage_project['reason_code']));
    $commands[] = ajax_command_invoke("textarea.etc_description", 'val',array($storage_project['etc_description']));      
    $commands[] = ajax_command_invoke("input.etc_number", 'val',array($storage_project['etc_number']));     
    $commands[] = ajax_command_invoke("select.program-etc-status", 'val',array($storage_project['program_etc_status']));
    $commands[] = ajax_command_invoke("select.program-etc-status", 'trigger',array('change'));    
    $triggerId = $etcNode->field_project_reference['und'][0]['nid'];
    if(isset($etcNode->field_etc_operation_done['und']) && !empty($etcNode->field_etc_operation_done['und'])){
      foreach($etcNode->field_etc_operation_done['und'] as $index1 => $item1){
      $commands[] = ajax_command_invoke('.operation-done input[value="'.$item1['value'].'"]', 'attr',array('checked', 'true')); 
      }
      }
    $commands[] = ajax_command_html("#prgram-etc-listing-table", get_etc_listing_table_data($triggerId,0,50));
    $commands[] = ajax_command_html("#custom_cost_code_commitment_link", _generating_cost_commitment_link($triggerId));
    }
    else{
    if((isset($_SESSION['ACTIVEPROJECT']) && $_SESSION['ACTIVEPROJECT']!=$triggeringElement['#value']) || (!isset($_SESSION['ACTIVEPROJECT'])) || (empty($_SESSION['ACTIVEPROJECT']))){
      $_SESSION['ACTIVEPROJECT'] = $triggeringElement['#value'];
    }
    $commands[] = ajax_command_invoke('input[type="checkbox"].operation-done','removeAttr',array('checked'));   
    $commands[] = ajax_command_html("#prgram-etc-listing-table", get_etc_listing_table_data($triggeringElement['#value'],0,50));
    $commands[] = ajax_command_html("#custom_cost_code_commitment_link", _generating_cost_commitment_link($triggeringElement['#value']));       
    $commands[] = ajax_command_invoke("input.project_etc_nid", 'val',array(''));
    $commands[] = ajax_command_invoke("input.etc_title", 'val',array(''));
    $commands[] = ajax_command_invoke("input.reference", 'val',array(''));
    $commands[] = ajax_command_invoke("input.etc_date", 'val',array(''));
    $commands[] = ajax_command_invoke("input.etc_cost_code_value", 'val',array(''));
    $commands[] = ajax_command_invoke("input.etc_amount", 'val',array(''));
    $commands[] = ajax_command_invoke("input.etc_commitment_nid", 'val',array(''));   
    $commands[] = ajax_command_invoke("select.etc_status", 'val',array(''));
    $commands[] = ajax_command_invoke("select.etc_commitment_type", 'val',array(''));
    $commands[] = ajax_command_invoke("select.etc_commitment", 'val',array(''));      
    $commands[] = ajax_command_invoke("select.etc_cost_code", 'val',array(''));
    $commands[] = ajax_command_invoke("select.reason_code", 'val',array(''));
    $commands[] = ajax_command_invoke("textarea.etc_description", 'val',array(''));
    $commands[] = ajax_command_invoke("select.program-etc-status", 'val',array(''));
    $commands[] = ajax_command_html(".etc-image-preview", '');    
    }
  return array('#type' => 'ajax', '#commands' => $commands);
}

function projct_etc_submit(&$form, &$form_state) {  
  global $user; 
  global $company;
  $formVal = $form_state['values'];  
  //Check for updated Project ETC or new one
  if($formVal['project_etc_nid'] != '') {
  $etcNode = node_load($formVal['project_etc_nid']);      
  $etcNode->title = $formVal['etc_title'];
  $etcNode->body['und'][0]['value'] = $formVal['etc_description'];
    $etcNode->field_etc_number_calc['und'][0]['value'] = $formVal['etc_number'];
  $etcNode->field_etc_reference['und'][0]['value'] = $formVal['reference'];
  $etcNode->field_etc_date['und'][0]['value'] = $formVal['etc_date'];
  $etcNode->field_etc_cost_code['und'][0]['value'] = $formVal['cost_code']!= ''?$formVal['cost_code']:$formVal['etc_cost_code_value'];
  $etcNode->field_etc_amount['und'][0]['value'] = $formVal['etc_amount']!= ''?str_replace(',','',str_replace("$","",$formVal['etc_amount'])):'0';
  $etcNode->field_etc_status['und'][0]['value'] = $formVal['etc_status'];
  $etcNode->field_etc_reason_code['und'][0]['value'] = $formVal['reason_code'];
  if(is_numeric($formVal['etc_commitment'])) {
    $etcNode->field_etc_commitment['und'][0]['nid'] = $formVal['etc_commitment']; 
  }
  $etcNode->field_etc_commitment_type['und'][0]['value'] = $formVal['etc_commitment_type']!=''?$formVal['etc_commitment_type']:$formVal['etc_commitment_type_value']; 
  // Status mark work
  if($formVal['status_mark_data_id'] != '') {
    $statusMarkId = node_load($formVal['status_mark_data_id']);
    $statusMarkId->field_etc_status_mark['und'][0]['value'] = $formVal['set-etc-status'];
      field_attach_update('node', $statusMarkId);
    node_save($statusMarkId);
  }
  else {
    $etcNode->field_etc_status_mark['und'][0]['value'] = $formVal['set-etc-status'];
  } 
  $i = 0; 
  foreach($formVal['operation_done'] as $operationKey => $operationVal) {   
    //if($operationVal == 0) { continue; }  
    $etcNode->field_etc_operation_done['und'][$i++]['value'] = $operationVal;
  } 
  if(isset($formVal['etc_attachment']) && !empty($formVal['etc_attachment'])) {
    foreach ($form_state['values']['etc_attachment'] as $imgkey => $file) {
      $new_file = file_load($file->fid);
    $file_arr = (array)$new_file;
        $file_arr['display'] = 1;   
      $etcNode->field_etc_attachment['und'][$imgkey] = $file_arr;
    }     
  } 
  node_save($etcNode);  
  drupal_goto('/program/etc', array('query'=>array('pid'=>$formVal['select-etc'],'eid' => $etcNode->nid)));
  drupal_set_message('Etc updated successfully!');
  }
  else {
    $node = new stdClass();
    $node->type = 'project_etc';
    $node->title = $formVal['etc_title'];
    $node->body['und'][0]['value'] = $formVal['etc_description'];
    $node->uid = $user->uid;
    $node->language = en;
    $node->status = 1;
  $node->og_group_ref['und'][0]['target_id'] = $company->nid; 
  
  $node->field_project_reference['und'][0]['nid'] = $formVal['select-etc'];
  $node->field_etc_status_mark['und'][0]['value'] = $formVal['set-etc-status'];
  $node->field_etc_number_calc['und'][0]['value'] = $formVal['etc_number'];
  $node->field_etc_reference['und'][0]['value'] = $formVal['reference'];
  $node->field_etc_date['und'][0]['value'] = $formVal['etc_date'];  
  $node->field_etc_amount['und'][0]['value'] = $formVal['etc_amount']!=''?str_replace(',','',str_replace("$","",$formVal['etc_amount'])):0;
  $node->field_etc_status['und'][0]['value'] = $formVal['etc_status'];
  $node->field_etc_commitment_type['und'][0]['value'] = $formVal['etc_commitment_type']!=''?$formVal['etc_commitment_type']:$formVal['etc_commitment_type_value'];
  $node->field_etc_reason_code['und'][0]['value'] = $formVal['reason_code'];
  if(is_numeric($formVal['etc_commitment'])) {
    $node->field_etc_commitment['und'][0]['nid'] = $formVal['etc_commitment'];    
  }
  $node->field_etc_cost_code['und'][0]['value'] = $formVal['cost_code']!= ''?$formVal['cost_code']:$formVal['etc_cost_code_value'];
  
  // Status mark work
  if($formVal['status_mark_data_id'] != '') {
    $statusMarkId = node_load($formVal['status_mark_data_id']);
    $statusMarkId->field_etc_status_mark['und'][0]['value'] = $formVal['set-etc-status'];
      field_attach_update('node', $statusMarkId);
    node_save($statusMarkId);
  }
  else {
    $node->field_etc_status_mark['und'][0]['value'] = $formVal['set-etc-status'];
  } 
  
  $i = 0;
  foreach($formVal['operation_done'] as $operationKey => $operationVal) {   
    if($operationVal == '') { continue; } 
    $node->field_etc_operation_done['und'][$i]['value'] = $operationKey;
    $i++;
  } 
  if(isset($formVal['etc_attachment']) && !empty($formVal['etc_attachment'])) {
    foreach ($form_state['values']['etc_attachment'] as $imgkey => $file) {
      $new_file = file_load($file->fid);
    $file_arr = (array)$new_file;
        $file_arr['display'] = 1; 
      $node->field_etc_attachment['und'][$imgkey] = $file_arr;
    }     
  } 
  node_save($node);
  drupal_goto('/program/etc', array('query'=>array('pid'=>$formVal['select-etc'],'eid' => $node->nid)));
  drupal_set_message('New ETC created successfully!');    
  }  
}

function get_etc_listing_table_data($projectId=0,$startRange=0, $endRange=50) {
  global $company;  
  setlocale(LC_MONETARY, 'en_US');
  drupal_add_js(drupal_get_path('module', 'm6connect_program') . '/js/m6connect_program.js');
  drupal_add_js(drupal_get_path('theme', 'm6connect') . '/js/jquery.dataTables.min.js');
  drupal_add_css(drupal_get_path('theme', 'm6connect') . '/css/jquery.dataTables.min.css');
  drupal_add_js(drupal_get_path('module', 'm6connect_program') . '/js/Prototype_Price_Format_0.1.js');
  $etcListing = _project_list_by_company($company->nid, 'project_etc');
  $rows = array();
  $header = array(
  array('data'=>'ETC No','class'=>array('text-center')),
  array('data'=>'Title','class'=>array('text-center')),
  array('data'=>'Cost Code','class'=>array('text-center')),
  array('data'=>'Amount','class'=>array('text-center')),  
  array('data'=>'Reason','class'=>array('text-center')),
  array('data'=>'Status','class'=>array('text-center')),
  array('data'=>'Risk','class'=>array('text-center')),
  array('data'=>'Scope Change','class'=>array('text-center')),
  array('data'=>'Report','class'=>array('text-center')),
  array('data'=>'ETC','class'=>array('text-center')),
  array('data'=>'Actions','class'=>array('text-center')),
  );
  $query= db_select('field_data_field_project_reference','pr');
  $query->fields('pr', array('entity_id'));
  $query->condition('pr.field_project_reference_nid', $projectId, '=');
  $query->condition('pr.bundle','project_etc','=');
  $aded = clone $query;
  $aded_sayi = $aded->execute();
  $rakam = $aded_sayi->rowCount();  
  $getEtcNodes = $query->range($startRange,50)->execute()->fetchAll();
  
  //$getSpendingNodes = $query->execute()->fetchAll();   
  if(!empty($getEtcNodes)){     
    foreach($getEtcNodes as $etcId => $etcVal){
    $fileiconsdata = array(); 
    $fileArr = array();   
    $etcNode = node_load($etcVal->entity_id);  
    $etcNumber = isset($etcNode->field_etc_number_calc['und'])?$etcNode->field_etc_number_calc['und'][0]['value']:'';
    $etcTile = $etcNode->title;
    $etcCostCode = isset($etcNode->field_etc_cost_code['und'])?$etcNode->field_etc_cost_code['und'][0]['value']:'';
    $etcAmount = isset($etcNode->field_etc_amount['und'])?$etcNode->field_etc_amount['und'][0]['value']:0.00;
    if($etcAmount < 0) {
         $etcAmountTotal = '<span class="text-danger">$'.number_format($etcAmount,2).'</span>';
      }
      else {
       $etcAmountTotal = '$'.number_format($etcAmount,2);
      }
    $etcDate = isset($etcNode->field_etc_date['und'])?date('m/d/Y', strtotime($etcNode->field_etc_date['und'][0]['value'])):'';
    $etcReason = isset($etcNode->field_etc_reason_code['und'])?$etcNode->field_etc_reason_code['und'][0]['value']:'';
    $etcStatus = isset($etcNode->field_etc_status['und'])?$etcNode->field_etc_status['und'][0]['value']:''; 
    
    $query= db_select('node','n'); 
      $query->join('field_data_field_manager_cost_code','mcc','mcc.entity_id = n.nid');      
      $query->join('field_data_field_cost_code_description','ccd','ccd.entity_id = n.nid');       
      $query->fields('ccd',array('field_cost_code_description_value'));   
      $query->condition('mcc.field_manager_cost_code_value', $etcCostCode, '=');
      $query->condition('n.type', 'project_cost_code', '=');
      $getCostCodeDesc = $query->execute()->fetchField();       
    $ccWithDesc = $etcCostCode.'|'.$getCostCodeDesc;
    
    $operationAr = array();
    foreach($etcNode->field_etc_operation_done['und'] as $key => $val) {
        $operationAr[] = $etcNode->field_etc_operation_done['und'][$key]['value'];
    }
    $fileModuleIconPath = '/'.drupal_get_path('module','file').'/icons/';
    $fileIconPath = array(
      'image' => $fileModuleIconPath.'image-x-generic.png',
    'pdf' => $fileModuleIconPath.'application-pdf.png',
    'document' => $fileModuleIconPath.'x-office-document.png',
    'text' => $fileModuleIconPath.'text-plain.png',
    );
    if(isset($etcNode->field_etc_attachment['und'])) {  
      foreach($etcNode->field_etc_attachment['und'] as $addKey => $addVal) {
      /*if (strpos($addVal['filemime'], 'pdf')!==FALSE) {
      $fileArr['pdf'][] = array('filename'=>$addVal['filename'],'uri'=>$addVal['uri']); //l($addVal['filename'], file_create_url($addVal['uri']));  
      }
      if(strpos($addVal['filemime'], 'image')!==FALSE) {
      $fileArr['image'][] = array('filename'=>$addVal['filename'],'uri'=>$addVal['uri']); //l($addVal['filename'], file_create_url($addVal['uri']));  
      }
      if(strpos($addVal['filemime'], 'document')!==FALSE) {
      $fileArr['document'][] = array('filename'=>$addVal['filename'],'uri'=>$addVal['uri']); //l($addVal['filename'], file_create_url($addVal['uri']));  
      }
      if(strpos($addVal['filemime'],'text')!==FALSE) {
      $fileArr['text'][] = array('filename'=>$addVal['filename'],'uri'=>$addVal['uri']); //l($addVal['filename'], file_create_url($addVal['uri']));  
      }*/
      $fileArr['image'][] = array('filename'=>$addVal['filename'],'uri'=>$addVal['uri']); //l($addVal['filename'], file_create_url($addVal['uri']));  
    } 
    //$fileiconsdata = array();
    if(!empty($fileArr)) {
      foreach($fileArr as $fileKey => $fileVal) {
      $itemCount = count($fileVal);
      $fileiconsdata[$fileKey] = '<span class="dropdown pull-left padding-10">'; 
      if($itemCount>1){
        $fileiconsdata[$fileKey] .= '<a href="#" id="action-document-'.$etcNode->nid.'-'.$fileKey.'" class="dropdown-toggle"  data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">' ; 
        //$fileiconsdata[$fileKey] .= '<img src="'.$fileIconPath[$fileKey].'" />' ;
        $fileiconsdata[$fileKey] .= '<i class="fa fa-paperclip" aria-hidden="true" style="font-size:20px;"></i>' ;
        $fileiconsdata[$fileKey] .= '<span class="caret"></span></a>' ;
        $fileiconsdata[$fileKey] .= '<ul class="dropdown-menu" role="menu" aria-labelledby="action-document-'.$etcNode->nid.'-'.$fileKey.'">' ;
        foreach($fileVal as $delta => $fileData){
        $fileiconsdata[$fileKey] .= '<li>'.l($fileData['filename'], file_create_url($fileData['uri']), array('attributes' => array('class' => 'fancybox'))).'</li>'; 
        }
        $fileiconsdata[$fileKey] .= '</ul>';
      }else{
         $fileiconsdata[$fileKey] .= '<a target="_blank" href="'.file_create_url($fileVal[0]['uri']).'" id="action-document-'.$etcNode->nid.'-'.$fileKey.'">' ;
         //$fileiconsdata[$fileKey] .= '<img src="'.$fileIconPath[$fileKey].'" />' ;
         $fileiconsdata[$fileKey] .= '<i class="fa fa-paperclip" aria-hidden="true" style="font-size:20px;"></i>' ;
         $fileiconsdata[$fileKey] .= '</a>' ;
      }
      $fileiconsdata[$fileKey] .= '</span>';
      } 
    }
    }
    if(in_array('Risk Management', $operationAr)) { $etcRisk = 'Yes'; } else { $etcRisk = 'No'; }
    if(in_array('Scope Change', $operationAr)) {  $scopeChange = 'Yes'; } else { $scopeChange = 'No'; }
    if(in_array('In Report', $operationAr)) { $inReport = 'Yes'; } else { $inReport = 'No'; }
    if(in_array('In ETC', $operationAr)) { $inEtc = 'Yes'; } else { $inEtc = 'No'; }
    $etcAction = '<div class="project-action">
              <div class="btn-group"><div class="dropdown">
              <button id="dLabel" class="btn btn-success" type="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"> Actions</button>
              <ul class="dropdown-menu" role="menu" aria-labelledby="dLabel">
                <li>'.l('Edit', 'edit/'.$etcNode->nid,array('attributes' => array('class' => 'edit-etc-detail', 'for' => $etcNode->nid))).'</li>
              <li>'.l('Delete', url('node-delete/nojs/'.$etcNode->nid), array( 'external'=>TRUE, 'attributes'=> array('class'=>array('use-ajax ctools-modal-assign-dashboard-popup-style ctools-use-modal'))) ).'</li>
              </ul>
              </div></div></div>';
          
    $rows[] = array(
    'data' => array(
          array('data' => l($etcNumber, 'edit/'.$etcNode->nid,array('attributes' => array('class' => 'edit-etc-detail', 'for' => $etcNode->nid))).'<br>'.implode('&nbsp;',$fileiconsdata),'class' => array('text-left')),
          array('data' => ucwords($etcTile),'class' => array('text-left')),         
          array('data' => $ccWithDesc,'class' => array('text-left')),
          array('data' => $etcAmountTotal,'class' => array('text-right')),
          array('data' => ucwords($etcReason),'class' => array('text-left')),
          array('data' => $etcStatus != ''?ucwords($etcStatus):'None','class' => array('text-left')),
          array('data' => $etcRisk,'class' => array('text-left')),
          array('data' => $scopeChange,'class' => array('text-left')),
          array('data' => $inReport,'class' => array('text-left')),
          array('data' => $inEtc,'class' => array('text-left')),          
          array('data' => $etcAction,'class' => array('text-center')),
          ),  
  //'class' => array('custom-odd'),
  );
    }
  }
  $outputBefore = _get_pager_option_data_list($projectId,'etc');  
  $output = theme('table', array('header'=>$header,'rows'=>$rows,'empty'=>'No ETC created yet','attributes'=>array('class'=>array('table','m6connect-custom-table','m6connect-custom-program-table','m6connect-program-etc-table','table-hover','table-bordered','text-center'))));
  $pagerGene = '';
  if($rakam > 50) {  
    $pagerGene .= '<div class="item-list"><ul class="pager">';
    $pagerGene .= '<li class="pager-current">'.l('<< First', 'get-next-page-data/etc/0/'.$projectId.'/nojs', array('attributes' => array('class' => array('use-ajax','page-range-0')))).'</li>';
    if($rakam > 50) {
      $getpageLimit = $rakam/50;
    $getpageLimit = ceil($getpageLimit);
    }
    for($i = 1; $i<=$getpageLimit; $i++) {
      $pagerGene .= '<li class="pager-current">'.l($i, 'get-next-page-data/etc/'.$i.'/'.$projectId.'/nojs', array('attributes' => array('class' => array('use-ajax','page-range-'.$i)))).'</li>';
    }
    $pagerGene .= '<li class="pager-current">'.l('Last >>', 'get-next-page-data/etc/'.$getpageLimit.'/'.$projectId.'/nojs', array('attributes' => array('class' => array('use-ajax','page-range-0')))).'</li>';
    $pagerGene .= '</ul></div>';
  }
  return $outputBefore.$output.$pagerGene;
}

// ===========================
// End ETC Slide (Tab) Section
// Start spending forcast
function program_project_spending_forcast_content(){
  global $company;
  
  $getEstimateByCompany = _project_list_by_company($company->nid, 'project_management');
  reset( $array );
  $firstProject = key( $getEstimateByCompany );
  if(isset($_SESSION['ACTIVEPROJECT']) && $_SESSION['ACTIVEPROJECT'] != '') {
    $firstProject = $_SESSION['ACTIVEPROJECT'];
  }
  else {
    $firstProject = $firstProject;
  }
  $elements = array();
  $elements['program-spending-forcast-form']= array(
    '#markup' => drupal_render(drupal_get_form('program_modify_spending_forcast_form')),
  '#prefix' => '<div class="clearfix margin-bottom-10">',
  '#suffix' => '</div>',
  );
  $elements['prgram-project-menu-items'] = array(
    '#markup' => program_project_menu_links_content(),
  '#prefix' => '<div class="clearfix">',
  '#suffix' => '</div>',
  );
  $elements['spending-forecast-list-items'] = array(
    '#markup' => spending_forecast_list_items_call($firstProject),
  '#prefix' => '<div class="clearfix" id="spending_forecast_list_items">',
  '#suffix' => '</div>',
  );
  $elements['prgram-programe-forcast-commitment'] = array(
    '#type' => 'fieldset',
    '#title' => t('Commitment Forecast'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#attributes' => array('class' => array('collapsible', 'bid-package-fieldset')),
  '#attached' => array('js' => array('misc/form.js', 'misc/collapse.js')),
  );  
  $elements['prgram-programe-forcast-etc'] = array(
    '#type' => 'fieldset',
    '#title' => t('ETC Forecast'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#attributes' => array('class' => array('collapsible', 'collapsed','bid-package-fieldset')),
  '#attached' => array('js' => array('misc/form.js', 'misc/collapse.js')),
  '#prefix' => '<div class="clearfix margin-bottom-10">',
  '#suffix' => '</div>',
  );          
  $elements['prgram-programe-forcast-commitment']['prgram-project-forcast-commit-listing'] = array(
    '#markup' => get_project_spending_commit_forcast_table_data($firstProject,''),
  '#prefix' => '<div class="clearfix fixedElement" style="background-color:rgb(34, 143, 27);border-bottom:4px solid #fff;"><div id="spent-to-date-container" class="padding-5 pull-right"></div><div id="commitment-beyond-next-year" class="padding-5 pull-right"></div><div id="commitment-current-year" class="padding-5 pull-right"></div><div id="commitment-forcast-total-main" class="padding-5 pull-right"></div></div><div id="project_program_spending_forcast_commit_table_container" style="position:relative;"><div class="clearfix"><div class="table-responsive">',
  '#suffix' => '</div></div></div>',
   );       
  $elements['prgram-programe-forcast-etc']['prgram-project-etc-listing'] = array(
    '#markup' => get_project_spending_forcast_table_data($firstProject),
  '#prefix' => '<div id="project_program_spending_forcast_etc_table_container"><div class="clearfix"><div class="table-responsive">',
  '#suffix' => '</div></div></div>',
  ); 
  $elements['submit-custom'] = array(
    '#type' => 'button',
  '#value' => 'Save', 
  '#prefix' => '<div class="clearfix"><div class="display-inline-block custom-submit-forecast-button">',  
  '#suffix' => '</div>', 
  );
  if($_GET['forecast'] != 'none') {
    $elements['submit-custom-saveas'] = array(
      '#type' => 'button',
    '#value' => 'Save As',  
    '#prefix' => '<div class="display-inline-block custom-submit-forecast-save-as-button" style="display:none;">',  
    '#suffix' => '</div>', 
    );
  }
  $elements['submit-custom-delete'] = array(
    '#type' => 'button',
  '#value' => 'Delete', 
  '#prefix' => '<div class="custom-submit-forecast-delete-button display-inline-block">', 
  '#suffix' => '</div></div></div></div>',
  );
  return $elements;
}

function spending_forecast_list_items_call($proId = 0) {  
  $query = db_select('m6connect_spending_forecast','sf');
  $query->distinct('sf.forecast_name');
  $query->fields('sf', array('forecast_name','created_on'));  
  $query->condition('sf.project_id', $proId, '=');
  $query->groupBy('sf.forecast_name');
  $getForecastName = $query->execute()->fetchAll();
  $forcastingDetail = '<div class="forcating-data-conatiner">';
  if(!empty($getForecastName)) {    
    $forcastingDetail = '<ul style="display:none;" class="custom-data-forcast"><li>'.l('none', 'load-spending-forecast/'.$proId.'/none/1/nojs', array('attributes' => array('class' => array('use-ajax'),'id'=>$updatedForecast))).'</li>';
    foreach($getForecastName as $forcatingName) {
    $quarter = ($forcatingName->created_on)!=''?$forcatingName->created_on:4; 
    $updatedForecast = str_replace(' ', '-',$forcatingName->forecast_name);   
    $forcastingDetail .= '<li>'.l(ucwords($forcatingName->forecast_name), 'load-spending-forecast/'.$proId.'/'.$forcatingName->forecast_name.'/'.$quarter.'/nojs', array('attributes' => array('class' => array('use-ajax'),'id'=>$updatedForecast))).'</li>';
    }
  $forcastingDetail .= '</ul>';
  $forcastingDetail .= '<div class="pull-right" style="margin:0 15px; 0 0;"><div class="form-inline"><div class="form-item form-type-select form-item-select-project-spending-forcast"><label>Forecast: </label> &nbsp;<div class="form-group"><select class="spending-forecast-select">
  <option value="none">New</option>';
    foreach($getForecastName as $forcatingName) {
    $updatedForecast = str_replace(' ', '-',$forcatingName->forecast_name); 
    $forcastingDetail .= '<option value="'.$updatedForecast.'">'.l(ucwords($forcatingName->forecast_name)).'</option>';
    }
  $forcastingDetail .= '</select></div></div></div></div>';
  
    //$forcastingDetail .= '<div class="pull-right"><span class="form-submit add-new-spending-forecast">Add New Spending Forecast</span></div>';
  }
  else {
    $forcastingDetail .= '<strong>No spending forecast found!</strong>';
  }
  $forcastingDetail .= '</div>';
  return $forcastingDetail;
}

function program_modify_spending_forcast_form($form, &$form_state) {
  global $user;   
  global $company;  
  drupal_add_js(drupal_get_path('module', 'm6connect_program') . '/js/m6connect_program.js');
  // Get project list by company 
  $getProjectByCompany = _project_list_by_company($company->nid, 'project_management');
  foreach($getProjectByCompany as $key => $val) {
    $projectListByCom[$key] = $val;
  }  
  $form['select-project-spending-forcast'] = array(
    '#type'=>'select',
  '#title'=> 'Project:',
  '#options' => $projectListByCom,
  '#default_value' => isset($_SESSION['ACTIVEPROJECT'])?$_SESSION['ACTIVEPROJECT']:'',
  '#attributes' => array('class'=> array('form-control project_programe_spending_forcast_pro')),
  '#ajax' => array(
    'callback'=> 'change_program_spending_forcast_callback',
    'wrapper' => 'project_program_spending_forcast_container',
    'effect' => 'fade',
  ),
  '#prefix' => '<div class="clearfix"><div class="pull-left form-inline" style="width:326px;">',
  '#suffix' => '</div><div id="project-final-cost-container" class="pull-left"></div></div>',
  );  
  $form['forcasting-list-dialog']= array(
    '#markup' => '',
  '#prefix' => '<div id="spending-forcast-option-dialog">',
  '#suffix' => '</div>',
  );
  $form['forcasting-list-dialog-saveas']= array(
    '#markup' => '',
  '#prefix' => '<div id="spending-forcast-option-dialog-saveas">',
  '#suffix' => '</div>',
  );        
  $form['forcast-name']= array(
    '#type' => 'hidden',
  '#attributes' => array('class'=> array('spending-forcast-name-input')),
  '#prefix' => '<div id="spending-forcast-name">',
  '#suffix' => '</div>',
  );
  $form['spending-forcast-edit']= array(
    '#type' => 'hidden',
  '#attributes' => array('class'=> array('spending-forcast-edit-input')),
  '#default_value' => 'false',
  '#prefix' => '<div id="spending-forcast-edit">',
  '#suffix' => '</div>',
  );  
  $form['forcast-update-data']= array(
    '#type' => 'textarea',
  '#prefix' => '<div class="spending-forcast-updated-data" style="display:none;">',
  '#suffix' => '</div>',
  );
  $form['forcast-update-data-etc']= array(
    '#type' => 'textarea',
  '#prefix' => '<div class="spending-forcast-updated-data-etc" style="display:none;">',
  '#suffix' => '</div>',
  );
  $form['submit'] = array(
    '#type' => 'submit',
  '#value' => 'Save',
  '#attributes' => array('class'=> array('spending_forcast_pro_submit_call')),
  '#submit' => array('project_forecast_submit'),
  '#prefix' => '<div class="clearfix custom-submit-forecast" style="display:none;">', 
  '#suffix' => '</div></div></div>',
  );
  return $form;
}

function project_forecast_submit(&$form, &$form_state) {
  if(!empty($form_state['values']['forcast-update-data'])) {
    $getTableData = explode(',Nextrecord,',$form_state['values']['forcast-update-data']);
  $dataArr = array();
  foreach($getTableData as $delta => $deltaVal) {
    $getTableData = explode(',',$deltaVal);
    if($getTableData[1] == '') { continue; }
      db_merge('m6connect_spending_forecast')
        ->key(array('project_id' => $getTableData[0],'commitment_id' => $getTableData[1],'forecast_name' => $form_state['values']['forcast-name']))
        ->fields(array(
              'project_id' => $getTableData[0],
        'forecast_name' => $form_state['values']['forcast-name'],
        'commitment_id' => $getTableData[1],
        'quarter_one_amount' => $getTableData[3],
        'quarter_two_amount' => $getTableData[4],
        'quarter_three_amount' => $getTableData[5],       
        'quarter_one_text_amount' => $getTableData[2],
        'quarter_two_text_amount' => $getTableData[3],
        'quarter_three_text_amount' => $getTableData[4],
        'quarter_four_text_amount' => $getTableData[5],       
        'quarter_four_amount' => $getTableData[6],
        'current_year_spending_amount' => $getTableData[7],
        'future_year_amout' => $getTableData[8],
        'variance_amount' => $getTableData[9],
        'created_on' => $getTableData[10],
        'forecast_type' => 'commitment',
        ))
      ->execute();
    //drupal_set_message('Spending forecast '.$form_state['values']['forcast-name'].' created successfully!');
  }
  }
  if(!empty($form_state['values']['forcast-update-data-etc'])) {
    $getTableData = explode(',Nextrecord,',$form_state['values']['forcast-update-data-etc']);
  $dataArr = array();
  foreach($getTableData as $delta => $deltaVal) {
    $getTableData = explode(',',$deltaVal);
    if($getTableData[1] != '') {    
      db_merge('m6connect_spending_forecast')
        ->key(array('project_id' => $getTableData[0],'commitment_id' => $getTableData[1],'forecast_name' => $form_state['values']['forcast-name']))
        ->fields(array(
              'project_id' => $getTableData[0],
        'forecast_name' => $form_state['values']['forcast-name'],
        'commitment_id' => $getTableData[1],
        'quarter_one_amount' => $getTableData[2],
        'quarter_two_amount' => $getTableData[3],
        'quarter_three_amount' => $getTableData[4],       
        'quarter_four_amount' => $getTableData[6],
        'quarter_one_text_amount' => 0.00,
        'quarter_two_text_amount' => 0.00,
        'quarter_three_text_amount' => 0.00,
        'quarter_four_text_amount' => 0.00,
        'current_year_spending_amount' => 0.00,
        'future_year_amout' => $getTableData[7],
        'variance_amount' => $getTableData[8],
        'created_on' => $getTableData[9],
        'forecast_type' => 'etc',
        ))
      ->execute();
    }
  } 
  }
  //drupal_goto('/program/spending-forcast', array('query'=>array('forecast' => str_replace(' ', '-',$form_state['values']['forcast-name']))));   
}

function change_program_spending_forcast_callback($form,&$form_state){
  global $company;  
  $commands = array();
  $triggeringElement = $form_state['triggering_element'];
  if(!empty($triggeringElement['#value']) && $triggeringElement['#value'] != 0 && $triggeringElement['#name'] == 'select-project-spending-forcast'){
  if((isset($_SESSION['ACTIVEPROJECT']) && $_SESSION['ACTIVEPROJECT']!=$triggeringElement['#value']) || (!isset($_SESSION['ACTIVEPROJECT'])) || (empty($_SESSION['ACTIVEPROJECT']))){
    $_SESSION['ACTIVEPROJECT'] = $triggeringElement['#value'];
  } 
    $commands[] = ajax_command_html("#project_program_spending_forcast_etc_table_container", get_project_spending_forcast_table_data($triggeringElement['#value']));  
  $commands[] = ajax_command_html("#project_program_spending_forcast_commit_table_container", get_project_spending_commit_forcast_table_data($triggeringElement['#value'],''));   
  $commands[] = ajax_command_html("#spending_forecast_list_items", spending_forecast_list_items_call($triggeringElement['#value']));  
  $commands[] = ajax_command_html("#etc-forcast-total-main", _get_total_etc_total($company->nid, $triggeringElement['#value']));
  }
  return array('#type' => 'ajax', '#commands' => $commands);
}

function load_spending_forecast_details_callback($proId,$forecast,$quar,$ajax = NULL) { 
    $output = get_project_spending_commit_forcast_table_data($proId,$forecast,$quar);  
  $output2 = get_project_spending_forcast_table_data($proId,$forecast,$quar);  
  if((isset($_SESSION['ACTIVEFORECAST']) && $_SESSION['ACTIVEFORECAST'] != $forecast) || (!isset($_SESSION['ACTIVEFORECAST'])) || (empty($_SESSION['ACTIVEFORECAST']))){
    $_SESSION['ACTIVEFORECAST'] = $forecast;
  }
    ctools_include('ajax');
    $commands = array();
  $commands[] = ajax_command_html("#project_program_spending_forcast_commit_table_container", $output); 
  $commands[] = ajax_command_html("#project_program_spending_forcast_etc_table_container", $output2); 
  $commands[] = ajax_command_invoke("input.spending-forcast-name-input", 'val',array($forecast)); 
  $commands[] = ajax_command_invoke("input.spending-forcast-edit-input", 'val',array('true'));  
  $commands[] = ajax_command_invoke("input.commit-amt-quarter-one", 'trigger',array('keyup'));  
  $commands[] = ajax_command_invoke("input.commit-amt-quarter-two", 'trigger',array('keyup'));  
  $commands[] = ajax_command_invoke("input.commit-amt-quarter-three", 'trigger',array('keyup'));    
  $commands[] = ajax_command_invoke("input.commit-amt-quarter-fourth", 'trigger',array('keyup')); 
  $commands[] = ajax_command_invoke("input.etc-amt-quarter-fourth-etc", 'trigger',array('keyup'));  
    print ajax_render($commands);
    exit;   
}


function get_project_spending_commit_forcast_table_data($proId = 0,$forecast = '',$quar = '') {
  $rows = array();
  global $company;  
  drupal_add_library('system', 'ui.resizable');  
  drupal_add_js(drupal_get_path('module', 'm6connect_program') . '/js/m6connect_program.js');
  drupal_add_js(drupal_get_path('theme', 'm6connect') . '/js/jquery.dataTables.min.js');
  drupal_add_css(drupal_get_path('theme', 'm6connect') . '/css/jquery.dataTables.min.css');  
  if(!empty($quar) && $quar != '') {  
    if($quar == 1) { $quar = 'firstQuarter'; } 
    else if($quar == 2) { $quar = 'secondQuarter'; }
    else if($quar == 3) { $quar = 'thirdQuarter'; }
    else if($quar == 4) { $quar = 'fourthQuarter'; }
    $currentQuarter = $quar;
  }
  else {
    $currentQuarter = _get_current_quarter(date('n'));  
  }
  
  if($quar == 'fourthQuarter') { 
    $dayYear = '2016';
  } 
  else {
    $dayYear = date('Y');
  }
  $colMd = '';
  $colMdFooter = '';
  //$currentQuarter = 'thirdQuarter';
  if($currentQuarter == 'firstQuarter') {
    $quarterOneHeader = $dayYear.'<br>Quarter 1<br><div style="border-top: 1px solid #ccc;width: 100%;display: block;"><span>Spent</span> | <span>Forecast</span></div></th>';      
  $quarterTwoHeader = date('Y').'<br>Quarter 2';    
  $quarterThreeHeader = $dayYear.'<br>Quarter 3';
  $quarterFourthHeader = $dayYear.'<br>Quarter 4';
  $colMd = 'col-md-2';
  }
  if($currentQuarter == 'secondQuarter') {
    $quarterOneHeader = $dayYear.'<br>Quarter 1';
  $quarterTwoHeader = $dayYear.'<br>Quarter 2<br><div style="border-top: 1px solid #ccc;width: 100%;display: block;"><span>Spent</span> | <span>Forecast</span></div></th>';
  $quarterThreeHeader = $dayYear.'<br>Quarter 3';
  $quarterFourthHeader = $dayYear.'<br>Quarter 4';
  $colMd = 'col-md-2';
  }
  if($currentQuarter == 'thirdQuarter') {
    $quarterOneHeader = $dayYear.'<br>Quarter 1';
  $quarterTwoHeader = $dayYear.'<br>Quarter 2';   
  $quarterThreeHeader = $dayYear.'<br>Quarter 3<br><div style="border-top: 1px solid #ccc;width: 100%;display: block;"><span>Spent</span> | <span>Forecast</span></div></th>';
  $quarterFourthHeader = $dayYear.'<br>Quarter 4';
  $colMd = 'col-md-2';  
  }
  if($currentQuarter == 'fourthQuarter') {
    $quarterOneHeader = $dayYear.'<br>Quarter 1';
  $quarterTwoHeader = $dayYear.'<br>Quarter 2';
  $quarterThreeHeader = $dayYear.'<br>Quarter 3';
  $quarterFourthHeader = $dayYear.'<br>Quarter 4<br><div style="border-top: 1px solid #ccc;width: 100%;display: block;"><span>Spent</span> | <span>Forecast</span></div></th>';
  $colMd = 'col-md-2';
  }  
  $commitHeader = array(
  array('data'=>'Commitment Number','class'=>array('text-center')),
  array('data'=>'Company Name','class'=>array('text-center')),
  array('data'=>'Amount','class'=>array('text-center')),
  array('data'=>'Total Spent','class'=>array('text-center','main-total-spent')),
  array('data'=>'Previous Years','class'=>array('text-center')),
  array('data'=> $quarterOneHeader,'class'=>array('text-center', 'custom-quater-one-heading',$colMd)),
  array('data'=> $quarterTwoHeader,'class'=>array('text-center', 'custom-quater-two-heading',$colMd)),
  array('data'=> $quarterThreeHeader,'class'=>array('text-center', 'custom-quater-three-heading',$colMd)),
  array('data'=> $quarterFourthHeader,'class'=>array('text-center', 'custom-quater-fourth-heading',$colMd)),
  array('data'=> '<span class="show-left pull-left" title="Load First,Second and Third quarter column." style="cursor:pointer;"> <i class="fa fa-angle-double-left show-left-span" aria-hidden="true"></i> </span><span class="show-right pull-right" style="cursor:pointer;" title="Load current quarter column."> <i class="fa fa-angle-double-right show-right-span" aria-hidden="true"></i> </span><br>'.$dayYear.' <br>Spending Forecast','class'=>array('text-center', 'custom-current-year-heading')),
  array('data'=> 'Future<br>Years','class'=>array('text-center','future-year-heading')),
  array('data'=>'Variance','class'=>array('text-center','varience-heading')),
  ); 
  $query= db_select('node','n');    
  $query->join('field_data_field_project_reference','pr', 'pr.entity_id = n.nid');   
  $query->fields('n', array('nid'));
  $query->condition('pr.field_project_reference_nid', $proId, '=');
  $query->condition('pr.bundle','project_commitement','=');
  $getCommitmentNodes = $query->execute()->fetchCol();
  foreach($getCommitmentNodes as $commitKey => $commitVal) {
    $getCommitData = node_load($commitVal);  
  $getCurrentYearAmt = '$0.00';  
  $getFutureAmt = '$0.00';  
  $getVarienceAmt = '$0.00';  
  if($forecast != '' && $forecast != 'none') {
    $query = db_select('m6connect_spending_forecast', 'sf');
    $query->fields('sf', array('quarter_one_amount','quarter_two_amount', 'quarter_three_amount','quarter_four_text_amount','quarter_four_amount','current_year_spending_amount','future_year_amout','variance_amount'));
    $query->condition('sf.forecast_name', $forecast, '=');
    $query->condition('sf.project_id', $proId, '=');
    $query->condition('sf.commitment_id', $getCommitData->nid, '=');
    $forecastData = $query->execute()->fetchAll();    
    $getCurrentYearAmt = '$'.number_format($forecastData[0]->current_year_spending_amount,2);
    $getFutureAmt = '$'.number_format($forecastData[0]->future_year_amout,2);
    $getVarienceAmt = '$'.number_format($forecastData[0]->variance_amount,2);
  }
  $commitNumber = $getCommitData->field_commitment_number_calculat['und'][0]['value'];
  if(isset($getCommitData->field_vendor['und']) && is_numeric($getCommitData->field_vendor['und'][0]['value'])) {
    $companyName = node_load($getCommitData->field_vendor['und'][0]['value'])->title;
  }
  else {
    $companyName = $getCommitData->field_vendor['und'][0]['value'];
  }
  $commitAmt = $getCommitData->field_commitment_po_final_total['und'][0]['value']!=''?'$'.number_format($getCommitData->field_commitment_po_final_total['und'][0]['value'],2):'$0.00';
  // Get invoice spending amount
  $query= db_select('node','n');
  $query->join('og_membership','om','om.etid=n.nid AND om.entity_type=:entityType', array(':entityType'=>'node'));
  $query->join('field_data_field_project_reference','pr', 'pr.entity_id = n.nid');
  $query->join('field_data_field_invoice_commitment','ic','ic.entity_id = n.nid');
  $query->join('field_data_field_invoice_amount','ia','ia.entity_id = n.nid');
  $query->addExpression('SUM(ia.field_invoice_amount_value)','finalTotal');
  $query->condition('pr.field_project_reference_nid', $proId, '=');
  $query->condition('n.type','project_spending','=');
  $query->condition('ic.field_invoice_commitment_nid',$getCommitData->nid,'=');
  $query->condition('om.gid', $company->nid, '=');
  $query->groupBy('ic.field_invoice_commitment_nid');
  $getTotalSpending = $query->execute()->fetchField();
  $invoice = $getTotalSpending!= ''?$getTotalSpending:'0.00';
  $subtotalInv += $invoice;
  $subTotalCommitment += $getCommitData->field_commitment_po_final_total['und'][0]['value'];
  // Get quarter value for etc
  $defaultAmt = '$0.00';
  $$quarterOneCol = '';
  $quarterTwoCol = '';
  $quarterThreeCol = '';
  $quarterFourCol = ''; 
  //$currentQuarter = 'thirdQuarter';
  //$currentQuarter = _get_current_quarter(date('n'));
  //$currentQuarter = ($quar != '')?$quar:$currentQuarter = _get_current_quarter(date('n'));  
  
  $getPrevQuarterOne = '$0.00';  
  $getPrevQuarterTwo = '$0.00';
  $getPrevQuarterThree = '$0.00';
  $getPrevQuarterFour = '$0.00';
  $getPrevQuarterFourText = '$0.00';
    
  if($currentQuarter == 'firstQuarter') {
    if(!empty($forecastData)) {
    $getPrevQuarterOne = '$'.number_format($forecastData[0]->quarter_one_amount,2);  
    $getPrevQuarterTwo = '$'.number_format($forecastData[0]->quarter_two_amount,2);
      $getPrevQuarterThree = '$'.number_format($forecastData[0]->quarter_three_amount,2);
    $getPrevQuarterFour = '$'.number_format($forecastData[0]->quarter_four_amount,2);
    } 
    $startDateOneQuarter = $dayYear.'-01-01 00:00:00';
    $startDateTwoQuarter = $dayYear.'-04-01 00:00:00';
    $startDateThirdQuarter = $dayYear.'-07-01 00:00:00';
    $startDateFourthQuarter = $dayYear.'-10-01 00:00:00';
    
    $quarterOneCol = '<div class="row margin-5"><div class="col-md-6 padding-5"><div style="margin:10px 0 0 0;"><span class="commit-amt-quarter-one-text">'._get_spending_total_by_quarter($startDateOneQuarter,date('Y-m-d 00:00:00'),$proId,$getCommitData->nid).'</span></div></div><div class="col-md-6 padding-5"><input type="text" class="commit-amt-quarter-one bg-yellow form-control" value="'.$getPrevQuarterOne.'"/></div></div>';
    $quarterTwoCol = '<input type="text" class="form-control commit-amt-quarter-two bg-yellow" value="'.$getPrevQuarterTwo.'"/>';
    $quarterThreeCol = '<input type="text" class="form-control form-control commit-amt-quarter-three bg-yellow" value="'.$getPrevQuarterThree.'"/>';
    $quarterFourCol = '<input type="text" class="form-control form-control commit-amt-quarter-fourth bg-yellow" value="'.$getPrevQuarterFour.'"/>';
  }       
  if($currentQuarter == 'secondQuarter') {
    if(!empty($forecastData)) {
    $getPrevQuarterOne = '$'.number_format($forecastData[0]->quarter_one_amount,2);
    $getPrevQuarterTwo = '$'.number_format($forecastData[0]->quarter_two_amount,2);
      $getPrevQuarterThree = '$'.number_format($forecastData[0]->quarter_three_amount,2);
    $getPrevQuarterFour = '$'.number_format($forecastData[0]->quarter_four_amount,2);
    } 
    $quarterOneCol = '<span class="commit-amt-quarter-one">'.$getPrevQuarterOne.'</span>';  
    $quarterTwoCol = '<div class="row margin-5"><div class="col-md-6 padding-5"><div style="margin:10px 0 0 0;"><span class="commit-amt-quarter-two-text">'._get_spending_total_by_quarter($startDateOneQuarter,date('Y-m-d 00:00:00'),$proId,$getCommitData->nid).'</span></div></div><div class="col-md-6 padding-5"><input type="text" class="form-control bg-yellow commit-amt-quarter-two" value="'.$getPrevQuarterTwo.'"/></div></div>';  
    $quarterThreeCol = '<input type="text" class="form-control commit-amt-quarter-three bg-yellow" value="'.$getPrevQuarterThree.'"/>';
    $quarterFourCol = '<input type="text" class="form-control commit-amt-quarter-fourth bg-yellow" value="'.$getPrevQuarterFour.'"/>';
  }
  if($currentQuarter == 'thirdQuarter') {   
    if(!empty($forecastData)) {
    $getPrevQuarterOne = '$'.number_format($forecastData[0]->quarter_one_amount,2);
    $getPrevQuarterTwo = '$'.number_format($forecastData[0]->quarter_two_amount,2);
      $getPrevQuarterThree = '$'.number_format($forecastData[0]->quarter_three_amount,2);
    $getPrevQuarterFour = '$'.number_format($forecastData[0]->quarter_four_amount,2);
    } 
    $startDateOneQuarter = $dayYear.'-01-01 00:00:00';
    $startDateTwoQuarter = $dayYear.'-04-01 00:00:00';
    $startDateThirdQuarter = $dayYear.'-07-01 00:00:00';
    $startDateFourthQuarter = $dayYear.'-10-01 00:00:00';
    
    $quarterOneCol = '<span class="commit-amt-quarter-one">'._get_spending_total_by_quarter($startDateOneQuarter,$dayYear.'-03-31 00:00:00',$proId,$getCommitData->nid).'</span>';  
    $quarterTwoCol = '<span class="commit-amt-quarter-two">'._get_spending_total_by_quarter($startDateTwoQuarter,$dayYear.'-06-30 00:00:00',$proId,$getCommitData->nid).'</span>';  
    $quarterThreeCol = '<div class="row margin-5"><div class="col-md-6 padding-5"><span class="commit-amt-quarter-three-text">'._get_spending_total_by_quarter($startDateThirdQuarter,date('Y-m-d 00:00:00'),$proId,$getCommitData->nid).'</span></div><div class="col-md-6 padding-5"><input type="text" class="commit-amt-quarter-three bg-yellow" value="'.$getPrevQuarterThree.'"/></div></div>';  
    $quarterFourCol = '<input type="text" class="form-control commit-amt-quarter-fourth bg-yellow" value="'._get_spending_total_by_quarter($startDateFourthQuarter,$dayYear.'12-31 00:00:00',$proId,$getCommitData->nid).'"/>';
  }
  if($currentQuarter == 'fourthQuarter') {
    if(!empty($forecastData)) {
    $getPrevQuarterOne = '$'.number_format($forecastData[0]->quarter_one_amount,2);
    $getPrevQuarterTwo = '$'.number_format($forecastData[0]->quarter_two_amount,2);
      $getPrevQuarterThree = '$'.number_format($forecastData[0]->quarter_three_amount,2);
    $getPrevQuarterFour = '$'.number_format($forecastData[0]->quarter_four_amount,2);   
    $getPrevQuarterFourText = '$'.number_format($forecastData[0]->quarter_four_text_amount,2);    
    }
    $startDateOneQuarter = $dayYear.'-01-01 00:00:00';
    $startDateTwoQuarter = $dayYear.'-04-01 00:00:00';
    $startDateThirdQuarter = $dayYear.'-07-01 00:00:00';
    $startDateFourthQuarter = $dayYear.'-10-01 00:00:00';
    
    $quarterOneCol = $getPrevQuarterOne == '$0.00'?'<div style="margin:10px 0 0 0;"><span class="commit-amt-quarter-one">'._get_spending_total_by_quarter($startDateOneQuarter,$dayYear.'-03-31 00:00:00',$proId,$getCommitData->nid).'</span></div>':'<div style="margin:10px 0 0 0;"><span class="commit-amt-quarter-one">'.$getPrevQuarterOne.'</span></div>';
    $quarterOneColTotal += $getPrevQuarterOne == '$0.00'?_get_spending_total_by_quarter($startDateOneQuarter,$dayYear.'-03-31 00:00:00',$proId,$getCommitData->nid):0.00;
    $quarterTwoCol = $getPrevQuarterTwo == '$0.00'?'<div style="margin:10px 0 0 0;"><span class="commit-amt-quarter-two">'._get_spending_total_by_quarter($startDateTwoQuarter,$dayYear.'-06-31 00:00:00',$proId,$getCommitData->nid).'</span></div>':'<div style="margin:10px 0 0 0;"><span class="commit-amt-quarter-two">'.$getPrevQuarterTwo.'</span></div>';
    
    $quarterTwoColTotal += $getPrevQuarterTwo == '$0.00'?_get_spending_total_by_quarter($startDateTwoQuarter,$dayYear.'-06-31 00:00:00',$proId,$getCommitData->nid):0.00;
    
    $quarterThreeCol = $getPrevQuarterThree == '$0.00'?'<div style="margin:10px 0 0 0;"><span class="commit-amt-quarter-three">'._get_spending_total_by_quarter($startDateThirdQuarter,$dayYear.'-09-31 00:00:00',$proId,$getCommitData->nid).'</span></div>':'<div style="margin:10px 0 0 0;"><span class="commit-amt-quarter-three">'.$getPrevQuarterThree.'</span></div>';
    
    $quarterThreeColTotal += $getPrevQuarterThree == '$0.00'?_get_spending_total_by_quarter($startDateThirdQuarter,$dayYear.'-09-31 00:00:00',$proId,$getCommitData->nid):0.00;
        
    $quarterFourCol = '<div class="row margin-5"><div class="col-md-6 padding-5" style="margin:10px 0 0 0;"><span class="commit-amt-quarter-fourth-text pull-right">'._get_spending_total_by_quarter($startDateFourthQuarter,$dayYear.'-12-31 00:00:00',$proId,$getCommitData->nid).'</span></div><div class="col-md-6 padding-5"><input type="text" class="form-control commit-amt-quarter-fourth bg-yellow" value="'.$getPrevQuarterFour.'"/></div></div>';     
  }
  $getPreviousYearTotal = _get_previous_year_spending_total($proId,$getCommitData->nid);
  $finalPreviousYearTotal += $getPreviousYearTotal;
     $rows[] = array(
     'data' => array(
       array('data' => '<div style="margin:8px 0 0 0;"><span class="commit-number" id="'.$getCommitData->nid.'">'.$commitNumber.'</span></div>','class' => array('text-left')),
     array('data' => '<div style="margin:8px 0 0 0;"><span class="comapny-name">'.ucwords($companyName).'</span></div>','class' => array('text-left')),
     array('data' => '<div style="margin:8px 0 0 0;"><span class="commit-amt">'.$commitAmt.'</span></div>','class' => array('text-left')),
     array('data' => '<div style="margin:8px 0 0 0;"><span class="commit-invoice-amt">$'.number_format($invoice,2).'</span></div>','class' => array('text-left','main-total-spent')),
     array('data' => '<div style="margin:8px 0 0 0;"><span class="previous-year-spendings">$'.number_format($getPreviousYearTotal,2).'</span></div>','class' => array('text-left')),
     array('data' => $quarterOneCol,'class' => array('text-left', 'custom-quater-one-heading',$colMd)),
     array('data' => $quarterTwoCol,'class' => array('text-left', 'custom-quater-two-heading',$colMd)),
     array('data' => $quarterThreeCol,'class' => array('text-left','custom-quater-three-heading',$colMd)),
     array('data' => $quarterFourCol,'class' => array('text-left','custom-quater-fourth-heading',$colMd)),
     array('data' => '<div style="margin:8px 0 0 0;"><span class="commit-total-spent">'.$getCurrentYearAmt.'</span></div>','class' => array('text-left','custom-current-year-heading')),
     array('data' => '<input type="text" class="form-control commit-beyond-year bg-yellow" value="'.$getFutureAmt.'"/>','class' => array('text-left','future-year-heading')),
     array('data' => '<div style="margin:8px 0 0 0;"><span class="commit-varience-total-calc">'.$getVarienceAmt.'</span></div>','class' => array('text-left','varience-heading')),
       ),   
  );
  }   
  // Quarter based fotter part calculation
  $colMd1Footer = ''; $colMd2Footer = ''; $colMd3Footer = '';  $colMd4Footer = '';  
  if($currentQuarter == 'firstQuarter') {
  $colMd1Footer = 'col-md-4'; $colMd2Footer = ''; $colMd3Footer = '';  $colMd4Footer = '';  
    $firstFooter = '<div class="row margin-5" style="margin:10px 0 0 0"><div class="col-md-6 padding-5"><span class="quarter-one-grand-total">$0.00</span></div><div class="col-md-6 padding-5"><span class="quarter-one-grand-total-input">$0.00</span></div></div>';  
  $secondFooter = '<div style="margin:10px 0 0 0"><span class="quarter-two-grand-total">$'.number_format($quarterTwoColTotal,2).'</span></div>';  
  $thirdFooter = '<div style="margin:10px 0 0 0"><span class="commit-amt-quarter-three-total">$'.number_format($quarterThreeColTotal,2).'</span></div>';
  $fourthFooter = '<div style="margin:10px 0 0 0"><span class="commit-amt-quarter-fourth-total">$'.number_format($quarterThreeColTotal,2).'</span></div>';
  }
  if($currentQuarter == 'secondQuarter') {
  $colMd1Footer = ''; $colMd2Footer = 'col-md-4'; $colMd3Footer = '';  $colMd4Footer = '';  
    $firstFooter = '<div style="margin:10px 0 0 0"><span class="quarter-one-grand-total">$'.number_format($quarterOneColTotal,2).'</span></div>'; 
  $secondFooter = '<div class="row margin-5" style="margin:10px 0 0 0"><div class="col-md-6 padding-5"><span class="quarter-two-grand-total">$0.00</span></div><div class="col-md-6 padding-5"><span class="quarter-two-grand-total-input">$0.00</span></div></div>'; 
  $thirdFooter = '<div style="margin:10px 0 0 0"><span class="commit-amt-quarter-three-total">$'.number_format($quarterThreeColTotal,2).'</span></div>';
  $fourthFooter = '<div style="margin:10px 0 0 0"><span class="commit-amt-quarter-fourth-total">$'.number_format($quarterThreeColTotal,2).'</span></div>';
  }
  if($currentQuarter == 'thirdQuarter') {
  $colMd1Footer = ''; $colMd2Footer = ''; $colMd3Footer = 'col-md-4';  $colMd4Footer = '';  
    $firstFooter = '<div style="margin:10px 0 0 0"><span class="quarter-one-grand-total">$'.number_format($quarterOneColTotal,2).'</span></div>';
  $secondFooter = '<div style="margin:10px 0 0 0"><span class="quarter-two-grand-total">$'.number_format($quarterTwoColTotal,2).'</span></div>';
  $thirdFooter = '<div class="row margin-5" style="margin:10px 0 0 0"><div class="col-md-6 padding-5"><span class="commit-amt-quarter-three-total pull-right">$0.00</span></div><div class="col-md-6 padding-5"><span class="commit-amt-quarter-three-total-input pull-right">$0.00</span></div></div>';
  $fourthFooter = '<div style="margin:10px 0 0 0"><span class="commit-amt-quarter-fourth-total">$'.number_format($quarterThreeColTotal,2).'</span></div>';
  }
  if($currentQuarter == 'fourthQuarter') {
  $colMd1Footer = 'col-md-4'; $colMd2Footer = ''; $colMd3Footer = '';  $colMd4Footer = 'col-md-4';  
    $firstFooter = '<div style="margin:10px 0 0 0"><span class="quarter-one-grand-total">$'.number_format($quarterOneColTotal,2).'</span></div>';
  $secondFooter = '<div style="margin:10px 0 0 0"><span class="quarter-two-grand-total">$'.number_format($quarterTwoColTotal,2).'</span></div>';
  $thirdFooter = '<div style="margin:10px 0 0 0"><span class="commit-amt-quarter-three-total">$'.number_format($quarterThreeColTotal,2).'</span></div>'; 
  $fourthFooter = '<div class="row margin-5" style="margin:10px 0 0 0"><div class="col-md-6"><span class="commit-amt-quarter-fourth-total pull-right">$0.00</span></div><div class="col-md-6 padding-5"><span class="commit-amt-quarter-fourth-input pull-right">$0.00</span></div></div>';
  }
  
  $rows[] = array(
    'data' => array(
    array('data' => '<strong>&nbsp;</strong>','class' => array('text-right')),
    array('data' => '<strong>&nbsp;</strong>','class' => array('text-right')),
    array('data' => '<span class="commit-amt">&nbsp;</span>','class' => array('text-left')),
    array('data' => '<div class="margin-top-10"><span class="invoice-amt-total"><strong>Total</strong></span></div>','class' => array('text-right','main-total-spent')),
    array('data' => '<div class="margin-top-10"><span class="previous-year-grand-total">$'.number_format($finalPreviousYearTotal,2).'</span></div>','class' => array('text-left')),
    //array('data' => $firstFooter,'class' => array('text-left','custom-quater-one-heading','custom-footer-bottom')),
    array('data' => $firstFooter,'class' => array('text-left','custom-quater-one-heading',$colMd1Footer)),
    array('data' => $secondFooter,'class' => array('text-left','custom-quater-two-heading',$colMd2Footer)),   
    array('data' => $thirdFooter,'class' => array('text-left','custom-quater-three-heading',$colMd3Footer)),    
    array('data' => $fourthFooter,'class' => array('text-right','custom-quater-fourth-heading',$colMd4Footer)),   
    array('data' => '<div class="margin-top-10"><span class="commit-total-spent-total">$0.00</span></div>','class' => array('text-left','custom-current-year-heading')),
    array('data' => '<div class="margin-top-10"><span class="commit-beyond-year-total">$0.00</span></div>','class' => array('text-left','future-year-heading')),
    array('data' => '<div class="margin-top-10"><span class="commit-varience-total-calc-total">&nbsp;</span></div>','class' => array('text-left','varience-heading')),
  ),    
  );
  return theme('table', array('header'=>$commitHeader,'rows'=>$rows,'empty'=>'No Spending forcast created yet','attributes'=>array('class'=>array('table','m6connect-custom-program-table','m6connect-program-spending-forcast-main-table','table-header-border','table-hover','text-center'))));   
}

function get_project_spending_forcast_table_data($proId = 0,$forecast = '',$quar = '') {
  $return = array();  
  global $company;  
  drupal_add_library('system', 'ui.resizable');  
  drupal_add_js(drupal_get_path('module', 'm6connect_program') . '/js/m6connect_program.js');
  /*drupal_add_js(drupal_get_path('theme', 'm6connect') . '/js/jquery.dataTables.min.js');
  drupal_add_css(drupal_get_path('theme', 'm6connect') . '/css/jquery.dataTables.min.css');    */
  $rows = array();  
  if(!empty($quar) && $quar != '') {  
    if($quar == 1) { $quar = 'firstQuarter'; } 
    else if($quar == 2) { $quar = 'secondQuarter'; }
    else if($quar == 3) { $quar = 'thirdQuarter'; }
    else if($quar == 4) { $quar = 'fourthQuarter'; }
    $currentQuarter = $quar;
  }
  else {
    $currentQuarter = _get_current_quarter(date('n'));  
  }
  
  if($quar == 'fourthQuarter') { 
    $dayYear = '2016';
  } 
  else {
    $dayYear = date('Y');
  }
  $header = array(
  array('data'=>'ETC Number | Description','class'=>array('text-center')), 
  array('data'=>'Amount','class'=>array('text-center')),
  array('data'=>'Total Spent','class'=>array('text-center')),
  array('data'=>'Previous Years','class'=>array('text-center')),
  array('data'=> $dayYear.' <br>Quarter 1','class'=>array('text-center','custom-quater-one-heading-etc')),
  array('data'=> $dayYear.' <br>Quarter 2','class'=>array('text-center','custom-quater-two-heading-etc')),
  array('data'=> $dayYear.' <br>Quarter 3','class'=>array('text-center','custom-quater-three-heading-etc')),
  array('data'=> $dayYear.' <br>Quarter 4','class'=>array('text-center','custom-quater-fourth-heading-etc')),
  array('data'=> $dayYear.' <br>Spending','class'=>array('text-center','custom-current-year-heading-etc')),
  array('data'=> 'Future<br>Years','class'=>array('text-center','future-year-heading-etc')),
  array('data'=>'Variance','class'=>array('text-center','varience-heading-etc')),
  );  
  // ===============================
  // Get etc id by etc forcast check
  $query = db_select('node','n');     
  $query->join('field_data_field_project_reference','pr','n.nid=pr.entity_id');
  $query->join('field_data_field_etc_amount','ea','ea.entity_id = n.nid');  
  $query->join('field_data_field_etc_operation_done', 'eo', 'eo.entity_id = n.nid');
  $query->fields('n', array('nid'));
  $query->condition('pr.field_project_reference_nid', $proId, '=');
  $query->condition('eo.field_etc_operation_done_value', 'In ETC', '=');
  $getEtcIds = $query->execute()->fetchCol(); 
  foreach($getEtcIds as $etcKey => $etcVal) {
  $getEtcData = node_load($etcVal);  
  $etcNumber = $getEtcData->field_etc_number_calc['und'][0]['value'];
  $etcAmt = $getEtcData->field_etc_amount['und'][0]['value']!=''?'$'.number_format($getEtcData->field_etc_amount['und'][0]['value'],2):'$0.00';
  $etcDesc = $getEtcData->body['und'][0]['value']!=''?' | '.substr($getEtcData->body['und'][0]['value'],0,20):'';
  $etcTtoal += $getEtcData->field_etc_amount['und'][0]['value']; 
  // Get quarter value for etc
  $defaultAmt = '$0.00';
  $getPrevQuarterOne = '$0.00';
  $getPrevQuarterTwo = '$0.00';
  $getPrevQuarterThree = '$0.00';
  $getPrevQuarterFour = '$0.00';
  $getCurrentYearAmt = '$0.00';
  $getFutureAmt = '$0.00';
  $getVarienceAmt = '$0.00';
  if($forecast != '') {
    $query = db_select('m6connect_spending_forecast', 'sf');
    $query->fields('sf', array('quarter_one_amount','quarter_two_amount', 'quarter_three_amount','quarter_four_text_amount','quarter_four_amount','current_year_spending_amount','future_year_amout','variance_amount'));
    $query->condition('sf.forecast_name', $forecast, '=');
    $query->condition('sf.project_id', $proId, '=');
    $query->condition('sf.commitment_id', $getEtcData->nid, '=');
    $forecastData = $query->execute()->fetchAll();
    
    $getPrevQuarterOne = $forecastData[0]->quarter_one_amount;
    $getPrevQuarterTwo = $forecastData[0]->quarter_two_amount;
    $getPrevQuarterThree = $forecastData[0]->quarter_three_amount;
    $getPrevQuarterFour = $forecastData[0]->quarter_four_amount;
          
    $getCurrentYearAmt = $forecastData[0]->current_year_spending_amount;
    $getFutureAmt = $forecastData[0]->future_year_amout;
    $getVarienceAmt = $forecastData[0]->variance_amount;
  }
  if($currentQuarter == 'firstQuarter') {
    $quarterOneCol = '<input type="text" class="form-control etc-amt-quarter-one-etc bg-yellow" value="'.$getPrevQuarterOne.'"/>';
    $quarterTwoCol = '<input type="text" class="form-control etc-amt-quarter-two-etc bg-yellow" value="'.$getPrevQuarterTwo.'"/>';
    $quarterThreeCol = '<input type="text" class="form-control etc-amt-quarter-three-etc bg-yellow" value="'.$getPrevQuarterThree.'"/>';
    $quarterFourCol = '<input type="text" class="form-control etc-amt-quarter-fourth-etc bg-yellow" value="'.$getPrevQuarterFour.'"/>';
  }
  if($currentQuarter == 'secondQuarter') {
    $quarterOneCol = '<span class="etc-amt-quarter-one-etc">'.$quarterOneCol.'</span>';
    $quarterTwoCol = '<input type="text" class="form-control etc-amt-quarter-two-etc bg-yellow" value="'.$getPrevQuarterTwo.'"/>';
    $quarterThreeCol = '<input type="text" class="form-control etc-amt-quarter-three-etc bg-yellow" value="'.$getPrevQuarterThree.'"/>';
    $quarterFourCol = '<input type="text" class="form-control etc-amt-quarter-fourth-etc bg-yellow" value="'.$getPrevQuarterFour.'"/>';
  }
  if($currentQuarter == 'thirdQuarter') {
    $quarterOneCol = '<span class="etc-amt-quarter-one-etc">'.$quarterOneCol.'</span>';
    $quarterTwoCol = '<span class="etc-amt-quarter-two-etc">'.$getPrevQuarterTwo.'</span>';
    $quarterThreeCol = '<input type="text" class="form-control etc-amt-quarter-three-etc bg-yellow" value="'.$getPrevQuarterThree.'"/>';
    $quarterFourCol = '<input type="text" class="form-control etc-amt-quarter-fourth-etc bg-yellow" value="'.$getPrevQuarterFour.'"/>';
  }
  if($currentQuarter == 'fourthQuarter') {
    $quarterOneCol = '<span class="etc-amt-quarter-one-etc">'.$quarterOneCol.'</span>';
    $quarterTwoCol = '<span class="etc-amt-quarter-two-etc">'.$getPrevQuarterTwo.'</span>';
    $quarterThreeCol = '<span class="etc-amt-quarter-three-etc">'.$getPrevQuarterTwo.'</span>';
    $quarterFourCol = '<input type="text" class="form-control etc-amt-quarter-fourth-etc bg-yellow" value="'.$getPrevQuarterFour.'"/>';
  }
  
  $rows[] = array(
    'data' => array(
       array('data' => '<span class="etc-number" id="'.$getEtcData->nid.'"><ins>'.$etcNumber.'</ins><br>'.$etcDesc.'</span>','class' => array('text-left', 'col-md-3')),
     array('data' => '<span class="etc-amt">'.$etcAmt.'</span>','class' => array('text-left')),    
     array('data' => '$0.00','class' => array('text-left')),
     array('data' => '<span class="previous-year-etc">$0.00</span>','class' => array('text-left')),
     array('data' => $quarterOneCol,'class' => array('text-left','custom-quater-one-heading-etc')),
     array('data' => $quarterTwoCol,'class' => array('text-left','custom-quater-two-heading-etc')),
     array('data' => $quarterThreeCol,'class' => array('text-left','custom-quater-three-heading-etc')),
     //array('data' => '<input type="text" class="form-control etc-amt-quarter-three-etc bg-yellow" value="'.$getPrevQuarterThree.'"/>','class' => array('text-left','custom-quater-three-heading-etc')),
     array('data' => $quarterFourCol,'class' => array('text-left','custom-quater-fourth-heading-etc')),
     array('data' => '<span class="etc-total-spent">'.$getCurrentYearAmt.'</span>','class' => array('text-left','custom-current-year-heading')),
     array('data' => '<input type="text" class="form-control etc-beyond-year bg-yellow" value="'.$getFutureAmt.'"/>','class' => array('text-left','future-year-heading')),
     array('data' => '<span class="varience-total-calc">'.$getVarienceAmt.'</span>','class' => array('text-left','varience-heading')),
       ),   
  );
  } 
  //$return['rows'][] = array(
  $rows[] = array(
     'data' => array(
       array('data' => '<strong>&nbsp;</strong>','class' => array('text-right')),
     array('data' => '<span class="etc-amt">&nbsp;</span>','class' => array('text-left')),
     array('data' => '<strong>Total</strong>','class' => array('text-left')),
     array('data' => '<span class="previous-year-grand-total-etc">$0.00</span>','class' => array('text-left')),
     array('data' => '<span class="quarter-one-grand-total-etc">&nbsp;</span>','class' => array('text-left')),
     array('data' => '<span class="quarter-two-grand-total-etc">&nbsp;</span>','class' => array('text-left')),          
     array('data' => '<span class="etc-amt-quarter-three-total-etc">&nbsp;</span>','class' => array('text-left')),
     array('data' => '<span class="etc-amt-quarter-fourth-total-etc">&nbsp;</span>','class' => array('text-left')),
     array('data' => '<span class="etc-total-spent-total">$0.00</span>','class' => array('text-left')),
     array('data' => '<span class="etc-beyond-year-total-etc">$0.00</span>','class' => array('text-left')),
     array('data' => '<span class="etc-varience-total-calc-total">&nbsp;</span>','class' => array('text-left')),
       ),   
  );
  //return $return;
  return theme('table', array('header'=>$header,'rows'=>$rows,'empty'=>'No Spending forcast created yet','attributes'=>array('class'=>array('table','m6connect-custom-program-table','m6connect-program-spending-forcast-main-table-etc','table-header-border','table-hover','text-center'))));   
}
// ===========================
// Start Safety Slide (Tab) Section
// ================================
function program_project_safety_content(){
  global $company;    
  $getEstimateByCompany = _project_list_by_company($company->nid, 'project_management');    
  reset( $array );
  $firstProject = key( $getEstimateByCompany ); 
  $elements = array();
  $elements['saftey_form']= array(
    '#markup' => drupal_render(drupal_get_form('program_modify_safety_form')),
  '#prefix' => '<div class="clearfix margin-bottom-10">',
  '#suffix' => '</div>',
  );  
  $elements['prgram-safety-listing'] = array(
    '#markup' => get_safety_listing_table_data($firstProject),
  '#prefix' => '<div class="clearfix"><div class="prgram-safety-listing" id="programe-safety-details">',
  '#suffix' => '</div></div>',
   ); 
  return $elements;
}

function program_modify_safety_form($form,&$form_state){
  global $user;   
  global $company;  
  drupal_add_js(drupal_get_path('module', 'm6connect_program') . '/js/m6connect_program.js');
  drupal_add_js(drupal_get_path('module', 'm6connect_program') . '/js/Prototype_Price_Format_0.1.js');
  // Get project list by company  
  $getProjectByCompany = _project_list_by_company($company->nid, 'project_management');   
  $getSafetyCompany = _project_get_safety_list($company->nid);
  $form['#attributes']['class'] = array('program_modify_safety_form');
  /*$form['prgram-saftey-page-title'] = array(
    '#markup' => '<h1>Safety</h1>',
  '#prefix' => '<div class="clearfix">',
  '#suffix' => '</div>',
  );*/  
  $form['select-safety'] = array(
    '#type'=>'select',
  '#title'=> 'Select Project',
  '#options' => $getProjectByCompany,
  '#default_value' => isset($_SESSION['ACTIVEPROJECT'])?$_SESSION['ACTIVEPROJECT']:'',
  '#attributes' => array('class'=> array('form-control project-program-safety-sel')),
  '#ajax' => array(
    'callback'=> 'change_program_safety_callback',
    'wrapper' => 'project_program_safety_main_container',
    'effect' => 'fade',
  ),
  '#prefix' => '<div class="clearfix"><div class="pull-left form-inline">',
  '#suffix' => '</div><div class="add-new-safety-btn pull-right" id="add-safety-button-custom">'. l('<input type="button" value="Add New Safety" class="form-submit new-record-cus-btn" />', '#', array('html' => TRUE, 'external' => TRUE, 'attributes' => array('class' => array('new-safety-link')))).'</div></div>',
  );  
  $form['get-safety'] = array(
    '#type'=>'select',
  '#title'=> 'Select Project',
  '#options' => $getSafetyCompany,
  '#attributes' => array('class'=> array('form-control project-program-sel-safety')),
  '#ajax' => array(
    'callback'=> 'change_program_safety_callback',
    'wrapper' => 'project_program_safety_main_container',
    'effect' => 'fade',
  ),
  '#prefix' => '<div class="clearfix" style="display:none;"><div class="pull-left form-inline">',
  '#suffix' => '</div></div>',
  ); 
  $form['prgram-project-menu-items'] = array(
    '#markup' => program_project_menu_links_content(),
  '#prefix' => '<div class="clearfix">',
  '#suffix' => '</div>',
  );
  $form['set-safety-status'] = array(
    '#type'=>'select',
  '#title'=> 'Select Status',
  '#options' => array('reds' =>  'Red', 'greens' => 'Green','yellows' => 'Yellow'),
  '#empty_option' => 'Choose Status',
  '#attributes' => array('class'=> array('form-control program-safety-status')),
  '#default_value' => isset($defaultValues['program-safety-status'])?$defaultValues['program-safety-status']:'',  
  '#prefix' => '<div class="pull-right form-inline program-safety-status-btn"><div class="status-mark form-group"><i class="fa fa-check-circle"></i></div><div class="form-group">',
  '#suffix' => '</div></div></div>',  
  ); 
  $form_state['storage_project_safety'] = array();
  if(isset($form_state['values'],$form_state['input'],$form_state['triggering_element'],$form_state['triggering_element']['#type'],$form_state['triggering_element']['#name']) && $form_state['triggering_element']['#type']=='select' && $form_state['triggering_element']['#name']=='get-safety'){
  $nodeNid = $triggeringElement['#value'];  
  $safetyNode = node_load($nodeNid);  
  //drup_msg($estimateNode);
  $form_state['storage_project_safety'] = array(
    'start_date' => isset($safetyNode->field_start_date['und'])?$safetyNode->field_start_date['und'][0]['value']:'',
    'end_date' => isset($safetyNode->field_end_date['und'])?$safetyNode->field_end_date['und'][0]['value']:'',
    'lost_time_accidents' => isset($safetyNode->field_lost_time_accidents['und'])?$safetyNode->field_lost_time_accidents['und'][0]['value']:'',
    'minor' => isset($safetyNode->field_minor['und'])?$safetyNode->field_minor['und'][0]['value']:'',
    'major' => isset($safetyNode->field_major['und'])?$safetyNode->field_major['und'][0]['value']:'',
    'hours_this_period' => isset($safetyNode->field_hours_this_period['und'])?$safetyNode->field_hours_this_period['und'][0]['value']:'',
    'safety_comment' => isset($safetyNode->body['und'])?strip_tags($safetyNode->body['und'][0]['value']):'',
    'program-safety-status' => isset($scheduleNode->field_safety_status['und'])?$scheduleNode->field_safety_status['und'][0]['value']:'',
  );    
  }    
  $form['main-container']= array(
    '#type' => 'container',
  '#attributes' => array('class'=>array('row')),
  '#prefix' => '<div class="clearfix"><div id="project_safety_main_container" class="project-detail">',
  '#process' => array('project_safety_main_container_process'), 
  //'#weight' => -9,
  );    
  
  /*$form['actions']['reset'] = array(
    '#type' => 'markup',
    '#markup' => '<input type="button" value="Cancel" class="form-submit custom-reset-button">',
  '#prefix' => '<div class="clearfix margin-top-10"><div class="pull-left custom-submit-reset margin-bottom-10"><div class="clearfix custom-submit-safety">',
  );
  
  $form['actions']['submit'] = array(
    '#type' => 'submit',
  '#submit'=> array('project_safety_submit'),
  '#attributes' => array('class'=>array('main-estimate-submit-call')), 
  '#value' => 'Save',
  '#suffix' => '</div></div></div></div></div></div>', 
  );*/
  
 $form['submit'] = array(
   '#type' => 'submit',
    '#value' => 'Save',
    '#submit' => array('project_safety_submit'),
    '#prefix' => '<div class="clearfix"><div class="custom-submit-safety display-inline-block">',    
    '#suffix' => '</div>',
 );
 $form['cancel'] = array(
   '#type' => 'markup',
   '#markup' => '<input type="button" value="Cancel" class="form-submit custom-reset-button-safety">',
   '#prefix' => '<div class="custom-reset-button-safety-div display-inline-block">',
   '#suffix' => '</div></div></div></div>',
 );
  return $form; 
}

function project_safety_main_container_process($element, &$form_state) {
  $defaultValues = $form_state['storage_project_safety'];       
  
  $element['main-container']['left-container']= array(
    '#type' => 'container',
  '#attributes' => array('class'=>array('col-md-6','col-sm-6','col-xs-12')),
  //'#weight' => 1,
  );  
  
  $element['main-container']['right-container']= array(
    '#type' => 'container',
  '#attributes' => array('class'=>array('col-md-6','col-sm-6','col-xs-12')),
  //'#weight' => 2,
  );  
  $element['main-container']['full-container']= array(
    '#type' => 'container',
  '#attributes' => array('class'=>array('col-md-12','col-sm-12','col-xs-12','project-details-full','margin-bottom-10')),
  '#weight' => 3,
  );  
  $element['main-container']['left-container']['project_safety_ref_nid']= array(
    '#type'=>'hidden',
  '#title_display' => 'invisible',
  '#attributes' => array('class'=> array('form-control project_safety_ref_nid')),
  );
  $element['main-container']['left-container']['project_safety_nid']= array(
    '#type'=>'hidden',
  '#title_display' => 'invisible',
  '#attributes' => array('class'=> array('form-control project_safety_nid')),
  );
  $element['main-container']['left-container']['datatable_page_id']= array(
    '#type' => 'hidden',
  '#title_display' => 'invisible',
  '#attributes' => array('class'=> array('form-control datatable_page_id')),
  );
  $element['main-container']['left-container']['page_number_id']= array(
    '#type' => 'hidden',
  '#title_display' => 'invisible',
  '#attributes' => array('class'=> array('form-control page_number_id')),
  );  
  $element['main-container']['left-container']['status_mark_data_id']= array( 
    '#type'=>'hidden',
  '#title_display' => 'invisible',
  '#attributes' => array('class'=> array('form-control status_mark_data_id')),
  );
  $element['main-container']['left-container']['start_date']= array(
    '#type' => 'date_popup',
  '#date_format' => 'm/d/Y',
    '#date_year_range' => '-3:+3',  
  '#pre_render' => array('m6connect_programe_date_prerender'),
  '#title' => 'Period Start',
  '#attributes'=> array('class'=> array('form-control start_date'),'autocomplete' => 'off'),
  '#required' => TRUE,
  '#default_value' => isset($defaultValues['start_date'])?$defaultValues['start_date']:'',
  '#prefix' => '<div class="project-details-border"><div class="clearfix form-item">',
  '#suffix' => '</div>',
  );  
  $element['main-container']['left-container']['lost_time_accidents']= array(
    '#type' => 'textfield',
  '#title' => 'Lost Time Accidents (LTA)',
  '#attributes'=> array('class'=> array('form-control lost_time_accidents'),'min'=>0),
  '#theme' => 'm6_numberfield',
  '#default_value' => isset($defaultValues['lost_time_accidents'])?$defaultValues['lost_time_accidents']:'',
  '#prefix' => '<div class="clearfix form-item">',
  '#suffix' => '</div>',
  );  
  $element['main-container']['left-container']['minor']= array(
    '#type' => 'textfield',
  '#title' => 'Minor',
  '#attributes'=> array('class'=> array('form-control minor'),'min'=>0),
  '#theme' => 'm6_numberfield',
  '#default_value' => isset($defaultValues['minor'])?$defaultValues['minor']:'',
  '#prefix' => '<div class="clearfix form-item">',
  '#suffix' => '</div>',
  );   
  $element['main-container']['left-container']['hours_this_period']= array(
    '#type' => 'textfield',
  '#title' => 'Hours This Period',
  '#attributes'=> array('class'=> array('form-control hours_this_period')),
  '#required' => TRUE,
  '#default_value' => isset($defaultValues['hours_this_period'])?$defaultValues['hours_this_period']:'',
  '#prefix' => '<div class="clearfix form-item">',
  '#suffix' => '</div></div>',
  );    
  /*$element['main-container']['left-container']['major']= array(
    '#type' => 'textfield',
  '#title' => 'Major',
  '#attributes'=> array('class'=> array('form-control major'),'min'=>0),
  '#theme' => 'm6_numberfield',
  '#default_value' => isset($defaultValues['major'])?$defaultValues['major']:'',
  '#prefix' => '<div class="clearfix form-item">',
  '#suffix' => '</div>',
  );*/  
  $element['main-container']['right-container']['end_date']= array(
    '#type' => 'date_popup',
  '#date_format' => 'm/d/Y',
    '#date_year_range' => '-3:+3',  
  '#pre_render' => array('m6connect_programe_date_prerender'),
  '#title' => 'Period End',
  '#attributes'=> array('class'=> array('form-control end_date'),'autocomplete' => 'off'),
  '#required' => TRUE,
  '#default_value' => isset($defaultValues['end_date'])?$defaultValues['end_date']:'',
  '#prefix' => '<div class="project-details-border"><div class="clearfix form-item">',
  '#suffix' => '</div>',
  ); 
  $element['main-container']['right-container']['safety_comment'] = array(
    '#type' => 'textarea',
  '#title' => 'Comment',
  '#rows' => 5,
  '#attributes' => array('class'=> array('form-control safety_comment')),
  '#default_value' => isset($defaultValues['safety_comment'])?$defaultValues['safety_comment']:'',
  '#prefix' => '<div class="clearfix form-item">',
  '#suffix' => '</div></div>',
  );            
  return $element;
}

function change_program_safety_callback($form,&$form_state){
  $commands = array();
  $triggeringElement = $form_state['triggering_element'];
  if(!empty($triggeringElement['#value']) && $form_state['triggering_element']['#name']=='get-safety') {
  $safetyNode = node_load($triggeringElement['#value']);
  $storage_project = array(
    'start_date' => isset($safetyNode->field_start_date['und'])?$safetyNode->field_start_date['und'][0]['value']:'',
    'end_date' => isset($safetyNode->field_end_date['und'])?$safetyNode->field_end_date['und'][0]['value']:'',
    'lost_time_accidents' => isset($safetyNode->field_lost_time_accidents['und'])?$safetyNode->field_lost_time_accidents['und'][0]['value']:'',
    'minor' => isset($safetyNode->field_minor['und'])?$safetyNode->field_minor['und'][0]['value']:'',
    //'major' => isset($safetyNode->field_major['und'])?$safetyNode->field_major['und'][0]['value']:'',
    'hours_this_period' => isset($safetyNode->field_hours_this_period['und'])?$safetyNode->field_hours_this_period['und'][0]['value']:'',
    'safety_comment' => isset($safetyNode->body['und'])?strip_tags($safetyNode->body['und'][0]['value']):'',
    'program-safety-status' => isset($safetyNode->field_safety_status['und'])?$safetyNode->field_safety_status['und'][0]['value']:'',
  );
  $startDate = $storage_project['start_date']!=''?date('m/d/Y', strtotime($storage_project['start_date'])):'';
  $endDate = $storage_project['end_date']!=''?date('m/d/Y', strtotime($storage_project['end_date'])):'';
  
  $commands[] = ajax_command_invoke("input.start_date", 'val',array($startDate));
  $commands[] = ajax_command_invoke("input.end_date", 'val',array($endDate));
  $commands[] = ajax_command_invoke("input.lost_time_accidents", 'val',array($storage_project['lost_time_accidents'])); 
  $commands[] = ajax_command_invoke("input.minor", 'val',array($storage_project['minor']));
  //$commands[] = ajax_command_invoke("input.major", 'val',array($storage_project['major']));
  $commands[] = ajax_command_invoke("input.hours_this_period", 'val',array($storage_project['hours_this_period']));
  $commands[] = ajax_command_invoke("textarea.safety_comment", 'val',array($storage_project['safety_comment']));
  
  $commands[] = ajax_command_invoke("select.program-safety-status", 'val',array($storage_project['program-safety-status']));
  $commands[] = ajax_command_invoke("select.program-safety-status", 'trigger',array('change'));
  
  if($safetyNode->type == 'project_safety') {
    $triggerId = $safetyNode->field_project_reference['und'][0]['nid'];
    $commands[] = ajax_command_html("#programe-safety-details", get_safety_listing_table_data($triggerId));
  } 
  }
  else{
  if((isset($_SESSION['ACTIVEPROJECT']) && $_SESSION['ACTIVEPROJECT']!=$triggeringElement['#value']) || (!isset($_SESSION['ACTIVEPROJECT'])) || (empty($_SESSION['ACTIVEPROJECT']))){
    $_SESSION['ACTIVEPROJECT'] = $triggeringElement['#value'];  
  }
  $commands[] = ajax_command_html("#programe-safety-details", get_safety_listing_table_data($triggeringElement['#value']));  
  $commands[] = ajax_command_invoke("input.start_date", 'val',array(''));
  $commands[] = ajax_command_invoke("input.end_date", 'val',array(''));
  $commands[] = ajax_command_invoke("input.lost_time_accidents", 'val',array(''));
  $commands[] = ajax_command_invoke("input.minor", 'val',array(''));
  //$commands[] = ajax_command_invoke("input.major", 'val',array(''));
  $commands[] = ajax_command_invoke("input.hours_this_period", 'val',array(''));
  $commands[] = ajax_command_invoke("textarea.safety_comment", 'val',array(''));  
  $commands[] = ajax_command_invoke("select.program-safety-status", 'val',array(''));
  }
    return array('#type' => 'ajax', '#commands' => $commands);
}

function project_safety_submit(&$form, &$form_state) {
  global $user; 
  global $company;
  $formVal = $form_state['values'];  
  //Check for updated project or new one
  if($formVal['project_safety_nid'] != '') {
    $safetyNode = node_load($formVal['project_safety_nid']);
  $safetyNode->body['und'][0]['value'] = $formVal['safety_comment'];
  $safetyNode->field_start_date['und'][0]['value'] = $formVal['start_date'];
  $safetyNode->field_end_date['und'][0]['value'] = $formVal['end_date'];
  $safetyNode->field_lost_time_accidents['und'][0]['value'] = $formVal['lost_time_accidents'];
  $safetyNode->field_minor['und'][0]['value'] = $formVal['minor']!=''?$formVal['minor']:0;
  //$safetyNode->field_major['und'][0]['value'] = $formVal['major']!=''?$formVal['major']:0;  
  $safetyNode->field_hours_this_period['und'][0]['value'] = $formVal['hours_this_period'];    
  // Status mark work
  if($formVal['status_mark_data_id'] != '') {
    $statusMarkId = node_load($formVal['status_mark_data_id']);
    $statusMarkId->field_safety_status['und'][0]['value'] = $formVal['set-safety-status'];
      field_attach_update('node', $statusMarkId);
    node_save($statusMarkId);
  }
  else {
    $safetyNode->field_safety_status['und'][0]['value'] = $formVal['set-safety-status'];
  } 
  
  node_save($safetyNode);
  drupal_goto('/program/safety', array('query'=>array('pid' => $formVal['select-safety'],'sid' => $safetyNode->nid)));
  drupal_set_message('Safety updated successfully!');
  }
  else {
    $node = new stdClass();
  $node->type = 'project_safety';
  $node->title = date('m-d-Y H:i:s');
  $node->body['und'][0]['value'] = $formVal['safety_comment'];
  $node->uid = $user->uid;
  $node->language = en;
  $node->status = 1;
  $node->og_group_ref['und'][0]['target_id'] = $company->nid;
  $node->field_start_date['und'][0]['value'] = $formVal['start_date'];
  $node->field_end_date['und'][0]['value'] = $formVal['end_date'];
  $node->field_lost_time_accidents['und'][0]['value'] = $formVal['lost_time_accidents'];
  $node->field_minor['und'][0]['value'] = $formVal['minor']!=''?$formVal['minor']:0;
  //$node->field_major['und'][0]['value'] = $formVal['major']!=''?$formVal['major']:0;  
  $node->field_hours_this_period['und'][0]['value'] = $formVal['hours_this_period'];
  
  // Status mark work
  if($formVal['status_mark_data_id'] != '') {
    $statusMarkId = node_load($formVal['status_mark_data_id']);
    $statusMarkId->field_safety_status['und'][0]['value'] = $formVal['set-safety-status'];
      field_attach_update('node', $statusMarkId);
    node_save($statusMarkId);
  }
  else {
    $node->field_safety_status['und'][0]['value'] = $formVal['set-safety-status'];
  } 
    
  $node->field_project_reference['und'][0]['nid'] = $formVal['select-safety'];    
  node_save($node);
  drupal_goto('/program/safety', array('query'=>array('pid' => $formVal['select-safety'],'sid' => $node->nid)));
  drupal_set_message('New safety created successfully!');        
  }
}

function get_safety_listing_table_data($projectId=0){
  global $company;  
  drupal_add_js(drupal_get_path('module', 'm6connect_program') . '/js/m6connect_program.js');
  drupal_add_js(drupal_get_path('module', 'm6connect_program') . '/js/Prototype_Price_Format_0.1.js');
  $safetyList = _project_list_by_company($company->nid, 'project_safety');  
  $rows = array();
  $header = array(
  array('data'=>'Period Start','class'=>array('text-center')),
  array('data'=>'Period End','class'=>array('text-center')),
  array('data'=>'LTA','class'=>array('text-center')),
  array('data'=>'Minor','class'=>array('text-center')),
  //array('data'=>'Major','class'=>array('text-center')),
  array('data'=>'Hours','class'=>array('text-center')),
  array('data'=>'Comment','class'=>array('text-center', 'col-md-4')),
  array('data'=>'Action','class'=>array('text-center')),
  );
  $query= db_select('field_data_field_project_reference','pr');
  $query->fields('pr', array('entity_id'));
  $query->condition('pr.field_project_reference_nid', $projectId, '=');
  $query->condition('pr.bundle','project_safety','=');
  $getSafetyNodes = $query->execute()->fetchAll();   
  if(!empty($getSafetyNodes)){    
    foreach($getSafetyNodes as $saftyId => $saftyVal){
    $safetyNode = node_load($saftyVal->entity_id);
    $startDate = isset($safetyNode->field_start_date['und'])?date('m/d/Y', strtotime($safetyNode->field_start_date['und'][0]['value'])):'None';
    $endDate = isset($safetyNode->field_end_date['und'])?date('m/d/Y', strtotime($safetyNode->field_end_date['und'][0]['value'])):'None';
    $ltAccidents = isset($safetyNode->field_lost_time_accidents['und'])?$safetyNode->field_lost_time_accidents['und'][0]['value']:'None';
    $totalLTA += $ltAccidents;
    $minor = isset($safetyNode->field_minor['und'])?$safetyNode->field_minor['und'][0]['value']:'None';
    //$major = isset($safetyNode->field_major['und'])?$safetyNode->field_major['und'][0]['value']:'None';
    $hours = isset($safetyNode->field_hours_this_period['und'])?number_format($safetyNode->field_hours_this_period['und'][0]['value']):'None';
    $safteyComment = isset($safetyNode->body['und'])?$safetyNode->body['und'][0]['value']:'None';
    $totalHour += $hours;
    //$action = l('[Edit]', 'edit/'.$safetyNode->nid,array('attributes' => array('class' => 'edit-safety-detail', 'for' => $safetyNode->nid))).' '. l('[Delete]', 'node/'.$safetyNode->nid.'/delete');
    
    $action = '<div class="project-action">
            <div class="btn-group"><div class="dropdown">
                <button id="dLabel" class="btn btn-success" type="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"> Actions</button>
              <ul class="dropdown-menu" role="menu" aria-labelledby="dLabel">
                <li>'.l('Edit', 'edit/'.$safetyNode->nid,array('attributes' => array('class' => 'edit-safety-detail', 'for' => $safetyNode->nid))).'</li>
                <li>'.l('Delete', url('node-delete/nojs/'.$safetyNode->nid), array( 'external'=>TRUE, 'attributes'=> array('class'=>array('use-ajax ctools-modal-assign-dashboard-popup-style ctools-use-modal'))) ).'</li>
              </ul>
              </div>
            </div>
            </div>';
            
    $rows[] = array(
      'data' => array($startDate,$endDate,$ltAccidents,$minor,$hours,substr($safteyComment,0,100).'...',$action),
    //'class' => array('custom-odd'),
    );
    }  
  $rows[] = array(
      'data' => array(  
      array('data'=> '<strong>Total Hours Worked: </strong>','class' => array('text-right'),'colspan' => 4),
    array('data'=> $totalHour,'class' => array('text-center')),
    array('data'=> '&nbsp;','class' => array('text-center'),'colspan' => 2),
    ),
    'class' => array('custom-odd'),
    ); 
  $totalEMR = ($totalLTA * 200000)/$totalHour;
  $rows[] = array(
      'data' => array(  
      array('data'=> '<strong>Incident Rate: </strong>&nbsp;&nbsp;'.round($totalEMR, 2),'class' => array('text-right'),'colspan' => 4),
    array('data'=> '&nbsp;','class' => array('text-center')),
    array('data'=> '&nbsp;','class' => array('text-center'),'colspan' => 2),
    ),
    'class' => array('custom-odd'),
    ); 
  }
  return theme('table', array('header'=>$header,'rows'=>$rows,'empty'=>'No Safety Data Entered Yet','attributes'=>array('class'=>array('table','m6connect-custom-table','m6connect-custom-program-table','m6connect-program-safety-table','table-hover','table-bordered','text-center'))));
}     

// =============================
//End Safety Slide (Tab) Section

// =============================
// Start Schedule Slide (Tab) Section
// ==================================
function program_project_schedule_content(){
  global $company;    
  $getEstimateByCompany = _project_list_by_company($company->nid, 'project_management');    
  reset( $array );
  $firstProject = key( $getEstimateByCompany );   
  $elements = array();  
  $elements['schedule_form']= array(
    '#markup' => drupal_render(drupal_get_form('program_project_schedule_form')),
  '#prefix' => '<div class="clearfix margin-bottom-10">',
  '#suffix' => '</div>',
  );    
  $elements['prgram-schedule-listing'] = array(
    '#markup' => get_schedule_listing_table_data($firstProject),
  '#prefix' => '<div class="clearfix"><div class="prgram-schedule-listing" id="prgram-schedule-listing-table">',
  '#suffix' => '</div></div>',
   ); 
  return $elements;
}

function program_project_schedule_form($form,&$form_state){
  global $user;   
  global $company;  
  $defaultValues = $form_state['storage_project_schedule'];       
  drupal_add_js(drupal_get_path('module', 'm6connect_program') . '/js/m6connect_program.js');
  drupal_add_js(drupal_get_path('module', 'm6connect_program') . '/js/Prototype_Price_Format_0.1.js');
  // Get project list by company  
  $getProjectByCompany = _project_list_by_company($company->nid, 'project_management');
  $getScheduleByCompany = _project_get_schedule_list($company->nid);
  $form['#attributes']['class'] = array('program_project_schedule_form');
  /*$form['prgram-schedule-page-title'] = array(
    '#markup' => '<h1>Schedule</h1>',
  '#prefix' => '<div class="clearfix">',
  '#suffix' => '</div>',
  );*/  
  $form['select-schedule'] = array(
    '#type'=>'select',
  '#title'=> 'Select Project',
  '#options' => $getProjectByCompany,
  '#attributes' => array('class'=> array('form-control project-program-schedule-sel')),
  '#default_value' => isset($_SESSION['ACTIVEPROJECT'])?$_SESSION['ACTIVEPROJECT']:'',
  '#ajax' => array(
    'callback'=> 'change_program_schedule_callback',
    'wrapper' => 'project_program_schedule_main_container',
    'effect' => 'fade',
  ),
  '#prefix' => '<div class="clearfix"><div class="pull-left form-inline">',
  '#suffix' => '</div><div class="add-new-schedule-btn pull-right" id="add-schedule-button-custom">'. l('<input type="button" value="Add New Schedule" class="form-submit new-record-cus-btn" />', '#', array('html' => TRUE, 'external' => TRUE, 'attributes' => array('class' => array('new-schedule-link')))).'</div></div>',    
  );  
  $form['get-schedule'] = array(
    '#type'=>'select',
  '#title'=> 'Select Project',
  '#options' => $getScheduleByCompany,
  '#attributes' => array('class'=> array('form-control project-program-sel-schedule')),
  '#ajax' => array(
    'callback'=> 'change_program_schedule_callback',
    'wrapper' => 'project_program_schedule_main_container',
    'effect' => 'fade',
  ),
  '#prefix' => '<div class="clearfix" style="display:none;"><div class="pull-left form-inline">',
  '#suffix' => '</div></div>',
  );  
  $form['prgram-project-menu-items'] = array(
    '#markup' => program_project_menu_links_content(),
  '#prefix' => '<div class="clearfix">',
  '#suffix' => '</div>',
  );  
  $form['set-schedule-status'] = array(
    '#type'=>'select',
  '#title'=> 'Select Status',
  '#options' => array('reds' =>  'Red', 'greens' => 'Green','yellows' => 'Yellow'),
  '#empty_option' => 'Choose Status',
  '#attributes' => array('class'=> array('form-control program-schedule-status')),
  '#default_value' => isset($defaultValues['program-schedule-status'])?$defaultValues['program-schedule-status']:'',  
  '#prefix' => '<div class="pull-right form-inline program-schedule-status-btn"><div class="status-mark form-group"><i class="fa fa-check-circle"></i></div><div class="form-group">',
  '#suffix' => '</div></div></div>',  
  ); 
  $form_state['storage_project_schedule'] = array();
  if(isset($form_state['values'],$form_state['input'],$form_state['triggering_element'],$form_state['triggering_element']['#type'],$form_state['triggering_element']['#name']) && $form_state['triggering_element']['#type']=='select' && $form_state['triggering_element']['#name']=='get-schedule'){
  $nodeNid = $triggeringElement['#value'];
  $scheduleNode = node_load($nodeNid);  
  //drup_msg($scheduleNode);
  $form_state['storage_project_schedule'] = array(
    'in_report' => isset($scheduleNode->field_in_report['und'])?$scheduleNode->field_in_report['und'][0]['value']:'',
    'schedule_milestone' => isset($scheduleNode->field_project_milestone['und'])?$scheduleNode->field_project_milestone['und'][0]['value']:'',
    'schedule_original' => isset($scheduleNode->field_schedule_original['und'])?$scheduleNode->field_schedule_original['und'][0]['value']:'',
    'schedule_projected' => isset($scheduleNode->field_schedule_projected['und'])?$scheduleNode->field_schedule_projected['und'][0]['value']:'',
    'schedule_actual' => isset($scheduleNode->field_schedule_actual['und'])?$scheduleNode->field_schedule_actual['und'][0]['value']:'',
    'program-schedule-status' => isset($scheduleNode->field_schedule_status['und'])?$scheduleNode->field_schedule_status['und'][0]['value']:'',
  );    
  }    
  $form['main-container']= array(
    '#type' => 'container',
  '#attributes' => array('class'=>array('row')),
  '#prefix' => '<div class="clearfix margin-bottom-10"><div id="project_program_schedule_main_container" class="project-schedule project-detail">', 
  '#process' => array('project_program_schedule_main_container_process'), 
  //'#weight' => -9,
  );
  
  $form['actions']['reset'] = array(
    '#type' => 'markup',
    '#markup' => '<input type="button" value="Cancel" class="form-submit custom-reset-button cancel-button">',
  '#prefix' => '<div class="clearfix get-total-section margin-top-10"><div class="pull-left custom-submit-etc custom-submit-schedule-reset margin-bottom-10"><div class="pull-left custom-submit-safety margin-bottom-10">',
  );  
  $form['actions']['submit'] = array(
    '#type' => 'submit',
  '#submit'=> array('project_schedule_submit'), 
  '#value' => 'Save',
  '#suffix' => '</div></div></div></div></div>',  
  );   
  /*$form['submit'] = array(
    '#type' => 'submit',
  '#value' => 'Save',
  '#submit' => array('project_schedule_submit'),
  '#suffix' => '</div></div>',
  );*/
  return $form; 
}

function project_program_schedule_main_container_process($element, &$form_state) {
  global $company;  
  drupal_add_js(drupal_get_path('module', 'm6connect_program') . '/js/m6connect_program.js');
  drupal_add_js(drupal_get_path('module', 'm6connect_program') . '/js/Prototype_Price_Format_0.1.js');    
  $defaultValues = $form_state['storage_project_schedule'];       
  
  $element['main-container']['full-container']= array(
    '#type' => 'container',
  '#attributes' => array('class'=>array('col-md-12','col-sm-12','col-xs-12','project-details-full',)),
  '#weight' => 3,
  );  
  $element['main-container']['full-container']['full-container-ineer']= array(
    '#type' => 'container',
  '#attributes' => array('class'=>array('row')),
  '#weight' => 3,
  );  
  $element['main-container']['full-container']['full-container-ineer']['fisrt-col-container']['inner-left-container']= array(
    '#type' => 'container',
  '#attributes' => array('class'=>array('col-md-3','col-sm-3','col-xs-12','project-details-left','margin-bottom-10')),
  );  
  
  $element['main-container']['full-container']['full-container-ineer']['second-col-container']['inner-left-container']= array(
    '#type' => 'container',
  '#attributes' => array('class'=>array('col-md-3','col-sm-3','col-xs-12','project-details-left','margin-bottom-10')),
  );  
  $element['main-container']['full-container']['full-container-ineer']['third-col-container']['inner-left-container']= array(
    '#type' => 'container',
  '#attributes' => array('class'=>array('col-md-3','col-sm-3','col-xs-12','project-details-left','margin-bottom-10')),
  );  
  $element['main-container']['full-container']['full-container-ineer']['fourth-col-container']['inner-left-container']= array(
    '#type' => 'container',
  '#attributes' => array('class'=>array('col-md-3','col-sm-3','col-xs-12','project-details-left','margin-bottom-10')),
  );  
  

  $element['main-container']['full-container']['project_schedule_ref_nid']= array(
    '#type'=>'hidden',
  '#title_display' => 'invisible',
  '#attributes' => array('class'=> array('form-control project_schedule_ref_nid')),
  );
  $element['main-container']['left-container']['status_mark_data_id']= array( 
    '#type'=>'hidden',
  '#title_display' => 'invisible',
  '#attributes' => array('class'=> array('form-control status_mark_data_id')),
  );
  $element['main-container']['full-container']['project_schedule_nid']= array(
    '#type'=>'hidden',
  '#title_display' => 'invisible',
  '#attributes' => array('class'=> array('form-control project_schedule_nid')), 
  );  
  $element['main-container']['full-container']['project_schedule_nid']= array(
    '#markup' => '',
  '#prefix' => '<div class="clearfix margin-bottom-10" id="lock-status-container">',
  '#suffix' => '</div>',
  );
  $element['main-container']['full-container']['in_report']= array(
    '#type' =>'checkboxes',
  '#attributes'=> array('class'=> array('in_report')),
  '#options' => array(
    '1'=>'In Report',
    '#default_value' => isset($defaultValues['in_report'])?$defaultValues['in_report']:'',  
  ),
  '#prefix' => '<div class="clearfix form-item">',
  '#suffix' => '</div>',
  );
  $element['main-container']['full-container']['full-container-ineer']['fisrt-col-container']['inner-left-container']['schedule_milestone']= array(
    '#type' => 'textfield',
  '#title' => 'Project Milestone',
  '#attributes'=> array('class'=> array('form-control schedule_milestone')),
  '#required' => TRUE,
  '#default_value' => isset($defaultValues['schedule_milestone'])?$defaultValues['schedule_milestone']:'',
  '#prefix' => '<div class="project-details-border"><div class="container-inline-date">',
  '#suffix' => '</div></div>',
  );  
  $element['main-container']['full-container']['full-container-ineer']['second-col-container']['inner-left-container']['schedule_original']= array(
    '#type' => 'date_popup',
  '#date_format' => 'm/d/Y',
    '#date_year_range' => '-3:+3',  
  '#pre_render' => array('m6connect_programe_date_prerender'),
  '#title' => 'Original',
  '#attributes'=> array('class'=> array('form-control schedule_original'),'autocomplete' => 'off'),
  '#default_value' => isset($defaultValues['schedule_original'])?$defaultValues['schedule_original']:'',
  '#prefix' => '<div class="project-details-border">',
  '#suffix' => '</div>',
  );      
  $element['main-container']['full-container']['full-container-ineer']['third-col-container']['inner-left-container']['schedule_projected']= array(
    '#type' => 'date_popup',
  '#date_format' => 'm/d/Y',
    '#date_year_range' => '-3:+3',  
  '#pre_render' => array('m6connect_programe_date_prerender'),
  '#title' => 'Projected',
  '#attributes'=> array('class'=> array('form-control schedule_projected'),'autocomplete' => 'off'),
  '#default_value' => isset($defaultValues['schedule_projected'])?$defaultValues['schedule_projected']:'',
  '#prefix' => '<div class="project-details-border">',
  '#suffix' => '</div>',
  );
  $element['main-container']['full-container']['full-container-ineer']['fourth-col-container']['inner-left-container']['schedule_actual']= array(
  '#type' => 'date_popup',
  '#date_format' => 'm/d/Y',
    '#date_year_range' => '-3:+3',  
  '#pre_render' => array('m6connect_programe_date_prerender'),
  '#title' => 'Actual',
  '#attributes'=> array('class'=> array('form-control schedule_actual'),'autocomplete' => 'off'),
  '#default_value' => isset($defaultValues['schedule_actual'])?$defaultValues['schedule_actual']:'',
  '#prefix' => '<div class="project-details-border">',
  '#suffix' => '</div>',
  );         
  return $element;
}

function change_program_schedule_callback($form,&$form_state){
  global $company;  
  $commands = array();
  $triggeringElement = $form_state['triggering_element'];
  if(!empty($triggeringElement['#value']) && $triggeringElement['#name']=='get-schedule'){      
  $scheduleNode = node_load($triggeringElement['#value']);
  $storage_project = array(
    'in_report' => isset($scheduleNode->field_in_report['und'])?$scheduleNode->field_in_report['und'][0]['value']:'',
    'schedule_milestone' => isset($scheduleNode->field_project_milestone['und'])?$scheduleNode->field_project_milestone['und'][0]['value']:'',
    'schedule_original' => isset($scheduleNode->field_schedule_original['und'])?$scheduleNode->field_schedule_original['und'][0]['value']:'',
    'schedule_projected' => isset($scheduleNode->field_schedule_projected['und'])?$scheduleNode->field_schedule_projected['und'][0]['value']:'',
    'schedule_actual' => isset($scheduleNode->field_schedule_actual['und'])?$scheduleNode->field_schedule_actual['und'][0]['value']:'',
    'program-schedule-status' => isset($scheduleNode->field_schedule_status['und'])?$scheduleNode->field_schedule_status['und'][0]['value']:'',
  );
  $originalDate = $storage_project['schedule_original']!=''?date('m/d/Y', strtotime($storage_project['schedule_original'])):'';
  $projectedDate = $storage_project['schedule_projected']!=''?date('m/d/Y', strtotime($storage_project['schedule_projected'])):'';
  $actualDate = $storage_project['schedule_actual']!=''?date('m/d/Y', strtotime($storage_project['schedule_actual'])):'';
  if($storage_project['in_report'] == 1){
    $commands[] = ajax_command_invoke('.in_report input[type="checkbox"]', 'attr',array('checked', 'true'));  
  }else{
    $commands[] = ajax_command_invoke('input[type="checkbox"].in_report','removeAttr',array('checked'));  
  } 
  
  $commands[] = ajax_command_invoke("input.schedule_milestone", 'val',array($storage_project['schedule_milestone']));
  $commands[] = ajax_command_invoke("input.schedule_original", 'val',array($originalDate)); 
  $commands[] = ajax_command_invoke("input.schedule_projected", 'val',array($projectedDate));
  $commands[] = ajax_command_invoke("input.schedule_actual", 'val',array($actualDate));
  $commands[] = ajax_command_invoke("select.program-schedule-status", 'val',array($storage_project['program-schedule-status']));
  $commands[] = ajax_command_invoke("select.program-schedule-status", 'trigger',array('change'));
  
  $triggerId = $scheduleNode->field_project_reference['und'][0]['nid'];
  $commands[] = ajax_command_html("#prgram-schedule-listing-table", get_schedule_listing_table_data($triggerId)); 
  }
  else{
  if((isset($_SESSION['ACTIVEPROJECT']) && $_SESSION['ACTIVEPROJECT']!=$triggeringElement['#value']) || (!isset($_SESSION['ACTIVEPROJECT'])) || (empty($_SESSION['ACTIVEPROJECT']))){
    $_SESSION['ACTIVEPROJECT'] = $triggeringElement['#value'];    
  }
  // Check if this project is in lock state
  // From the setting tab
  $queryLock = db_select('m6connect_project_default_milestone_lock_date', 'pdm');
    $queryLock->join('realname', 'r', 'r.uid=pdm.user_uid');
    $queryLock->fields('pdm', array('id'));
    $queryLock->condition('pdm.company_nid', $company->nid, '=');
    $queryLock->condition('pdm.status', 1,'=');
    $queryLock->condition('pdm.project_id',$triggeringElement['#value'],'=');
    $getLockStatus = $queryLock->execute()->fetchField(); 
    if(!empty($getLockStatus)) {
    // Fill the data for all the default milestome field
    $query = db_select('node','n');     
    $query->join('field_data_field_project_reference','pr','n.nid=pr.entity_id');    
    $query->join('field_data_field_default_milestone_status','ms','n.nid=ms.entity_id');
    $query->join('og_membership','om','om.etid=n.nid AND om.entity_type=:entityType', array(':entityType'=>'node'));
    $query->fields('n',array('nid'));
    $query->condition('n.type', 'project_schedule', '=');
    $query->condition('om.gid', $company->nid, '=');
    $query->condition('pr.field_project_reference_nid', $triggeringElement['#value'], '=');        
    $query->condition('ms.field_default_milestone_status_value', 'true', '=');
    $getPreVSch = $query->execute()->fetchField();    
    $defaultMilNode = node_load($getPreVSch);
    
    $query = db_select('m6connect_project_default_milestone', 'pdm');
    $query->join('realname', 'r', 'r.uid=pdm.user_uid');
    $query->fields('pdm', array('id', 'milestone_title','user_uid'));
    $query->fields('r', array('realname'));         
    $query->condition('pdm.company_nid', $company->nid, '=');
    $query->orderBy('pdm.timestamp', 'ASC');
    $getMilestones = $query->execute()->fetchAll(); 
    
    // Get the milestone and add default value
    if(!empty($getPreVSch)) { 
      foreach($getMilestones as $milKey => $milVal) {
      $mileOriginalDate = isset($defaultMilNode->field_schedule_original['und'])?date('m/d/Y', strtotime($defaultMilNode->field_schedule_original['und'][0]['value'])):'';
      $mileProjectedDate = isset($defaultMilNode->field_schedule_projected['und'])?date('m/d/Y', strtotime($defaultMilNode->field_schedule_projected['und'][0]['value'])):'';
      $mileActualDate = isset($defaultMilNode->field_schedule_actual['und'])?date('m/d/Y', strtotime($defaultMilNode->field_schedule_actual['und'][0]['value'])):'';
      $commands[] = ajax_command_invoke('input[type="checkbox"].in_report_'.$milKey,'removeAttr',array('checked')); 
      $commands[] = ajax_command_invoke("input.schedule_original_".$milKey, 'val',array($mileOriginalDate));  
      $commands[] = ajax_command_invoke("input.schedule_projected_".$milKey, 'val',array($mileProjectedDate));
      $commands[] = ajax_command_invoke("input.schedule_actual_".$milKey, 'val',array($mileActualDate));    
    }
    }
    //$commands[] = ajax_command_html("#prgram-default-schedule-listing-table", get_default_schedule_listing_table_data($triggeringElement['#value'])); 
    $commands[] = ajax_command_invoke('input[type="checkbox"].in_report','removeAttr',array('checked'));  
    $commands[] = ajax_command_invoke("input.schedule_milestone", 'val',array(''));
    $commands[] = ajax_command_invoke("input.schedule_original", 'val',array($mileOriginalDate));
    $commands[] = ajax_command_invoke("input.schedule_original", 'attr',array('disabled','disabled'));
    $commands[] = ajax_command_html('#lock-status-container', '<div class="description">The original date cannot be changed as the project is Locked.<br> Please Contact your Project Manger for furthur access.</div>'); 
    $commands[] = ajax_command_invoke("input.schedule_projected", 'val',array(''));
    $commands[] = ajax_command_invoke("input.schedule_actual", 'val',array(''));
    $commands[] = ajax_command_invoke("select.program-schedule-status", 'val',array(''));
  }
  else {
    // Check if this project is in lock state
    // From the setting tab
    $queryUnLock = db_select('m6connect_project_default_milestone_lock_date', 'pdm');
      $queryUnLock->fields('pdm', array('id','created','duration'));
      $queryUnLock->condition('pdm.company_nid', $company->nid, '=');
      $queryUnLock->condition('pdm.status', 0,'=');
    $queryUnLock->condition('pdm.duration', 0,'!=');
      $queryUnLock->condition('pdm.project_id',$triggeringElement['#value'],'=');
      $getUnLockStatus = $queryUnLock->execute()->fetchAll();
    $query = db_select('m6connect_project_default_milestone', 'pdm');
    $query->join('realname', 'r', 'r.uid=pdm.user_uid');
    $query->fields('pdm', array('id', 'milestone_title','user_uid'));
    $query->fields('r', array('realname'));         
    $query->condition('pdm.company_nid', $company->nid, '=');
    $query->orderBy('pdm.timestamp', 'ASC');
    $getMilestones = $query->execute()->fetchAll();
    foreach($getMilestones as $milKey => $milVal) {
      $commands[] = ajax_command_invoke("input.schedule_original_".$milKey, 'val',array('')); 
      $commands[] = ajax_command_invoke("input.schedule_projected_".$milKey, 'val',array(''));
      $commands[] = ajax_command_invoke("input.schedule_actual_".$milKey, 'val',array(''));   
    }
    $commands[] = ajax_command_invoke('input[type="checkbox"].in_report','removeAttr',array('checked'));  
    $commands[] = ajax_command_invoke("input.schedule_milestone", 'val',array(''));
    $commands[] = ajax_command_invoke("input.schedule_original", 'val',array(''));
    $commands[] = ajax_command_invoke("input.schedule_projected", 'val',array(''));
    $commands[] = ajax_command_invoke("input.schedule_actual", 'val',array(''));
    $commands[] = ajax_command_invoke("select.program-schedule-status", 'val',array(''));
    if(!empty($getUnLockStatus)) {
      //$lockDate = date('m-d-Y',$getUnLockStatus[0]->created, '+5days');   
      $getCurrentDate = date('m-d-Y');
    $date = strtotime("+4 day", $getUnLockStatus[0]->created);
        $lockDate = date("m-d-Y", $date);
    if($getCurrentDate > $lockDate) {
        $commands[] = ajax_command_invoke("input.schedule_original", 'attr',array('disabled','disabled'));
      $commands[] = ajax_command_html('#lock-status-container', '<div class="description">The original date cannot be changed as the project is Locked.<br> Please Contact your Project Manger for furthur access.</div>'); 
    }
    else {
      if($getUnLockStatus[0]->duration == 5) {
        $commands[] = ajax_command_html('#lock-status-container', '<div class="description">The original date is Unlocked for next '.$getUnLockStatus[0]->duration.'. Days</div>');
      }
      else {
        $commands[] = ajax_command_html('#lock-status-container', ''); 
      }
      $commands[] = ajax_command_invoke("input.schedule_original", 'removeAttr',array('disabled'));       
    }
    }
    else {
      $commands[] = ajax_command_invoke("input.schedule_original", 'removeAttr',array('disabled'));
    $commands[] = ajax_command_html('#lock-status-container', '');  
    }
  } 
  $commands[] = ajax_command_invoke(".project_schedule_ref_nid",'val',array(''));
  $commands[] = ajax_command_html("#prgram-schedule-listing-table", get_schedule_listing_table_data($triggeringElement['#value']));
  }
  return array('#type' => 'ajax', '#commands' => $commands);
}

function project_schedule_submit(&$form, &$form_state) {
  global $user; 
  global $company;  
  $formVal = $form_state['values'];   
  //Check for updated project or new one
  if($formVal['project_schedule_nid'] != '') {
    $scheduleNode = node_load($formVal['project_schedule_nid']);
  $scheduleNode->field_in_report['und'][0]['value'] = $formVal['in_report'][1];
  $scheduleNode->field_project_milestone['und'][0]['value'] = $formVal['schedule_milestone'];
  $scheduleNode->field_schedule_original['und'][0]['value'] = $formVal['schedule_original'];
  $scheduleNode->field_schedule_projected['und'][0]['value'] = $formVal['schedule_projected'];
  $scheduleNode->field_schedule_actual['und'][0]['value'] = $formVal['schedule_actual'];  
  // Status mark work
  if($formVal['status_mark_data_id'] != '') {
    $statusMarkId = node_load($formVal['status_mark_data_id']);
    $statusMarkId->field_schedule_status['und'][0]['value'] = $formVal['set-schedule-status'];
      field_attach_update('node', $statusMarkId);
    node_save($statusMarkId);
  }
  else {
    $scheduleNode->field_schedule_status['und'][0]['value'] = $formVal['set-schedule-status'];
  } 
    
  node_save($scheduleNode);
  drupal_goto('/program/schedule', array('query'=>array('pid' => $formVal['select-schedule'],'scid' => $scheduleNode->nid)));
  drupal_set_message('Schedule updated successfully!');
  }
  else {
    $node = new stdClass();
  $node->type = 'project_schedule';
  $node->title = date('m-d-Y H:i:s');
  $node->body['und'][0]['value'] = $formVal['safety_comment'];
  $node->uid = $user->uid;
  $node->language = en;
  $node->status = 1;
  $node->og_group_ref['und'][0]['target_id'] = $company->nid;
  $node->field_in_report['und'][0]['value'] = $formVal['in_report'][1];
  $node->field_project_milestone['und'][0]['value'] = $formVal['schedule_milestone'];
  $node->field_schedule_original['und'][0]['value'] = $formVal['schedule_original'];
  $node->field_schedule_projected['und'][0]['value'] = $formVal['schedule_projected'];
  $node->field_schedule_actual['und'][0]['value'] = $formVal['schedule_actual'];  
  // Status mark work
  if($formVal['status_mark_data_id'] != '') {
    $statusMarkId = node_load($formVal['status_mark_data_id']);
    $statusMarkId->field_schedule_status['und'][0]['value'] = $formVal['set-schedule-status'];
      field_attach_update('node', $statusMarkId);
    node_save($statusMarkId);
  }
  else {
    $node->field_schedule_status['und'][0]['value'] = $formVal['set-schedule-status'];
  } 
  
  $node->field_project_reference['und'][0]['nid'] = $formVal['select-schedule'];  
  node_save($node);
  drupal_goto('/program/schedule', array('query'=>array('pid' => $formVal['select-schedule'],'scid' => $node->nid)));
  drupal_set_message('New schedule created successfully!');    
  }
}

function get_schedule_listing_table_data($projectId=0){
  global $company;  
  drupal_add_js(drupal_get_path('module', 'm6connect_program') . '/js/m6connect_program.js');
  drupal_add_js(drupal_get_path('module', 'm6connect_program') . '/js/Prototype_Price_Format_0.1.js');
  $safetyList = _project_list_by_company($company->nid, 'project_safety');  
  $rows = array();
  $header = array(
  array('data'=>'In Report','class'=>array('text-center')),
  array('data'=>'Project Milestone','class'=>array('text-center')),
  array('data'=>'Original','class'=>array('text-center')),
  array('data'=>'Projected','class'=>array('text-center')),
  array('data'=>'Actual','class'=>array('text-center')),
  array('data'=>'Action','class'=>array('text-center')),
  );
  $query= db_select('field_data_field_project_reference','pr');
  $query->fields('pr', array('entity_id'));
  $query->condition('pr.field_project_reference_nid', $projectId, '=');
  $query->condition('pr.bundle','project_schedule','=');
  $getScheduleNodes = $query->execute()->fetchAll();   
  if(!empty($getScheduleNodes)){    
    foreach($getScheduleNodes as $scheduleId => $scheduleVal){
    $scheduleNode = node_load($scheduleVal->entity_id);
    $inReport = isset($scheduleNode->field_in_report['und'])?$scheduleNode->field_in_report['und'][0]['value']:'No';
    $projectMilstone = isset($scheduleNode->field_project_milestone['und'])?$scheduleNode->field_project_milestone['und'][0]['value']:'None';
    $originalDate = $scheduleNode->field_schedule_original['und'][0]['value']!= ''?date('m/d/Y', strtotime($scheduleNode->field_schedule_original['und'][0]['value'])):'None';
    $projectedDate = $scheduleNode->field_schedule_projected['und'][0]['value']!= ''?date('m/d/Y', strtotime($scheduleNode->field_schedule_projected['und'][0]['value'])):'None';
    $actualDate = $scheduleNode->field_schedule_actual['und'][0]['value']!= ''?date('m/d/Y', strtotime($scheduleNode->field_schedule_actual['und'][0]['value'])):'None';
    //$action = l('[Edit]', 'edit/'.$scheduleNode->nid,array('attributes' => array('class' => 'edit-schedule-detail', 'for' => $scheduleNode->nid))).' '. l('[Delete]', 'node/'.$scheduleNode->nid.'/delete');
    
     $action = '<div class="project-action">
            <div class="btn-group"><div class="dropdown">
                <button id="dLabel" class="btn btn-success" type="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"> Actions</button>
              <ul class="dropdown-menu" role="menu" aria-labelledby="dLabel">
                <li>'.l('Edit', 'edit/'.$scheduleNode->nid,array('attributes' => array('class' => 'edit-schedule-detail', 'for' => $scheduleNode->nid))).'</li>
                <li>'.l('Delete', url('node-delete/nojs/'.$scheduleNode->nid), array( 'external'=>TRUE, 'attributes'=> array('class'=>array('use-ajax ctools-modal-assign-dashboard-popup-style ctools-use-modal'))) ).'</li>
              </ul>
              </div>
            </div>
            </div>';
          
    
    $rows[] = array(
      'data' => array($inReport==1?'Yes':'No',ucwords($projectMilstone),$originalDate,$projectedDate,$actualDate,$action),
      //'class' => array('custom-odd'),
    );
    }   
  }
  return theme('table', array('header'=>$header,'rows'=>$rows,'empty'=>'No Schedule created yet','attributes'=>array('class'=>array('table','m6connect-custom-table','m6connect-custom-program-table','m6connect-program-safety-table','table-hover','table-bordered','text-center'))));
} 
// ====================
// End Schedule Section

// Start photos section
// ====================
function program_project_photos_content(){
  global $company;    
  $getEstimateByCompany = _project_list_by_company($company->nid, 'project_management');    
  reset( $array );
  $firstProject = key( $getEstimateByCompany );   
  $elements = array();  
  $elements['photos_form']= array(
    '#markup' => drupal_render(drupal_get_form('program_project_photos_form')),
  '#prefix' => '<div class="clearfix margin-bottom-10">',
  '#suffix' => '</div>',
  );  
  /*$elements['prgram-photos-listing'] = array(
    '#markup' => get_photos_listing_table_data($firstProject),
  '#prefix' => '<div class="clearfix"><div class="prgram-photos-listing" id="prgram-photos-listing-table">',
  '#suffix' => '</div></div>',
   );*/
  return $elements;
}

function program_project_photos_form($form,&$form_state){
  global $user,$company;      
  drupal_add_js(drupal_get_path('module', 'm6connect_program') . '/js/m6connect_program.js');
  drupal_add_js(drupal_get_path('module', 'm6connect_program') . '/js/Prototype_Price_Format_0.1.js');
  // Get project list by company  
  $getProjectByCompany = _project_list_by_company($company->nid, 'project_management');
  //$projectListByCom = array('0' => '- None -');
  foreach($getProjectByCompany as $key => $val) {
    $projectListByCom[$key] = $val;
  }  
  $form['#attributes']['class'] = array('program_project_photos_form');  
  $form['#attributes']['enctype'] = "multipart/form-data";    
  $form['select-project-photos'] = array(
    '#type'=>'select',
  '#title'=> 'Select Project',
  '#options' => $projectListByCom,
  '#attributes' => array('class'=> array('form-control project-program-photos-sel')),
  /*'#ajax' => array(
    'callback'=> 'change_program_photos_callback',
    'wrapper' => 'project_program_photos_main_container',
    //'effect' => 'fade',
  ),*/
  '#prefix' => '<div class="clearfix"><div class="pull-left form-inline">',
  '#suffix' => '</div></div>',
  );  
  $form['prgram-project-menu-items'] = array(
    '#markup' => program_project_menu_links_content(),
  '#prefix' => '<div class="clearfix">',
  '#suffix' => '</div>',
  );  
  $form['main-container']= array(
    '#type' => 'container',
  '#attributes' => array('class'=>array('row')),
  '#prefix' => '<div class="clearfix margin-bottom-10"><div id="project_program_photos_main_container" class="project-photos-container project-detail">',
  '#process' => array('project_program_photos_main_container_process'), 
  '#suffix' => '</div></div>'
  );    
  $form['submit'] = array(
    '#type' => 'submit',
  '#value' => 'Save',
  '#submit' => array('project_photos_submit'),
  );
  return $form; 
}

function change_program_photos_callback($form,$form_state){
  $commands = array();
  $triggeringElement = $form_state['triggering_element'];
  if(!empty($triggeringElement['#value'])){         
    //$commands[] = ajax_command_replace("#project_program_photos_main_container", render($form['main-container']));    
    $commands[] = ajax_command_html("#prgram-photos-listing-table", get_photos_listing_table_data($triggeringElement['#value']));   
  }
  return array('#type' => 'ajax', '#commands' => $commands);
}

function project_program_photos_main_container_process($element, &$form_state) {
  $defaultValues = $form_state['storage_project_photos'];
  $element['main-container']['full-container']= array(
    '#type' => 'container',
  '#attributes' => array('class'=>array('col-md-12','col-sm-12','col-xs-12','project-details-full','margin-bottom-10')),
  '#weight' => 3,
  );    
  $element['main-container']['full-container']['general_info_images'] = array(
    '#type' => 'fieldset',
    '#title' => t('General Information Images'),
  //'#title_display' => 'invisible',
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  '#prefix' => '<div id="project-general-info-image-container">',
  '#suffix' => '</div>'
  );
  
  $element['main-container']['full-container']['project_description_images'] = array(
    '#type' => 'fieldset',
    '#title' => t('Project Description Images'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $element['main-container']['full-container']['project_safety_images'] = array(
    '#type' => 'fieldset',
    '#title' => t('Project Safety Images'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );  
  $element['main-container']['full-container']['project_module_images'] = array(
    '#type' => 'fieldset',
    '#title' => t('Project Module Images'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  ); 
  $element['main-container']['full-container']['project_add_images'] = array(
    '#type' => 'fieldset',
    '#title' => t('Project Additional Images'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  ); 
  
  $getPhotoNode = '';
  if(isset($_GET['pid'])) {
    $porjId = check_plain($_GET['pid']);
  $query = db_select('node','n'); 
    $query->fields('n',array('nid'));   
    $query->join('field_data_field_project_reference','pr','n.nid=pr.entity_id');
    $query->condition('pr.field_project_reference_nid', $porjId, '=');
    $query->condition('n.type', 'project_photos', '=');
    $getPhotoNode = $query->execute()->fetchField();
  $getPhotoNodeData = node_load($getPhotoNode);   
  
  $getGeneralImageSrc = isset($getPhotoNodeData->field_group_information['und'])?image_style_url('thumbnail', $getPhotoNodeData->field_group_information['und'][0]['uri']):'';
  $getDescImageSrc = isset($getPhotoNodeData->field_project_description_images['und'])?image_style_url('thumbnail', $getPhotoNodeData->field_project_description_images['und'][0]['uri']):''; 
  $getSafetyImageSrc = isset($getPhotoNodeData->field_project_safety_images['und'])?image_style_url('thumbnail', $getPhotoNodeData->field_project_safety_images['und'][0]['uri']):'';
  $getModuleImageSrc = isset($getPhotoNodeData->field_project_module_images['und'])?image_style_url('thumbnail', $getPhotoNodeData->field_project_module_images['und'][0]['uri']):'';   
  if(isset($getPhotoNodeData->field_project_additional_images['und'])) {  
    
    $getAdditionalImageSrc = array();
    foreach($getPhotoNodeData->field_project_additional_images['und'] as $addKey => $addVal) {
      $getAdditionalImageSrc[] = '<img src="'.image_style_url('thumbnail', $getPhotoNodeData->field_project_additional_images['und'][$addKey]['uri']).'" style="padding:4px;">'; 
    }   
  }
  }
      
  $element['photo_nid'] = array(
    '#type' => 'hidden', 
  '#default_value' => $getPhotoNode,
  '#attributes'=> array('class'=> array('photo_nid')),
  );    
  /*$entity = new stdClass();
  $entity->type = 'project_photos';
  node_object_prepare($entity); 
  $generel_info_images_form = $element;
  if($getPhotoNode != '' && is_numeric($getPhotoNode)) {
    $entity = node_load($getPhotoNode);  
  }
  field_attach_form('node', $entity, $generel_info_images_form, $form_state);  
  $element['main-container']['full-container']['general_info_images']['f1'] = $generel_info_images_form['field_group_information'];
  $element['main-container']['full-container']['project_description_images']['f2'] = $generel_info_images_form['field_project_description_images'];
  $element['main-container']['full-container']['project_safety_images']['f3'] = $generel_info_images_form['field_project_safety_images'];
  $element['main-container']['full-container']['project_module_images']['f4'] = $generel_info_images_form['field_project_module_images'];
  $element['main-container']['full-container']['project_add_images']['f5'] = $generel_info_images_form['field_project_additional_images'];*/
  $element['main-container']['full-container']['general_info_images']['f1'] = array(
    '#type' => 'file',
  '#title' => 'General Information Image',
  '#upload_location' => 'public://',
  '#field_prefix' => $getGeneralImageSrc != ''?'<div class="image-preview"><img src="'.$getGeneralImageSrc.'"></div>':'',
  '#default_value' => $getGeneralInfoImage,
  );
  $element['main-container']['full-container']['project_description_images']['f2'] = array(
    '#type' => 'file',
  '#title' => 'Project Description Image',
  '#upload_location' => 'public://',
  '#field_prefix' => $getDescImageSrc != ''?'<div class="image-preview"><img src="'.$getDescImageSrc.'"></div>':'',
  '#default_value' => $getDescImage,
  );
  $element['main-container']['full-container']['project_safety_images']['f3'] = array(
    '#type' => 'file',
  '#title' => 'Project Safety Image',
  '#upload_location' => 'public://',
  '#field_prefix' => $getSafetyImageSrc != ''?'<div class="image-preview"><img src="'.$getSafetyImageSrc.'"></div>':'',
  '#default_value' => $getSafetyImage,
  );
  $element['main-container']['full-container']['project_module_images']['f4'] = array(
    '#type' => 'file',
  '#title' => 'Project Module Image',
  '#upload_location' => 'public://',
  '#field_prefix' => $getModuleImageSrc != ''?'<div class="image-preview"><img src="'.$getModuleImageSrc.'"></div>':'',
  '#default_value' => $getModuleImage,
  );  
  $element['main-container']['full-container']['project_add_images']['f5'] = array(
    '#type' => 'file',
  '#title' => 'Project Additional Image',
    '#name' => 'files[]',
  '#upload_location' => 'public://',  
  '#field_prefix' => '<div class="image-preview">'.implode(',', $getAdditionalImageSrc).'</div>',
  '#description' => t('Use CTRL + Click to choose multiple Project Photos! '),
    '#attributes' => array('multiple' => 'multiple'),
  );
    
  return $element;
}

function program_project_photos_form_validate($form, &$form_state) {       
  if($_FILES['files']['name']['f1'] != '')  {
    $file = file_save_upload('f1', array(
      'file_validate_is_image' => array(),
      'file_validate_extensions' => array('jpg jpeg gif png txt doc docx xls xlsx pdf ppt pptx pps ppsx odt ods odp mp3 mov mp4 m4a m4v mpeg avi ogg oga ogv weba webp webm html csv xls'),
  ));
  if ($file) {    
    if ($file = file_move($file, 'public://')) {
    $form_state['values']['f1'] = $file;
      } 
  }
  }
  else if ($form_state['values']['f1'] != '') {
    $form_state['values']['f1'] = file_load($form_state['values']['f1']);
  }
  if($_FILES['files']['name']['f2'] != '')  {
    $file = file_save_upload('f2', array(
      'file_validate_is_image' => array(),
      'file_validate_extensions' => array('jpg jpeg gif png txt doc docx xls xlsx pdf ppt pptx pps ppsx odt ods odp mp3 mov mp4 m4a m4v mpeg avi ogg oga ogv weba webp webm html csv xls'),
  ));
  if ($file) {    
    if ($file = file_move($file, 'public://')) {
    $form_state['values']['f2'] = $file;
      } 
  }
  }
  else if ($form_state['values']['f2'] != '') {
    $form_state['values']['f2'] = file_load($form_state['values']['f2']);
  }
  if($_FILES['files']['name']['f3'] != '')  {
    $file = file_save_upload('f3', array(
      'file_validate_is_image' => array(),
      'file_validate_extensions' => array('jpg jpeg gif png txt doc docx xls xlsx pdf ppt pptx pps ppsx odt ods odp mp3 mov mp4 m4a m4v mpeg avi ogg oga ogv weba webp webm html csv xls'),
  ));
  if ($file) {    
    if ($file = file_move($file, 'public://')) {
    $form_state['values']['f3'] = $file;
      } 
  }
  }
  else if ($form_state['values']['f3'] != '') {
    $form_state['values']['f3'] = file_load($form_state['values']['f3']);
  }
  if($_FILES['files']['name']['f4'] != '')  {
    $file = file_save_upload('f4', array(
      'file_validate_is_image' => array(),
      'file_validate_extensions' => array('jpg jpeg gif png txt doc docx xls xlsx pdf ppt pptx pps ppsx odt ods odp mp3 mov mp4 m4a m4v mpeg avi ogg oga ogv weba webp webm html csv xls'),
  ));
  if ($file) {    
    if ($file = file_move($file, 'public://')) {
    $form_state['values']['f4'] = $file;
      } 
  }
  }
  else if ($form_state['values']['f4'] != '') {
    $form_state['values']['f4'] = file_load($form_state['values']['f4']);
  } 
  if($_FILES['files']['name'][0] != '') {
  $fileCount = count(array_slice($_FILES['files']['name'], 4));
  for ($i = 0; $i < $fileCount; $i++) {
      $file = file_save_upload($i, array(
      'file_validate_is_image' => array(),
      'file_validate_extensions' => array('jpg jpeg gif png txt doc docx xls xlsx pdf ppt pptx pps ppsx odt ods odp mp3 mov mp4 m4a m4v mpeg avi ogg oga ogv weba webp webm html csv xls'),
    ));
    if ($file) {    
      if ($file = file_move($file, 'public://')) {
      $form_state['values']['f5'][$i] = $file;
        } 
    }
  }
  }
}

function project_photos_submit(&$form, &$form_state) {
  global $user; 
  global $company;  
  $formVal = $form_state['values'];    
  //Check for updated project or new one  
  if($formVal['photo_nid'] != '') {
    $photosNode = node_load($formVal['photo_nid']);
  if(!empty($formVal['f1'])) {
    $photosNode->field_group_information['und'][0] = (array)file_load($formVal['f1']->fid);
  }
  if(!empty($formVal['f2'])) {
    $photosNode->field_project_description_images['und'][0] = (array)file_load($formVal['f2']->fid);
  }
  if(!empty($formVal['f3'])) {
    $photosNode->field_project_safety_images['und'][0] = (array)file_load($formVal['f3']->fid);
  }
  if(!empty($formVal['f4'])) {
    $photosNode->field_project_module_images['und'][0] = (array)file_load($formVal['f4']->fid);
  }
  if(isset($formVal['f5']) && !empty($formVal['f5'])) {
    foreach ($form_state['values']['f5'] as $imgkey => $file) {
      $new_file = file_load($file->fid);
      $photosNode->field_project_additional_images['und'][$imgkey] = (array)$new_file;  
    }     
  }
  node_save($photosNode);
  drupal_set_message('Project Photos Updated Successfully!');
  }
  else {
    $node = new stdClass();
  $node->type = 'project_photos';
  $node->title = 'Project Photos'.date('m-d-Y H:i:s');
  $node->uid = $user->uid;
  $node->language = en;
  $node->status = 1;
  $node->og_group_ref['und'][0]['target_id'] = $company->nid;
  $node->field_project_reference['und'][0]['nid'] = $formVal['select-project-photos'];  
  // Saving images for Groupinformation
  if(!empty($formVal['f1'])) {
    $node->field_group_information['und'][0] = (array)file_load($formVal['f1']->fid);
  }
  if(!empty($formVal['f2'])) {
    $node->field_project_description_images['und'][0] = (array)file_load($formVal['f2']->fid);
  }
  if(!empty($formVal['f3'])) {
    $node->field_project_safety_images['und'][0] = (array)file_load($formVal['f3']->fid);
  }
  if(!empty($formVal['f4'])) {
    $node->field_project_module_images['und'][0] = (array)file_load($formVal['f4']->fid);
  }
  
  // Saving images for Project Additional
  if(isset($formVal['f5']) && !empty($formVal['f5'])) {
    foreach ($form_state['values']['f5'] as $imgkey => $file) {
      $new_file = file_load($file->fid);
      $node->field_project_additional_images['und'][$imgkey] = (array)$new_file;  
    }     
  }
  
  node_save($node);
  drupal_set_message('New Photos section created successfully!');
  }
}

function get_photos_listing_table_data($projectId=0){
  global $company;  
  drupal_add_js(drupal_get_path('module', 'm6connect_program') . '/js/m6connect_program.js');
  drupal_add_js(drupal_get_path('module', 'm6connect_program') . '/js/Prototype_Price_Format_0.1.js');  
  $rows = array();
  $header = array(
  array('data'=>'General Information Images','class'=>array('text-center')),
  array('data'=>'Project Description Images','class'=>array('text-center')),
  array('data'=>'Project Safety Images','class'=>array('text-center')),
  array('data'=>'Project Module Images','class'=>array('text-center')),
  array('data'=>'Project Additional Images','class'=>array('text-center')),
  array('data'=>'Action','class'=>array('text-center')),
  );
  // Get general infromation image
   $query= db_select('node','n'); 
   $query->join('field_data_field_group_information','gi','gi.entity_id = n.nid');
   $query->join('field_data_field_project_reference','pr','n.nid=pr.entity_id');
   $query->fields('gi',array('field_group_information_fid'));
   $query->condition('pr.field_project_reference_nid', $projectId, '=');
   $generalInfoImage = $query->execute()->fetchAll();      
   $gerInfoImages = array();
   foreach($generalInfoImage as $giImageKey => $giImageVal) { 
     $fileData = file_load($generalInfoImage[$giImageKey]->field_group_information_fid); 
   $getImage = image_style_url('thumbnail',$fileData->uri);
   $gerInfoImages[] = '<img src="'.$getImage.'">';
   }
   // Get Project Description images image
   $query= db_select('node','n'); 
   $query->join('field_data_field_project_description_images','pd','pd.entity_id = n.nid');
   $query->join('field_data_field_project_reference','pr','n.nid=pr.entity_id');
   $query->fields('pd',array('field_project_description_images_fid'));
   $query->condition('pr.field_project_reference_nid', $projectId, '=');
   $proDescImage = $query->execute()->fetchAll();   
   $getdesImages = array();
   foreach($proDescImage as $pdImageKey => $pdImageVal) { 
     $fileData = file_load($proDescImage[$pdImageKey]->field_project_description_images_fid); 
   $getImage = image_style_url('thumbnail',$fileData->uri);
   $getdesImages[] = '<img src="'.$getImage.'">';
   }
   // Get Project Safety images image
   $query= db_select('node','n'); 
   $query->join('field_data_field_project_safety_images','si','si.entity_id = n.nid');
   $query->join('field_data_field_project_reference','pr','n.nid=pr.entity_id');
   $query->fields('si',array('field_project_safety_images_fid'));
   $query->condition('pr.field_project_reference_nid', $projectId, '=');
   $proSafetyImage = $query->execute()->fetchAll();   
   $getSafImages = array();
   foreach($proSafetyImage as $siImageKey => $siImageVal) { 
     $fileData = file_load($proSafetyImage[$siImageKey]->field_project_safety_images_fid); 
   $getImage = image_style_url('thumbnail',$fileData->uri);
   $getSafImages[] = '<img src="'.$getImage.'">';
   }
   // Get Project Module images image
   $query= db_select('node','n'); 
   $query->join('field_data_field_project_module_images','mi','mi.entity_id = n.nid');
   $query->join('field_data_field_project_reference','pr','n.nid=pr.entity_id');
   $query->fields('mi',array('field_project_module_images_fid'));
   $query->condition('pr.field_project_reference_nid', $projectId, '=');
   $proModuleImage = $query->execute()->fetchAll();   
   $getModImages = array();
   foreach($proModuleImage as $miImageKey => $miImageVal) { 
     $fileData = file_load($proModuleImage[$miImageKey]->field_project_module_images_fid); 
   $getImage = image_style_url('thumbnail',$fileData->uri);
   $getModImages[] = '<img src="'.$getImage.'">';
   }
   // Get Project Additional image
   $query= db_select('node','n'); 
   $query->join('field_data_field_project_additional_images','ai','ai.entity_id = n.nid');
   $query->join('field_data_field_project_reference','pr','n.nid=pr.entity_id');
   $query->fields('ai',array('field_project_additional_images_fid'));
   $query->condition('pr.field_project_reference_nid', $projectId, '=');
   $proAdditionalImage = $query->execute()->fetchAll();   
   $getAddImages = array();
   foreach($proAdditionalImage as $aiImageKey => $aiImageVal) { 
     $fileData = file_load($proAdditionalImage[$aiImageKey]->field_project_additional_images_fid); 
   $getImage = image_style_url('thumbnail',$fileData->uri);
   $getAddImages[] = '<img src="'.$getImage.'">';
   }   
   $action = '<div class="project-action">
            <div class="btn-group"><div class="dropdown">
                <button id="dLabel" class="btn btn-success" type="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"> Actions</button>
              <ul class="dropdown-menu" role="menu" aria-labelledby="dLabel">
                <li>'.l('Edit', 'edit/'.$scheduleNode->nid,array('attributes' => array('class' => 'edit-schedule-detail', 'for' => $scheduleNode->nid))).'</li>
                <li>'.l('Delete', url('node-delete/nojs/'.$scheduleNode->nid), array( 'external'=>TRUE, 'attributes'=> array('class'=>array('use-ajax ctools-modal-assign-dashboard-popup-style ctools-use-modal'))) ).'</li>
              </ul>
              </div>
            </div>
            </div>';
          
    
    $rows[] = array(implode(',',$gerInfoImages),implode(',',$getdesImages),implode(',',$getSafImages),implode(',',$getModImages),implode(',',$getAddImages),$action);  
  return theme('table', array('header'=>$header,'rows'=>$rows,'empty'=>'No Photos uploaded yet','attributes'=>array('class'=>array('table','m6connect-custom-table','m6connect-custom-program-table','m6connect-program-photos-table','table-hover','table-bordered','text-center'))));
} 
// ====================
// End photos section
// Start asset Slide (Tab) Section
// ==================================
function program_project_assets_content(){
  global $company;
  if (arg(1) == 'cm') {
    $getEstimateByCompany = _project_list_by_company($company->nid, 'project_management', 'cmtrue');
  }
  else {
    $getEstimateByCompany = _project_list_by_company($company->nid, 'project_management', 'cmtrue');
  }
  reset( $getEstimateByCompany );
  $firstProject = key( $getEstimateByCompany );   
  $elements = array();  
  $elements['assets_form']= array(
    '#markup' => drupal_render(drupal_get_form('program_project_asset_form')),
    '#prefix' => '<div class="clearfix margin-bottom-10">',
    '#suffix' => '</div>',
  );  
  $elements['prgram-assets-listing'] = array(
    '#markup' => get_default_assets_listing_table_data($firstProject),
    '#prefix' => '<div class="clearfix"><div class="prgram-asset-listing" id="prgram-aset-listing-table">',
    '#suffix' => '</div></div>',
   ); 
  return $elements;
}

function program_project_asset_form($form,&$form_state){
  global $user;   
  global $company;
  $query = db_select('node','n');     
  $query->join('og_membership','om','om.etid=n.nid AND om.entity_type=:entityType', array(':entityType'=>'node'));
  $query->fields('n',array('nid','title'));
  $query->condition('n.type', 'program_assets', '=');
  $query->condition('om.gid', $company->nid, '=');
  $getAssetDataList = $query->execute()->fetchAllKeyed(0,1);
  drupal_add_js(drupal_get_path('module', 'm6connect_program') . '/js/m6connect_program.js');
  // Get project list by company
  if (arg(1) == 'cm') {
    $getProjectByCompany = _project_list_by_company($company->nid, 'project_management', 'cmtrue');
  }
  else {
    $getProjectByCompany = _project_list_by_company($company->nid, 'project_management', 'cmfalse');
  }
  $form['#attributes']['class'] = array('program_project_asset_form');  
  $form['select-assets'] = array(
    '#type' => 'select',
    '#title'=> 'Select Project',
    '#options' => $getProjectByCompany,
    '#default_value' => isset($_SESSION['ACTIVEPROJECT'])?$_SESSION['ACTIVEPROJECT']:'',
    '#attributes' => array('class'=> array('form-control project-program-assets-sel')),
    '#ajax' => array(
      'callback'=> 'change_program_assets_callback',
      'wrapper' => 'project_program_assets_main_container',
      'effect' => 'fade',
    ),
    '#prefix' => '<div class="clearfix"><div class="pull-left form-inline">',
    '#suffix' => '</div><div class="add-new-schedule-btn pull-right" id="add-schedule-button-custom">'. l('<input type="button" value="Add New Assets" class="form-submit new-record-cus-btn" />', '#', array('html' => TRUE, 'external' => TRUE, 'attributes' => array('class' => array('new-assets-link')))).'</div></div>',    
  );  
  $form['get-assets'] = array(
    '#type' => 'select',
    '#title'=> 'Select assets',
    '#options' => $getAssetDataList,
    '#attributes' => array('class'=> array('form-control project-program-sel-assets')),
    '#ajax' => array(
      'callback'=> 'change_program_assets_callback',
      'wrapper' => 'project_program_assets_main_container',
      'effect' => 'fade',
    ),
    '#prefix' => '<div class="clearfix" style="display:none;"><div class="pull-left form-inline">',
    '#suffix' => '</div></div>',
  );  
  $form['prgram-project-menu-items'] = array(
    '#markup' => program_project_menu_links_content(),
    '#prefix' => '<div class="clearfix">',
    '#suffix' => '</div>',
  );
  $form_state['storage_project_assets'] = array();
  if(isset($form_state['values'],$form_state['input'],$form_state['triggering_element'],$form_state['triggering_element']['#type'],$form_state['triggering_element']['#name']) && $form_state['triggering_element']['#type']=='select' && $form_state['triggering_element']['#name']=='get-assets'){
    $nodeNid = $triggeringElement['#value'];
    $scheduleNode = node_load($nodeNid);
    $form_state['storage_project_assets'] = array(
      'schedule_milestone' => isset($scheduleNode->field_project_milestone['und'])?$scheduleNode->field_project_milestone['und'][0]['value']:'',
      'schedule_original' => isset($scheduleNode->field_schedule_original['und'])?$scheduleNode->field_schedule_original['und'][0]['value']:'',
      'schedule_projected' => isset($scheduleNode->field_schedule_projected['und'])?$scheduleNode->field_schedule_projected['und'][0]['value']:'',
      'schedule_actual' => isset($scheduleNode->field_schedule_actual['und'])?$scheduleNode->field_schedule_actual['und'][0]['value']:'',
      'program-schedule-status' => isset($scheduleNode->field_schedule_status['und'])?$scheduleNode->field_schedule_status['und'][0]['value']:'',
    );    
  }    
  $form['main-container']= array(
    '#type' => 'container',
    '#prefix' => '<div class="clearfix margin-bottom-10"><div id="project_program_asset_main_container" class="project-assets project-detail">',  
    '#process' => array('project_program_assets_main_container_process'),
  );    
  // Attaching a cancel button on form.
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Save',
    '#validate' => array('program_modify_asset_form_custom_validate'),
    '#submit' => array('project_assets_submit'),
    '#attributes' => array('class'=>array('asset-submit-custom-btn')),
    '#prefix' => '<div class="custom-reset-button-schedule-div">',
  );
  $form['cancel'] = array(
    '#type' => 'markup',
    '#markup' => '<input type="button" value="Cancel" class="form-submit custom-reset-button-schedule">',
  '#suffix' => '</div></div></div>',
  );
  return $form; 
}

function project_program_assets_main_container_process($element, &$form_state) {
  global $company;  
  drupal_add_js(drupal_get_path('module', 'm6connect_program') . '/js/m6connect_program.js');
  $query= db_select('m6connect_project_asset_category','ac'); 
  $query->fields('ac',array('id','category_description'));
  $query->condition('ac.company_nid',$company->nid,'=');
  $getAssetData = $query->execute()->fetchAllKeyed(0,1);
  $comppanyListing = array();
  if(empty($form_state['project_spending_vender'])){
    $updatedComList = _get_all_organigation_mapping();  
    $form_state['project_spending_vender'] = $updatedComList;
    $_SESSION['project_spending_vender'] = $form_state['project_spending_vender'];
    $comppanyListing = $form_state['project_spending_vender']; 
  }
  $defaultValues = $form_state['storage_project_schedule'];         
  $element['main-container']['full-container']= array(
    '#type' => 'container',
    '#attributes' => array('class'=>array('col-md-12','col-sm-12','col-xs-12','row','project-details-full',)),
  );
  $element['main-container']['full-container']['full-container-inner-left'] = array(
    '#type' => 'container',
    '#attributes' => array('class'=>array('col-md-6','col-sm-6','col-xs-12','project-details-left','margin-bottom-10')),
  );  
  $element['main-container']['full-container']['full-container-inner-right'] = array(
    '#type' => 'container',
    '#attributes' => array('class'=>array('col-md-6','col-sm-6','col-xs-12','project-details-left','margin-bottom-10')),
  ); 
  $element['main-container']['left-container']['company_nid']= array(
    '#type' => 'hidden',
    '#title_display' => 'invisible',
    '#attributes' => array('class'=> array('form-control company_nid')),
  );
  $element['main-container']['left-container']['make_default']= array(
    '#type' => 'hidden',
    '#title_display' => 'invisible',
    '#attributes' => array('class'=> array('form-control make_default')),
  );    
  $element['main-container']['full-container']['project_asset_ref_nid']= array(
    '#type' => 'hidden',
    '#title_display' => 'invisible',
    '#attributes' => array('class'=> array('form-control project_asset_ref_nid')),
  );
  $element['main-container']['full-container']['project_asset_nid']= array(
    '#type' => 'hidden',
    '#title_display' => 'invisible',
    '#attributes' => array('class'=> array('form-control project_asset_nid')),  
  );
  $element['main-container']['full-container']['vendor_number_cust']= array(
    '#type' => 'hidden',
    '#title_display' => 'invisible',
    '#attributes' => array('class'=> array('form-control vendor_number_cust')),  
  );  
  $element['main-container']['full-container']['full-container-inner-left']['acquisition_date']= array(    
    '#title' => 'Acquisition Date',
    '#type' => 'date_popup',
    '#date_format' => 'm/d/Y',
    '#date_year_range' => '-3:+3',  
    '#attributes' => array('class'=> array('form-control acquisition_date'),'autocomplete' => 'off'),
    '#pre_render' => array('m6connect_programe_date_prerender'),
  '#default_value' => isset($defaultValues['acquisition_date'])?$defaultValues['acquisition_date']:'',  
    '#prefix' => '<div class="project-details-border"><div class="form-item clearfix">',
    '#suffix' => '</div>',
  );
  $element['main-container']['full-container']['full-container-inner-left']['asset_name']= array(
    '#type' => 'textfield',
    '#title' => 'Asset Name',
    '#attributes'=> array('class'=> array('form-control asset_name')),
    '#required' => TRUE,
    '#default_value' => isset($defaultValues['asset_name'])?$defaultValues['asset_name']:'',
    '#prefix' => '<div class="form-item clearfix">',
    '#suffix' => '</div>',
  );  
  $element['main-container']['full-container']['full-container-inner-left']['asset_number']= array(
    '#type' => 'textfield',
    '#title' => 'Asset Number',
    '#attributes'=> array('class'=> array('form-control asset_number password-field')),
    '#maxlength' => 30, 
    '#default_value' => isset($defaultValues['asset_number'])?$defaultValues['asset_number']:'',
    '#prefix' => '<div class="form-item clearfix">',
  '#suffix' => '</div>',  
  );
  $element['main-container']['full-container']['full-container-inner-left']['system_asset_type'] = array(
    '#type' => 'select',
    '#title' => 'Asset Category',
    '#options'=> $getAssetData, 
    '#empty_option' => '- Select -',
    '#attributes' => array('class'=> array('form-control system_asset_type')),
    '#default_value' => isset($defaultValues['system_asset_type'])?$defaultValues['system_asset_type']:'',  
    '#prefix' => '<div class="clearfix form-item">',
    '#suffix' => '</div>',
  );  
  $element['main-container']['full-container']['full-container-inner-left']['sin_num']= array(
    '#type' => 'textfield',
    '#title' => 'SIN Number',
    '#attributes'=> array('class'=> array('form-control sin_num')),
    '#default_value' => isset($defaultValues['sin_num'])?$defaultValues['sin_num']:'',
    '#prefix' => '<div class="form-item clearfix">',
    '#suffix' => '</div>',
  );
  $element['main-container']['full-container']['full-container-inner-left']['manuf_num']= array(
    '#type' => 'textfield',
    '#title' => 'Manufacturer Name',
    '#attributes'=> array('class'=> array('form-control manuf_num')),
    '#default_value' => isset($defaultValues['manuf_num'])?$defaultValues['manuf_num']:'',
    '#prefix' => '<div class="form-item clearfix">',
    '#suffix' => '</div>',
  );
  $element['main-container']['full-container']['full-container-inner-left']['model_number']= array(
    '#type' => 'textfield',
    '#title' => 'Model Number',
    '#attributes'=> array('class'=> array('form-control model_number')),
    '#default_value' => isset($defaultValues['model_number'])?$defaultValues['model_number']:'',
    '#prefix' => '<div class="form-item clearfix">',
    '#suffix' => '</div></div>',
  );       
  $element['main-container']['full-container']['full-container-inner-right']['asset_description'] = array(
    '#type' => 'textarea',
    '#rows' => 3,
    '#title' => 'Asset Description',
    '#attributes' => array('class'=> array('form-control', 'asset_description')),
    '#prefix' => '<div class="project-details-border"><div class="form-item clearfix">',
    '#suffix' => '</div>',
  );  
  $element['main-container']['full-container']['full-container-inner-right']['asset_vendor'] = array(
    '#type' => 'textfield',
    '#title' => 'Vendor Name',
    '#attributes'=> array('class'=> array('form-control asset_vendor','workflow-auto'),'placeholder'=>'Enter the vendor name'),    
    '#autocomplete_path' => 'commitment-company/autocomplete',
    '#ajax' => array(
      'callback' => 'spending_autocomplete_callback',
      'event' => 'blur',
      'wrapper' => 'workflow-container-section',
      'method' => 'replace',
      'effect' => 'fade',
    ),
    '#default_value' => $vendorVal, 
    '#prefix' => '<div class="row margin-5"><div class="col-md-6 padding-5 form-item"'.$defaultValues['asset_vendor'].'>',
    '#suffix' => '</div>',
  );
  $element['main-container']['full-container']['full-container-inner-right']['vendor_number'] = array(
    '#type' => 'textfield',
    '#title' => 'Vendor Number',
    '#attributes'=> array('class'=> array('form-control vendor_number','workflow-auto'),'placeholder'=>'Enter the vendor number'),    
    '#autocomplete_path' => 'vendor-number/autocomplete',
    '#ajax' => array(
      'callback' => 'vendor_number_autocomplete_callback',
      'event' => 'blur',
      'wrapper' => 'workflow-container-section',
      'method' => 'replace',
      'effect' => 'fade',
    ),
	'#disabled' => TRUE,
    '#default_value' => $vendorNumber, 
    '#prefix' => '<div class="col-md-6 padding-5 form-item"'.$defaultValues['vendor_number'].'>',
    '#suffix' => '</div></div>',
  );
  $element['main-container']['full-container']['full-container-inner-right']['pin_number']= array(
    '#type' => 'textfield',
    '#title' => 'Serial Number',
    '#attributes'=> array('class'=> array('form-control pin_number')),
    '#default_value' => isset($defaultValues['pin_number'])?$defaultValues['pin_number']:'',
    '#prefix' => '<div class="form-item clearfix">',
    '#suffix' => '</div>',
  );
  $element['main-container']['full-container']['full-container-inner-right']['current_asset_value']= array(
    '#type' => 'textfield',
    '#title' => 'Current Asset Value',
    '#disabled' => TRUE,
    '#attributes'=> array('class'=> array('form-control current_asset_value')),
    '#default_value' => isset($defaultValues['current_asset_value'])?$defaultValues['current_asset_value']:'',
    '#prefix' => '<div class="form-item clearfix">',
    '#suffix' => '</div>',
  );     
  $element['main-container']['full-container']['full-container-inner-right']['asset_attachment']= array(
    '#type' => 'file',
    '#title' => 'Attachment',
    '#name' => 'files[]',
    '#upload_location' => 'public://',  
    '#description' => t('Use CTRL + Click to choose multiple attachments.'),
    '#attributes' => array('multiple' => 'multiple'),    
    '#prefix' => '<div class="clearfix form-item" id="custom-etc-attach">',
    '#suffix' => '</div></div>',
  '#field_prefix' => '<div class="spending-image-preview"></div>',
  );
  $element['main-container']['full-container']['spending-table-date'] = array(
    '#markup' => '',
    '#prefix' => '<div class="clearfix margin-bottom-10" id="programe-spending-details-by-asset"><strong>Spending Associated</strong>',
    '#suffix' => '</div>',
  );
  return $element;
}

function change_program_assets_callback($form,&$form_state){
  global $company;  
  $commands = array();
  $triggeringElement = $form_state['triggering_element'];
  if(!empty($triggeringElement['#value']) && $triggeringElement['#name']=='get-assets'){      
    $assetNode = node_load($triggeringElement['#value']);
    $projectId = $assetNode->field_project_reference['und'][0]['nid'];    
    $storage_project = array(
      'asset_name' => $assetNode->title,    
      'asset_num_hash' => isset($assetNode->field_asset_number_hash‎['und'])?$assetNode->field_asset_number_hash‎['und'][0]['value']:'',
      'asset_description' => isset($assetNode->field_project_asset_description['und'])?$assetNode->field_project_asset_description['und'][0]['value']:'',
      'asset_sin_num' => isset($assetNode->field_project_asset_sin_number['und'])?$assetNode->field_project_asset_sin_number['und'][0]['value']:'',
      'manuf_name' => isset($assetNode->field_asset_manufacturer_name['und'])?$assetNode->field_asset_manufacturer_name['und'][0]['value']:'',
      'model_no' => isset($assetNode->field_asset_model_no['und'])?$assetNode->field_asset_model_no['und'][0]['value']:'',
      'system_asset_type' => isset($assetNode->field_system_asset_type['und'])?$assetNode->field_system_asset_type['und'][0]['value']:'',
      'asset_number' => isset($assetNode->field_system_asset_number['und'])?$assetNode->field_system_asset_number['und'][0]['value']:'',
      'current_asset_value' => isset($assetNode->field_current_asset_value['und'])?$assetNode->field_current_asset_value['und'][0]['value']:0.00,
      'asset_vendor' => isset($assetNode->field_asset_vendor['und'])?$assetNode->field_asset_vendor['und'][0]['value']:'',
      'pin_number' => isset($assetNode->field_asset_pin_number['und'])?$assetNode->field_asset_pin_number['und'][0]['value']:'',
    'make_default' => isset($assetNode->field_make_defaults['und'])?$assetNode->field_make_defaults['und'][0]['value']:'',
    'vendor_number' => isset($assetNode->field_vendor_number['und'])?$assetNode->field_vendor_number['und'][0]['value']:'',  
    'acquisition_date' => isset($assetNode->field_acquisition_date['und'])?$assetNode->field_acquisition_date['und'][0]['value']:'',
    );
    //@todo
    $_asset_cost = !empty($assetNode->field_asset_cost['und'][0]['value']) ? $assetNode->field_asset_cost['und'][0]['value'] : 0;
    $_asset_installation = !empty($assetNode->field_asset_installation['und'][0]['value']) ? $assetNode->field_asset_installation['und'][0]['value'] : 0;
    $_asset_outside_consultant = !empty($assetNode->field_asset_outside_consultant['und'][0]['value']) ? $assetNode->field_asset_outside_consultant['und'][0]['value'] : 0;
    $_asset_internal_charge = !empty($assetNode->field_asset_internal_charge['und'][0]['value']) ? $assetNode->field_asset_internal_charge['und'][0]['value'] : 0;
    $_asset_spread_amount = !empty($assetNode->field_asset_spread_amount['und'][0]['value']) ? $assetNode->field_asset_spread_amount['und'][0]['value'] : 0;
  $storage_project['current_asset_value'] = $_asset_cost + $_asset_installation + $_asset_outside_consultant + $_asset_internal_charge + $_asset_spread_amount;
  if($storage_project['asset_vendor'] != '' && is_numeric($storage_project['asset_vendor'])) {
      $venoderName = node_load($storage_project['asset_vendor'])->title;
    }
    else {
      $venoderName = $storage_project['asset_vendor'];
    }
    if(isset($assetNode->field_system_asset_attachment['und'])) {
    foreach($assetNode->field_system_asset_attachment['und'] as $addKey => $addVal) {
        $getFid = $assetNode->field_system_asset_attachment['und'][$addKey]['fid'];
    if(!empty($storage_project['make_default'])) {
      if($storage_project['make_default'] == $getFid) {
        $getAdditionalImageSrc['makeDefault'][] = '<p><input type="radio" checked="checked" class="make-default-update" value="'.$getFid.'" for="'.$assetNode->nid.'" name="thumb-image"></p>';
      }
      else {
        $getAdditionalImageSrc['makeDefault'][] = '<p><input type="radio" class="make-default-update" value="'.$getFid.'" for="'.$assetNode->nid.'" name="thumb-image"></p>';
      }
    }
    else {
      $getAdditionalImageSrc['makeDefault'][] = '<p><input type="radio" class="make-default-update" value="'.$getFid.'" for="'.$assetNode->nid.'" name="thumb-image"></p>';
    }
    
    $getAdditionalImageSrc['remove'][] = '<p><label class="checkbox"><i class="fa fa-times padding-5" style="float:left; cursor:pointer;"></i><input type="checkbox" checked="checked" class="image-remove-update sr-only" value="'.$getFid.'" for="'.$assetNode->nid.'"></p>';
    $getAdditionalImageSrc['fileName'][] = '<p><img src="'.image_style_url('thumbnail', $assetNode->field_system_asset_attachment['und'][$addKey]['uri']).'"></p>';
      }
    $fileConatiner = '<div class="image-preview"><table class="m6connect-custom-table table table-hover table-bordered"><th>Default</th><th>Remove</th><th>Files</th>';
    foreach($getAdditionalImageSrc['makeDefault'] as $srcDelta => $srcVal) {
        $fileConatiner .= '<tr><td>'.$getAdditionalImageSrc['makeDefault'][$srcDelta].'</td><td>'.$getAdditionalImageSrc['remove'][$srcDelta].'</td><td>'.        $getAdditionalImageSrc['fileName'][$srcDelta].'</td>';
    }
    $fileConatiner .= '</table><div>';

    $commands[] = ajax_command_html(".spending-image-preview", $fileConatiner);
      } 
    else {
      $commands[] = ajax_command_html(".spending-image-preview", '');
    }
  $acquisitionDate = $storage_project['acquisition_date']!=''?date('m/d/Y', strtotime($storage_project['acquisition_date'])):'';
  
    $commands[] = ajax_command_invoke("input.asset_name", 'val',array($storage_project['asset_name']));
    $commands[] = ajax_command_invoke("textarea.asset_description", 'val',array($storage_project['asset_description']));  
    $commands[] = ajax_command_invoke("input.sin_num", 'val',array($storage_project['asset_sin_num']));
    $commands[] = ajax_command_invoke("input.manuf_num", 'val',array($storage_project['manuf_name']));  
    $commands[] = ajax_command_invoke("input.model_number", 'val',array($storage_project['model_no']));
    $commands[] = ajax_command_invoke("select.system_asset_type", 'val',array($storage_project['system_asset_type']));  
    $commands[] = ajax_command_invoke("input.asset_number", 'val',array($storage_project['asset_number']));
    $commands[] = ajax_command_invoke("input.current_asset_value", 'val',array(number_format($storage_project['current_asset_value'],2)));   
    $commands[] = ajax_command_invoke("input.asset_number_hash", 'val',array($storage_project['asset_num_hash']));    
  $commands[] = ajax_command_invoke("input.acquisition_date", 'val',array($acquisitionDate));
  $commands[] = ajax_command_invoke("input.asset_vendor", 'val',array($venoderName)); 
  $commands[] = ajax_command_invoke("input.vendor_number", 'val',array($storage_project['vendor_number']));
  $commands[] = ajax_command_invoke("input.vendor_number_cust", 'val',array($storage_project['vendor_number']));  
  $commands[] = ajax_command_invoke("input.company_nid", 'val',array($venoderName));
    $commands[] = ajax_command_invoke("input.pin_number", 'val',array($storage_project['pin_number']));   
    $commands[] = ajax_command_html("#prgram-aset-listing-table", get_default_assets_listing_table_data($projectId,'',0,50));
    $commands[] = ajax_command_replace("#assets-total-main", get_default_assets_listing_table_data($projectId, '', 0, 50, TRUE));
  // Filling data from speing when click on edit asset
  $commands[] = ajax_command_html("#programe-spending-details-by-asset", $output.''._get_spending_details_by_asset($assetNode->nid,$projectId));
  }
  else{ 
    if(((isset($_SESSION['ACTIVEPROJECT']) && $_SESSION['ACTIVEPROJECT']!=$triggeringElement['#value']) || (!isset($_SESSION['ACTIVEPROJECT'])) || (empty($_SESSION['ACTIVEPROJECT']))) && !empty($triggeringElement['#value'])){
      $_SESSION['ACTIVEPROJECT'] = $triggeringElement['#value'];   
    }
    // From the setting tab
    $commands[] = ajax_command_invoke("input.asset_name", 'val',array(''));
    $commands[] = ajax_command_invoke("textarea.asset_description", 'val',array('')); 
    $commands[] = ajax_command_invoke("input.sin_num", 'val',array(''));
    $commands[] = ajax_command_invoke("input.manuf_num", 'val',array(''));  
    $commands[] = ajax_command_invoke("input.model_number", 'val',array(''));
    $commands[] = ajax_command_invoke("input.asset_number", 'val',array(''));
    $commands[] = ajax_command_invoke("input.current_asset_value", 'val',array(''));  
  $commands[] = ajax_command_invoke("input.vendor_number", 'val',array(''));
  $commands[] = ajax_command_invoke("input.vendor_number_cust", 'val',array(''));
    $commands[] = ajax_command_invoke("select.system_asset_type", 'val',array(''));
    $commands[] = ajax_command_invoke("input.project_asset_nid",'val', array(''));
    $commands[] = ajax_command_invoke("input.asset_number_hash", 'val',array(''));  
    $commands[] = ajax_command_html(".spending-image-preview", '');
  $commands[] = ajax_command_invoke("input.acquisition_date", 'val',array(''));
    $commands[] = ajax_command_invoke("input.asset_vendor", 'val',array(''));
    $commands[] = ajax_command_invoke("input.company_nid", 'val',array(''));
    $commands[] = ajax_command_invoke("input.pin_number", 'val',array(''));   
    $commands[] = ajax_command_html("#prgram-aset-listing-table", get_default_assets_listing_table_data($triggeringElement['#value'],'',0,50));
    $commands[] = ajax_command_replace("#assets-total-main", get_default_assets_listing_table_data($triggeringElement['#value'], '', 0, 50, TRUE));
  // Filling data from speing when click on edit asset
  $commands[] = ajax_command_html("#programe-spending-details-by-asset", array(''));
  }
  return array('#type' => 'ajax', '#commands' => $commands);
}

function program_modify_asset_form_custom_validate($form, &$form_state) {     
  if($_FILES['files']['name'] != '')  {
    $fileCount = count($_FILES['files']['name']);
    for ($i = 0; $i < $fileCount; $i++) {
      $file = file_save_upload($i, array(
        //'file_validate_is_image' => array(),
        //'file_validate_extensions' => array('png gif jpg jpeg pdf xls html doc txt docx'),
        'file_validate_extensions' => array('png gif jpg jpeg pdf xls html doc txt html htm oft msg mht'),
      ));
      if ($file) {    
        if ($file = file_move($file, 'private://')) {
          $form_state['values']['asset_attachment'][$i] = $file;
        } 
      }
    }
  }
}

function project_assets_submit(&$form, &$form_state) {
  global $user; 
  global $company;  
  $formVal = $form_state['values'];   
  //Check for updated project or new one
  if($formVal['project_asset_nid'] != '') {
    $assetNode = node_load($formVal['project_asset_nid']);
    $assetNode->title = $formVal['asset_name']; 
    $assetNode->field_project_asset_description['und'][0]['value'] = $formVal['asset_description'];
    $assetNode->field_project_asset_sin_number['und'][0]['value'] = $formVal['sin_num'];
    $assetNode->field_asset_manufacturer_name['und'][0]['value'] = $formVal['manuf_num'];
    $assetNode->field_asset_model_no['und'][0]['value'] = $formVal['model_number'];
    $assetNode->field_system_asset_type['und'][0]['value'] = $formVal['system_asset_type']; 
    $assetNode->field_system_asset_number['und'][0]['value'] = $formVal['asset_number'];
    $assetNode->field_current_asset_value‎['und'][0]['value'] = $formVal['current_asset_value'];
    $assetNode->field_asset_vendor['und'][0]['value'] = $formVal['company_nid'];
    $assetNode->field_asset_number_hash['und'][0]['value'] = $formVal['asset_number_hash'];  
    $assetNode->field_asset_pin_number['und'][0]['value'] = $formVal['pin_number'];
  $assetNode->field_make_defaults['und'][0]['value'] = $formVal['make_default'];
  $assetNode->field_vendor_number['und'][0]['value'] = $formVal['vendor_number_cust'];
  $assetNode->field_acquisition_date['und'][0]['value'] = $formVal['acquisition_date'];
  if(isset($formVal['asset_attachment']) && !empty($formVal['asset_attachment'])) {
      foreach ($form_state['values']['asset_attachment'] as $imgkey => $file) {
        if(!isset($assetNode->field_system_asset_attachment['und'])){
          $assetNode->field_system_asset_attachment['und'] = array();     
        }
        $new_file = file_load($file->fid);
        $file_arr = (array)$new_file;
        $file_arr['display'] = 1;   
        $assetNode->field_system_asset_attachment['und'][] = $file_arr;
      }  
    }
    //$assetNode->field_system_name_to_asset_type['und'][0]['value'] = $formVal['system_name_to_asset_type'];
    node_save($assetNode);
    drupal_goto('/program/assets');
    drupal_set_message('Asset updated successfully!');    
  }
  else {
    $node = new stdClass();
    $node->type = 'program_assets';
    $node->title = $formVal['asset_name'];
    $node->uid = $user->uid;
    $node->language = en;
    $node->status = 1;
    $node->og_group_ref['und'][0]['target_id'] = $company->nid;
    $node->field_project_asset_description['und'][0]['value'] = $formVal['asset_description'];
    $node->field_project_asset_sin_number['und'][0]['value'] = $formVal['sin_num'];
    $node->field_asset_manufacturer_name['und'][0]['value'] = $formVal['manuf_num'];
    $node->field_asset_model_no['und'][0]['value'] = $formVal['model_number'];
    $node->field_system_asset_type['und'][0]['value'] = $formVal['system_asset_type'];  
    $node->field_system_asset_number['und'][0]['value'] = $formVal['asset_number']; 
    $node->field_current_asset_value‎['und'][0]['value'] = $formVal['current_asset_value'];
    $node->field_asset_vendor['und'][0]['value'] = $formVal['company_nid'];
    $node->field_asset_number_hash['und'][0]['value'] = $formVal['asset_number_hash'];
    $node->field_project_reference['und'][0]['nid'] = $formVal['select-assets'];
    $node->field_asset_pin_number['und'][0]['value'] = $formVal['pin_number'];
  $node->field_make_defaults['und'][0]['value'] = $formVal['make_default'];
  $node->field_vendor_number['und'][0]['value'] = $formVal['vendor_number_cust'];
  $node->field_acquisition_date['und'][0]['value'] = $formVal['acquisition_date'];
    if(isset($formVal['asset_attachment']) && !empty($formVal['asset_attachment'])) {
      foreach ($form_state['values']['asset_attachment'] as $imgkey => $file) {
        if(!isset($node->field_system_asset_attachment['und'])){
          $node->field_system_asset_attachment['und'] = array();      
        }
        $new_file = file_load($file->fid);
        $file_arr = (array)$new_file;
        $file_arr['display'] = 1;   
        $node->field_system_asset_attachment['und'][] = $file_arr;
      }  
    }
    node_save($node);   
    drupal_goto('/program/assets');
    drupal_set_message('New Asset created successfully!');    
  }
}

function get_default_assets_listing_table_data($projectId = 0 ,$ajax=FALSE, $startRange=0, $endRange=50, $return_total = FALSE) {
  global $company;
  $return_total_amount = 0;
  drupal_add_js(drupal_get_path('theme', 'm6connect') . '/js/jquery.dataTables.min.js');
  drupal_add_css(drupal_get_path('theme', 'm6connect') . '/css/jquery.dataTables.min.css');
  drupal_add_js(drupal_get_path('module', 'm6connect_program') . '/js/m6connect_program.js');
  $rows = array();
  $header = array(
    array('data'=>'Thumbnail','class'=>array('text-center')),
  array('data'=>'Asset #','class'=>array('text-center')),
    array('data'=>'Asset Name','class'=>array('text-center')),
  array('data'=>'SIN Number','class'=>array('text-center','category-header-live')),
    array('data'=>'Manufacturer Name','class'=>array('text-center','category-header-live')),
    array('data'=>'Asset Category','class'=>array('text-center','asset-category-live')),
    array('data'=>'Asset Cost','class'=>array('text-center')),
    array('data'=>'Asset Installation','class'=>array('text-center','category-header-cust')),
    array('data'=>'Outside Consultants','class'=>array('text-center','category-header-cust')),
    array('data'=>'Internal Charges','class'=>array('text-center','category-header-cust')),
    // Hidden ByDefaualt area End   
    array('data'=>'Allocations','class'=>array('text-center','category-header-live')),
    array('data'=>'<span class="show-left pull-left" style="cursor:pointer;"> <i class="fa fa-angle-double-left show-left-span-category" aria-hidden="true"></i> </span> <span class="show-right pull-right" style="cursor:pointer;"> <i class="fa fa-angle-double-right show-right-span-category" aria-hidden="true" style="display:none;"></i> </span> Total Asset Value','class'=>array('text-center')), 
    array('data'=>'Action','class'=>array('text-center')),
  );
  $query = db_select('node','n');     
  $query->join('field_data_field_project_reference','pr','n.nid=pr.entity_id');    
  $query->join('og_membership','om','om.etid=n.nid AND om.entity_type=:entityType', array(':entityType'=>'node'));
  $query->fields('n',array('nid'));
  $query->condition('n.type', 'program_assets', '=');
  $query->condition('om.gid', $company->nid, '=');
  $query->condition('pr.field_project_reference_nid', $projectId, '=');  
  $aded = clone $query;
  $aded_sayi = $aded->execute();
  $rakam = $aded_sayi->rowCount();  
  if($startRange == 'select') {
    $getAssetData = $query->range(0,$endRange)->execute()->fetchCol();  
  }
  else {
    $getAssetData = $query->range($startRange,50)->execute()->fetchCol();
  }
  $assetImgThumb = '';
  $assetImgOrig = '';
  $defaultImg = 'FALSE';
  if(!empty($getAssetData)) {    
    foreach($getAssetData as $assetKey => $assetVal) {
      $fileiconsdata = array(); 
      $fileArr = array();   
      $assetData = node_load($assetVal);
      $assetName = $assetData->title;
      $assetNumber = isset($assetData->field_system_asset_number['und'])?$assetData->field_system_asset_number['und'][0]['value']:'';
      $assetDescription = isset($assetData->field_project_asset_description['und'])?$assetData->field_project_asset_description['und'][0]['value']:'None';
      $assetSinNumber = isset($assetData->field_project_asset_sin_number['und'])?$assetData->field_project_asset_sin_number['und'][0]['value']:'None';
      $manufName = isset($assetData->field_asset_manufacturer_name['und'])?$assetData->field_asset_manufacturer_name['und'][0]['value']:'None';
      $modelNo = isset($assetData->field_asset_model_no['und'])?$assetData->field_asset_model_no['und'][0]['value']:'None';
      $assetsType = isset($assetData->field_system_asset_type['und'])?$assetData->field_system_asset_type['und'][0]['value']:'None';
      $currentAssetVal = isset($assetData->field_current_asset_value['und'])?'$'.number_format($assetData->field_current_asset_value['und'][0]['value'],2):'$0.00';
      $assetCost = ($assetData->field_asset_cost['und'][0]['value'] != '')?'$'.number_format($assetData->field_asset_cost['und'][0]['value'],2):'$0.00';
      $assetInstall = ($assetData->field_asset_installation['und'][0]['value'] != '')?'$'.number_format($assetData->field_asset_installation['und'][0]['value'],2):'$0.00';
      $outsideCons = ($assetData->field_asset_outside_consultant['und'][0]['value'] != '')?'$'.number_format($assetData->field_asset_outside_consultant['und'][0]['value'],2):'$0.00';
      $interCharge = ($assetData->field_asset_internal_charge['und'][0]['value'] != '')?'$'.number_format($assetData->field_asset_internal_charge['und'][0]['value'],2):'$0.00';
      $assetCostTotal = ($assetData->field_asset_cost['und'][0]['value'] != '')?$assetData->field_asset_cost['und'][0]['value']:0;
      $assetInstallTotal = ($assetData->field_asset_installation['und'][0]['value'] != '')?$assetData->field_asset_installation['und'][0]['value']:0;
      $outsideConsTotal = ($assetData->field_asset_outside_consultant['und'][0]['value'] != '')?$assetData->field_asset_outside_consultant['und'][0]['value']:0;
      $interChargeTotal = ($assetData->field_asset_internal_charge['und'][0]['value'] != '')?$assetData->field_asset_internal_charge['und'][0]['value']:0;
      $speardAmount = ($assetData->field_asset_spread_amount['und'][0]['value'] != '')?$assetData->field_asset_spread_amount['und'][0]['value']:0;
    
    $makeDefault = ($assetData->field_make_defaults['und'][0]['value'] != '')?$assetData->field_make_defaults['und'][0]['value']:'';
    
      $splitCalculation = ($assetInstallTotal + $outsideConsTotal + $interChargeTotal);
      $allocation = ($splitCalculation + $speardAmount);
      $totalAssetValSum = $assetCostTotal + $assetInstallTotal + $outsideConsTotal + $interChargeTotal + $speardAmount;
    $return_total_amount += $totalAssetValSum;
      if(is_numeric($assetsType)) {
        $query= db_select('m6connect_project_asset_category','ac'); 
        $query->fields('ac',array('category_description'));
        $query->condition('ac.company_nid',$company->nid,'=');
        $query->condition('ac.id',$assetsType,'=');
        $getAssetCat = $query->execute()->fetchField();
      }
      $fileModuleIconPath = '/'.drupal_get_path('module','file').'/icons/';
      $fileIconPath = array(
        'image' => $fileModuleIconPath.'image-x-generic.png',
        'pdf' => $fileModuleIconPath.'application-pdf.png',
        'document' => $fileModuleIconPath.'x-office-document.png',
        'text' => $fileModuleIconPath.'text-plain.png',
      );
    $assetImgThumb = '';
      $assetImgOrig = '';
      if(isset($assetData->field_system_asset_attachment['und'])) {
      $defaultImg = 'FALSE';
    $assetImgThumb = '';
        $assetImgOrig = '';
        foreach($assetData->field_system_asset_attachment['und'] as $addKey => $addVal) {     
      if(!empty($makeDefault)) {
        if($makeDefault == $addVal['fid']) {
          $assetImgThumb = image_style_url('thumbnail',$addVal['uri']);
            $assetImgOrig = file_create_url($addVal['uri']);  
      }
      }
      else {
        $assetImgThumb = image_style_url('thumbnail',$assetData->field_system_asset_attachment['und'][0]['uri']);
            $assetImgOrig = file_create_url($assetData->field_system_asset_attachment['und'][0]['uri']);  
      }
      $fileArr['image'][] = array('filename'=>$addVal['filename'],'uri'=>$addVal['uri']);
        } 
        if(!empty($fileArr)) {
          foreach($fileArr as $fileKey => $fileVal) {
            $itemCount = count($fileVal);
            $fileiconsdata[$fileKey] = '<span class="dropdown padding-10">'; 
            if($itemCount>1){
              $fileiconsdata[$fileKey] .= '<a href="#" id="action-document-'.$assetData->nid.'-'.$fileKey.'" class="dropdown-toggle"  data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">';  
              $fileiconsdata[$fileKey] .= '<i class="fa fa-paperclip" aria-hidden="true" style="font-size:20px;"></i>';
              $fileiconsdata[$fileKey] .= '<span class="caret"></span></a>';
              $fileiconsdata[$fileKey] .= '<ul class="dropdown-menu" role="menu" aria-labelledby="action-document-'.$assetData->nid.'-'.$fileKey.'">';
              foreach($fileVal as $delta => $fileData){
                $fileiconsdata[$fileKey] .= '<li>'.l($fileData['filename'], file_create_url($fileData['uri']), array('attributes' => array('class' => 'fancybox'))).'</li>'; 
              }
              $fileiconsdata[$fileKey] .= '</ul>';
            }
            else {
              $fileiconsdata[$fileKey] .= '<a href="'.file_create_url($fileVal[0]['uri']).'" id="action-document-'.$assetData->nid.'-'.$fileKey.'">';
              $fileiconsdata[$fileKey] .= '<i class="fa fa-paperclip" aria-hidden="true" style="font-size:20px;"></i>';
              $fileiconsdata[$fileKey] .= '</a>';
           }
           $fileiconsdata[$fileKey] .= '</div>';
         } 
       }
     }
   
      if(empty($assetImgThumb) && empty($assetImgOrig)) {
        $assetImgOrig = '/sites/default/files/styles/find_people/public/images_13.png';
      $assetImgThumb = '/sites/default/files/styles/find_people/public/images_13.png';
      $defaultImg = 'TRUE';
      }
      if($defaultImg == 'TRUE') {
        $imageDataRow = '<strong>No thumbnail</strong>';
      }
      else {
        $imageDataRow = l('<img src="' . $assetImgThumb . '">', $assetImgOrig, array('html' => TRUE, 'attributes' => array('class' => array('colorbox-load'))));
      }
      $action = '<div class="project-action">
           <div class="btn-group"><div class="dropdown">
               <button id="dLabel" class="btn btn-success" type="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"> Actions</button>
         <ul class="dropdown-menu" role="menu" aria-labelledby="dLabel">
                 <li>'.l('Edit', 'edit/'.$assetData->nid,array('attributes' => array('class' => 'edit-assets-detail', 'for' => $assetData->nid))).'</li>
                 <li>'.l('Delete', url('node-delete/nojs/'.$assetData->nid), array( 'external'=>TRUE, 'attributes'=> array('class'=>array('use-ajax ctools-modal-assign-dashboard-popup-style ctools-use-modal'))) ).'</li>
             <li>'.l('Load spending details', '/load-spending-details/'.$assetData->nid.'/'.$projectId.'/nojs', array('html' => TRUE, 'external' => TRUE, 'attributes' => array('class' => array('ctools-modal-assign-asset-category-popup-style ctools-use-modal new-budget-cost-code-link')))).'</li>     
         <li>'.l('Asset Profile Report', '/generate-spending-details/'.$assetData->nid.'/'.$projectId, array('html' => TRUE, 'external' => TRUE, 'attributes' => array('target' => array('_blank')))).'</li>
         </ul></div></div></div>';
    if(!empty($makeDefault)) {
      $fileData = image_style_url('thumbnail',file_load($makeDefault)->uri);
    $fileData = image_style_url('thumbnail',file_load($makeDefault)->uri);
    }
      $rows[] = array(
        'data' => array(      
          array('data' => $imageDataRow,'class' => array('text-center')),
        array('data' => $assetNumber,'class' => array('text-left')),
          array('data' => ucwords($assetName).'&nbsp;'.implode('&nbsp;',$fileiconsdata),'class' => array('text-left')),
          array('data' => $assetSinNumber,'class' => array('text-left','category-header-live')),
          array('data' => $manufName,'class' => array('text-left','category-header-live')), 
          array('data' => $getAssetCat,'class' => array('text-left','asset-category-live')),
          array('data' => $assetCost,'class' => array('text-left')),
          array('data' => $assetInstall,'class' => array('text-left','category-header-cust')),
          array('data' => $outsideCons,'class' => array('text-left','category-header-cust')),
          array('data' => $interCharge,'class' => array('text-left','category-header-cust')),           
          array('data' => '$'.number_format($allocation,2),'class' => array('text-left','category-header-live')),       
          array('data' => '$'.number_format($totalAssetValSum,2),'class' => array('text-left')),
          array('data' => $action),
        ),
      );
    }
  }
  $return_total_amount = $return_total_amount > 0 ? '$' . number_format($return_total_amount, 2) : '$0.00';
  // If only total is requested.
  if ($return_total) {
    return '<div class="pull-right" id="assets-total-main"><div class="assets-total-main-control"><span class="assets-total">Assets Total:</span> '. $return_total_amount . '</div></div>';
  }
  $outputBefore = _get_pager_option_data_list($projectId,'asset');
  $outputAfter = '<div class="pull-right" id="assets-total-main"><div class="assets-total-main-control"><span class="assets-total">Assets Total:</span> '. $return_total_amount . '</div></div>';
  $output = theme('table', array('header'=>$header,'rows'=>$rows,'empty'=>'No assets created yet','attributes'=>array('style'=> array('width:100%;'),'class'=>array('table','m6connect-custom-table','m6connect-custom-program-table','m6connect-program-default-milestone-table','table-hover','table-bordered','text-center'))));
  $pagerGene = '';
  if($rakam > 50) {
    $pagerGene .= '<div class="item-list"><ul class="pager">';
    $pagerGene .= '<li class="pager-current">'.l('<< First', 'get-next-page-data/asset/0/'.$projectId.'/nojs', array('attributes' => array('class' => array('use-ajax','page-range-0')))).'</li>';
    if($rakam > 50) {
      $getpageLimit = $rakam/50;
      $getpageLimit = ceil($getpageLimit);
    }
    for($i = 1; $i<=$getpageLimit; $i++) {
      $pagerGene .= '<li class="pager-current">'.l($i, 'get-next-page-data/asset/'.$i.'/'.$projectId.'/nojs', array('attributes' => array('class' => array('use-ajax','page-range-'.$i)))).'</li>';
    }
    $pagerGene .= '<li class="pager-current">'.l('Last >>', 'get-next-page-data/asset/'.$getpageLimit.'/'.$projectId.'/nojs', array('attributes' => array('class' => array('use-ajax','page-range-0')))).'</li>';
    $pagerGene .= '</ul></div>';
  }
  return $outputBefore . $outputAfter . $output . $pagerGene;
} 

// Start Reports Sction
function program_project_reports_content(){
  $elements = array();  
  $elements['project-form']= array(
    '#markup' => drupal_render(drupal_get_form('program_modify_project_report_form')),
    '#prefix' => '<div class="clearfix margin-bottom-10">',
    '#suffix' => '</div>',
  );
  return $elements;
}

function program_modify_project_report_form($form, &$form_state) {
  global $user;   
  global $company;  
  // Get project list by company 
  $getProjectByCompany = _project_list_by_company($company->nid, 'project_management');
  foreach($getProjectByCompany as $key => $val) {
    $projectListByCom[$key] = $val;
  }  
  drupal_add_js(drupal_get_path('module', 'm6connect_program') . '/js/m6connect_program.js');
  drupal_add_js(drupal_get_path('module', 'm6connect_program') . '/js/Prototype_Price_Format_0.1.js');
  /*$form['select-project'] = array(
    '#type'=>'select',
  '#title'=> 'Select Project:',
  '#options' => $projectListByCom,
  '#default_value' => isset($_SESSION['ACTIVEPROJECT'])?$_SESSION['ACTIVEPROJECT']:'',
  '#attributes' => array('class'=> array('form-control project_programe_reports_sections')),
  '#ajax' => array(
    'callback'=> 'change_program_project_reports_callback',
    'wrapper' => 'project_program_reports_main_container',
    'effect' => 'fade',
  ),
  '#prefix' => '<div class="clearfix"><div class="pull-left form-inline">',
  '#suffix' => '</div></div>',
  );*/  
  $form['prgram-project-menu-items'] = array(
    '#markup' => program_project_menu_links_content(),
  '#prefix' => '<div class="clearfix">',
  '#suffix' => '</div>',
  );  
  $form['select-project'] = array(
    '#type' => 'select',
  '#title'=> 'Choose Multiple Projects',
  '#options' => $projectListByCom,
  '#chosen' => TRUE,
  '#multiple' => TRUE,
  '#attributes' => array('class'=> array('project_programe_reports_sections')),
  '#ajax' => array(
    'callback'=> 'change_program_project_reports_callback',
    'wrapper' => 'project_program_reports_main_container',
    'effect' => 'fade',
  ),
  '#default_value' => isset($_SESSION['ACTIVEPROJECT'])?$_SESSION['ACTIVEPROJECT']:'',
  '#prefix' => '<div class="clearfix">',
  '#suffix' => '</div>',
  );
  $form['main-container']= array(
    '#type' => 'container',
  '#attributes' => array('class'=>array('row')),
  '#prefix' => '<div class="clearfix"><div id="project_program_reports_main_container" class="project-detail">',  
  '#suffix' => '</div></div>',
  '#process' => array('project_program_reports_main_container'),
  );  
  return $form;
}

function project_program_reports_main_container($element, &$form_state) {
  $element['left-container']= array(
    '#type' => 'container',
  '#attributes' => array('class'=>array('col-md-3','col-sm-3','col-xs-12','project-details-left')),
  );  
  $element['right-container']= array(
    '#type' => 'container',
  '#attributes' => array('class'=>array('col-md-9','col-sm-9','col-xs-12','project-details-right')),
  );
  $element['full-container']= array(
    '#type' => 'container',
  '#attributes' => array('class'=>array('col-md-12','col-sm-12','col-xs-12','project-details-right-full')),
  );
  $element['left-container']['project-title'] = array(
    '#markup' => generate_report_links_callback(),
  '#prefix' => '<div id="project-report-links-pdf">',
  '#suffix' => '</div>',
  );
  $element['right-container']['project-description'] = array(
    '#markup' => '<iframe src="" style="display:none;"></iframe>',
  '#prefix' => '<div id="project-pdf-data-render-section">',
  '#suffix' => '</div>',
  );
  $element['full-container']['project-description-show-full'] = array(
    '#markup' => '<p><a id="menu-toggle" class="menu-toggle-inner-report" aria-expanded="true" data-toggle="tooltip" data-placement="right" title="" href="#" data-original-title="Expand Menu"><i class="fa fa-arrow-left" aria-hidden="true"></i> &nbsp; List Reports<span id="main_icon" class="fa fa-bars" aria-hidden="true"></span></a></p>',
  '#prefix' => '<div id="project-pdf-data-render-area" style="display:none;">',
  '#suffix' => '</div>',
  );
  $element['full-container']['project-description-full'] = array(
    '#markup' => '<iframe src="" style="display:none;"></iframe>',
  '#prefix' => '<div id="project-pdf-data-render-section-full" style="display:none;">',
  '#suffix' => '</div>',
  );      
  return $element;
}
function change_program_project_reports_callback($form,&$form_state) {
  global $company;  
  $commands = array();
  $triggeringElement = $form_state['triggering_element'];
  if(!empty($triggeringElement['#value']) && $triggeringElement['#value'] != 0){   
  $commands[] = ajax_command_html("#project-report-links-pdf", generate_report_links_callback($triggeringElement['#value']));
  $commands[] = ajax_command_html("#project-pdf-data-render-section", '');
  }
  return array('#type' => 'ajax', '#commands' => $commands);
}

function load_project_pdf_data_callback($type,$proId, $ajax = NULL) {     
  ctools_include('ajax');
  $commands = array();
  $commands[] = ajax_command_html('#project-pdf-data-render-section', '<div class="report-loader2 text-center" style="position: absolute; width: 100%; top:134px;"><img src="/sites/all/themes/m6connect/images/page-loading.gif" style="width:125px;"></div><iframe src="/load-project-pdf-data/'.$type.'/'.$proId.'?proids='.check_plain($_GET['proids']).'" height="600" width="100%" onload="hideProgress()"></iframe>');
  $commands[] = ajax_command_html('#project-pdf-data-render-section-full', '<div class="report-loader2 text-center" style="position: absolute; width: 100%; top:134px;"><img src="/sites/all/themes/m6connect/images/page-loading.gif" style="width:125px;"></div><iframe src="/load-project-pdf-data/'.$type.'/'.$proId.'?proids='.check_plain($_GET['proids']).'" height="600" width="100%" onload="hideProgress()"></iframe>');  
  
  $commands[] = ajax_command_invoke("#project-pdf-data-render-section-full", 'show',array('fast'));
  $commands[] = ajax_command_invoke("#project-pdf-data-render-area", 'show',array('fast'));
  $commands[] = ajax_command_invoke("#project-pdf-data-render-section", 'hide',array('fast'));
  $commands[] = ajax_command_invoke("#project-report-links-pdf", 'hide',array('fast'));
  print ajax_render($commands);
  exit;   
}

function project_programe_report_pdf($type, $proid) { 
  global $user, $base_url, $base_path;    
  if(is_numeric(arg(2))) { $costProId = array(arg(2)); } else { $costProId = explode(',',check_plain($_GET['proids'])); }
  $node = node_load($costProId[0]);
  if($type == 'monthly') { $reportTitle = 'Monthly Project Report'; } 
  else if($type == 'costsummary') { $reportTitle = 'Project Cost Summary Report'; }
  else if($type == 'costdetail') { $reportTitle = 'Project Cost Detail Report'; }
  else if($type == 'commitment') { $reportTitle = 'Project Commitment Report'; }
  else if($type == 'safety') { $reportTitle = 'Project Safety Report'; }  
  else if($type == 'estimate') { $reportTitle = 'Budget Estimate Report'; } 
  else if($type == 'asset') { $reportTitle = 'Project Assets Report'; } 
  else if($type == 'spending-forecast') { $reportTitle = 'Project Spending Forecast'; }  
  else if($type == 'asset-spend') { $reportTitle = 'Asset Profile Report'; }  
  
  $projectNumber = $node->field_project_mgmt_number['und'][0]['value'];
  $projectName = $node->title;
  $getCompanyData = node_load($node->og_group_ref['und'][0]['target_id']);  
  if(isset($getCompanyData->field_logo['und'])) {
    $fileObj = file_load($getCompanyData->field_logo['und'][0]['fid']);
  $objFile = file_copy($fileObj, $destination = 'public://'. $filname, $replace = FILE_EXISTS_RENAME);
  $objFile->status = 0;
  file_save($objFile);
  $companyLogo = '<img src="'.image_style_url('thumbnail', $objFile->uri).'" height="70" width="70">';  
  }
  else {
    $companyLogo = '<img src="/sites/all/themes/m6connect/images/default_company_profile.jpg" height="70" width="70">';
  }   
  $content = theme('project_program_report_content_pdf');
  include_once(libraries_get_path('mpdf') . '/mpdf.php'); 
  $mpdf = new mPDF('c', 'A4-L');
  //$mpdf->SetHTMLHeader('<div class="page_header" style="padding:10px; background: #eee;"><table style="margin:0; width:100%;"><tr><td width="150">'.$companyLogo.'</td><td align="center" width="300" style="vertical-align:top;"><h2>'.ucwords($reportTitle).'</h2><h2>'.ucwords($projectName).'</h2></td><td width="150" align="right" style="vertical-align:bottom"><p style="margin:0;">'.$projectNumber.'</p></td></tr></table></div>');
  
  $mpdf->SetHTMLHeader('<div class="page_header" style="padding:10px; background: #eee;"><table style="margin:0; width:100%;"><tr><td width="150">'.$companyLogo.'</td><td align="center" width="300" style="vertical-align:top;"><h2>'.ucwords($reportTitle).'</h2><h2>&nbsp;</h2></td><td width="150" align="right" style="vertical-align:bottom"><p style="margin:0;">&nbsp;</p></td></tr></table></div>');  
  
  //$mpdf->SetHTMLFooter('<div class="page_footer" style="float:left; width:100%;"><div style="float:left; width:100%;"><hr style="height:1px; border:none; border-bottom:1px solid #CCC;"></div><div style="float:left; width:100%; clear:both;"><div style="float:left; width:33.33%; text-align:left;"><img src="/sites/all/themes/m6connect/images/bidder_report_footer.png" alt="res" width="150" /></div><div style="float:left; width:33.33%; text-align:center;">Page {PAGENO} of {nb}</div><div style="float:left; width:33.33%; text-align:right;">'.date("l, F d, Y").'</div></div></div>');
  if($type == 'costsummary') { $addFooter = '<pagebreak suppress="off" />'; } else { $addFooter = ''; }
  $mpdf->SetHTMLFooter('<div class="page_footer" style="float:left; width:100%;"><div style="float:left; width:100%;"><hr style="height:1px; border:none; border-bottom:1px solid #CCC;"></div><div style="float:left; width:100%; clear:both;"><div style="float:left; width:33.33%; text-align:left;"><img src="/sites/all/themes/m6connect/images/bidder_report_footer.png" alt="res" width="100" /></div><div style="float:left; width:33.33%; text-align:center;">Page {PAGENO} of {nb}</div><div style="float:left; width:33.33%; text-align:right;">'.date("l, F d, Y").'</div></div></div>'.$addFooter);
  $mpdf->setAutoTopMargin = 'stretch';  
  $mpdf->setAutoBottomMargin = 'stretch'; 
  $mpdf->WriteHTML($content);
  $file_content = $mpdf->Output('report.pdf', 'I');
  //print $content;
} 

function generate_report_links_callback($proID) {  
  global $company;
  $project = implode(',',$proID);
  $tt = count(explode(',',$project));  
  $content = '<div class="text-left">';
  if(is_array($proID)) {
    if($tt > 1) {  
      $content .= '<p><a href="/load-project-pdf/monthly/Capital-Project-Manager/nojs?proids='.$project.'" class="use-ajax report-loading">Monthly Report</a> 
            <a href="/load-project-pdf/monthly/Capital-Project-Manager/nojs?proids='.$project.'" class="use-ajax report-loading"><img src="/sites/all/themes/m6connect/images/pdf_icon.png"></a>
          <a href="/project-report-excel/monthly/Capital-Project-Manager?proids='.$project.'"><img src="/sites/all/themes/m6connect/images/excel.png"></a>
         </p>            
         <p><a href="/load-project-pdf/costsummary/Capital-Project-Manager/nojs?proids='.$project.'" class="use-ajax report-loading">Project Cost Summary</a>
          <a href="/load-project-pdf/costsummary/Capital-Project-Manager/nojs?proids='.$project.'" class="use-ajax report-loading"><img src="/sites/all/themes/m6connect/images/pdf_icon.png"></a>
          <a href="/project-report-excel/costsummary/Capital-Project-Manager?proids='.$project.'"><img src="/sites/all/themes/m6connect/images/excel.png"></a>
           </p>
         <p><a href="/load-project-pdf/costdetail/Capital-Project-Manager/nojs?proids='.$project.'" class="use-ajax report-loading">Project Cost Details</a>
          <a href="/load-project-pdf/costdetail/Capital-Project-Manager/nojs?proids='.$project.'" class="use-ajax report-loading"><img src="/sites/all/themes/m6connect/images/pdf_icon.png"></a>
          <a href="/project-report-excel/costdetail/Capital-Project-Manager?proids='.$project.'"><img src="/sites/all/themes/m6connect/images/excel.png"></a>
        </p>
        <p><a href="/load-project-pdf/safety/Capital-Project-Manager/nojs?proids='.$project.'" class="use-ajax report-loading">Project Safety Report</a>
           <a href="/load-project-pdf/safety/Capital-Project-Manager/nojs?proids='.$project.'" class="use-ajax report-loading"><img src="/sites/all/themes/m6connect/images/pdf_icon.png"></a>
           <a href="/project-report-excel/safety/Capital-Project-Manager?proids='.$project.'"><img src="/sites/all/themes/m6connect/images/excel.png"></a>
        </p>
        <p><a href="/load-project-pdf/commitment/Capital-Project-Manager/nojs?proids='.$project.'" class="use-ajax report-loading">Project Commitment</a>
           <a href="/load-project-pdf/commitment/Capital-Project-Manager/nojs?proids='.$project.'" class="use-ajax report-loading"><img src="/sites/all/themes/m6connect/images/pdf_icon.png"></a>
           <a href="/project-report-excel/commitment/Capital-Project-Manager?proids='.$project.'"><img src="/sites/all/themes/m6connect/images/excel.png"></a>
          </p>
        <p><a href="/load-project-pdf/estimate/Capital-Project-Manager/nojs?proids='.$project.'" class="use-ajax report-loading">Budget Estimate</a>
           <a href="/load-project-pdf/estimate/Capital-Project-Manager/nojs?proids='.$project.'" class="use-ajax report-loading"><img src="/sites/all/themes/m6connect/images/pdf_icon.png"></a>
           <a href="/project-report-excel/estimate/Capital-Project-Manager?proids='.$project.'"><img src="/sites/all/themes/m6connect/images/excel.png"></a>
        </p>  
        <p><a href="/load-project-pdf/asset/Capital-Project-Manager/nojs?proids='.$project.'" class="use-ajax report-loading">Project Asset Reports</a>
              <a href="/load-project-pdf/asset/Capital-Project-Manager/nojs?proids='.$project.'" class="use-ajax report-loading"><img src="/sites/all/themes/m6connect/images/pdf_icon.png"></a>
        <a href="/project-report-excel/asset/Capital-Project-Manager?proids='.$project.'"><img src="/sites/all/themes/m6connect/images/excel.png"></a>
            </p>
        <p><a href="/load-project-pdf/spending-forecast/Capital-Project-Manager/nojs?proids='.$project.'" class="use-ajax report-loading">Project Spending Forecasts</a>
           <a href="/load-project-pdf/spending-forecast/Capital-Project-Manager/nojs?proids='.$project.'" class="use-ajax report-loading"><img src="/sites/all/themes/m6connect/images/pdf_icon.png"></a>
           <a href="/project-report-excel/spending-forecast/Capital-Project-Manager?proids='.$project.'"><img src="/sites/all/themes/m6connect/images/excel.png"></a>
        </p>
		<p><a href="/load-project-pdf/asset-spend/Capital-Project-Manager/nojs?proids='.$project.'" class="use-ajax report-loading">Asset Profile Report</a>
           <a href="/load-project-pdf/asset-spend/Capital-Project-Manager/nojs?proids='.$project.'" class="use-ajax report-loading"><img src="/sites/all/themes/m6connect/images/pdf_icon.png"></a>
	    </p>
		</div>';
    }
  else {
    $content .= '<p><a href="/load-project-pdf/monthly/Capital-Project-Manager/nojs?proids='.$project.'" class="use-ajax report-loading">Monthly Report</a> 
            <a href="/load-project-pdf/monthly/Capital-Project-Manager/nojs?proids='.$project.'" class="use-ajax report-loading"><img src="/sites/all/themes/m6connect/images/pdf_icon.png"></a>
            <a href="/project-report-excel/monthly/Capital-Project-Manager?proids='.$project.'"><img src="/sites/all/themes/m6connect/images/excel.png"></a>
         </p>            
         <p><a href="/load-project-pdf/costsummary/Capital-Project-Manager/nojs?proids='.$project.'" class="use-ajax report-loading">Project Cost Summary</a>
          <a href="/load-project-pdf/costsummary/Capital-Project-Manager/nojs?proids='.$project.'" class="use-ajax report-loading"><img src="/sites/all/themes/m6connect/images/pdf_icon.png"></a>
          <a href="/project-report-excel/costsummary/Capital-Project-Manager?proids='.$project.'"><img src="/sites/all/themes/m6connect/images/excel.png"></a>
           </p>
         <p><a href="/load-project-pdf/costdetail/Capital-Project-Manager/nojs?proids='.$project.'" class="use-ajax report-loading">Project Cost Details</a>
          <a href="/load-project-pdf/costdetail/Capital-Project-Manager/nojs?proids='.$project.'" class="use-ajax report-loading"><img src="/sites/all/themes/m6connect/images/pdf_icon.png"></a>
          <a href="/project-report-excel/costdetail/Capital-Project-Manager?proids='.$project.'"><img src="/sites/all/themes/m6connect/images/excel.png"></a>
        </p>
        <p><a href="/load-project-pdf/safety/Capital-Project-Manager/nojs?proids='.$project.'" class="use-ajax report-loading">Project Safety Report</a>
          <a href="/load-project-pdf/safety/Capital-Project-Manager/nojs?proids='.$project.'" class="use-ajax report-loading"><img src="/sites/all/themes/m6connect/images/pdf_icon.png"></a>
          <a href="/project-report-excel/safety/Capital-Project-Manager?proids='.$project.'"><img src="/sites/all/themes/m6connect/images/excel.png"></a>
        </p>
        <p><a href="/load-project-pdf/commitment/Capital-Project-Manager/nojs?proids='.$project.'" class="use-ajax report-loading">Project Commitment</a>
           <a href="/load-project-pdf/commitment/Capital-Project-Manager/nojs?proids='.$project.'" class="use-ajax report-loading"><img src="/sites/all/themes/m6connect/images/pdf_icon.png"></a>
           <a href="/project-report-excel/commitment/Capital-Project-Manager?proids='.$project.'"><img src="/sites/all/themes/m6connect/images/excel.png"></a>
          </p>
        <p><a href="/load-project-pdf/estimate/costmanager/nojs?proids='.$project.'" class="use-ajax report-loading">Budget Estimate</a>
           <a href="/load-project-pdf/estimate/costmanager/nojs?proids='.$project.'" class="use-ajax report-loading"><img src="/sites/all/themes/m6connect/images/pdf_icon.png"></a>
           <a href="/project-report-excel/estimate/costmanager?proids='.$project.'"><img src="/sites/all/themes/m6connect/images/excel.png"></a>
        </p>  
        <p><a href="/load-project-pdf/asset/Capital-Project-Manager/nojs?proids='.$project.'" class="use-ajax report-loading">Project Asset Reports</a>
              <a href="/load-project-pdf/asset/Capital-Project-Manager/nojs?proids='.$project.'" class="use-ajax report-loading"><img src="/sites/all/themes/m6connect/images/pdf_icon.png"></a>
              <a href="/project-report-excel/asset/Capital-Project-Manager?proids='.$project.'"><img src="/sites/all/themes/m6connect/images/excel.png"></a>
            </p>                                      
        <p><a href="/load-project-pdf/spending-forecast/Capital-Project-Manager/nojs?proids='.$project.'" class="use-ajax report-loading">Project Spending Forecasts</a>
           <a href="/load-project-pdf/spending-forecast/Capital-Project-Manager/nojs?proids='.$project.'" class="use-ajax report-loading"><img src="/sites/all/themes/m6connect/images/pdf_icon.png"></a>
           <a href="/project-report-excel/spending-forecast/Capital-Project-Manager?proids='.$project.'"><img src="/sites/all/themes/m6connect/images/excel.png"></a>
        </p>
		
		<p><a href="/load-project-pdf/asset-spend/Capital-Project-Manager/nojs?proids='.$project.'" class="use-ajax report-loading">Asset Profile Report</a>
           <a href="/load-project-pdf/asset-spend/Capital-Project-Manager/nojs?proids='.$project.'" class="use-ajax report-loading"><img src="/sites/all/themes/m6connect/images/pdf_icon.png"></a>
		</p>
		</div>';
    }
  }
    else {
    $content = '<div class="text-left">
          <p><a href="#" class="no-data">Monthly Report</a>
           <a href="#" class="no-data"><img src="/sites/all/themes/m6connect/images/pdf_icon.png"></a>
           <a href="#" class="no-data"><img src="/sites/all/themes/m6connect/images/excel.png"></a>
          </p>
          <p><a href="#" class="no-data">Project Cost Summary</a>
            <a href="#" class="no-data"><img src="/sites/all/themes/m6connect/images/pdf_icon.png"></a>
            <a href="#" class="no-data"><img src="/sites/all/themes/m6connect/images/excel.png"></a>
          </p>
          <p><a href="#" class="no-data">Project Cost Details</a>
           <a href="#" class="no-data"><img src="/sites/all/themes/m6connect/images/pdf_icon.png"></a>
           <a href="#" class="no-data"><img src="/sites/all/themes/m6connect/images/excel.png"></a>
          </p>
          <p><a href="#" class="no-data">Project Commitment</a>
           <a href="#" class="no-data"><img src="/sites/all/themes/m6connect/images/pdf_icon.png"></a>
           <a href="#" class="no-data"><img src="/sites/all/themes/m6connect/images/excel.png"></a>
          </p>
          <p><a href="#" class="no-data">Project Safety</a>
           <a href="#" class="no-data"><img src="/sites/all/themes/m6connect/images/pdf_icon.png"></a>
           <a href="#" class="no-data"><img src="/sites/all/themes/m6connect/images/excel.png"></a>
           </p>
          <p><a href="#" class="no-data">Budget Estimate</a>
           <a href="#" class="no-data"><img src="/sites/all/themes/m6connect/images/pdf_icon.png"></a>
           <a href="#" class="no-data"><img src="/sites/all/themes/m6connect/images/excel.png"></a>
           </p>
         <p><a href="#" class="no-data">Project Asset Reports</a>
               <a href="#" class="no-data"><img src="/sites/all/themes/m6connect/images/pdf_icon.png"></a>
               <a href="#" class="no-data"><img src="/sites/all/themes/m6connect/images/excel.png"></a>
              </p>
        <p><a href="#" class="no-data">Project Spending Forecasts</a>
           <a href="#" class="no-data"><img src="/sites/all/themes/m6connect/images/pdf_icon.png"></a>
           <a href="#" class="no-data"><img src="/sites/all/themes/m6connect/images/excel.png"></a>
           </p>               
         </div>
         <div id="report-nodata-dialog"></div>';  
  }  
  return $content;
}

function _get_program_base_report($form,&$form_state) {
  global $company;
  $getProjectByCompany = _project_list_by_company($company->nid, 'project_management');
  foreach($getProjectByCompany as $key => $val) {
    $projectListByCom[$key] = $val;
  } 
  $form['main_container_report'] = array(
    '#type' => 'container',
    '#theme' => 'invite_m6_theme',
    '#attributes' => array('class'=>array('alert-container-section')),
    '#prefix' => '<div class="clearfix" id="main-class" style="display:none;"><div id="alert-container-section" class="add-new-alert-detail">', 
    //'#prefix' => '<div class="clearfix"><div id="alert-container-section" class="add-new-alert-detail">', 
    '#suffix' => '</div></div>',
    '#process' => array('invite_to_m6_process'),
  ); 
  $form['select-project'] = array(
    '#type' => 'select',
  '#title'=> 'Choose multiple projects',
  '#options' => $projectListByCom,
  '#chosen' => TRUE,
  '#multiple' => TRUE,
  '#attributes' => array('class'=> array('project_programe_reports_sections')),
  '#ajax' => array(
    'callback'=> 'change_program_project_reports_callback',
    'wrapper' => 'project_program_reports_main_container',
    'effect' => 'fade',
  ),
  '#default_value' => isset($_SESSION['ACTIVEPROJECT'])?$_SESSION['ACTIVEPROJECT']:'',
  '#prefix' => '<div class="clearfix">',
  '#suffix' => '</div>',
  );
  return $form;
}

// ===============================
// Excel report work section start
function project_programe_report_excel($type,$getProID) {   
  global $base_url;
  global $company;
  setlocale(LC_MONETARY, 'en_US');
  $XLSRowNo = $XLSColNo = 1;
  include_once DRUPAL_ROOT . '/sites/all/libraries/PHPExcel/Classes/PHPExcel.php';
  if(is_numeric(arg(2))) { $costProId = array(arg(2)); } else { $costProId = explode(',',check_plain($_GET['proids'])); }  
  $_excelexport_objPHPExcel = new PHPExcel ();
  $_excelexport_objPHPExcel->createSheet ( NULL, 0 );
  $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 );  
  $BStyle = array('borders' => array( 'bottom' => array( 'style' => PHPExcel_Style_Border::BORDER_THIN ))); 
  $nextReport = 1;
  $allDataArr = array();
  if($type == 'costsummary') {
    foreach($costProId as $proIDFnl) {
    $query= db_select('node','n'); 
    $query->join('og_membership','om','om.etid=n.nid AND om.entity_type=:entityType', array(':entityType'=>'node'));
    $query->join('field_data_field_estimate_reference','er','er.entity_id = n.nid');
    $query->join('node','enode','enode.nid=er.field_estimate_reference_nid');
    $query->join('field_data_field_project_estimate_status','es','es.entity_id = enode.nid');  
    $query->join('field_data_field_project_estimate_amount','ea','ea.entity_id = enode.nid');    
    $query->join('field_data_field_capital_contingency','ecc','ecc.entity_id = enode.nid');        
    $query->join('field_data_field_project_reference','pr','enode.nid=pr.entity_id');  
    $query->leftjoin('field_data_field_est_line_item_amt','la','n.nid=la.entity_id');  
    $query->leftjoin('field_data_field_conigency_percentage','cp','n.nid=cp.entity_id');  
    $query->leftjoin('field_data_field_est_cost_code','cc','cc.entity_id=n.nid');
    $query->fields('cc',array('entity_id'));
    $query->fields('la',array('field_est_line_item_amt_value'));
    $query->fields('cp',array('field_conigency_percentage_value'));
    $query->fields('cc',array('field_est_cost_code_value'));
    $query->fields('ea',array('field_project_estimate_amount_value'));  
    $query->fields('ecc',array('field_capital_contingency_value'));  
    $query->fields('er',array('field_estimate_reference_nid'));  
    $query->fields('pr',array('field_project_reference_nid'));  
    $query->condition('es.field_project_estimate_status_value', 'approved', '=');
    $query->orderBy('cc.field_est_cost_code_value', 'ASC');
    $query->condition('pr.field_project_reference_nid', $proIDFnl, '=');
    $query->condition('om.gid', $company->nid, '=');
    $costCodeFnl = $query->execute()->fetchAll();
    $allDataArr[$proIDFnl] = $costCodeFnl;    
    }
  // ===========================
    // Gerenating final summary report
    $costSummaryArr = array();
    foreach ($allDataArr as $k => $subArray) {
      foreach ($subArray as $id => $value) {
        $costSummaryArr[] = $value;
      }
    }
    $getCCcodeArr = array();
    $getCCcodeArrCount = array();
    $i = 0;
    foreach($costSummaryArr as $dataPriId => $proVal) {
      // Get cost code
    $query2= db_select('node','n'); 
    $query2->join('og_membership','om','om.etid=n.nid AND om.entity_type=:entityType', array(':entityType'=>'node'));
    $query2->join('field_data_field_estimate_reference','er','er.entity_id = n.nid');
    $query2->join('node','enode','enode.nid=er.field_estimate_reference_nid');
    $query2->join('field_data_field_project_estimate_status','es','es.entity_id = enode.nid');      
    $query2->join('field_data_field_project_reference','pr','enode.nid=pr.entity_id');  
    $query2->leftjoin('field_data_field_est_line_item_amt','la','n.nid=la.entity_id');  
    $query2->leftjoin('field_data_field_est_cost_code','cc','cc.entity_id=n.nid');
    $query2->addExpression('SUM(la.field_est_line_item_amt_value)');
    $query2->condition('es.field_project_estimate_status_value', 'approved', '=');
    $query2->orderBy('cc.field_est_cost_code_value', 'ASC');
    $query2->condition('pr.field_project_reference_nid', $proVal->field_project_reference_nid, '=');        
    $query2->condition('om.gid', $company->nid, '=');
    $amtLineTotal = $query2->execute()->fetchField();
    $costCodeDesc = get_description_by_cost_code_mod($proVal->field_est_cost_code_value);
    $capitalContigency = $proVal->field_capital_contingency_value;
    if(!isset($getCCcodeArr[$proVal->field_est_cost_code_value])){
      $getCCcodeArr[$proVal->field_est_cost_code_value]= array(     
      'cc' => $proVal->field_est_cost_code_value,
      'cost_code' => $costCodeDesc,
      'originalBudget' => 0,
      'currentBudget' => 0,
      'Commitment' => 0,
      'spent' => 0,
      'Allocated' => 0,
      'est' => 0,
      'PFC' => 0,
      'Variance' => 0,
      );
      $getCCcodeArrCount[$proVal->field_est_cost_code_value] = 0; 
    }   
    if($proVal->field_est_line_item_amt_value != '') {
      $originalBudget = $proVal->field_est_line_item_amt_value;
    }
    else if($proVal->field_conigency_percentage_value != '') {
      $percent = ($amtLineTotal * $proVal->field_conigency_percentage_value)/100;     
      $originalBudget = $percent;
    }
    $totalOriginalBudget += $originalBudget;
    $currentBudget = $originalBudget;
    $totalcurrentBudget += $currentBudget;
    // Get invoice total
    $getInvoiceTotal = get_invoice_total_by_cost_code($proVal->field_est_cost_code_value,$proVal->field_project_reference_nid);
    $totalInvoiceTotal += $getInvoiceTotal;
    // Get commitment total
    $getCommitmentTotal = get_commitment_total_by_cost_code($proVal->field_est_cost_code_value,$proVal->field_project_reference_nid);
    $totalCommitmentTotal += $getCommitmentTotal;
    // Get total allocated 
    $getTotalAllocated = get_total_allocated_by_cost_code($proVal->field_est_cost_code_value,$proVal->field_project_reference_nid,$getCommitmentTotal);
    $totalAllocated += $getTotalAllocated;
    // Get etc total
    $getETCTotal = get_etc_total_by_cost_code($proVal->field_est_cost_code_value,$proVal->field_project_reference_nid);
    $etcTotal += $getETCTotal;
    // Get Project final cost
    $projectFinalCost = $getTotalAllocated + $getETCTotal;
    $totalFinalCost += $projectFinalCost;
    // Variance
    $varience = $originalBudget - $projectFinalCost;
    $totalVariance += $varience;      
    $getCCcodeArr[$proVal->field_est_cost_code_value]['cc'] = $proVal->field_est_cost_code_value; 
    $getCCcodeArr[$proVal->field_est_cost_code_value]['originalBudget'] += $originalBudget; 
    $getCCcodeArr[$proVal->field_est_cost_code_value]['currentBudget'] += $currentBudget;
    $getCCcodeArr[$proVal->field_est_cost_code_value]['Commitment'] += $getCommitmentTotal;
    $getCCcodeArr[$proVal->field_est_cost_code_value]['spent'] += $getInvoiceTotal;
    $getCCcodeArr[$proVal->field_est_cost_code_value]['Allocated'] += $getTotalAllocated;
    $getCCcodeArr[$proVal->field_est_cost_code_value]['est'] += $getETCTotal;
    $getCCcodeArr[$proVal->field_est_cost_code_value]['PFC'] += $projectFinalCost;
    $getCCcodeArr[$proVal->field_est_cost_code_value]['Variance'] += $varience;
    $getCCcodeArrCount[$proVal->field_est_cost_code_value]++;       
    $i++;
  }
    $getCCcodeArrTotal = array('originalBudget' => 0,'currentBudget' => 0,'Commitment' => 0,'spent' => 0,'Allocated' => 0,'est' => 0,'PFC' => 0,'Variance' => 0);
  $_excelexport_objPHPExcel->getActiveSheet()->mergeCells('E'.$XLSRowNo.':F'.$XLSRowNo);
  $_excelexport_objPHPExcel->getActiveSheet()->getStyle('B1:I3')->getFill()->setFillType(PHPExcel_Style_Fill::FILL_SOLID)->getStartColor()->setARGB('E3E3E3');
  $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( 'E' . ($XLSRowNo) )->getFont ()->setBold ( true );
  $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'E' . ($XLSRowNo), utf8_encode ( 'Final Summary Report' ) );
  $XLSRowNo++; $XLSRowNo++; $XLSRowNo++; $XLSRowNo++;
  // Cost Code table start here
  $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( 'B' . ($XLSRowNo) )->getFont ()->setBold ( true );
  $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'B' . ($XLSRowNo), utf8_encode ( 'Cost Code Description' ) );
  $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( 'C' . ($XLSRowNo) )->getFont ()->setBold ( true );
  $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'C' . ($XLSRowNo), utf8_encode ( 'Original Budget' ) );
  $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( 'D' . ($XLSRowNo) )->getFont ()->setBold ( true );
  $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'D' . ($XLSRowNo), utf8_encode ( 'Current Budget' ) );
  $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( 'E' . ($XLSRowNo) )->getFont ()->setBold ( true );
  $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'E' . ($XLSRowNo), utf8_encode ( 'Committed' ) );
  $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( 'F' . ($XLSRowNo) )->getFont ()->setBold ( true );
  $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'F' . ($XLSRowNo), utf8_encode ( 'Spending To Date' ) ); 
  $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( 'G' . ($XLSRowNo) )->getFont ()->setBold ( true );
  $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'G' . ($XLSRowNo), utf8_encode ( 'Total Allocated' ) );
  $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( 'H' . ($XLSRowNo) )->getFont ()->setBold ( true );
  $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'H' . ($XLSRowNo), utf8_encode ( 'Estimate to Complete' ) );
  $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( 'I' . ($XLSRowNo) )->getFont ()->setBold ( true );
  $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'I' . ($XLSRowNo), utf8_encode ( 'PFC' ) );
  $XLSRowNo++;
  foreach($getCCcodeArr as $cCodeId => $cCodeVal) {
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'B' . ($XLSRowNo), utf8_encode ( $cCodeVal['cost_code'] ) );   
    $_excelexport_objPHPExcel->getActiveSheet()->getStyle('C' . ($XLSRowNo).':I'.($XLSRowNo))->getNumberFormat()->setFormatCode('$#,##0_-');
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'C' . ($XLSRowNo), utf8_encode ( $cCodeVal['originalBudget'] ) );
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'D' . ($XLSRowNo), utf8_encode ( $cCodeVal['currentBudget'] ) );
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'E' . ($XLSRowNo), utf8_encode ( $cCodeVal['Commitment'] ) );
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'F' . ($XLSRowNo), utf8_encode ( $cCodeVal['spent'] ) );
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'G' . ($XLSRowNo), utf8_encode ( $cCodeVal['Allocated'] ) );      
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'H' . ($XLSRowNo), utf8_encode ( $cCodeVal['est'] ) );      
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'I' . ($XLSRowNo), utf8_encode ( $cCodeVal['PFC'] ) );
    $XLSRowNo++;
    $getCCcodeArrTotal = array(
    'originalBudget' => $getCCcodeArrTotal['originalBudget']+$cCodeVal['originalBudget'],
    'currentBudget' => $getCCcodeArrTotal['currentBudget']+$cCodeVal['originalBudget'],
    'Commitment' => $getCCcodeArrTotal['Commitment']+$cCodeVal['Commitment'],
    'spent' => $getCCcodeArrTotal['spent']+$cCodeVal['spent'],
    'Allocated' => $getCCcodeArrTotal['Allocated']+$cCodeVal['Allocated'],
    'est' => $getCCcodeArrTotal['est']+$cCodeVal['est'],
    'PFC' => $getCCcodeArrTotal['PFC']+$cCodeVal['PFC'],
    'Variance' => $getCCcodeArrTotal['Variance']+$cCodeVal['Variance'],
    );
  }
  $XLSRowNo++;
  $_excelexport_objPHPExcel->getActiveSheet()->getStyle('B' . ($XLSRowNo - 1).':I'.($XLSRowNo - 1))->applyFromArray($BStyle);
  $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( 'B' . ($XLSRowNo) )->getFont ()->setBold ( true );
  $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'B' . ($XLSRowNo), utf8_encode ( 'Project Total' ) );
  $_excelexport_objPHPExcel->getActiveSheet()->getStyle('C' . ($XLSRowNo).':I'.($XLSRowNo))->getNumberFormat()->setFormatCode('$#,##0_-');
  $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( 'C' . ($XLSRowNo) )->getFont ()->setBold ( true );
  $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'C' . ($XLSRowNo), utf8_encode ( $getCCcodeArrTotal['originalBudget'] ) );
  $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( 'D' . ($XLSRowNo) )->getFont ()->setBold ( true );
  $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'D' . ($XLSRowNo), utf8_encode ( $getCCcodeArrTotal['originalBudget'] ) );
  $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( 'E' . ($XLSRowNo) )->getFont ()->setBold ( true );
  $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'E' . ($XLSRowNo), utf8_encode ( $getCCcodeArrTotal['Commitment'] ) );
  $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( 'F' . ($XLSRowNo) )->getFont ()->setBold ( true );
  $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'F' . ($XLSRowNo), utf8_encode (  $getCCcodeArrTotal['spent'] ) );
  $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( 'G' . ($XLSRowNo) )->getFont ()->setBold ( true );
  $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'G' . ($XLSRowNo), utf8_encode ( $getCCcodeArrTotal['Allocated'] ) );
  $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( 'H' . ($XLSRowNo) )->getFont ()->setBold ( true );
  $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'H' . ($XLSRowNo), utf8_encode ( $getCCcodeArrTotal['est'] ) );
  $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( 'I' . ($XLSRowNo) )->getFont ()->setBold ( true );
  $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'I' . ($XLSRowNo), utf8_encode ( $getCCcodeArrTotal['PFC'] ) );
  $XLSRowNo++; $XLSRowNo++; $XLSRowNo++; $XLSRowNo++;
  }
  $checkFirst = 1;
  foreach($costProId as $proID) {
    $projectDetails = node_load($proID);
  $projectName = $projectDetails->title;
  $projectNumber = $projectDetails->field_project_mgmt_number['und'][0]['value']; 
  if(isset($projectDetails->field_project_mgmt_manager['und'])) { 
    $userData = user_load($projectDetails->field_project_mgmt_manager['und'][0]['value']);
    $projectManager = ucwords(_get_user_realname($userData->uid));
    $managerPic = image_style_url('user_pic_40x40',$userData->field_user_profile_photo['und'][0]['uri']);
    $pmGDType = ($userData->field_user_profile_photo['und'][0]['filemime'] == 'image/jpeg')?'jpg':'png';
  }
  else {
    $projectManager = 'None';
    $managerPic == '/sites/default/files/styles/find_people/public/images_13.png';
    $pmGDType = 'png';
  }     
  if(isset($projectDetails->field_project_mgmt_location['und']) && $projectDetails->field_project_mgmt_location['und'][0]['value'] != '') {
    $locationID = node_load($projectDetails->field_project_mgmt_location['und'][0]['value']);
    $getLocation = $locationID->field_org_address['und'][0]['thoroughfare'].' '.$locationID->field_org_address['und'][0]['administrative_area'];
  }
  else {
    $getLocation = 'None';
  }
  $getCompanyData = node_load($projectDetails->og_group_ref['und'][0]['target_id']);  
  if(isset($getCompanyData->field_logo['und'])) {   
    $companyLogo = image_style_url('thumbnail', $getCompanyData->field_logo['und'][0]['uri']);  
    $gdImageType = ($getCompanyData->field_logo['und'][0]['filemime'] == 'image/jpeg')?'jpeg':'png';
  }
  else {
    $companyLogo = $base_url.'/sites/all/themes/m6connect/images/default_company_profile.jpg';
    $gdImageType = 'jpeg';
  }   
  $costCode = _get_report_costcode_data($proID);  
  // final summary report
  // Get cost code by and budget amount by project    
  $query= db_select('node','n'); 
  $query->join('og_membership','om','om.etid=n.nid AND om.entity_type=:entityType', array(':entityType'=>'node'));
  $query->join('field_data_field_estimate_reference','er','er.entity_id = n.nid');
  $query->join('node','enode','enode.nid=er.field_estimate_reference_nid');
  $query->join('field_data_field_project_estimate_status','es','es.entity_id = enode.nid');  
  $query->join('field_data_field_project_estimate_amount','ea','ea.entity_id = enode.nid');    
  $query->join('field_data_field_capital_contingency','ecc','ecc.entity_id = enode.nid');        
  $query->join('field_data_field_project_reference','pr','enode.nid=pr.entity_id');  
  $query->leftjoin('field_data_field_est_line_item_amt','la','n.nid=la.entity_id');  
  $query->leftjoin('field_data_field_conigency_percentage','cp','n.nid=cp.entity_id');  
  $query->leftjoin('field_data_field_est_cost_code','cc','cc.entity_id=n.nid');
  $query->fields('cc',array('entity_id'));
  $query->fields('la',array('field_est_line_item_amt_value'));
  $query->fields('cp',array('field_conigency_percentage_value'));
  $query->fields('cc',array('field_est_cost_code_value'));
  $query->fields('ea',array('field_project_estimate_amount_value'));  
  $query->fields('ecc',array('field_capital_contingency_value'));  
  $query->fields('er',array('field_estimate_reference_nid'));  
  $query->fields('pr',array('field_project_reference_nid'));  
  $query->condition('es.field_project_estimate_status_value', 'approved', '=');
  $query->orderBy('cc.field_est_cost_code_value', 'ASC');
  $query->condition('pr.field_project_reference_nid', $proID, '=');
  $query->condition('om.gid', $company->nid, '=');
  $costCodeFinal = $query->execute()->fetchAll();
  $allDataArr[$proID] = $costCodeFinal; 
  $ccArrTotal= array('originalBudget' => 0,'currentBudget' => 0,'Commitment' => 0,'spent' => 0,'Allocated' => 0,'est' => 0,'PFC' => 0,'Variance' => 0);
  // ===============================
  // Initialise Excel monthly Report
  // ===============================    
  if($type == 'monthly') {
    $XLSRowNo = ($nextReport == 0)?$XLSRowNo:$nextReport; 
    //$_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'B' . ($XLSRowNo), utf8_encode ( $proID ) );
    $reportTitle = 'Monthly Project Report';    
    $projectStatus = isset($projectDetails->field_project_mgmt_status['und'])?$projectDetails->field_project_mgmt_status['und'][0]['value']:'None';
    $fundingStatus = isset($projectDetails->field_project_funding_status['und'])?$projectDetails->field_project_funding_status['und'][0]['value']:'None';
    $description = isset($projectDetails->body['und'])?strip_tags($projectDetails->body['und'][0]['value']):'None';
    $designStatus = isset($projectDetails->field_project_design_status['und'])?$projectDetails->field_project_design_status['und'][0]['value']:'None';
    $commentData = get_project_manager_comment_by_project($proID);
    $getScheduleNodes = _get_sechedule_data_by_project($proID);
    $generalInfoImage = _get_general_image_data_by_project($proID);
    $proDescImage = _get_project_description_image_data_by_project($proID);
    $proSafetyImage = _get_safety_image_data_by_project($proID);
    $proAdditionalImage = _get_additional_image_data_by_project($proID);
    $recentSafety = _get_recent_safety_data_by_project($proID);
    $allSafety = _get_all_safety_data_by_project($proID);
    $getRecentDate = $recentSafety[0]->field_start_date_value != ''?date('m/d/Y', strtotime($recentSafety[0]->field_start_date_value)):0;
    $getRecentLta = $recentSafety[0]->field_lost_time_accidents_value != ''?$recentSafety[0]->field_lost_time_accidents_value:0;
    $getRecentHours = $recentSafety[0]->field_hours_this_period_value != ''?$recentSafety[0]->field_hours_this_period_value:0;
    foreach($allSafety as $safetyKey => $safetyVal) {
      $lta = $safetyVal->field_lost_time_accidents_value;
      $totalLTA += $safetyVal->field_lost_time_accidents_value;
      $workingHrs = $safetyVal->field_hours_this_period_value;
      $totalHours += $safetyVal->field_hours_this_period_value;
    }
    // ==================================
    // Excel work for Monthly report start      
    // Calling compay Logo and set into excel
    $gdImage = ($gdImageType == 'jpeg')?imagecreatefromjpeg ( $companyLogo ):imagecreatefrompng ( $companyLogo );
    $objDrawing = new PHPExcel_Worksheet_MemoryDrawing ();
    $objDrawing->setName ( 'Sample image' );
    $objDrawing->setDescription ( 'Sample image' );
    $objDrawing->setImageResource ( $gdImage );
    $objDrawing->setRenderingFunction ( PHPExcel_Worksheet_MemoryDrawing::RENDERING_JPEG );
    $objDrawing->setMimeType ( PHPExcel_Worksheet_MemoryDrawing::MIMETYPE_DEFAULT );
    $objDrawing->setHeight ( 62 );
    $colindex = excelgeneratorurl_get_colindex ( 1 );
    $objDrawing->setCoordinates ( $colindex . ($XLSRowNo) );  
    $objDrawing->setWorksheet ( $_excelexport_objPHPExcel->getActiveSheet () );
    // Comapy logo calling process ends
    // ********************************
    $endData = $XLSRowNo+3;
    $rowFills = 'B'.$XLSRowNo.':H'.$endData;   
    $_excelexport_objPHPExcel->getActiveSheet()->getStyle($rowFills)->getFill()->setFillType(PHPExcel_Style_Fill::FILL_SOLID)->getStartColor()->setARGB('E3E3E3');
    $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( $colindex . ($XLSRowNo) )->getFont ()->setBold ( true );
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'C' . ($XLSRowNo+1), utf8_encode ( 'Monthly Project Report' ) ); 
    $XLSRowNo++; $XLSRowNo++; $XLSRowNo++; $XLSRowNo++;
    // == Setting Report title, Project Name, Number == //
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'B' . ($XLSRowNo), utf8_encode ( ucwords($projectName) ) );
    $_excelexport_objPHPExcel->getActiveSheet()->mergeCells('G'.$XLSRowNo.':H'.$XLSRowNo);
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'G' . ($XLSRowNo), utf8_encode ( $projectNumber ) );       
    $XLSRowNo++; $XLSRowNo++;
    // =====================================
    // Setting up general information section
    $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( $colindex . ($XLSRowNo) )->getFont ()->setBold ( true );
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( $colindex . ($XLSRowNo), utf8_encode ( 'General Information' ) );
    $XLSRowNo++; $XLSRowNo++;
    $col = 1;
    foreach($generalInfoImage as $giImageKey => $giImageVal) { 
    $fileData = file_load($generalInfoImage[$giImageKey]->field_group_information_fid); 
    $getImage = image_style_url('project_general_images_style',$fileData->uri);
    if($fileData->filemime == 'image/jpeg'){ $gdImage = imagecreatefromjpeg($getImage); }
    else { $gdImage = imagecreatefrompng($getImage); }
    $objDrawing = new PHPExcel_Worksheet_MemoryDrawing ();
    $objDrawing->setName ( 'Sample image' );
    $objDrawing->setDescription ( 'Sample image' );
    $objDrawing->setImageResource ( $gdImage );
    $objDrawing->setRenderingFunction ( PHPExcel_Worksheet_MemoryDrawing::RENDERING_JPEG );
    $objDrawing->setMimeType ( PHPExcel_Worksheet_MemoryDrawing::MIMETYPE_DEFAULT );    
    $colindex = ($col == 1)?excelgeneratorurl_get_colindex ( $col ):excelgeneratorurl_get_colindex ( $col );
    $objDrawing->setCoordinates ( $colindex . ($XLSRowNo) );  
    $objDrawing->setWorksheet ( $_excelexport_objPHPExcel->getActiveSheet () );
    $col++;
    }       
    $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( $colindex . ($XLSRowNo) )->getFont ()->setBold ( true );
    $colindex = excelgeneratorurl_get_colindex ( $col );
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( $colindex . ($XLSRowNo), utf8_encode ( 'Project Manager:' ) ); 
    $colindex = excelgeneratorurl_get_colindex ( $col+1 );
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( $colindex . ($XLSRowNo), utf8_encode ( $projectManager ) );  
    // Project manager image
    $gdImage = ($pmGDType == 'jpg')?imagecreatefromjpeg ( $managerPic ):imagecreatefrompng ( $managerPic );
    $objDrawing = new PHPExcel_Worksheet_MemoryDrawing ();
    $objDrawing->setName ( 'Sample image' );
    $objDrawing->setDescription ( 'Sample image' );
    $objDrawing->setImageResource ( $gdImage );
    $objDrawing->setRenderingFunction ( PHPExcel_Worksheet_MemoryDrawing::RENDERING_JPEG );
    $objDrawing->setMimeType ( PHPExcel_Worksheet_MemoryDrawing::MIMETYPE_DEFAULT );
    $objDrawing->setHeight ( 32 );
    $colindex = excelgeneratorurl_get_colindex ( 1 );
    $objDrawing->setCoordinates ( 'E' . ($XLSRowNo) );  
    $objDrawing->setWorksheet ( $_excelexport_objPHPExcel->getActiveSheet () );
    $XLSRowNo++;  
    $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( $colindex . ($XLSRowNo) )->getFont ()->setBold ( true );
    $colindex = excelgeneratorurl_get_colindex ( $col );
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( $colindex . ($XLSRowNo), utf8_encode ( 'Location:' ) );
    $colindex = excelgeneratorurl_get_colindex ( $col+1 );
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( $colindex . ($XLSRowNo), utf8_encode ( $getLocation ) );
    $XLSRowNo++;  
    $colindex = excelgeneratorurl_get_colindex ( $col );
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( $colindex . ($XLSRowNo), utf8_encode ( 'Project Status:' ) );
    $colindex = excelgeneratorurl_get_colindex ( $col+1 );
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( $colindex . ($XLSRowNo), utf8_encode ( $projectStatus ) );
    $XLSRowNo++;      
    $colindex = excelgeneratorurl_get_colindex ( $col );
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( $colindex . ($XLSRowNo), utf8_encode ( 'Funding Status:' ) );
    $colindex = excelgeneratorurl_get_colindex ( $col+1 );
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( $colindex . ($XLSRowNo), utf8_encode ( $fundingStatus ) );
    $XLSRowNo++;
    $colindex = excelgeneratorurl_get_colindex ( $col );
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( $colindex . ($XLSRowNo), utf8_encode ( 'Design Status:' ) );
    $colindex = excelgeneratorurl_get_colindex ( $col+1 );
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( $colindex . ($XLSRowNo), utf8_encode ( $designStatus ) );
    $XLSRowNo++; $XLSRowNo++; $XLSRowNo++;
    // End Setting up general information
    // **********************************
    // Start Project description and project comment section
    $_excelexport_objPHPExcel->getActiveSheet()->getStyle('B'. ($XLSRowNo - 1).':H'.($XLSRowNo - 1))->applyFromArray($BStyle);
    $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( 'B' . ($XLSRowNo) )->getFont ()->setBold ( true );     
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'B' . ($XLSRowNo), utf8_encode ( 'Project Description' ) );
    $XLSRowNo++; $XLSRowNo++;
    $col1 = 1;
    foreach($proDescImage as $pdImageKey => $pdImageVal) { 
    $fileData = file_load($proDescImage[$pdImageKey]->field_project_description_images_fid); 
    $getImagePD = image_style_url('project_general_images_style',$fileData->uri);
    $gdImage1 = ($fileData->filemime == 'image/jpeg')?imagecreatefromjpeg($getImagePD):imagecreatefrompng($getImagePD);   
    $objDrawing = new PHPExcel_Worksheet_MemoryDrawing ();
    $objDrawing->setName ( 'Sample image' );
    $objDrawing->setDescription ( 'Sample image' );
    $objDrawing->setImageResource ( $gdImage1 );
    $objDrawing->setRenderingFunction ( PHPExcel_Worksheet_MemoryDrawing::RENDERING_JPEG );
    $objDrawing->setMimeType ( PHPExcel_Worksheet_MemoryDrawing::MIMETYPE_DEFAULT );    
    $colindex = ($col1 == 1)?excelgeneratorurl_get_colindex ( $col1 ):excelgeneratorurl_get_colindex ( $col1 );   
    $objDrawing->setCoordinates ( $colindex . ($XLSRowNo) );  
    $objDrawing->setWorksheet ( $_excelexport_objPHPExcel->getActiveSheet () );
    $col1++;
    }
    $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( $colindex . ($XLSRowNo) )->getFont ()->setBold ( true );
    $colindex = excelgeneratorurl_get_colindex ( $col1 );   
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( $colindex . ($XLSRowNo), utf8_encode ( $description ) );       
    $XLSRowNo++; $XLSRowNo++; $XLSRowNo++; $XLSRowNo++; 
    $BStyle = array('borders' => array( 'bottom' => array( 'style' => PHPExcel_Style_Border::BORDER_THIN ))); 
    $_excelexport_objPHPExcel->getActiveSheet()->getStyle('B'. ($XLSRowNo - 1).':H'.($XLSRowNo - 1))->applyFromArray($BStyle);
    $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( 'B' . ($XLSRowNo) )->getFont ()->setBold ( true );   
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'B' . ($XLSRowNo), utf8_encode ( 'Project Manager Comments' ) );
    $XLSRowNo++; $XLSRowNo++;
    $srNo = 1;
    foreach($commentData as $commentKey => $commentVal) {
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'B' . ($XLSRowNo), utf8_encode ( $srNo.' '.$commentVal->message ) );
    $XLSRowNo++;
    $srNo ++;
    }
    $XLSRowNo++; $XLSRowNo++;
    // End description and project comment
    // ***********************************
    // Project cost details and Cost summary table section
    $_excelexport_objPHPExcel->getActiveSheet()->getStyle('B'. ($XLSRowNo - 1).':H'.($XLSRowNo - 1))->applyFromArray($BStyle);
    $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( 'B' . ($XLSRowNo) )->getFont ()->setBold ( true );
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'B' . ($XLSRowNo), utf8_encode ( 'Project Cost Detail' ) );
    $XLSRowNo++; $XLSRowNo++;
    $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( 'B' . ($XLSRowNo) )->getFont ()->setBold ( true );
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'B' . ($XLSRowNo), utf8_encode ( 'Cost Code' ) );
    $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( 'C' . ($XLSRowNo) )->getFont ()->setBold ( true );
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'C' . ($XLSRowNo), utf8_encode ( 'Current Budget' ) );
    $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( 'D' . ($XLSRowNo) )->getFont ()->setBold ( true );
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'D' . ($XLSRowNo), utf8_encode ( 'Committed' ) );
    $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( 'E' . ($XLSRowNo) )->getFont ()->setBold ( true );
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'E' . ($XLSRowNo), utf8_encode ( 'Spent' ) );  
    $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( 'F' . ($XLSRowNo) )->getFont ()->setBold ( true );
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'F' . ($XLSRowNo), utf8_encode ( 'Total Allocated' ) );
    $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( 'G' . ($XLSRowNo) )->getFont ()->setBold ( true );
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'G' . ($XLSRowNo), utf8_encode ( 'ETC' ) );
    $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( 'H' . ($XLSRowNo) )->getFont ()->setBold ( true );
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'H' . ($XLSRowNo), utf8_encode ( 'PFC' ) );
    $XLSRowNo++;
    foreach($costCode as $ccId => $ccVal) {
    // Get cost code
     
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'B' . ($XLSRowNo), utf8_encode ( $ccVal['cost_code'] ) );        
    $_excelexport_objPHPExcel->getActiveSheet()->getStyle('C' . ($XLSRowNo).':H'.($XLSRowNo))->getNumberFormat()->setFormatCode('$#,##0_-');        
    //$_excelexport_objPHPExcel->getActiveSheet()->getStyle('C' . ($XLSRowNo).':H'.($XLSRowNo))->getNumberFormat()->setFormatCode('_("$"* #,##0.00_);_("$"* \(#,##0.00\);_("$"* "-"??_);_(@_)');    
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'C' . ($XLSRowNo), utf8_encode ( intval($ccVal['originalBudget']) ) );
    //$_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'C' . ($XLSRowNo), utf8_encode ( '$'.number_format($currentBudget) ) );
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'D' . ($XLSRowNo), utf8_encode ( intval($ccVal['Commitment']) ) );
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'E' . ($XLSRowNo), utf8_encode ( $ccVal['spent'] ) );
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'F' . ($XLSRowNo), utf8_encode ( $ccVal['Allocated'] ) );      
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'G' . ($XLSRowNo), utf8_encode ( $ccVal['est'] ) );      
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'H' . ($XLSRowNo), utf8_encode ( $ccVal['PFC'] ) );
    $XLSRowNo++;
    $ccArrTotal= array(
        'originalBudget' => $ccArrTotal['originalBudget']+$ccVal['originalBudget'],
        'currentBudget' => $ccArrTotal['currentBudget']+$ccVal['originalBudget'],
        'Commitment' => $ccArrTotal['Commitment']+$ccVal['Commitment'],
        'spent' => $ccArrTotal['spent']+$ccVal['spent'],
        'Allocated' => $ccArrTotal['Allocated']+$ccVal['Allocated'],
        'est' => $ccArrTotal['est']+$ccVal['est'],
        'PFC' => $ccArrTotal['PFC']+$ccVal['PFC'],
        'Variance' => $ccArrTotal['Variance']+$ccVal['Variance'],
      );
    }
    $XLSRowNo++;
    $_excelexport_objPHPExcel->getActiveSheet()->getStyle('B'. ($XLSRowNo - 1).':H'.($XLSRowNo - 1))->applyFromArray($BStyle);
    $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( 'B' . ($XLSRowNo) )->getFont ()->setBold ( true );
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'B' . ($XLSRowNo), utf8_encode ( 'Project Totals' ) );
    $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( 'C' . ($XLSRowNo) )->getFont ()->setBold ( true );
    $_excelexport_objPHPExcel->getActiveSheet()->getStyle('C' . ($XLSRowNo).':H'.($XLSRowNo))->getNumberFormat()->setFormatCode('$#,##0_-');
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'C' . ($XLSRowNo), utf8_encode ( $ccArrTotal['originalBudget'] ) );
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'D' . ($XLSRowNo), utf8_encode ( $ccArrTotal['Commitment'] ) );
    $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( 'E' . ($XLSRowNo) )->getFont ()->setBold ( true );
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'E' . ($XLSRowNo), utf8_encode ( $ccArrTotal['spent'] ) );
    $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( 'F' . ($XLSRowNo) )->getFont ()->setBold ( true );
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'F' . ($XLSRowNo), utf8_encode ( $ccArrTotal['Allocated'] ) ); 
    $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( 'G' . ($XLSRowNo) )->getFont ()->setBold ( true );
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'G' . ($XLSRowNo), utf8_encode ( $ccArrTotal['est'] ) );
    $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( 'H' . ($XLSRowNo) )->getFont ()->setBold ( true );
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'H' . ($XLSRowNo), utf8_encode ( $ccArrTotal['PFC'] ) );
    $_excelexport_objPHPExcel->getActiveSheet()->getStyle('B'.$XLSRowNo.':I'.$XLSRowNo.'')->applyFromArray($BStyle);
    $XLSRowNo++; $XLSRowNo++; $XLSRowNo++;
    
    // == Project cost details and Cost summary table section
    // ================================
    // Project sechedule table section begain
    $_excelexport_objPHPExcel->getActiveSheet()->getStyle('B'. ($XLSRowNo - 1).':H'.($XLSRowNo - 1))->applyFromArray($BStyle);
    $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( 'B' . ($XLSRowNo) )->getFont ()->setBold ( true );
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'B' . ($XLSRowNo), utf8_encode ( 'Project Schedule' ) );
    $XLSRowNo++; $XLSRowNo++;
    $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( 'B' . ($XLSRowNo) )->getFont ()->setBold ( true );
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'B' . ($XLSRowNo), utf8_encode ( 'Milestone Description' ) );  
    $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( 'C' . ($XLSRowNo) )->getFont ()->setBold ( true );
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'C' . ($XLSRowNo), utf8_encode ( 'Original Date' ) );  
    $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( 'D' . ($XLSRowNo) )->getFont ()->setBold ( true );
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'D' . ($XLSRowNo), utf8_encode ( 'Projected Date' ) ); 
    $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( 'E' . ($XLSRowNo) )->getFont ()->setBold ( true );
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'E' . ($XLSRowNo), utf8_encode ( 'Actual Date' ) );
    $XLSRowNo++;
    foreach($getScheduleNodes as $scheduleId => $scheduleVal) {
    $scheduleDetails = node_load($scheduleVal);
    $projectMilstone = isset($scheduleDetails->field_project_milestone['und'])?$scheduleDetails->field_project_milestone['und'][0]['value']:'None';
    $originalDate = isset($scheduleDetails->field_schedule_original['und'])?date('m/d/Y', strtotime($scheduleDetails->field_schedule_original['und'][0]['value'])):'None';
    $projectedDate = isset($scheduleDetails->field_schedule_projected['und'])?date('m/d/Y', strtotime($scheduleDetails->field_schedule_projected['und'][0]['value'])):'None';
    $actualDate = isset($scheduleDetails->field_schedule_actual['und'])?date('m/d/Y', strtotime($scheduleDetails->field_schedule_actual['und'][0]['value'])):'None';    
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'B' . ($XLSRowNo), utf8_encode ( $projectMilstone ) );      
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'C' . ($XLSRowNo), utf8_encode ( $originalDate ) );      
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'D' . ($XLSRowNo), utf8_encode ( $projectedDate ) );      
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'E' . ($XLSRowNo), utf8_encode ( $actualDate ) );
    $XLSRowNo++;
    } 
    $XLSRowNo++;  
    // Project sechedule table section
    // ===============================
    // Retrive safety data for monthly report
    $_excelexport_objPHPExcel->getActiveSheet()->getStyle('B'. ($XLSRowNo - 1).':H'.($XLSRowNo - 1))->applyFromArray($BStyle);
    $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( 'B' . ($XLSRowNo) )->getFont ()->setBold ( true );
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'B' . ($XLSRowNo), utf8_encode ( 'Safety Record' ) );
    $XLSRowNo++; $XLSRowNo++;
    $col2 = 1;
    foreach($proSafetyImage as $siImageKey => $siImageVal) {
    $fileData = file_load($proSafetyImage[$siImageKey]->field_project_safety_images_fid); 
    $getImageSI = image_style_url('project_general_images_style',$fileData->uri);
    if($fileData->filemime == 'image/jpeg'){ $gdImage = imagecreatefromjpeg($getImageSI); }
    else { $gdImage = imagecreatefrompng($getImageSI); }
    $objDrawing = new PHPExcel_Worksheet_MemoryDrawing ();
    $objDrawing->setName ( 'Sample image' );
    $objDrawing->setDescription ( 'Sample image' );
    $objDrawing->setImageResource ( $gdImage );
    $objDrawing->setRenderingFunction ( PHPExcel_Worksheet_MemoryDrawing::RENDERING_JPEG );
    $objDrawing->setMimeType ( PHPExcel_Worksheet_MemoryDrawing::MIMETYPE_DEFAULT );
    if($col2 == 1) { $colindex = excelgeneratorurl_get_colindex ( $col2 ); }
    else { $colindex = excelgeneratorurl_get_colindex ( $col2 ); }    
    $objDrawing->setCoordinates ( $colindex . ($XLSRowNo) );  
    $objDrawing->setWorksheet ( $_excelexport_objPHPExcel->getActiveSheet () );
    $col2++;
    } 
    $XLSRowNo++;  
    $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( 'C' . ($XLSRowNo) )->getFont ()->setBold ( true );
    $colindex = excelgeneratorurl_get_colindex ( $col2 );
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( $colindex . ($XLSRowNo), utf8_encode ( 'Most Recent' ) );  
    $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( 'D' . ($XLSRowNo) )->getFont ()->setBold ( true );
    $colindex = excelgeneratorurl_get_colindex ( $col2+1 );
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( $colindex . ($XLSRowNo), utf8_encode ( 'Total' ) );
    $XLSRowNo++;
    $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( $colindex . ($XLSRowNo) )->getFont ()->setBold ( true );
    $colindex = excelgeneratorurl_get_colindex ( $col2 );
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( $colindex . ($XLSRowNo), utf8_encode ( 'Safety Period LTA * Period Hours' ) );
    $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( $colindex . ($XLSRowNo) )->getFont ()->setBold ( true );
    $colindex = excelgeneratorurl_get_colindex ( $col2+1 );
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( $colindex . ($XLSRowNo), utf8_encode ( 'LTA   Total Work Hours   EMR**' ) );
    $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( $colindex . ($XLSRowNo) )->getFont ()->setBold ( true );
    $XLSRowNo++;
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'C' . ($XLSRowNo), utf8_encode ( $getRecentDate.'  '.$getRecentLta.'  '.$getRecentHours  ) );
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'D' . ($XLSRowNo), utf8_encode ( $totalLTA.'  '.$totalHours.' 0.00 ' ) );
    $XLSRowNo++; $XLSRowNo++; $XLSRowNo++;
    // End work for safety data for manthly report
    // ===========================================
    // Retirving additonal project photos
    $_excelexport_objPHPExcel->getActiveSheet()->getStyle('B'. ($XLSRowNo - 1).':H'.($XLSRowNo - 1))->applyFromArray($BStyle);
    $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( 'B' . ($XLSRowNo) )->getFont ()->setBold ( true );
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'B' . ($XLSRowNo), utf8_encode ( 'Additional Project Photos' ) );
    $XLSRowNo++;
    $XLSRowNo++;
    $col4 = 1;
    foreach($proAdditionalImage as $aiImageKey => $aiImageVal) {
    $fileData = file_load($proAdditionalImage[$aiImageKey]->field_project_additional_images_fid);
    $getImageAI = image_style_url('project_general_images_style',$fileData->uri);
    if($fileData->filemime == 'image/jpeg'){ $gdImage = imagecreatefromjpeg($getImageAI); }
    else { $gdImage = imagecreatefrompng($getImageAI); }
    $objDrawing = new PHPExcel_Worksheet_MemoryDrawing ();
    $objDrawing->setName ( 'Sample image' );
    $objDrawing->setDescription ( 'Sample image' );
    $objDrawing->setImageResource ( $gdImage );
    $objDrawing->setRenderingFunction ( PHPExcel_Worksheet_MemoryDrawing::RENDERING_JPEG );
    $objDrawing->setMimeType ( PHPExcel_Worksheet_MemoryDrawing::MIMETYPE_DEFAULT );
    if($col4 == 1) { $colindex = excelgeneratorurl_get_colindex ( $col4 ); }
    else { $colindex = excelgeneratorurl_get_colindex ( $col4 ); }    
    $objDrawing->setCoordinates ( $colindex . ($XLSRowNo) );
    $objDrawing->setWorksheet ( $_excelexport_objPHPExcel->getActiveSheet () );
    $col4++;
    }     
    // End work for additional project photos
    // ======================================
    // == End of monthly report For excel     
  } 
  else if($type == 'costsummary') {
    if($checkFirst == 1) {  
        $XLSRowNo = ($nextReport == 0)?$XLSRowNo:$nextReport+$XLSRowNo;    
    }
    else {
      $XLSRowNo = ($nextReport == 0)?$XLSRowNo:$nextReport;
    }
    $reportTitle = 'Project Cost Summary Report';
    // ===== Excel Work for cost summary ==== //
    if($gdImageType == 'jpeg') {
    $gdImage = imagecreatefromjpeg ( $companyLogo );
    }
    else {
    $gdImage = imagecreatefrompng ( $companyLogo );
    }
    $objDrawing = new PHPExcel_Worksheet_MemoryDrawing ();
    $objDrawing->setName ( 'Sample image' );
    $objDrawing->setDescription ( 'Sample image' );
    $objDrawing->setImageResource ( $gdImage );
    $objDrawing->setRenderingFunction ( PHPExcel_Worksheet_MemoryDrawing::RENDERING_JPEG );
    $objDrawing->setMimeType ( PHPExcel_Worksheet_MemoryDrawing::MIMETYPE_DEFAULT );
    $objDrawing->setHeight ( 62 );
    $colindex = excelgeneratorurl_get_colindex ( 1 );
    $objDrawing->setCoordinates ( $colindex . ($XLSRowNo) );  
    $objDrawing->setWorksheet ( $_excelexport_objPHPExcel->getActiveSheet () );
    //$XLSRowNo++; $XLSRowNo++;   
    $endData = $XLSRowNo+3;
    $rowFills = 'B'.$XLSRowNo.':I'.$endData;      
    $_excelexport_objPHPExcel->getActiveSheet()->getStyle($rowFills)->getFill()->setFillType(PHPExcel_Style_Fill::FILL_SOLID)->getStartColor()->setARGB('E3E3E3');
    
    //$_excelexport_objPHPExcel->getActiveSheet()->getStyle('B1:I4')->getFill()->setFillType(PHPExcel_Style_Fill::FILL_SOLID)->getStartColor()->setARGB('E3E3E3');
    //$_excelexport_objPHPExcel->getActiveSheet()->getStyle('B6:I6')->getFill()->setFillType(PHPExcel_Style_Fill::FILL_SOLID)->getStartColor()->setARGB('E3E3E3');
    $_excelexport_objPHPExcel->getActiveSheet()->mergeCells('E'.$XLSRowNo.':F'.$XLSRowNo);
    $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( $colindex . ($XLSRowNo) )->getFont ()->setBold ( true );
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'E'.$XLSRowNo, utf8_encode ( $reportTitle ) );
    $XLSRowNo++; $XLSRowNo++;$XLSRowNo++;$XLSRowNo++;
    $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( $colindex . ($XLSRowNo+1) )->getFont ()->setBold ( true );
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( $colindex . ($XLSRowNo+1), utf8_encode ( $projectName ) );
    $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( $colindex . ($XLSRowNo+1) )->getFont ()->setBold ( true );
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'I' . ($XLSRowNo+1), utf8_encode ( $projectNumber ) );
    /*$XLSRowNo++;
    $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( $colindex . ($XLSRowNo) )->getFont ()->setBold ( true );
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( $colindex . ($XLSRowNo), utf8_encode ( 'Project Manager: '.$projectManager ) );*/
    $XLSRowNo++;$XLSRowNo++; $XLSRowNo++;$XLSRowNo++;
    // Cost Code table start here
    $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( 'B' . ($XLSRowNo) )->getFont ()->setBold ( true );
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'B' . ($XLSRowNo), utf8_encode ( 'Cost Code Description' ) );
    $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( 'C' . ($XLSRowNo) )->getFont ()->setBold ( true );
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'C' . ($XLSRowNo), utf8_encode ( 'Original Budget' ) );
    $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( 'D' . ($XLSRowNo) )->getFont ()->setBold ( true );
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'D' . ($XLSRowNo), utf8_encode ( 'Current Budget' ) );
    $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( 'E' . ($XLSRowNo) )->getFont ()->setBold ( true );
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'E' . ($XLSRowNo), utf8_encode ( 'Committed' ) );
    $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( 'F' . ($XLSRowNo) )->getFont ()->setBold ( true );
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'F' . ($XLSRowNo), utf8_encode ( 'Spent' ) );  
    $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( 'G' . ($XLSRowNo) )->getFont ()->setBold ( true );
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'G' . ($XLSRowNo), utf8_encode ( 'Total Allocated' ) );
    $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( 'H' . ($XLSRowNo) )->getFont ()->setBold ( true );
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'H' . ($XLSRowNo), utf8_encode ( 'Estimate to Complete' ) );
    $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( 'I' . ($XLSRowNo) )->getFont ()->setBold ( true );
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'I' . ($XLSRowNo), utf8_encode ( 'PFC' ) );
    $XLSRowNo++;
    foreach($costCode as $ccId => $ccVal) {
      $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'B' . ($XLSRowNo), utf8_encode ( $ccVal['cost_code'] ) );    
    $_excelexport_objPHPExcel->getActiveSheet()->getStyle('C' . ($XLSRowNo).':I'.($XLSRowNo))->getNumberFormat()->setFormatCode('$#,##0_-');
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'C' . ($XLSRowNo), utf8_encode ( $ccVal['originalBudget'] ) );
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'D' . ($XLSRowNo), utf8_encode ( $ccVal['currentBudget'] ) );
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'E' . ($XLSRowNo), utf8_encode ( $ccVal['Commitment'] ) );
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'F' . ($XLSRowNo), utf8_encode ( $ccVal['spent'] ) );
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'G' . ($XLSRowNo), utf8_encode ( $ccVal['Allocated'] ) );      
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'H' . ($XLSRowNo), utf8_encode ( $ccVal['est'] ) );      
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'I' . ($XLSRowNo), utf8_encode ( $ccVal['PFC'] ) );
    $XLSRowNo++;
    $ccArrTotal= array(
      'originalBudget' => $ccArrTotal['originalBudget']+$ccVal['originalBudget'],
      'currentBudget' => $ccArrTotal['currentBudget']+$ccVal['originalBudget'],
      'Commitment' => $ccArrTotal['Commitment']+$ccVal['Commitment'],
      'spent' => $ccArrTotal['spent']+$ccVal['spent'],
      'Allocated' => $ccArrTotal['Allocated']+$ccVal['Allocated'],
      'est' => $ccArrTotal['est']+$ccVal['est'],
      'PFC' => $ccArrTotal['PFC']+$ccVal['PFC'],
      'Variance' => $ccArrTotal['Variance']+$ccVal['Variance'],
      );
    }
    $XLSRowNo++;
    $_excelexport_objPHPExcel->getActiveSheet()->getStyle('B' . ($XLSRowNo - 1).':I'.($XLSRowNo - 1))->applyFromArray($BStyle);
    $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( 'B' . ($XLSRowNo) )->getFont ()->setBold ( true );
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'B' . ($XLSRowNo), utf8_encode ( 'Project Total' ) );
    $_excelexport_objPHPExcel->getActiveSheet()->getStyle('C' . ($XLSRowNo).':I'.($XLSRowNo))->getNumberFormat()->setFormatCode('$#,##0_-');
    $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( 'C' . ($XLSRowNo) )->getFont ()->setBold ( true );
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'C' . ($XLSRowNo), utf8_encode ( $ccArrTotal['originalBudget'] ) );
    $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( 'D' . ($XLSRowNo) )->getFont ()->setBold ( true );
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'D' . ($XLSRowNo), utf8_encode ( $ccArrTotal['originalBudget'] ) );
    $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( 'E' . ($XLSRowNo) )->getFont ()->setBold ( true );
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'E' . ($XLSRowNo), utf8_encode ( $ccArrTotal['Commitment'] ) );
    $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( 'F' . ($XLSRowNo) )->getFont ()->setBold ( true );
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'F' . ($XLSRowNo), utf8_encode (  $ccArrTotal['spent'] ) );
    $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( 'G' . ($XLSRowNo) )->getFont ()->setBold ( true );
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'G' . ($XLSRowNo), utf8_encode ( $ccArrTotal['Allocated'] ) );

    $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( 'H' . ($XLSRowNo) )->getFont ()->setBold ( true );
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'H' . ($XLSRowNo), utf8_encode ( $ccArrTotal['est'] ) );
    $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( 'I' . ($XLSRowNo) )->getFont ()->setBold ( true );
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'I' . ($XLSRowNo), utf8_encode ( $ccArrTotal['PFC'] ) );
    $XLSRowNo++;    
  }
  else if($type == 'costdetail') {
      $XLSRowNo = ($nextReport == 0)?$XLSRowNo:$nextReport; 
    $reportTitle = 'Project Cost Detail Report';
    // ===== Excel Work for cost summary ==== //
    if($gdImageType == 'jpeg') {
    $gdImage = imagecreatefromjpeg ( $companyLogo );
    }
    else {
    $gdImage = imagecreatefrompng ( $companyLogo );
    }
    $objDrawing = new PHPExcel_Worksheet_MemoryDrawing ();
    $objDrawing->setName ( 'Sample image' );
    $objDrawing->setDescription ( 'Sample image' );
    $objDrawing->setImageResource ( $gdImage );
    $objDrawing->setRenderingFunction ( PHPExcel_Worksheet_MemoryDrawing::RENDERING_JPEG );
    $objDrawing->setMimeType ( PHPExcel_Worksheet_MemoryDrawing::MIMETYPE_DEFAULT );
    $objDrawing->setHeight ( 62 );
    $colindex = excelgeneratorurl_get_colindex ( 1 );
    $objDrawing->setCoordinates ( $colindex . ($XLSRowNo) );  
    $objDrawing->setWorksheet ( $_excelexport_objPHPExcel->getActiveSheet () );
    //$XLSRowNo++; $XLSRowNo++;
    $endData = $XLSRowNo+3;
    $rowFills = 'B'.$XLSRowNo.':I'.$endData;      
    $_excelexport_objPHPExcel->getActiveSheet()->getStyle($rowFills)->getFill()->setFillType(PHPExcel_Style_Fill::FILL_SOLID)->getStartColor()->setARGB('E3E3E3');
    $_excelexport_objPHPExcel->getActiveSheet()->mergeCells('E'.$XLSRowNo.':F'.$XLSRowNo);
    $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( $colindex . ($XLSRowNo) )->getFont ()->setBold ( true );
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'E'.$XLSRowNo, utf8_encode ( $reportTitle ) );
    $XLSRowNo++; $XLSRowNo++;$XLSRowNo++;
    $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( $colindex . ($XLSRowNo+1) )->getFont ()->setBold ( true );
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( $colindex . ($XLSRowNo+1), utf8_encode ( $projectName ) );
    $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( $colindex . ($XLSRowNo+1) )->getFont ()->setBold ( true );
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'I' . ($XLSRowNo+1), utf8_encode ( $projectNumber ) );
    $XLSRowNo++;
    $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( $colindex . ($XLSRowNo) )->getFont ()->setBold ( true );
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( $colindex . ($XLSRowNo), utf8_encode ( 'Project Manager: '.$projectManager ) );
    $XLSRowNo++;$XLSRowNo++; $XLSRowNo++;
    // Cost Code table start here
    $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( 'B' . ($XLSRowNo) )->getFont ()->setBold ( true );
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'B' . ($XLSRowNo), utf8_encode ( 'Cost Code Description' ) );
    $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( 'C' . ($XLSRowNo) )->getFont ()->setBold ( true );
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'C' . ($XLSRowNo), utf8_encode ( 'Original Budget' ) );
    $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( 'D' . ($XLSRowNo) )->getFont ()->setBold ( true );
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'D' . ($XLSRowNo), utf8_encode ( 'Current Budget' ) );
    $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( 'E' . ($XLSRowNo) )->getFont ()->setBold ( true );
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'E' . ($XLSRowNo), utf8_encode ( 'Committed' ) );
    $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( 'F' . ($XLSRowNo) )->getFont ()->setBold ( true );
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'F' . ($XLSRowNo), utf8_encode ( 'Spending To Date' ) ); 
    $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( 'G' . ($XLSRowNo) )->getFont ()->setBold ( true );
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'G' . ($XLSRowNo), utf8_encode ( 'Total Allocated' ) );
    $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( 'H' . ($XLSRowNo) )->getFont ()->setBold ( true );
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'H' . ($XLSRowNo), utf8_encode ( 'Estimate to Complete' ) );
    $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( 'I' . ($XLSRowNo) )->getFont ()->setBold ( true );
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'I' . ($XLSRowNo), utf8_encode ( 'PFC' ) );
    $XLSRowNo++;
    foreach($costCode as $ccId => $ccVal) {
      $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'B' . ($XLSRowNo), utf8_encode ( $ccVal['cost_code'] ) );    
    $_excelexport_objPHPExcel->getActiveSheet()->getStyle('C' . ($XLSRowNo).':I'.($XLSRowNo))->getNumberFormat()->setFormatCode('$#,##0_-');
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'C' . ($XLSRowNo), utf8_encode ( $ccVal['originalBudget'] ) );
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'D' . ($XLSRowNo), utf8_encode ( $ccVal['currentBudget'] ) );
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'E' . ($XLSRowNo), utf8_encode ( $ccVal['Commitment'] ) );
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'F' . ($XLSRowNo), utf8_encode ( $ccVal['spent'] ) );
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'G' . ($XLSRowNo), utf8_encode ( $ccVal['Allocated'] ) );      
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'H' . ($XLSRowNo), utf8_encode ( $ccVal['est'] ) );      
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'I' . ($XLSRowNo), utf8_encode ( $ccVal['PFC'] ) );
    $XLSRowNo++;
    $ccArrTotal= array(
      'originalBudget' => $ccArrTotal['originalBudget']+$ccVal['originalBudget'],
      'currentBudget' => $ccArrTotal['currentBudget']+$ccVal['originalBudget'],
      'Commitment' => $ccArrTotal['Commitment']+$ccVal['Commitment'],
      'spent' => $ccArrTotal['spent']+$ccVal['spent'],
      'Allocated' => $ccArrTotal['Allocated']+$ccVal['Allocated'],
      'est' => $ccArrTotal['est']+$ccVal['est'],
      'PFC' => $ccArrTotal['PFC']+$ccVal['PFC'],
      'Variance' => $ccArrTotal['Variance']+$ccVal['Variance'],
      );
    }
    $XLSRowNo++;
    $_excelexport_objPHPExcel->getActiveSheet()->getStyle('B' . ($XLSRowNo - 1).':I'.($XLSRowNo - 1))->applyFromArray($BStyle);
    $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( 'B' . ($XLSRowNo) )->getFont ()->setBold ( true );
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'B' . ($XLSRowNo), utf8_encode ( 'Project Total' ) );
    $_excelexport_objPHPExcel->getActiveSheet()->getStyle('C' . ($XLSRowNo).':I'.($XLSRowNo))->getNumberFormat()->setFormatCode('$#,##0_-');
    $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( 'C' . ($XLSRowNo) )->getFont ()->setBold ( true );
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'C' . ($XLSRowNo), utf8_encode ( $ccArrTotal['originalBudget'] ) );
    $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( 'D' . ($XLSRowNo) )->getFont ()->setBold ( true );
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'D' . ($XLSRowNo), utf8_encode ( $ccArrTotal['originalBudget'] ) );
    $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( 'E' . ($XLSRowNo) )->getFont ()->setBold ( true );
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'E' . ($XLSRowNo), utf8_encode ( $ccArrTotal['Commitment'] ) );
    $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( 'F' . ($XLSRowNo) )->getFont ()->setBold ( true );
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'F' . ($XLSRowNo), utf8_encode (  $ccArrTotal['spent'] ) );
    $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( 'G' . ($XLSRowNo) )->getFont ()->setBold ( true );
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'G' . ($XLSRowNo), utf8_encode ( $ccArrTotal['Allocated'] ) );
    $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( 'H' . ($XLSRowNo) )->getFont ()->setBold ( true );
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'H' . ($XLSRowNo), utf8_encode ( $ccArrTotal['est'] ) );
    $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( 'I' . ($XLSRowNo) )->getFont ()->setBold ( true );
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'I' . ($XLSRowNo), utf8_encode ( $ccArrTotal['PFC'] ) );
    $XLSRowNo++; $XLSRowNo++; $XLSRowNo++;  
    
    $queryCommit= db_select('node','n'); 
      $queryCommit->join('field_data_field_estimate_reference','er','er.entity_id = n.nid');
      $queryCommit->join('node','enode','enode.nid=er.field_estimate_reference_nid');
      $queryCommit->join('field_data_field_project_estimate_status','es','es.entity_id = enode.nid');      
      $queryCommit->join('field_data_field_project_reference','pr','enode.nid=pr.entity_id');
      $queryCommit->leftjoin('field_data_field_est_cost_code','cc','cc.entity_id=n.nid');
      $queryCommit->fields('cc',array('field_est_cost_code_value'));
      $queryCommit->condition('es.field_project_estimate_status_value', 'approved', '=');
      $queryCommit->condition('pr.field_project_reference_nid', $proID, '=');        
      $queryCommit->orderBy('cc.field_est_cost_code_value', 'ASC');
      $queryCommit->groupBy('cc.field_est_cost_code_value');
      $costCodeCoomit = $queryCommit->execute()->fetchCol();   
    foreach($costCodeCoomit as $ccKey => $ccValData) { 
      $query2 = db_select('node','n');
        $query2->join('field_data_field_commitment_ws_code','cc','cc.entity_id = n.nid');
        $query2->join('field_data_field_project_reference','pr','n.nid=pr.entity_id');
        $query2->fields('n',array('nid'));
        $query2->condition('cc.field_commitment_ws_code_value', $ccValData, '=');
        $query2->condition('pr.field_project_reference_nid', $proID, '=');
        $query2->condition('n.type', 'project_commitement', '='); 
        $getCommit = $query2->execute()->fetchCol();
    if(!empty($getCommit)) {
      $XLSRowNo++;
        $_excelexport_objPHPExcel->getActiveSheet()->getStyle('B' . ($XLSRowNo - 1).':I'.($XLSRowNo - 1))->applyFromArray($BStyle);
      $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( 'B' . ($XLSRowNo) )->getFont ()->setBold ( true );
      $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'B' . ($XLSRowNo), utf8_encode ( $ccValData ) );
      $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( 'C' . ($XLSRowNo) )->getFont ()->setBold ( true );
      $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'C' . ($XLSRowNo), utf8_encode ( 'Commitment Number' ) );
      $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( 'D' . ($XLSRowNo) )->getFont ()->setBold ( true );
      $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'D' . ($XLSRowNo), utf8_encode ( 'Vendor' ) );
      $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( 'E' . ($XLSRowNo) )->getFont ()->setBold ( true );
      $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'E' . ($XLSRowNo), utf8_encode ( 'Description' ) );
      $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( 'F' . ($XLSRowNo) )->getFont ()->setBold ( true );
      $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'F' . ($XLSRowNo), utf8_encode (  'Date' ) );
      $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( 'G' . ($XLSRowNo) )->getFont ()->setBold ( true );
      $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'G' . ($XLSRowNo), utf8_encode ( 'Commited Amount' ) );
      $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( 'H' . ($XLSRowNo) )->getFont ()->setBold ( true );
      $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'H' . ($XLSRowNo), utf8_encode ( 'Invoiced Against' ) );
      $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( 'I' . ($XLSRowNo) )->getFont ()->setBold ( true );
      $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'I' . ($XLSRowNo), utf8_encode ( 'Commitment Balance' ) );
      $XLSRowNo++;
      foreach($getCommit as $key => $comitId) {
        $commitNode = node_load($comitId);
      $coomitVendoer = isset($commitNode->field_vendor['und'])?$commitNode->field_vendor['und'][0]['value']:'None';
      if($coomitVendoer != 'None' && is_numeric($coomitVendoer)) {
        $coomitVendoer = node_load($coomitVendoer)->title;
      }
      else {
        $coomitVendoer = $coomitVendoer;
      }
      // Get invoice spending amount
      $query3= db_select('node','n'); 
      $query3->join('field_data_field_invoice_commitment','ic','ic.entity_id = n.nid');
      $query3->join('field_data_field_invoice_amount','ia','ia.entity_id = n.nid');
      $query3->addExpression('SUM(ia.field_invoice_amount_value)','finalTotal');
      $query3->condition('n.type','project_spending','=');
      $query3->condition('ic.field_invoice_commitment_nid',$commitNode->nid,'=');
      $query3->groupBy('ic.field_invoice_commitment_nid');
      $getTotalSpendingAmt = $query3->execute()->fetchField();        
      $commitAmt = $commitNode->field_commitment_po_final_total['und'][0]['value'];
      $commitBalance = ($commitAmt - $getTotalSpendingAmt);
      $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( 'C' . ($XLSRowNo) )->getFont ()->setBold ( true );
      $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'C' . ($XLSRowNo), utf8_encode ( $commitNode->field_commitment_number_calculat['und'][0]['value'] ) );
      $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'D' . ($XLSRowNo), utf8_encode ( $coomitVendoer!=''?$coomitVendoer:'None' ) );
      $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'E' . ($XLSRowNo), utf8_encode ( $commitNode->field_commitment_item_descriptio['und'][0]['value']!=''?strip_tags($commitNode->field_commitment_item_descriptio['und'][0]['value']):'None' ) );     
      $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'F' . ($XLSRowNo), utf8_encode (  $date = date('m/d/Y', $commitNode->created) ) );
      $_excelexport_objPHPExcel->getActiveSheet()->getStyle('G' . ($XLSRowNo).':I'.($XLSRowNo))->getNumberFormat()->setFormatCode('$#,##0_-');
      $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'G' . ($XLSRowNo), utf8_encode ( $commitAmt ) );
      $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'H' . ($XLSRowNo), utf8_encode ( $getTotalSpendingAmt ) );
      $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'I' . ($XLSRowNo), utf8_encode ( $commitBalance ) );
      $XLSRowNo++;
      $query2 = db_select('node','n');
      $query2->join('field_data_field_invoice_commitment','ic','ic.entity_id = n.nid');
            $query2->join('field_data_field_project_reference','pr','n.nid=pr.entity_id');
            $query2->fields('n',array('nid'));
            $query2->condition('ic.field_invoice_commitment_nid', $commitNode->nid, '=');
            $query2->condition('pr.field_project_reference_nid', $proID, '=');
            $query2->condition('n.type', 'project_spending', '=');  
            $getInv = $query2->execute()->fetchCol(); 
            if(!empty($getInv)) {
        $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( 'E' . ($XLSRowNo) )->getFont ()->setBold ( true );
          $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'E' . ($XLSRowNo), utf8_encode ( 'Invoice Number' ) );
        $XLSRowNo++;
        foreach($getInv as $invKey => $invId) {
            $invNode = node_load($invId);
        $invNumber = isset($invNode->field_invoice_number_cal['und'])?$invNode->field_invoice_number_cal['und'][0]['value']:'None';
        $invDate = isset($invNode->field_invoice_date['und'])?date('m/d/Y',strtotime($invNode->field_invoice_date['und'][0]['value'])):'None';
        $invAmt = isset($invNode->field_invoice_amount['und'])?'$'.number_format($invNode->field_invoice_amount['und'][0]['value'],2):'$0.00';
        
            $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'E' . ($XLSRowNo), utf8_encode ( $invNumber ) );           
            $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'F' . ($XLSRowNo), utf8_encode ( $invDate ) );           
            $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'H' . ($XLSRowNo), utf8_encode ( $invAmt ) );
        $XLSRowNo++;
        }
      }
      }
    }
    }
  }
  else if($type == 'commitment') {
    $XLSRowNo = ($nextReport == 0)?$XLSRowNo:$nextReport; 
    $reportTitle = 'Project Commitment Report';   
    $query= db_select('node','n'); 
    $query->join('field_data_field_estimate_reference','er','er.entity_id = n.nid');
    $query->join('node','enode','enode.nid=er.field_estimate_reference_nid');
    $query->join('field_data_field_project_estimate_status','es','es.entity_id = enode.nid');      
    $query->join('field_data_field_project_reference','pr','enode.nid=pr.entity_id');
    $query->leftjoin('field_data_field_est_cost_code','cc','cc.entity_id=n.nid');
    $query->fields('cc',array('field_est_cost_code_value'));
    $query->condition('es.field_project_estimate_status_value', 'approved', '=');
    $query->condition('pr.field_project_reference_nid', $proID, '=');         
    $query->groupBy('cc.field_est_cost_code_value');
    $query->orderBy('cc.field_est_cost_code_value', 'ASC');
    $costCodeCoomit = $query->execute()->fetchCol();
    // ==============
    $XLSRowNo++;
    if($gdImageType == 'jpeg') {
    $gdImage = imagecreatefromjpeg ( $companyLogo );
    }
    else {
    $gdImage = imagecreatefrompng ( $companyLogo );
    }
    $objDrawing = new PHPExcel_Worksheet_MemoryDrawing ();
    $objDrawing->setName ( 'Sample image' );
    $objDrawing->setDescription ( 'Sample image' );
    $objDrawing->setImageResource ( $gdImage );
    
    $objDrawing->setRenderingFunction ( PHPExcel_Worksheet_MemoryDrawing::RENDERING_JPEG );
    $objDrawing->setMimeType ( PHPExcel_Worksheet_MemoryDrawing::MIMETYPE_DEFAULT );
    $objDrawing->setHeight ( 62 );
    $colindex = excelgeneratorurl_get_colindex ( 1 );
    $objDrawing->setCoordinates ( $colindex . ($XLSRowNo) );  
    $objDrawing->setWorksheet ( $_excelexport_objPHPExcel->getActiveSheet () );
    //$XLSRowNo++; $XLSRowNo++;   
    $endData = $XLSRowNo+3;
    $rowFills = 'B'.$XLSRowNo.':H'.$endData;      
    $_excelexport_objPHPExcel->getActiveSheet()->getStyle($rowFills)->getFill()->setFillType(PHPExcel_Style_Fill::FILL_SOLID)->getStartColor()->setARGB('E3E3E3');
    $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( 'D'.$XLSRowNo )->getFont ()->setBold ( true );
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'D'.$XLSRowNo, utf8_encode ($reportTitle) );
    $XLSRowNo++;$XLSRowNo++;$XLSRowNo++;$XLSRowNo++;$XLSRowNo++;
    $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( $colindex . ($XLSRowNo) )->getFont ()->setBold ( true );
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( $colindex . ($XLSRowNo), utf8_encode ( ucfirst($projectName) ) );  
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'H' . ($XLSRowNo), utf8_encode ($projectNumber) );
    /*$XLSRowNo++;$XLSRowNo++;
    $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( $colindex . ($XLSRowNo) )->getFont ()->setBold ( true );
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( $colindex . ($XLSRowNo), utf8_encode ( 'Project Manager: '.$projectManager ) );  */
    $XLSRowNo++; $XLSRowNo++; $XLSRowNo++;  
    $finalTotalInvoice = 0;
    $finalTotalCommit = 0;
    foreach($costCodeCoomit as $ccKey => $ccVal) {
    $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( 'B' . ($XLSRowNo) )->getFont ()->setBold ( true );
    //$_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'B' . ($XLSRowNo), utf8_encode ( $ccVal ) );
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'B' . ($XLSRowNo), utf8_encode ( 'Cost code | Description' ) );
    $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( 'C' . ($XLSRowNo) )->getFont ()->setBold ( true );
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'C' . ($XLSRowNo), utf8_encode ( 'Commitment Number' ) );
    $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( 'D' . ($XLSRowNo) )->getFont ()->setBold ( true );
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'D' . ($XLSRowNo), utf8_encode ( 'Vendor' ) );
    $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( 'E' . ($XLSRowNo) )->getFont ()->setBold ( true );
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'E' . ($XLSRowNo), utf8_encode ( 'Description' ) );
    $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( 'F' . ($XLSRowNo) )->getFont ()->setBold ( true );
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'F' . ($XLSRowNo), utf8_encode ( 'Date' ) );
    $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( 'G' . ($XLSRowNo) )->getFont ()->setBold ( true );
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'G' . ($XLSRowNo), utf8_encode ( 'Amount' ) );
    $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( 'H' . ($XLSRowNo) )->getFont ()->setBold ( true );
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'H' . ($XLSRowNo), utf8_encode ( 'Invoiced Against' ) );
    $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( 'I' . ($XLSRowNo) )->getFont ()->setBold ( true );
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'I' . ($XLSRowNo), utf8_encode ( 'Variance' ) );
    $BStyle = array('borders' => array( 'bottom' => array( 'style' => PHPExcel_Style_Border::BORDER_THIN ))); 
    $_excelexport_objPHPExcel->getActiveSheet()->getStyle('B'.$XLSRowNo.':I'.$XLSRowNo)->applyFromArray($BStyle);
    
    $query= db_select('node','n');
      $query->join('og_membership','om','om.etid=n.nid AND om.entity_type=:entityType', array(':entityType'=>'node'));    
      $query->join('field_data_field_project_reference','pr', 'pr.entity_id = n.nid');
      $query->join('field_data_field_commitment_ws_code','cc','cc.entity_id = n.nid');
      $query->fields('n', array('nid'));
      $query->condition('cc.field_commitment_ws_code_value', $ccVal, '=');
      $query->condition('pr.field_project_reference_nid', $proID, '=');
      $query->condition('om.gid', $company->nid, '=');
      $query->condition('pr.bundle','project_commitement','=');
      $getCommitmentNodes = $query->execute()->fetchCol();
    
    $XLSRowNo++;
    $totalCommitAmt = 0;
    $totalInvoice = 0;
    foreach($getCommitmentNodes as $commitNodeKey => $comitNodeVal) { 
      $commitmentNode = node_load($comitNodeVal);       
      $commitNumber = isset($commitmentNode->field_commitment_number_calculat['und'])?$commitmentNode->field_commitment_number_calculat['und'][0]['value']:'None';
      $coomitVendoer = isset($commitmentNode->field_vendor['und'])?$commitmentNode->field_vendor['und'][0]['value']:'None';
      if($coomitVendoer != 'None' && is_numeric($coomitVendoer)) {
      $coomitVendoer = node_load($coomitVendoer)->title;
      }
      else {
      $coomitVendoer = $coomitVendoer;
      }
      $commitDesc = isset($commitmentNode->body['und'])?$commitmentNode->body['und'][0]['value']:'None';
      $commitDate = date('m/d/Y', $commitmentNode->created);
      $commitAmt = isset($commitmentNode->field_commitment_po_final_total['und'])?$commitmentNode->field_commitment_po_final_total['und'][0]['value']:'$0';
      $totalCommitAmt += $commitAmt;
      $changeOrder = '$0.00';
      // Get invoice Against by commitment
      $query= db_select('node','n'); 
      $query->join('field_data_field_invoice_commitment','ic','ic.entity_id = n.nid');
      $query->join('field_data_field_invoice_amount','ia','ia.entity_id = n.nid');
      $query->addExpression('SUM(ia.field_invoice_amount_value)','finalTotal');
      $query->condition('n.type','project_spending','=');
      $query->condition('ic.field_invoice_commitment_nid',$commitmentNode->nid,'=');
      $query->groupBy('ic.field_invoice_commitment_nid');
      $getTotalSpending = $query->execute()->fetchField();
      $invoiceAgainst = $getTotalSpending!= ''?$getTotalSpending:'0.00';      
      $totalInvoice += $invoiceAgainst;     
      $varianceAmt = $commitAmt - $invoiceAgainst;
      $totalVar += $varianceAmt;
      $ccdesc = get_description_by_cost_code_mod($ccVal);   
      $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'B' . ($XLSRowNo), utf8_encode ( $ccdesc ) );
      $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'C' . ($XLSRowNo), utf8_encode ( $commitNumber ) );
      $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'D' . ($XLSRowNo), utf8_encode ( $coomitVendoer ) );
      $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'E' . ($XLSRowNo), utf8_encode ( $commitDesc ) );
      $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'F' . ($XLSRowNo), utf8_encode ( $commitDate ) );
      $_excelexport_objPHPExcel->getActiveSheet()->getStyle('G' . ($XLSRowNo).':G'.($XLSRowNo))->getNumberFormat()->setFormatCode('$#,##0_-');
      $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'G' . ($XLSRowNo), utf8_encode ( $commitAmt ) );
      $_excelexport_objPHPExcel->getActiveSheet()->getStyle('G' . ($XLSRowNo).':H'.($XLSRowNo))->getNumberFormat()->setFormatCode('$#,##0_-');
      $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'H' . ($XLSRowNo), utf8_encode ( $invoiceAgainst ) );
      $_excelexport_objPHPExcel->getActiveSheet()->getStyle('G' . ($XLSRowNo).':I'.($XLSRowNo))->getNumberFormat()->setFormatCode('$#,##0_-');
      $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'I' . ($XLSRowNo), utf8_encode ( $varianceAmt ) );
      $XLSRowNo++;
    }
    $finalTotalInvoice += $totalInvoice; 
    $finalTotalCommit += $totalCommitAmt;
    $finalTotalVar += $totalVar;
    $XLSRowNo++;
    $BStyle = array('borders' => array( 'bottom' => array( 'style' => PHPExcel_Style_Border::BORDER_THIN),'top' => array( 'style' => PHPExcel_Style_Border::BORDER_THIN))); 
    $_excelexport_objPHPExcel->getActiveSheet()->getStyle('B'.$XLSRowNo.':H'.$XLSRowNo)->applyFromArray($BStyle);   
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'F' . ($XLSRowNo), utf8_encode ( 'Total' ) );
    $_excelexport_objPHPExcel->getActiveSheet()->getStyle('G' . ($XLSRowNo).':G'.($XLSRowNo))->getNumberFormat()->setFormatCode('$#,##0_-');
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'G' . ($XLSRowNo), utf8_encode ( $totalCommitAmt ) );
    $_excelexport_objPHPExcel->getActiveSheet()->getStyle('G' . ($XLSRowNo).':H'.($XLSRowNo))->getNumberFormat()->setFormatCode('$#,##0_-');
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'H' . ($XLSRowNo), utf8_encode ( $totalInvoice ) );
    $_excelexport_objPHPExcel->getActiveSheet()->getStyle('G' . ($XLSRowNo).':I'.($XLSRowNo))->getNumberFormat()->setFormatCode('$#,##0_-');
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'I' . ($XLSRowNo), utf8_encode ( $totalVar ) );
    
    $XLSRowNo++; $XLSRowNo++;
    } 
    $BStyle = array('borders' => array( 'bottom' => array( 'style' => PHPExcel_Style_Border::BORDER_THIN),'top' => array( 'style' => PHPExcel_Style_Border::BORDER_THIN))); 
    $_excelexport_objPHPExcel->getActiveSheet()->getStyle('B'.$XLSRowNo.':H'.$XLSRowNo)->applyFromArray($BStyle);
    $_excelexport_objPHPExcel->getActiveSheet()->getStyle('B'.$XLSRowNo.':H'.$XLSRowNo)->getFill()->setFillType(PHPExcel_Style_Fill::FILL_SOLID)->getStartColor()->setARGB('E3E3E3');
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'F' . ($XLSRowNo), utf8_encode ( 'Total' ) );
    $_excelexport_objPHPExcel->getActiveSheet()->getStyle('G' . ($XLSRowNo).':G'.($XLSRowNo))->getNumberFormat()->setFormatCode('$#,##0_-');
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'G' . ($XLSRowNo), utf8_encode ( $finalTotalCommit ) );
    $_excelexport_objPHPExcel->getActiveSheet()->getStyle('G' . ($XLSRowNo).':H'.($XLSRowNo))->getNumberFormat()->setFormatCode('$#,##0_-');
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'H' . ($XLSRowNo), utf8_encode ( $finalTotalInvoice ) );
    $_excelexport_objPHPExcel->getActiveSheet()->getStyle('G' . ($XLSRowNo).':I'.($XLSRowNo))->getNumberFormat()->setFormatCode('$#,##0_-');
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'I' . ($XLSRowNo), utf8_encode ( $finalTotalVar ) );
    
    $XLSRowNo++;      
  }
  else if($type == 'safety') {
    global $company;
    $XLSRowNo = ($nextReport == 0)?$XLSRowNo:$nextReport; 
    $reportTitle = 'Project Safety Report';   
    $query = db_select('node','n');
      $query->join('field_data_field_project_reference','pr','pr.entity_id = n.nid');
      $query->join('og_membership','om','om.etid=n.nid AND om.entity_type=:entityType', array(':entityType'=>'node'));  
      $query->fields('n',array('nid'));
      $query->condition('om.gid', $company->nid, '=');
      $query->condition('pr.field_project_reference_nid', $proID, '=');
      $query->condition('n.type', 'project_safety', '=');
      $getSafetyNodes = $query->execute()->fetchCol();
    // ==============
    $XLSRowNo++;
    if($gdImageType == 'jpeg') {
    $gdImage = imagecreatefromjpeg ( $companyLogo );
    }
    else {
    $gdImage = imagecreatefrompng ( $companyLogo );
    }
    $objDrawing = new PHPExcel_Worksheet_MemoryDrawing ();
    $objDrawing->setName ( 'Sample image' );
    $objDrawing->setDescription ( 'Sample image' );
    $objDrawing->setImageResource ( $gdImage );
    
    $objDrawing->setRenderingFunction ( PHPExcel_Worksheet_MemoryDrawing::RENDERING_JPEG );
    $objDrawing->setMimeType ( PHPExcel_Worksheet_MemoryDrawing::MIMETYPE_DEFAULT );
    $objDrawing->setHeight ( 62 );
    $colindex = excelgeneratorurl_get_colindex ( 1 );
    $objDrawing->setCoordinates ( $colindex . ($XLSRowNo) );  
    $objDrawing->setWorksheet ( $_excelexport_objPHPExcel->getActiveSheet () );
    //$XLSRowNo++; $XLSRowNo++;   
    $endData = $XLSRowNo+3;
    $rowFills = 'B'.$XLSRowNo.':G'.$endData;      
    $_excelexport_objPHPExcel->getActiveSheet()->getStyle($rowFills)->getFill()->setFillType(PHPExcel_Style_Fill::FILL_SOLID)->getStartColor()->setARGB('E3E3E3');
    $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( 'D'.$XLSRowNo )->getFont ()->setBold ( true );
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'D'.$XLSRowNo, utf8_encode ($reportTitle) );
    $XLSRowNo++;$XLSRowNo++;$XLSRowNo++;$XLSRowNo++;$XLSRowNo++;
    $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( $colindex . ($XLSRowNo) )->getFont ()->setBold ( true );
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( $colindex . ($XLSRowNo), utf8_encode ( ucfirst($projectName) ) );  
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'G' . ($XLSRowNo), utf8_encode ($projectNumber) );
    $XLSRowNo++; $XLSRowNo++; $XLSRowNo++;
    $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( 'B' . ($XLSRowNo) )->getFont ()->setBold ( true );
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'B' . ($XLSRowNo), utf8_encode ( 'Start Date' ) );
    $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( 'C' . ($XLSRowNo) )->getFont ()->setBold ( true );
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'C' . ($XLSRowNo), utf8_encode ( 'End Date' ) );
    $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( 'D' . ($XLSRowNo) )->getFont ()->setBold ( true );
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'D' . ($XLSRowNo), utf8_encode ( 'Lost Time Accidents' ) );
    $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( 'E' . ($XLSRowNo) )->getFont ()->setBold ( true );
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'E' . ($XLSRowNo), utf8_encode ( 'Minor' ) );
    $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( 'F' . ($XLSRowNo) )->getFont ()->setBold ( true );
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'F' . ($XLSRowNo), utf8_encode ( 'Hours' ) );
    $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( 'G' . ($XLSRowNo) )->getFont ()->setBold ( true );
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'G' . ($XLSRowNo), utf8_encode ( 'Comment' ) );
    $BStyle = array('borders' => array( 'bottom' => array( 'style' => PHPExcel_Style_Border::BORDER_THIN ))); 
    $_excelexport_objPHPExcel->getActiveSheet()->getStyle('B'.$XLSRowNo.':G'.$XLSRowNo)->applyFromArray($BStyle);
    if(!empty($getSafetyNodes)) {
      foreach($getSafetyNodes as $saftyId => $saftyVal){
      $safetyNode = node_load($saftyVal);
        $startDate = isset($safetyNode->field_start_date['und'])?date('m/d/Y', strtotime($safetyNode->field_start_date['und'][0]['value'])):'None';
        $endDate = isset($safetyNode->field_end_date['und'])?date('m/d/Y', strtotime($safetyNode->field_end_date['und'][0]['value'])):'None';
        $ltAccidents = isset($safetyNode->field_lost_time_accidents['und'])?$safetyNode->field_lost_time_accidents['und'][0]['value']:'None';
        $totalLTA += $ltAccidents;
        $minor = isset($safetyNode->field_minor['und'])?$safetyNode->field_minor['und'][0]['value']:'None';
        $hours = isset($safetyNode->field_hours_this_period['und'])?$safetyNode->field_hours_this_period['und'][0]['value']:'None';
        $safteyComment = isset($safetyNode->body['und'])?$safetyNode->body['und'][0]['value']:'None';
        $totalHour += $hours;
      $XLSRowNo++;    
      $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'B' . ($XLSRowNo), utf8_encode ( $startDate ) );
      $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'C' . ($XLSRowNo), utf8_encode ( $endDate ) );
      $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'D' . ($XLSRowNo), utf8_encode ( $ltAccidents ) );
      $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'E' . ($XLSRowNo), utf8_encode ( $minor ) );
      $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'F' . ($XLSRowNo), utf8_encode ( $hours ) );
      $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'G' . ($XLSRowNo), utf8_encode ( substr(strip_tags($safteyComment),0,100).'...' ) );
      $XLSRowNo++;
    }   
    $XLSRowNo++;
    $totalEMR = ($totalLTA * 200000)/$totalHour;
    $BStyle = array('borders' => array( 'bottom' => array( 'style' => PHPExcel_Style_Border::BORDER_THIN),'top' => array( 'style' => PHPExcel_Style_Border::BORDER_THIN))); 
    $_excelexport_objPHPExcel->getActiveSheet()->getStyle('B'.$XLSRowNo.':G'.$XLSRowNo)->applyFromArray($BStyle);   
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'D' . ($XLSRowNo), utf8_encode ( 'Total Hours Worked:' ) );
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'E' . ($XLSRowNo), utf8_encode ( $totalHour ) );
    $XLSRowNo++; $XLSRowNo++;
    $BStyle = array('borders' => array( 'bottom' => array( 'style' => PHPExcel_Style_Border::BORDER_THIN),'top' => array( 'style' => PHPExcel_Style_Border::BORDER_THIN))); 
    $_excelexport_objPHPExcel->getActiveSheet()->getStyle('B'.$XLSRowNo.':G'.$XLSRowNo)->applyFromArray($BStyle);   
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'D' . ($XLSRowNo), utf8_encode ( 'Incident Rate:' ) );
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'E' . ($XLSRowNo), utf8_encode ( round($totalEMR, 2) ) );
    }
    $XLSRowNo++;      
  } 
  else if($type == 'estimate') {
    $XLSRowNo = ($nextReport == 0)?$XLSRowNo:$nextReport; 
    $reportTitle = 'Budget Estimate Report';
    $projectNumber = $projectDetails->field_project_mgmt_number['und'][0]['value'];
    $projectName = $projectDetails->title;
    $query= db_select('node','n'); 
    $query->join('field_data_field_estimate_reference','er','er.entity_id = n.nid');
    $query->join('node','enode','enode.nid=er.field_estimate_reference_nid');
    $query->join('field_data_field_project_estimate_status','es','es.entity_id = enode.nid');  
    $query->join('field_data_field_project_estimate_amount','ea','ea.entity_id = enode.nid');    
    $query->join('field_data_field_project_reference','pr','enode.nid=pr.entity_id');
    $query->leftjoin('field_data_field_est_cost_code','cc','cc.entity_id=n.nid');
    $query->leftjoin('field_data_field_est_line_item_amt','la','la.entity_id=n.nid'); 
    $query->fields('cc',array('field_est_cost_code_value'));
    $query->fields('ea',array('field_project_estimate_amount_value'));
    $query->fields('la',array('field_est_line_item_amt_value'));
    $query->condition('es.field_project_estimate_status_value', 'approved', '=');
    $query->condition('pr.field_project_reference_nid', $proID, '=');        
    $estimateData = $query->execute()->fetchAll();
    // =========================
    // Excel work start here for 
    // Estimate report
    // =========================
    if($gdImageType == 'jpeg') {
    $gdImage = imagecreatefromjpeg ( $companyLogo );
    }
    else {
    $gdImage = imagecreatefrompng ( $companyLogo );
    }
    $objDrawing = new PHPExcel_Worksheet_MemoryDrawing ();
    $objDrawing->setName ( 'Sample image' );
    $objDrawing->setDescription ( 'Sample image' );
    $objDrawing->setImageResource ( $gdImage );
    $objDrawing->setRenderingFunction ( PHPExcel_Worksheet_MemoryDrawing::RENDERING_JPEG );
    $objDrawing->setMimeType ( PHPExcel_Worksheet_MemoryDrawing::MIMETYPE_DEFAULT );
    $objDrawing->setHeight ( 62 );
    $colindex = excelgeneratorurl_get_colindex ( 1 );
    $objDrawing->setCoordinates ( $colindex . ($XLSRowNo) );  
    $objDrawing->setWorksheet ( $_excelexport_objPHPExcel->getActiveSheet () );
    //$XLSRowNo++;$XLSRowNo++;
    $endData = $XLSRowNo+3;
    $rowFills = 'B'.$XLSRowNo.':D'.$endData;      
    $_excelexport_objPHPExcel->getActiveSheet()->getStyle($rowFills)->getFill()->setFillType(PHPExcel_Style_Fill::FILL_SOLID)->getStartColor()->setARGB('E3E3E3');
    $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( $colindex . ($XLSRowNo) )->getFont ()->setBold ( true );
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'C'.$XLSRowNo, utf8_encode ( $reportTitle ) );
    $XLSRowNo++;$XLSRowNo++;$XLSRowNo++;$XLSRowNo++;$XLSRowNo++;
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'B'.$XLSRowNo, utf8_encode ( $projectName ) );   
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'D'.$XLSRowNo, utf8_encode ( $projectNumber ) ); 
    $XLSRowNo++; $XLSRowNo++; 
    $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( $colindex . ($XLSRowNo) )->getFont ()->setBold ( true );
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( $colindex . ($XLSRowNo), utf8_encode ( 'Capital' ) );  
    $XLSRowNo++; $XLSRowNo++;
    foreach($estimateData as $estKey => $estVal) { 
    $XLSRowNo++;
    $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( 'B' . ($XLSRowNo) )->getFont ()->setBold ( true );
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'B' . ($XLSRowNo), utf8_encode ( 'Cost Code | Description' ) );
    $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( 'C' . ($XLSRowNo) )->getFont ()->setBold ( true );
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'C' . ($XLSRowNo), utf8_encode ( 'Line Item Cost' ) );
    $BStyle = array('borders' => array( 'bottom' => array( 'style' => PHPExcel_Style_Border::BORDER_THIN ))); 
    $_excelexport_objPHPExcel->getActiveSheet()->getStyle('B'.$XLSRowNo.':D'.$XLSRowNo)->applyFromArray($BStyle);
    $XLSRowNo++;       
    $mainTotal += $estVal->field_est_line_item_amt_value;       
    $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( 'B' . ($XLSRowNo) )->getFont ()->setBold ( true );
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'B' . ($XLSRowNo), utf8_encode ( get_description_by_cost_code_mod($estVal->field_est_cost_code_value) ) );
    $_excelexport_objPHPExcel->getActiveSheet()->getStyle('C' . ($XLSRowNo).':C'.($XLSRowNo))->getNumberFormat()->setFormatCode('$#,##0_-');
    $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( 'C' . ($XLSRowNo) )->getFont ()->setBold ( true );
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'C' . ($XLSRowNo), utf8_encode ( $estVal->field_est_line_item_amt_value ) );
    $XLSRowNo++;
    }
    $XLSRowNo++;
    $XLSRowNo++;  
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'B' . ($XLSRowNo), utf8_encode ( 'Capital Total' ) );
    $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( 'C' . ($XLSRowNo) )->getFont ()->setBold ( true );
    $_excelexport_objPHPExcel->getActiveSheet()->getStyle('C' . ($XLSRowNo).':C'.($XLSRowNo))->getNumberFormat()->setFormatCode('$#,##0_-');
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'C' . ($XLSRowNo), utf8_encode ( $mainTotal ) );
    $_excelexport_objPHPExcel->getActiveSheet()->getStyle('B' . ($XLSRowNo).':D' . ($XLSRowNo))->getFill()->setFillType(PHPExcel_Style_Fill::FILL_SOLID)->getStartColor()->setARGB('E3E3E3');
    $XLSRowNo++;
    $XLSRowNo++;
    $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( 'B' . ($XLSRowNo) )->getFont ()->setBold ( true );
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'B' . ($XLSRowNo), utf8_encode ( 'Total' ) );
    $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( 'C' . ($XLSRowNo) )->getFont ()->setBold ( true );
    $_excelexport_objPHPExcel->getActiveSheet()->getStyle('C' . ($XLSRowNo).':C'.($XLSRowNo))->getNumberFormat()->setFormatCode('$#,##0_-');
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'C' . ($XLSRowNo), utf8_encode ( $mainTotal ) );
    
    $_excelexport_objPHPExcel->getActiveSheet()->getStyle('B' . ($XLSRowNo).':D' . ($XLSRowNo))->getFill()->setFillType(PHPExcel_Style_Fill::FILL_SOLID)->getStartColor()->setARGB('E3E3E3');   
  }
  elseif ($type == 'asset') {
      // If asset type report is requested.
      $XLSRowNo = ($nextReport == 0) ? $XLSRowNo : $nextReport;

      $reportTitle = 'Project Assets Report';
      $projectName = $projectDetails->title;
      $projectNumber = $projectDetails->field_project_mgmt_number['und'][0]['value'];

      $projectLocID = _get_company_region_address($company);

     if($gdImageType == 'jpeg') {
    $gdImage = imagecreatefromjpeg ( $companyLogo );
    }
    else {
    $gdImage = imagecreatefrompng ( $companyLogo );
    }
    $objDrawing = new PHPExcel_Worksheet_MemoryDrawing ();
    $objDrawing->setName ( 'Sample image' );
    $objDrawing->setDescription ( 'Sample image' );
    $objDrawing->setImageResource ( $gdImage );
    $objDrawing->setRenderingFunction ( PHPExcel_Worksheet_MemoryDrawing::RENDERING_JPEG );
    $objDrawing->setMimeType ( PHPExcel_Worksheet_MemoryDrawing::MIMETYPE_DEFAULT );
    $objDrawing->setHeight ( 62 );
    $colindex = excelgeneratorurl_get_colindex ( 1 );
    $objDrawing->setCoordinates ( $colindex . ($XLSRowNo) );  
    $objDrawing->setWorksheet ( $_excelexport_objPHPExcel->getActiveSheet () );
    //$XLSRowNo++;$XLSRowNo++;
    $endData = $XLSRowNo+3;
      //$XLSRowNo++;$XLSRowNo++;
      $rowFills = 'B'.$XLSRowNo.':T'.$endData;
      $_excelexport_objPHPExcel->getActiveSheet()->getStyle($rowFills)->getFill()->setFillType(PHPExcel_Style_Fill::FILL_SOLID)->getStartColor()->setARGB('E3E3E3');
      $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( $colindex . ($XLSRowNo) )->getFont ()->setBold ( true );
      $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'J'.$XLSRowNo, utf8_encode ( $reportTitle ) );
    $rowMerge = 'J'.$XLSRowNo.':M'.$XLSRowNo;
    $_excelexport_objPHPExcel->getActiveSheet()->mergeCells($rowMerge); 
    $XLSRowNo++;$XLSRowNo++;$XLSRowNo++;$XLSRowNo++;$XLSRowNo++;

      $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'B'.$XLSRowNo, utf8_encode ( $projectName ) );
    $rowMergeName = 'B'.$XLSRowNo.':E'.$XLSRowNo;
    $_excelexport_objPHPExcel->getActiveSheet()->mergeCells($rowMergeName); 
      $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'R'.$XLSRowNo, utf8_encode ( $projectNumber ) );
    
    $rowMergeNum = 'R'.$XLSRowNo.':T'.$XLSRowNo;
    $_excelexport_objPHPExcel->getActiveSheet()->mergeCells($rowMergeNum);
    
      $XLSRowNo++; 
    $BStyle = array('borders' => array( 'bottom' => array( 'style' => PHPExcel_Style_Border::BORDER_THIN ))); 
    $_excelexport_objPHPExcel->getActiveSheet()->getStyle('B'.$XLSRowNo.':T'.$XLSRowNo)->applyFromArray($BStyle);
    $XLSRowNo++;
    $header_arr = array('None', 'New Asset Number', 'Company', 'Dept', 'Project Number', 'AssetClass', 'Location', 'Asset Description', 'Description 2', 'Serial #', 'Model No #', 'Vendor Number', 'Vendor Name', 'Acquisition Date', 'Acquisition Cost', 'Quantity', 'GL Account Code', 'State', 'County', 'City');
    for ($i = 1; $i < 20 ; $i++) {
        $colindexx = excelgeneratorurl_get_colindex ($i);
        $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( $colindexx . ($XLSRowNo) )->getFont ()->setBold ( true );
        $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( $colindexx . ($XLSRowNo), utf8_encode ( $header_arr[$i] ) );
      }
    $BStyle = array('borders' => array( 'bottom' => array( 'style' => PHPExcel_Style_Border::BORDER_THIN ))); 
    $_excelexport_objPHPExcel->getActiveSheet()->getStyle('B'.$XLSRowNo.':T'.$XLSRowNo)->applyFromArray($BStyle);


      // Getting Assets by project ID.
      $query = db_select('node','n');
      $query->join('field_data_field_project_reference','pr','n.nid=pr.entity_id');    
      $query->join('og_membership','om','om.etid=n.nid AND om.entity_type=:entityType', array(':entityType'=>'node'));
      $query->fields('n',array('nid'));
      $query->condition('n.type', 'program_assets', '=');
      $query->condition('om.gid', $company->nid, '=');
      $query->condition('pr.field_project_reference_nid', $projectDetails->nid, '=');
      $getAssetData = $query->execute()->fetchCol();
      if (!empty($getAssetData)) {
        // If we have some assets to work on.
        $totalAssetVal = 0;
        foreach ($getAssetData as $assetKey => $assetVal) {
          $XLSRowNo++;
          $assetData = node_load($assetVal);

          $assetNumber = !empty($assetData->field_system_asset_number['und'][0]['value']) ? $assetData->field_system_asset_number['und'][0]['value'] : '';
          $dept = ''; // Find
          $assetClass = $assetData->field_system_asset_type['und'][0]['value']; // Asset Class ID.
          if (!empty($assetClass)) {
            $ass_cat_query = db_select('m6connect_project_asset_category', 'c')
              ->fields('c', array('category_type'))
              ->condition('id', $assetClass)
              ->execute()
              ->fetchField();
            if (!empty($ass_cat_query)) {
              // Asset Class Name.
              $assetClassName = $ass_cat_query;
            }
          }
          
          $assetDesc = $assetData->field_project_asset_sin_number['und'][0]['value']; // Asset SIN Number/Desc
          $assetSerial = $assetData->field_asset_pin_number['und'][0]['value']; // Asset Serial Number.
          $assetModel = $assetData->field_asset_model_no['und'][0]['value']; // Asset Model Number.
          // Asset Vendor Name.
          $asset_vendor_id = isset($assetData->field_asset_vendor['und'][0]['value']) ? $assetData->field_asset_vendor['und'][0]['value'] : '';
          $asset_vendor_name = '';
          if (!empty($asset_vendor_id) && is_numeric($asset_vendor_id) && $asset_vendor_node = node_load($asset_vendor_id)) {
            $asset_vendor_name = $asset_vendor_node->title;
          }
          elseif (!empty($asset_vendor_id) && !is_numeric($asset_vendor_id) && is_string($asset_vendor_id)) {
            $asset_vendor_name = $asset_vendor_id;
          }

          $assetAcqDate = '';
          $assetAcqCost = 0;
          if (isset($assetData->field_asset_cost['und'][0]['value'])) {
            $assetAcqCost += $assetData->field_asset_cost['und'][0]['value'];
          }
          if (isset($assetData->field_asset_installation['und'][0]['value'])) {
            $assetAcqCost += $assetData->field_asset_installation['und'][0]['value'];
          }
          if (isset($assetData->field_asset_outside_consultant['und'][0]['value'])) {
            $assetAcqCost += $assetData->field_asset_outside_consultant['und'][0]['value'];
          }
          if (isset($assetData->field_asset_internal_charge['und'][0]['value'])) {
            $assetAcqCost += $assetData->field_asset_internal_charge['und'][0]['value'];
          }
          $totalAssetVal += $assetAcqCost;

          $assetQuan = 1; // Confirm.
          $row_arr = array('None', $assetNumber, $company->title, '', $projectNumber, !empty($assetClassName) ? $assetClassName : '', $projectLocID, $assetDesc, '', $assetSerial, $assetModel, '', $asset_vendor_name, '', $assetAcqCost, $assetQuan, '',  '', '', '', );
          $i = 1;
          foreach ($row_arr as $key => $value) {
            $colindexx = excelgeneratorurl_get_colindex ($i);
            if ($i == 14) {
              $_excelexport_objPHPExcel->getActiveSheet()->getStyle($colindexx . ($XLSRowNo).':' . $colindexx .($XLSRowNo))->getNumberFormat()->setFormatCode('$#,##0_-');
            }
            // $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( $colindexx . ($XLSRowNo) )->getFont ()->setBold ( true );
            $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( $colindexx . ($XLSRowNo), utf8_encode ( $row_arr[$i] ) );
            $i++;
          }
          $XLSRowNo++;
        }
        // Total Asset Value.
        $XLSRowNo += 2;
        $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( 'N' . ($XLSRowNo) )->getFont ()->setBold ( true );
        $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'N' . ($XLSRowNo), utf8_encode ( 'Total' ));
    
    $_excelexport_objPHPExcel->getActiveSheet()->getStyle('B' . ($XLSRowNo).':T' . ($XLSRowNo))->getFill()->setFillType(PHPExcel_Style_Fill::FILL_SOLID)->getStartColor()->setARGB('E3E3E3');
    $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( 'O' . ($XLSRowNo) )->getFont ()->setBold ( true );
        $_excelexport_objPHPExcel->getActiveSheet()->getStyle('O' . ($XLSRowNo).':O' .($XLSRowNo))->getNumberFormat()->setFormatCode('$#,##0_-');
        $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'O' . ($XLSRowNo), utf8_encode ( $totalAssetVal ));
      }
    }
    $nextReport = $XLSRowNo + 7;
  //$_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'B' . ($XLSRowNo), utf8_encode ( $nextReport ) );
    $checkFirst++;
  }
  if($type == 'monthly') {
    $BStyle = array('borders' => array( 'bottom' => array( 'style' => PHPExcel_Style_Border::BORDER_THIN )));
  $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( 'A1:Z500' )->getAlignment ()->setWrapText ( true );
  $_excelexport_objPHPExcel->getActiveSheet()->getColumnDimension('B')->setWidth(50);
  $_excelexport_objPHPExcel->getActiveSheet()->getColumnDimension('C')->setWidth(40);
  $_excelexport_objPHPExcel->getActiveSheet()->getColumnDimension('D')->setWidth(20); 
  $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( 'A1:Z500' )->getAlignment ()->setVertical ( PHPExcel_Style_Alignment::VERTICAL_TOP );
  $obj_writer = PHPExcel_IOFactory::createWriter ( $_excelexport_objPHPExcel, 'Excel2007' );
  $obj_writer->save ( 'php://output' );
  header ( 'Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' );
  header ( 'Content-Disposition: attachment;filename="MonthlyReport.xlsx"' ); 
  header ( 'Cache-Control: max-age=0' );
  header ( 'Cache-Control: max-age=1' );  
  header ( 'Expires: Mon, 26 Jul 1997 05:00:00 GMT' );
  header ( 'Last-Modified: ' . gmdate ( 'D, d M Y H:i:s' ) . ' GMT' );
  header ( 'Cache-Control: cache, must-revalidate' );
  header ( 'Pragma: public' );
  }
  if($type == 'costsummary') {
    $XLSRowNo++; $XLSRowNo++;   
    header ( 'Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' );
  header ( 'Content-Disposition: attachment;filename="ProjectCostSummaryReport.xlsx"' );  
  header ( 'Cache-Control: max-age=0' );
  header ( 'Cache-Control: max-age=1' );
  header ( 'Expires: Mon, 26 Jul 1997 05:00:00 GMT' );
  header ( 'Last-Modified: ' . gmdate ( 'D, d M Y H:i:s' ) . ' GMT' );
  header ( 'Cache-Control: cache, must-revalidate' );
  header ( 'Pragma: public' );  
  $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( 'A1:Z500' )->getAlignment ()->setWrapText ( true );
  $BStyle = array('borders' => array( 'bottom' => array( 'style' => PHPExcel_Style_Border::BORDER_THIN ))); 
  $_excelexport_objPHPExcel->getActiveSheet()->getColumnDimension('B')->setWidth(30);
  $_excelexport_objPHPExcel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
  $_excelexport_objPHPExcel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
  $_excelexport_objPHPExcel->getActiveSheet()->getColumnDimension('E')->setWidth(20);
  $_excelexport_objPHPExcel->getActiveSheet()->getColumnDimension('F')->setWidth(20);
  $_excelexport_objPHPExcel->getActiveSheet()->getColumnDimension('G')->setWidth(20);
  $_excelexport_objPHPExcel->getActiveSheet()->getColumnDimension('H')->setWidth(20);
  $_excelexport_objPHPExcel->getActiveSheet()->getColumnDimension('I')->setWidth(20); 
  $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( 'A1:Z500' )->getAlignment ()->setVertical ( PHPExcel_Style_Alignment::VERTICAL_TOP );
  $obj_writer = PHPExcel_IOFactory::createWriter ( $_excelexport_objPHPExcel, 'Excel2007' );
  $obj_writer->save ( 'php://output' );
  }
  else if($type == 'commitment') {
    header ( 'Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' );
  header ( 'Content-Disposition: attachment;filename="ProjectCommitmentReport.xlsx"' ); 
  header ( 'Cache-Control: max-age=0' );
  header ( 'Cache-Control: max-age=1' );
  header ( 'Expires: Mon, 26 Jul 1997 05:00:00 GMT' );
  header ( 'Last-Modified: ' . gmdate ( 'D, d M Y H:i:s' ) . ' GMT' );
  header ( 'Cache-Control: cache, must-revalidate' );
  header ( 'Pragma: public' );
  $BStyle = array('borders' => array( 'bottom' => array( 'style' => PHPExcel_Style_Border::BORDER_THIN )));
  $_excelexport_objPHPExcel->getActiveSheet()->mergeCells('D2:E2');
  $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( 'A1:Z500' )->getAlignment ()->setWrapText ( true );
  $_excelexport_objPHPExcel->getActiveSheet()->getColumnDimension('B')->setWidth(30);
  $_excelexport_objPHPExcel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
  $_excelexport_objPHPExcel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
  $_excelexport_objPHPExcel->getActiveSheet()->getColumnDimension('E')->setWidth(20);
  $_excelexport_objPHPExcel->getActiveSheet()->getColumnDimension('F')->setWidth(20);
  $_excelexport_objPHPExcel->getActiveSheet()->getColumnDimension('G')->setWidth(20); 
  $_excelexport_objPHPExcel->getActiveSheet()->getColumnDimension('H')->setWidth(20); 
  $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( 'A1:Z500' )->getAlignment ()->setVertical ( PHPExcel_Style_Alignment::VERTICAL_TOP );
  $obj_writer = PHPExcel_IOFactory::createWriter ( $_excelexport_objPHPExcel, 'Excel2007' );
  $obj_writer->save ( 'php://output' ); 
  }
  else if($type == 'safety') { 
    header ( 'Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' );
  header ( 'Content-Disposition: attachment;filename="ProjectSafetyReport.xlsx"' ); 
  header ( 'Cache-Control: max-age=0' );
  header ( 'Cache-Control: max-age=1' );
  header ( 'Expires: Mon, 26 Jul 1997 05:00:00 GMT' );
  header ( 'Last-Modified: ' . gmdate ( 'D, d M Y H:i:s' ) . ' GMT' );
  header ( 'Cache-Control: cache, must-revalidate' );
  header ( 'Pragma: public' );
  $BStyle = array('borders' => array( 'bottom' => array( 'style' => PHPExcel_Style_Border::BORDER_THIN )));
  $_excelexport_objPHPExcel->getActiveSheet()->mergeCells('D2:G2');
  $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( 'A1:Z500' )->getAlignment ()->setWrapText ( true );
  $_excelexport_objPHPExcel->getActiveSheet()->getColumnDimension('B')->setWidth(30);
  $_excelexport_objPHPExcel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
  $_excelexport_objPHPExcel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
  $_excelexport_objPHPExcel->getActiveSheet()->getColumnDimension('E')->setWidth(20);
  $_excelexport_objPHPExcel->getActiveSheet()->getColumnDimension('F')->setWidth(20);
  $_excelexport_objPHPExcel->getActiveSheet()->getColumnDimension('G')->setWidth(20); 
  $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( 'A1:Z500' )->getAlignment ()->setVertical ( PHPExcel_Style_Alignment::VERTICAL_TOP );
  $obj_writer = PHPExcel_IOFactory::createWriter ( $_excelexport_objPHPExcel, 'Excel2007' );
  $obj_writer->save ( 'php://output' ); 
  }
  else if($type == 'costdetail') {
    header ( 'Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' );
  header ( 'Content-Disposition: attachment;filename="ProjectCostDetailReport.xlsx"' ); 
  header ( 'Cache-Control: max-age=0' );
  header ( 'Cache-Control: max-age=1' );  
  header ( 'Expires: Mon, 26 Jul 1997 05:00:00 GMT' );
  header ( 'Last-Modified: ' . gmdate ( 'D, d M Y H:i:s' ) . ' GMT' );
  header ( 'Cache-Control: cache, must-revalidate' );
  header ( 'Pragma: public' );
  $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( 'A1:Z500' )->getAlignment ()->setWrapText ( true );
  $BStyle = array('borders' => array( 'bottom' => array( 'style' => PHPExcel_Style_Border::BORDER_THIN ))); 
  $_excelexport_objPHPExcel->getActiveSheet()->getStyle('B8:I8')->applyFromArray($BStyle);
  $_excelexport_objPHPExcel->getActiveSheet()->mergeCells('E1:F1'); 
  $_excelexport_objPHPExcel->getActiveSheet()->getColumnDimension('B')->setWidth(30);
  $_excelexport_objPHPExcel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
  $_excelexport_objPHPExcel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
  $_excelexport_objPHPExcel->getActiveSheet()->getColumnDimension('E')->setWidth(20);
  $_excelexport_objPHPExcel->getActiveSheet()->getColumnDimension('F')->setWidth(20);
  $_excelexport_objPHPExcel->getActiveSheet()->getColumnDimension('G')->setWidth(20);
  $_excelexport_objPHPExcel->getActiveSheet()->getColumnDimension('H')->setWidth(20);
  $_excelexport_objPHPExcel->getActiveSheet()->getColumnDimension('I')->setWidth(20); 
  $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( 'A1:Z500' )->getAlignment ()->setVertical ( PHPExcel_Style_Alignment::VERTICAL_TOP );
  $obj_writer = PHPExcel_IOFactory::createWriter ( $_excelexport_objPHPExcel, 'Excel2007' );
  $obj_writer->save ( 'php://output' );
  }
  else if($type == 'estimate') { 
    header ( 'Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' );
  header ( 'Content-Disposition: attachment;filename="BudgetEstimateReport.xlsx"' );  
  header ( 'Cache-Control: max-age=0' );
  header ( 'Cache-Control: max-age=1' );
  header ( 'Expires: Mon, 26 Jul 1997 05:00:00 GMT' );
  header ( 'Last-Modified: ' . gmdate ( 'D, d M Y H:i:s' ) . ' GMT' );
  header ( 'Cache-Control: cache, must-revalidate' );
  header ( 'Pragma: public' );
  $BStyle = array('borders' => array( 'bottom' => array( 'style' => PHPExcel_Style_Border::BORDER_THIN ))); 
  //$_excelexport_objPHPExcel->getActiveSheet()->getStyle('B7:D7')->applyFromArray($BStyle);    
  
  $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( 'A1:Z500' )->getAlignment ()->setWrapText ( true );
  $_excelexport_objPHPExcel->getActiveSheet()->getColumnDimension('B')->setWidth(50);
  $_excelexport_objPHPExcel->getActiveSheet()->getColumnDimension('C')->setWidth(40);
  $_excelexport_objPHPExcel->getActiveSheet()->getColumnDimension('D')->setWidth(20); 
  $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( 'A1:Z500' )->getAlignment ()->setVertical ( PHPExcel_Style_Alignment::VERTICAL_TOP );
  $obj_writer = PHPExcel_IOFactory::createWriter ( $_excelexport_objPHPExcel, 'Excel2007' );
  $obj_writer->save ( 'php://output' );
  }
  else if ($type == 'asset') {
    header ( 'Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' );
    header ( 'Content-Disposition: attachment;filename="ProjectAssetReports.xlsx"' );  
    header ( 'Cache-Control: max-age=0' );
    header ( 'Cache-Control: max-age=1' );
    header ( 'Expires: Mon, 26 Jul 1997 05:00:00 GMT' );
    header ( 'Last-Modified: ' . gmdate ( 'D, d M Y H:i:s' ) . ' GMT' );
    header ( 'Cache-Control: cache, must-revalidate' );
    header ( 'Pragma: public' );
    $BStyle = array('borders' => array( 'bottom' => array( 'style' => PHPExcel_Style_Border::BORDER_THIN ))); 
    //$_excelexport_objPHPExcel->getActiveSheet()->getStyle('B7:D7')->applyFromArray($BStyle);    
    $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( 'A1:Z500' )->getAlignment ()->setWrapText ( true );
    /*$_excelexport_objPHPExcel->getActiveSheet()->getColumnDimension('B')->setWidth(15);
    $_excelexport_objPHPExcel->getActiveSheet()->getColumnDimension('C')->setWidth(15);
    $_excelexport_objPHPExcel->getActiveSheet()->getColumnDimension('D')->setWidth(10); */
    $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( 'A1:Z500' )->getAlignment ()->setVertical ( PHPExcel_Style_Alignment::VERTICAL_TOP );
    $obj_writer = PHPExcel_IOFactory::createWriter ( $_excelexport_objPHPExcel, 'Excel2007' );
    $obj_writer->save ( 'php://output' );
  }
  
  if ($type == 'spending-forecast') {
    $XLSRowNo = 1;
    // In Spending forecast, we need to generate summary of all projects on
    // Page 1 and then detailed description of each project from Page 2.
    $reportTitle = t('Project Spending Forecasts');

    // Creating Report Title.
    $rowFills = 'A'.$XLSRowNo.':H'.$XLSRowNo;
    $_excelexport_objPHPExcel->getActiveSheet()->getStyle($rowFills)->getFill()->setFillType(PHPExcel_Style_Fill::FILL_SOLID)->getStartColor()->setARGB('E3E3E3');
    $_excelexport_objPHPExcel->getActiveSheet()->mergeCells('A'.$XLSRowNo.':H'.$XLSRowNo); // Merging A1:T1

    $BStyle = array('borders' => array( 'allborders' => array( 'style' => PHPExcel_Style_Border::BORDER_THIN )), 'alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,)); // Applying borders
    $_excelexport_objPHPExcel->getActiveSheet()->getStyle('A'. ($XLSRowNo).':H'.($XLSRowNo))->applyFromArray($BStyle);

    $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( 'A' . ($XLSRowNo) )->getFont ()->setBold ( true );
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'A' . ($XLSRowNo), utf8_encode($reportTitle));

    $XLSRowNo += 2; // Row 3;

    $_excelexport_objPHPExcel->getActiveSheet()->mergeCells('A'.$XLSRowNo.':F'.$XLSRowNo); // Merging A1:T1

    $BStyle = array('borders' => array( 'allborders' => array( 'style' => PHPExcel_Style_Border::BORDER_THIN )), 'alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_LEFT,)); // Applying borders
    $_excelexport_objPHPExcel->getActiveSheet()->getStyle('A'. ($XLSRowNo).':F'.($XLSRowNo))->applyFromArray($BStyle);

    $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( 'A' . ($XLSRowNo) )->getFont ()->setBold ( true );
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'A' . ($XLSRowNo), utf8_encode(t('Summary')));

    $XLSRowNo += 2; // Row 5;


    $cyr_year = date('Y');
    $summary_header = array(t('Project'), t('Previous Year Total'), $cyr_year . ' ' . t('Spending'), t('Future Year Total'), t('Spent To Date'), t('PFC'));

    for ($i = 0; $i <= count($summary_header) - 1; $i++) {
      $colindexx = excelgeneratorurl_get_colindex ($i);
      $_excelexport_objPHPExcel->getActiveSheet()->getStyle( $colindexx . ($XLSRowNo) )->getFill()->setFillType(PHPExcel_Style_Fill::FILL_SOLID)->getStartColor()->setARGB('FCF305');

      $BStyle = array('borders' => array( 'allborders' => array( 'style' => PHPExcel_Style_Border::BORDER_THIN )), 'alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER, 'vertical' => PHPExcel_Style_Alignment::VERTICAL_BOTTOM,)); // Applying borders
      $_excelexport_objPHPExcel->getActiveSheet()->getStyle( $colindexx . ($XLSRowNo))->applyFromArray($BStyle);

      $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( $colindexx . ($XLSRowNo) )->getFont ()->setBold ( true );
      $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( $colindexx . ($XLSRowNo), utf8_encode ( $summary_header[$i] ) );
    }

    $XLSRowNo++; // Row 3;

    $last_forecast_arr = array(); // For Summary
    $last_forecast_arr_commit = array(); // For details
    $last_forecast_arr_etc = array(); // For details
    foreach($costProId as $proID) {
      // Trying to get Forecast details.
      $query = db_select('m6connect_spending_forecast','sf');
      $query->distinct('sf.forecast_name');
      $query->fields('sf', array('forecast_name'));
      $query->condition('sf.project_id', $proID);
      $getForecastName = $query->execute()->fetchCol();

      if (!empty($getForecastName)) {
        $last_forecast_arr[$proID] = $getForecastName[count($getForecastName) - 1];
      }
      else {
        $last_forecast_arr[$proID] = NULL;
      }
    }

    foreach ($last_forecast_arr as $key => $forecast) {
      $projectSpending = node_load($key);
      $pSTitle = $projectSpending->title;

      if (!empty($forecast)) {
        $query= db_select('node','n');
        $query->join('field_data_field_project_reference','pr', 'pr.entity_id = n.nid');   
        $query->fields('n', array('nid'));
        $query->condition('pr.field_project_reference_nid', $key, '=');
        $query->condition('pr.bundle','project_commitement','=');
        $getCommitmentNodes = $query->execute()->fetchCol();

        $getCurrentYearAmt = 0;
        $getFutureAmt = 0;
        $getVarienceAmt = 0;
        $finalPreviousYearTotal = 0;

        foreach($getCommitmentNodes as $commitKey => $commitVal) {
          $getCommitData = node_load($commitVal);

          $query = db_select('m6connect_spending_forecast', 'sf');
          $query->fields('sf', array('quarter_one_amount','quarter_two_amount', 'quarter_three_amount','quarter_four_text_amount','quarter_four_amount','current_year_spending_amount','future_year_amout','variance_amount'));
          $query->condition('sf.forecast_name', $forecast, '=');
          $query->condition('sf.project_id', $key, '=');
          $query->condition('sf.commitment_id', $getCommitData->nid, '=');
          $forecastData = $query->execute()->fetchAll();

          $getCurrentYearAmt += $forecastData[0]->current_year_spending_amount;
          $getFutureAmt += $forecastData[0]->future_year_amout;
          $getVarienceAmt += $forecastData[0]->variance_amount;
          $getPreviousYearTotal = _get_previous_year_spending_total($key,$getCommitData->nid);
          $finalPreviousYearTotal += $getPreviousYearTotal;
        }

        $query= db_select('node','n'); 
        $query->join('field_data_field_estimate_reference','er','er.entity_id = n.nid');
        $query->join('node','enode','enode.nid=er.field_estimate_reference_nid');
        $query->join('field_data_field_project_estimate_status','es','es.entity_id = enode.nid');  
        $query->join('field_data_field_project_estimate_amount','ea','ea.entity_id = enode.nid');    
        $query->join('field_data_field_capital_contingency','ecc','ecc.entity_id = enode.nid');      
        $query->join('field_data_field_project_reference','pr','enode.nid=pr.entity_id');  
        $query->leftjoin('field_data_field_est_line_item_amt','la','n.nid=la.entity_id');
        $query->leftjoin('field_data_field_conigency_percentage','cp','n.nid=cp.entity_id');  
        $query->leftjoin('field_data_field_est_cost_code','cc','cc.entity_id=n.nid');
        $query->fields('cc',array('entity_id'));
        $query->fields('la',array('field_est_line_item_amt_value'));
        $query->fields('cp',array('field_conigency_percentage_value'));
        $query->fields('cc',array('field_est_cost_code_value'));
        $query->fields('ea',array('field_project_estimate_amount_value'));  
        $query->fields('ecc',array('field_capital_contingency_value'));  
        $query->fields('er',array('field_estimate_reference_nid'));  
        $query->condition('es.field_project_estimate_status_value', 'approved', '=');
        $query->orderBy('cc.field_est_cost_code_value', 'ASC');
        $query->condition('pr.field_project_reference_nid', $key, '=');
        $costCode = $query->execute()->fetchAll();  
        $ccArr = array();
        $ccArrCount = array();

        $totalFinalCost = 0;
        $totalInvoiceTotal = 0;

        module_load_include('inc', 'm6connect_program', 'includes/cost.summary');
        foreach($costCode as $ccId => $ccVal) {
          // Get cost code
          // $getCcDes = db_select('node','n'); 
          // $getCcDes->join('field_data_field_manager_cost_code','mcc','mcc.entity_id = n.nid'); 
          // $getCcDes->join('field_data_field_cost_code_description','ccd','ccd.entity_id = n.nid');    
          // $getCcDes->fields('ccd',array('field_cost_code_description_value'));
          // $getCcDes->condition('mcc.field_manager_cost_code_value',$ccVal->field_est_cost_code_value, '=');
          // $costCodeDes = $getCcDes->execute()->fetchField();        
          // $costCode = $ccVal->field_est_cost_code_value.'|'.$costCodeDes; 
            // Get Original budget 
          $capitalContigency = $ccVal->field_capital_contingency_value; 
          if (!isset($ccArr[$ccVal->field_est_cost_code_value])) {
            $ccArr[$ccVal->field_est_cost_code_value]= array(
              // 'cc' => $ccVal->field_est_cost_code_value,
              // 'cost_code' => $ccVal->field_est_cost_code_value.'|'.$costCodeDes,
              'originalBudget' => 0,
              'currentBudget' => 0,
              'Commitment' => 0,
              'spent' => 0,
              'Allocated' => 0,
              'est' => 0,
              'PFC' => 0,
              'Variance' => 0,
            );
            $ccArrCount[$ccVal->field_est_cost_code_value] = 0; 
          }   
          if ($ccVal->field_est_line_item_amt_value != '') {
            $originalBudget = $ccVal->field_est_line_item_amt_value;
          }
          elseif ($ccVal->field_conigency_percentage_value != '') {
            $percent = ($ccVal->field_project_estimate_amount_value * $ccVal->field_conigency_percentage_value)/100;      
            $originalBudget = $percent;
          }
          $totalOriginalBudget += $originalBudget;
          $currentBudget = $originalBudget;
          $totalcurrentBudget += $currentBudget;
            // Get invoice total
          $getInvoiceTotal = get_invoice_total_by_cost_code_inc($ccVal->field_est_cost_code_value,$proId);
          $totalInvoiceTotal += $getInvoiceTotal;
          // Get commitment total
          $getCommitmentTotal = get_commitment_total_by_cost_code_inc($ccVal->field_est_cost_code_value,$proId);
          
          $totalCommitmentTotal += $getCommitmentTotal;
          // Get total allocated 
          $getTotalAllocated = get_total_allocated_by_cost_code_inc($ccVal->field_est_cost_code_value,$proId,$getCommitmentTotal);
          $totalAllocated += $getTotalAllocated;
          // Get etc total
          $getETCTotal = get_etc_total_by_cost_code_inc($ccVal->field_est_cost_code_value,$proId);
          $etcTotal += $getETCTotal;
          // Get Project final cost
          $projectFinalCost = $getTotalAllocated + $getETCTotal;
          $totalFinalCost += $projectFinalCost;
          // Variance
          $varience = $originalBudget - $projectFinalCost;
          $totalVariance += $varience;      
            $ccArr[$ccVal->field_est_cost_code_value]['cc'] = $ccVal->field_est_cost_code_value;  
          $ccArr[$ccVal->field_est_cost_code_value]['originalBudget'] += $originalBudget; 
          $ccArr[$ccVal->field_est_cost_code_value]['currentBudget'] += $currentBudget;
          $ccArr[$ccVal->field_est_cost_code_value]['Commitment'] = $getCommitmentTotal;
          $ccArr[$ccVal->field_est_cost_code_value]['spent'] = $getInvoiceTotal;
          $ccArr[$ccVal->field_est_cost_code_value]['Allocated'] = $getTotalAllocated;
          $ccArr[$ccVal->field_est_cost_code_value]['est'] = $getETCTotal;
          $ccArr[$ccVal->field_est_cost_code_value]['PFC'] = $projectFinalCost;
          $ccArr[$ccVal->field_est_cost_code_value]['Variance'] = $varience;
          $ccArrCount[$ccVal->field_est_cost_code_value]++;
        }

        $summary_row = array($pSTitle, $finalPreviousYearTotal, $getCurrentYearAmt, $getFutureAmt, $totalInvoiceTotal, $projectFinalCost);

        for ($i = 0; $i <= count($summary_row) - 1; $i++) {
          $colindexx = excelgeneratorurl_get_colindex ($i);

          $_excelexport_objPHPExcel->getActiveSheet()->getStyle($colindexx . ($XLSRowNo).':' . $colindexx .($XLSRowNo))->getNumberFormat()->setFormatCode('$#,##0_-');

          $BStyle = array('borders' => array( 'allborders' => array( 'style' => PHPExcel_Style_Border::BORDER_THIN )), 'alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER, 'vertical' => PHPExcel_Style_Alignment::VERTICAL_BOTTOM,)); // Applying borders
          $_excelexport_objPHPExcel->getActiveSheet()->getStyle( $colindexx . ($XLSRowNo))->applyFromArray($BStyle);

          $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( $colindexx . ($XLSRowNo), utf8_encode ( $summary_row[$i] ) );
        }
      }
      else {
        // Just showing that no forecast available.
        $BStyle = array('borders' => array( 'allborders' => array( 'style' => PHPExcel_Style_Border::BORDER_THIN )), 'alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER, 'vertical' => PHPExcel_Style_Alignment::VERTICAL_BOTTOM,)); // Applying borders
        $_excelexport_objPHPExcel->getActiveSheet()->getStyle( 'A' . ($XLSRowNo))->applyFromArray($BStyle);
        $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'A' . ($XLSRowNo), utf8_encode ( $pSTitle ) );

        $_excelexport_objPHPExcel->getActiveSheet()->mergeCells('B'.$XLSRowNo.':F'.$XLSRowNo);
        $_excelexport_objPHPExcel->getActiveSheet()->getStyle( 'B' . ($XLSRowNo))->applyFromArray($BStyle);
        $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'B' . ($XLSRowNo), utf8_encode ( t('No spending forecast found!') ) );
      }

      $XLSRowNo++;
    }

    $XLSRowNo += 2;

    // Generating detailed reports.
    $_excelexport_objPHPExcel->getActiveSheet()->mergeCells('A'.$XLSRowNo.':L'.$XLSRowNo); // Merging A1:T1

    $BStyle = array('borders' => array( 'allborders' => array( 'style' => PHPExcel_Style_Border::BORDER_THIN )), 'alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_LEFT,)); // Applying borders
    $_excelexport_objPHPExcel->getActiveSheet()->getStyle('A'. ($XLSRowNo).':M'.($XLSRowNo))->applyFromArray($BStyle);

    $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( 'A' . ($XLSRowNo) )->getFont ()->setBold ( true );
    $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'A' . ($XLSRowNo), utf8_encode(t('Details')));

    $XLSRowNo += 2;

    foreach ($last_forecast_arr as $key => $forecast) {
      if (empty($forecast)) {
        continue;
      }
      $projectSpending = node_load($key);
      $pSTitle = $projectSpending->title;

      $_excelexport_objPHPExcel->getActiveSheet()->mergeCells('A'.$XLSRowNo.':M'.$XLSRowNo); // Merging A1:T1

      $BStyle = array('borders' => array( 'allborders' => array( 'style' => PHPExcel_Style_Border::BORDER_THIN )), 'alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_LEFT,)); // Applying borders
      $_excelexport_objPHPExcel->getActiveSheet()->getStyle('A'. ($XLSRowNo).':M'.($XLSRowNo))->applyFromArray($BStyle);

      $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( 'A' . ($XLSRowNo) )->getFont ()->setBold ( true );
      $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'A' . ($XLSRowNo), utf8_encode($pSTitle));

      $XLSRowNo++;


      $_excelexport_objPHPExcel->getActiveSheet()->mergeCells('A'.$XLSRowNo.':M'.$XLSRowNo); // Merging A1:T1

      $BStyle = array('borders' => array( 'allborders' => array( 'style' => PHPExcel_Style_Border::BORDER_THIN )), 'alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_LEFT,)); // Applying borders
      $_excelexport_objPHPExcel->getActiveSheet()->getStyle('A'. ($XLSRowNo).':M'.($XLSRowNo))->applyFromArray($BStyle);

      $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( 'A' . ($XLSRowNo) )->getFont ()->setBold ( true );
      $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'A' . ($XLSRowNo), utf8_encode(t('Commitment Forecast')));

      $XLSRowNo++;

      // Making header.
      $detail_header = array(
        t('Commitment Number'),
        t('Company Name'),
        t('Amount'),
        t('Total Spent'),
        t('Previous Years'),
        date('Y') . ' ' . t('Quarter 1'),
        date('Y') . ' ' . t('Quarter 2'),
        date('Y') . ' ' . t('Quarter 3'),
        date('Y') . ' ' . t('Quarter 4'),
        date('Y') . ' ' . t('Spending'),
        t('Future Years'),
        t('Variance'),
      );

      $currentQuarter = _get_current_quarter(date('n'));
      $i = 0;
      foreach ($detail_header as $d_key => $d_val) {
        $colindexx = excelgeneratorurl_get_colindex ($i);
        if ($currentQuarter == 'firstQuarter') {
          if ($i == 5) {
            $i++;
            $nextcolindexx = excelgeneratorurl_get_colindex ($i);
            $_excelexport_objPHPExcel->getActiveSheet()->mergeCells($colindexx . $XLSRowNo . ':' . $nextcolindexx . $XLSRowNo);
          }
        }
        if ($currentQuarter == 'secondQuarter') {
          if ($i == 6) {
            $i++;
            $nextcolindexx = excelgeneratorurl_get_colindex ($i);
            $_excelexport_objPHPExcel->getActiveSheet()->mergeCells($colindexx . $XLSRowNo . ':' . $nextcolindexx . $XLSRowNo);
          }
        }
        if ($currentQuarter == 'thirdQuarter') {
          if ($i == 7) {
            $i++;
            $nextcolindexx = excelgeneratorurl_get_colindex ($i);
            $_excelexport_objPHPExcel->getActiveSheet()->mergeCells($colindexx . $XLSRowNo . ':' . $nextcolindexx . $XLSRowNo);
          }
        }
        if ($currentQuarter == 'fourthQuarter') {
          if ($i == 8) {
            $i++;
            $nextcolindexx = excelgeneratorurl_get_colindex ($i);
            $_excelexport_objPHPExcel->getActiveSheet()->mergeCells($colindexx . $XLSRowNo . ':' . $nextcolindexx . $XLSRowNo);
          }
        }
        $_excelexport_objPHPExcel->getActiveSheet()->getStyle( $colindexx . ($XLSRowNo) )->getFill()->setFillType(PHPExcel_Style_Fill::FILL_SOLID)->getStartColor()->setARGB('FCF305');
        $BStyle = array('borders' => array( 'allborders' => array( 'style' => PHPExcel_Style_Border::BORDER_THIN )), 'alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER, 'vertical' => PHPExcel_Style_Alignment::VERTICAL_BOTTOM,)); // Applying borders
        $_excelexport_objPHPExcel->getActiveSheet()->getStyle( $colindexx . ($XLSRowNo))->applyFromArray($BStyle);

        $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( $colindexx . ($XLSRowNo) )->getFont ()->setBold ( true );
        $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( $colindexx . ($XLSRowNo), utf8_encode ( $d_val ) );
        $i++;
      } // Finished making header for each project.

      $XLSRowNo++;
      $sum_start = $XLSRowNo; // Used to start the sum from here.
      // Now getting data and filling in.

      $query= db_select('node','n');
      $query->join('field_data_field_project_reference','pr', 'pr.entity_id = n.nid');   
      $query->fields('n', array('nid'));
      $query->condition('pr.field_project_reference_nid', $key, '=');
      $query->condition('pr.bundle','project_commitement','=');
      $getCommitmentNodes = $query->execute()->fetchCol();
      foreach($getCommitmentNodes as $commitKey => $commitVal) {
        $getCommitData = node_load($commitVal);
        $getCurrentYearAmt = 0;
        $getFutureAmt = 0;
        $getVarienceAmt = 0;

        if (!empty($forecast)) {
          $query = db_select('m6connect_spending_forecast', 'sf');
          $query->fields('sf', array('quarter_one_amount','quarter_two_amount', 'quarter_three_amount','quarter_four_text_amount','quarter_four_amount','current_year_spending_amount','future_year_amout','variance_amount'));
          $query->condition('sf.forecast_name', $forecast, '=');
          $query->condition('sf.project_id', $key, '=');
          $query->condition('sf.commitment_id', $getCommitData->nid, '=');
          $forecastData = $query->execute()->fetchAll();
          $getCurrentYearAmt = !empty($forecastData[0]->current_year_spending_amount) ? $forecastData[0]->current_year_spending_amount : 0;
          $getFutureAmt = !empty($forecastData[0]->future_year_amout) ? $forecastData[0]->future_year_amout : 0;
          $getVarienceAmt = !empty($forecastData[0]->variance_amount) ? $forecastData[0]->variance_amount : 0;
        }

        $commitNumber = $getCommitData->field_commitment_number_calculat['und'][0]['value'];

        if (isset($getCommitData->field_vendor['und']) && is_numeric($getCommitData->field_vendor['und'][0]['value'])) {
          $companyName = node_load($getCommitData->field_vendor['und'][0]['value'])->title;
        }
        else {
          $companyName = $getCommitData->field_vendor['und'][0]['value'];
        }

        $commitAmt = $getCommitData->field_commitment_po_final_total['und'][0]['value'] != '' ? $getCommitData->field_commitment_po_final_total['und'][0]['value'] : 0;
        // Get invoice spending amount
        $query= db_select('node','n'); 
        $query->join('field_data_field_invoice_commitment','ic','ic.entity_id = n.nid');
        $query->join('field_data_field_invoice_amount','ia','ia.entity_id = n.nid');
        $query->addExpression('SUM(ia.field_invoice_amount_value)','finalTotal');
        $query->condition('n.type','project_spending','=');
        $query->condition('ic.field_invoice_commitment_nid',$getCommitData->nid,'=');
        $query->groupBy('ic.field_invoice_commitment_nid');
        $getTotalSpending = $query->execute()->fetchField();
        $invoice = $getTotalSpending != '' ? $getTotalSpending : 0;
        $subtotalInv += $invoice;
        $subTotalCommitment += $getCommitData->field_commitment_po_final_total['und'][0]['value'];
        // Get quarter value for etc
        $defaultAmt = 0;
        $$quarterOneCol = '';
        $quarterTwoCol = '';
        $quarterThreeCol = '';
        $quarterFourCol = ''; 
        
        $getPrevQuarterOne = 0;  
        $getPrevQuarterTwo = 0;
        $getPrevQuarterThree = 0;
        $getPrevQuarterFour = 0;
        $getPrevQuarterFourText = 0;

          
        if ($currentQuarter == 'firstQuarter') {
          if (!empty($forecastData)) {
            $getPrevQuarterOne = $forecastData[0]->quarter_one_amount;
            $getPrevQuarterTwo = $forecastData[0]->quarter_two_amount;
            $getPrevQuarterThree = $forecastData[0]->quarter_three_amount;
            $getPrevQuarterFour = $forecastData[0]->quarter_four_amount;
          } 
          $startDateOneQuarter = date('Y').'-01-01 00:00:00';
          $startDateTwoQuarter = date('Y').'-04-01 00:00:00';
          $startDateThirdQuarter = date('Y').'-07-01 00:00:00';
          $startDateFourthQuarter = date('Y').'-10-01 00:00:00';

          $getCurrentquarter = $getPrevQuarterOne;

          $getPrevQuarterOneTot = _get_spending_total_by_quarter($startDateOneQuarter,date('Y').'-03-31 00:00:00',$key,$getCommitData->nid, TRUE);
          $getPrevQuarterTwoTot = _get_spending_total_by_quarter($startDateTwoQuarter,date('Y').'-06-31 00:00:00',$key,$getCommitData->nid, TRUE);
          $getPrevQuarterThreeTot = _get_spending_total_by_quarter($startDateThirdQuarter,date('Y').'-09-31 00:00:00',$key,$getCommitData->nid, TRUE);
          $getPrevQuarterFourTot = _get_spending_total_by_quarter($startDateFourthQuarter,date('Y').'12-31 00:00:00',$key,$getCommitData->nid, TRUE);
        }

        if ($currentQuarter == 'secondQuarter') {
          if (!empty($forecastData)) {
            $getPrevQuarterOne = $forecastData[0]->quarter_one_amount;
            $getPrevQuarterTwo = $forecastData[0]->quarter_two_amount;
            $getPrevQuarterThree = $forecastData[0]->quarter_three_amount;
            $getPrevQuarterFour = $forecastData[0]->quarter_four_amount;
          }
          $startDateOneQuarter = date('Y').'-01-01 00:00:00';
          $startDateTwoQuarter = date('Y').'-04-01 00:00:00';
          $startDateThirdQuarter = date('Y').'-07-01 00:00:00';
          $startDateFourthQuarter = date('Y').'-10-01 00:00:00';

          $getCurrentquarter = $getPrevQuarterTwo;


          $getPrevQuarterOneTot = _get_spending_total_by_quarter($startDateOneQuarter,date('Y').'-03-31 00:00:00',$key,$getCommitData->nid, TRUE);
          $getPrevQuarterTwoTot = _get_spending_total_by_quarter($startDateTwoQuarter,date('Y').'-06-31 00:00:00',$key,$getCommitData->nid, TRUE);
          $getPrevQuarterThreeTot = _get_spending_total_by_quarter($startDateThirdQuarter,date('Y').'-09-31 00:00:00',$key,$getCommitData->nid, TRUE);
          $getPrevQuarterFourTot = _get_spending_total_by_quarter($startDateFourthQuarter,date('Y').'12-31 00:00:00',$key,$getCommitData->nid, TRUE);
        }

        if ($currentQuarter == 'thirdQuarter') {
          if (!empty($forecastData)) {
            $getPrevQuarterOne = $forecastData[0]->quarter_one_amount;
            $getPrevQuarterTwo = $forecastData[0]->quarter_two_amount;
            $getPrevQuarterThree = $forecastData[0]->quarter_three_amount;
            $getPrevQuarterFour = $forecastData[0]->quarter_four_amount;
          } 
          $startDateOneQuarter = date('Y').'-01-01 00:00:00';
          $startDateTwoQuarter = date('Y').'-04-01 00:00:00';
          $startDateThirdQuarter = date('Y').'-07-01 00:00:00';
          $startDateFourthQuarter = date('Y').'-10-01 00:00:00';

          $getCurrentquarter = $getPrevQuarterThree;
          
          $getPrevQuarterOneTot = _get_spending_total_by_quarter($startDateOneQuarter,date('Y').'-03-31 00:00:00',$key,$getCommitData->nid, TRUE);
          $getPrevQuarterTwoTot = _get_spending_total_by_quarter($startDateTwoQuarter,date('Y').'-06-31 00:00:00',$key,$getCommitData->nid, TRUE);
          $getPrevQuarterThreeTot = _get_spending_total_by_quarter($startDateThirdQuarter,date('Y').'-09-31 00:00:00',$key,$getCommitData->nid, TRUE);
          $getPrevQuarterFourTot = _get_spending_total_by_quarter($startDateFourthQuarter,date('Y').'12-31 00:00:00',$key,$getCommitData->nid, TRUE);
        }

        if ($currentQuarter == 'fourthQuarter') {
          if (!empty($forecastData)) {
            $getPrevQuarterOne = $forecastData[0]->quarter_one_amount;
            $getPrevQuarterTwo = $forecastData[0]->quarter_two_amount;
              $getPrevQuarterThree = $forecastData[0]->quarter_three_amount;
            $getPrevQuarterFour = $forecastData[0]->quarter_four_amount;
            $getPrevQuarterFourText = $forecastData[0]->quarter_four_text_amount;
          }
          $startDateOneQuarter = date('Y').'-01-01 00:00:00';
          $startDateTwoQuarter = date('Y').'-04-01 00:00:00';
          $startDateThirdQuarter = date('Y').'-07-01 00:00:00';
          $startDateFourthQuarter = date('Y').'-10-01 00:00:00';

          $getCurrentquarter = $startDateFourthQuarter;
          
          $getPrevQuarterOneTot = _get_spending_total_by_quarter($startDateOneQuarter,date('Y').'-03-31 00:00:00',$key,$getCommitData->nid, TRUE);
          $getPrevQuarterTwoTot = _get_spending_total_by_quarter($startDateTwoQuarter,date('Y').'-06-31 00:00:00',$key,$getCommitData->nid, TRUE);
          $getPrevQuarterThreeTot = _get_spending_total_by_quarter($startDateThirdQuarter,date('Y').'-09-31 00:00:00',$key,$getCommitData->nid, TRUE);
          $getPrevQuarterFourTot = _get_spending_total_by_quarter($startDateFourthQuarter,date('Y').'12-31 00:00:00',$key,$getCommitData->nid, TRUE);
        }

        $getPreviousYearTotal = _get_previous_year_spending_total($key,$getCommitData->nid);
        $finalPreviousYearTotal += $getPreviousYearTotal;

        $i = 0;

        if ($currentQuarter == 'firstQuarter') {
          $detail_row = array(
            $commitNumber,
            $companyName != '' ? ucwords($companyName) : t('None'),
            $commitAmt,
            $invoice,
            $getPreviousYearTotal,
            $getCurrentquarter,
            $getPrevQuarterOneTot,
            $getPrevQuarterTwoTot,
            $getPrevQuarterThreeTot,
            $getPrevQuarterFourTot,
            $getCurrentYearAmt,
            $getFutureAmt,
            $getVarienceAmt,
          );
          $detail_row_total['commitAmt'] += $commitAmt;
          $detail_row_total['invoice'] += $invoice;
          $detail_row_total['getPreviousYearTotal'] += $getPreviousYearTotal;
          $detail_row_total['getCurrentquarter'] += $getCurrentquarter;
          $detail_row_total['getPrevQuarterOne'] += $getPrevQuarterOneTot;
          $detail_row_total['getPrevQuarterTwo'] += $getPrevQuarterTwoTot;
          $detail_row_total['getPrevQuarterThree'] += $getPrevQuarterThreeTot;
          $detail_row_total['getPrevQuarterFour'] += $getPrevQuarterFourTot;
          $detail_row_total['getCurrentYearAmt'] += $getCurrentYearAmt;
          $detail_row_total['getFutureAmt'] += $getFutureAmt;
          $detail_row_total['getVarienceAmt'] += $getVarienceAmt;
        }
        if ($currentQuarter == 'secondQuarter') {
          $detail_row = array(
            $commitNumber,
            $companyName != '' ? ucwords($companyName) : t('None'),
            $commitAmt,
            $invoice,
            $getPreviousYearTotal,
            $getPrevQuarterOneTot,
            $getCurrentquarter,
            $getPrevQuarterTwoTot,
            $getPrevQuarterThreeTot,
            $getPrevQuarterFourTot,
            $getCurrentYearAmt,
            $getFutureAmt,
            $getVarienceAmt,
          );
          $detail_row_total['commitAmt'] += $commitAmt;
          $detail_row_total['invoice'] += $invoice;
          $detail_row_total['getPreviousYearTotal'] += $getPreviousYearTotal;
          $detail_row_total['getPrevQuarterOne'] += $getPrevQuarterOneTot;
          $detail_row_total['getCurrentquarter'] += $getCurrentquarter;
          $detail_row_total['getPrevQuarterTwo'] += $getPrevQuarterTwoTot;
          $detail_row_total['getPrevQuarterThree'] += $getPrevQuarterThreeTot;
          $detail_row_total['getPrevQuarterFour'] += $getPrevQuarterFourTot;
          $detail_row_total['getCurrentYearAmt'] += $getCurrentYearAmt;
          $detail_row_total['getFutureAmt'] += $getFutureAmt;
          $detail_row_total['getVarienceAmt'] += $getVarienceAmt;
        }
        if ($currentQuarter == 'thirdQuarter') {
          $detail_row = array(
            $commitNumber,
            $companyName != '' ? ucwords($companyName) : t('None'),
            $commitAmt,
            $invoice,
            $getPreviousYearTotal,
            $getPrevQuarterOneTot,
            $getPrevQuarterTwoTot,
            $getCurrentquarter,
            $getPrevQuarterThreeTot,
            $getPrevQuarterFourTot,
            $getCurrentYearAmt,
            $getFutureAmt,
            $getVarienceAmt,
          );
          $detail_row_total['commitAmt'] += $commitAmt;
          $detail_row_total['invoice'] += $invoice;
          $detail_row_total['getPreviousYearTotal'] += $getPreviousYearTotal;
          $detail_row_total['getPrevQuarterOne'] += $getPrevQuarterOneTot;
          $detail_row_total['getPrevQuarterTwo'] += $getPrevQuarterTwoTot;
          $detail_row_total['getCurrentquarter'] += $getCurrentquarter;
          $detail_row_total['getPrevQuarterThree'] += $getPrevQuarterThreeTot;
          $detail_row_total['getPrevQuarterFour'] += $getPrevQuarterFourTot;
          $detail_row_total['getCurrentYearAmt'] += $getCurrentYearAmt;
          $detail_row_total['getFutureAmt'] += $getFutureAmt;
          $detail_row_total['getVarienceAmt'] += $getVarienceAmt;
        }
        if ($currentQuarter == 'fourthQuarter') {
          $detail_row = array(
            $commitNumber,
            $companyName != '' ? ucwords($companyName) : t('None'),
            $commitAmt,
            $invoice,
            $getPreviousYearTotal,
            $getPrevQuarterOneTot,
            $getPrevQuarterTwoTot,
            $getPrevQuarterThreeTot,
            $getCurrentquarter,
            $getPrevQuarterFourTot,
            $getCurrentYearAmt,
            $getFutureAmt,
            $getVarienceAmt,
          );
          $detail_row_total['commitAmt'] += $commitAmt;
          $detail_row_total['invoice'] += $invoice;
          $detail_row_total['getPreviousYearTotal'] += $getPreviousYearTotal;
          $detail_row_total['getPrevQuarterOne'] += $getPrevQuarterOneTot;
          $detail_row_total['getPrevQuarterTwo'] += $getPrevQuarterTwoTot;
          $detail_row_total['getPrevQuarterThree'] += $getPrevQuarterThreeTot;
          $detail_row_total['getCurrentquarter'] += $getCurrentquarter;
          $detail_row_total['getPrevQuarterFour'] += $getPrevQuarterFourTot;
          $detail_row_total['getCurrentYearAmt'] += $getCurrentYearAmt;
          $detail_row_total['getFutureAmt'] += $getFutureAmt;
          $detail_row_total['getVarienceAmt'] += $getVarienceAmt;
        }


        for ($i = 0; $i <= count($detail_row) - 1; $i++) {
          $colindexx = excelgeneratorurl_get_colindex ($i);
          // $_excelexport_objPHPExcel->getActiveSheet()->getStyle( $colindexx . ($XLSRowNo) )->getFill()->setFillType(PHPExcel_Style_Fill::FILL_SOLID)->getStartColor()->setARGB('FCF305');
          $BStyle = array('borders' => array( 'allborders' => array( 'style' => PHPExcel_Style_Border::BORDER_THIN )), 'alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT, 'vertical' => PHPExcel_Style_Alignment::VERTICAL_BOTTOM,)); // Applying borders

          $_excelexport_objPHPExcel->getActiveSheet()->getStyle($colindexx . ($XLSRowNo).':' . $colindexx .($XLSRowNo))->getNumberFormat()->setFormatCode('$#,##0_-');

          $_excelexport_objPHPExcel->getActiveSheet()->getStyle( $colindexx . ($XLSRowNo))->applyFromArray($BStyle);

          // $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( $colindexx . ($XLSRowNo) )->getFont ()->setBold ( true );
          $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( $colindexx . ($XLSRowNo), utf8_encode ( $detail_row[$i] ) );
        }

        $XLSRowNo++;
      }

      $sum_end = $XLSRowNo - 1; // Used to end the sum here.

      // Generating total for the Commitments.

      $rowFills = 'A'.$XLSRowNo.':M'.$XLSRowNo;
      $_excelexport_objPHPExcel->getActiveSheet()->getStyle($rowFills)->getFill()->setFillType(PHPExcel_Style_Fill::FILL_SOLID)->getStartColor()->setARGB('E3E3E3');

      $detail_row_total_extra = array_values($detail_row_total);
      $detail_row_total = array('none', 'none');

      $detail_row_total = array_merge($detail_row_total, $detail_row_total_extra);

      for ($i = 0; $i <= count($detail_row) - 1; $i++) {
        $colindexx = excelgeneratorurl_get_colindex ($i);
        $BStyle = array('borders' => array( 'allborders' => array( 'style' => PHPExcel_Style_Border::BORDER_THIN )), 'alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT, 'vertical' => PHPExcel_Style_Alignment::VERTICAL_BOTTOM,)); // Applying borders
        $_excelexport_objPHPExcel->getActiveSheet()->getStyle( $colindexx . ($XLSRowNo))->applyFromArray($BStyle);
        $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( $colindexx . ($XLSRowNo) )->getFont ()->setBold ( true );

        if ($i == 1) {
          continue;
        }
        if ($i == 0) {
          $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( $colindexx . ($XLSRowNo), utf8_encode ( t('Total') ) );
        }
        else {
          $_excelexport_objPHPExcel->getActiveSheet()->getStyle($colindexx . ($XLSRowNo).':' . $colindexx .($XLSRowNo))->getNumberFormat()->setFormatCode('$#,##0_-');
          $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( $colindexx . ($XLSRowNo), utf8_encode ( $detail_row_total[$i] ) );
        }
      }

      $XLSRowNo += 2;

      // Generating ETC reports from here.
      $_excelexport_objPHPExcel->getActiveSheet()->mergeCells('A'.$XLSRowNo.':K'.$XLSRowNo);

      $BStyle = array('borders' => array( 'allborders' => array( 'style' => PHPExcel_Style_Border::BORDER_THIN )), 'alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_LEFT,)); // Applying borders
      $_excelexport_objPHPExcel->getActiveSheet()->getStyle('A'. ($XLSRowNo).':K'.($XLSRowNo))->applyFromArray($BStyle);

      $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( 'A' . ($XLSRowNo) )->getFont ()->setBold ( true );
      $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'A' . ($XLSRowNo), utf8_encode(t('ETC Forecast')));

      $XLSRowNo++;


      // Creating header.
      $detail_header_etc = array(
        t('ETC Number'),
        t('Amount'),
        t('Total Spent'),
        t('Previous Years'),
        date('Y') . ' ' . t('Quarter 1'),
        date('Y') . ' ' . t('Quarter 2'),
        date('Y') . ' ' . t('Quarter 3'),
        date('Y') . ' ' . t('Quarter 4'),
        date('Y') . ' ' . t('Spending'),
        t('Future Years'),
        t('Variance'),
      );

      for ($i = 0; $i <= count($detail_header_etc) - 1; $i++) {
        $colindexx = excelgeneratorurl_get_colindex ($i);
        $_excelexport_objPHPExcel->getActiveSheet()->getStyle( $colindexx . ($XLSRowNo) )->getFill()->setFillType(PHPExcel_Style_Fill::FILL_SOLID)->getStartColor()->setARGB('FCF305');
        $BStyle = array('borders' => array( 'allborders' => array( 'style' => PHPExcel_Style_Border::BORDER_THIN )), 'alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER, 'vertical' => PHPExcel_Style_Alignment::VERTICAL_BOTTOM,)); // Applying borders
        $_excelexport_objPHPExcel->getActiveSheet()->getStyle( $colindexx . ($XLSRowNo))->applyFromArray($BStyle);

        $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( $colindexx . ($XLSRowNo) )->getFont ()->setBold ( true );
        $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( $colindexx . ($XLSRowNo), utf8_encode ( $detail_header_etc[$i] ) );
      } // Finished making header for each project.

      $XLSRowNo++;
      $sum_start = $XLSRowNo; // Used to start the sum from here.

      $query = db_select('node','n');
      $query->join('field_data_field_project_reference','pr','n.nid=pr.entity_id');
      $query->join('field_data_field_etc_amount','ea','ea.entity_id = n.nid');  
      $query->join('field_data_field_etc_operation_done', 'eo', 'eo.entity_id = n.nid');
      $query->fields('n', array('nid'));
      $query->condition('pr.field_project_reference_nid', $key, '=');
      $query->condition('eo.field_etc_operation_done_value', 'In ETC', '=');
      $getEtcIds = $query->execute()->fetchCol();
      foreach($getEtcIds as $etcKey => $etcVal) {
        $getEtcData = node_load($etcVal);
        $etcNumber = $getEtcData->field_etc_number_calc['und'][0]['value'];
        $etcAmt = $getEtcData->field_etc_amount['und'][0]['value'] != '' ? $getEtcData->field_etc_amount['und'][0]['value'] : 0;
        $etcTtoal += $etcAmt;
        // Get quarter value for etc
        $defaultAmt = 0;
        $getFutureAmt = 0;
        $getVarienceAmt = 0;
        if (!empty($forecast)) {
          $query = db_select('m6connect_spending_forecast', 'sf');
          $query->fields('sf', array('quarter_one_amount','quarter_two_amount', 'quarter_three_amount','quarter_four_text_amount','quarter_four_amount','current_year_spending_amount','future_year_amout','variance_amount'));
          $query->condition('sf.forecast_name', $forecast, '=');
          $query->condition('sf.project_id', $key, '=');
          $query->condition('sf.commitment_id', $getEtcData->nid, '=');
          $forecastData = $query->execute()->fetchAll();
          
          $getPrevQuarterOne = $forecastData[0]->quarter_one_amount;
          $getPrevQuarterTwo = $forecastData[0]->quarter_two_amount;
          $getPrevQuarterThree = $forecastData[0]->quarter_three_amount;
          $getPrevQuarterFour = $forecastData[0]->quarter_four_amount;
                
          $getCurrentYearAmt = !empty($forecastData[0]->current_year_spending_amount) ? $forecastData[0]->current_year_spending_amount : 0;
          $getFutureAmt = !empty($forecastData[0]->future_year_amout) ? $forecastData[0]->future_year_amout : 0;
          $getVarienceAmt = !empty($forecastData[0]->variance_amount) ? $forecastData[0]->variance_amount : 0;

          $detail_row_etc = array(
            $etcNumber,
            $etcAmt,
            0,
            0,
            $getPrevQuarterOne,
            $getPrevQuarterTwo,
            $getPrevQuarterThree,
            $getPrevQuarterFour,
            $getCurrentYearAmt,
            $getFutureAmt,
            $getVarienceAmt,
          );

          for ($i = 0; $i <= count($detail_row_etc) - 1; $i++) {
            $colindexx = excelgeneratorurl_get_colindex ($i);
            // $_excelexport_objPHPExcel->getActiveSheet()->getStyle( $colindexx . ($XLSRowNo) )->getFill()->setFillType(PHPExcel_Style_Fill::FILL_SOLID)->getStartColor()->setARGB('FCF305');
            $BStyle = array('borders' => array( 'allborders' => array( 'style' => PHPExcel_Style_Border::BORDER_THIN )), 'alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT, 'vertical' => PHPExcel_Style_Alignment::VERTICAL_BOTTOM,)); // Applying borders

            $_excelexport_objPHPExcel->getActiveSheet()->getStyle($colindexx . ($XLSRowNo).':' . $colindexx .($XLSRowNo))->getNumberFormat()->setFormatCode('$#,##0_-');

            $_excelexport_objPHPExcel->getActiveSheet()->getStyle( $colindexx . ($XLSRowNo))->applyFromArray($BStyle);

            // $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( $colindexx . ($XLSRowNo) )->getFont ()->setBold ( true );
            $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( $colindexx . ($XLSRowNo), utf8_encode ( $detail_row_etc[$i] ) );
          }
        }
        else {
          // No data avialable.
          $BStyle = array('borders' => array( 'allborders' => array( 'style' => PHPExcel_Style_Border::BORDER_THIN )), 'alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER, 'vertical' => PHPExcel_Style_Alignment::VERTICAL_BOTTOM,)); // Applying borders
          $_excelexport_objPHPExcel->getActiveSheet()->getStyle( 'A' . ($XLSRowNo))->applyFromArray($BStyle);
          $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'A' . ($XLSRowNo), utf8_encode ( $etcNumber ) );

          $_excelexport_objPHPExcel->getActiveSheet()->mergeCells('B'.$XLSRowNo.':L'.$XLSRowNo);
          $_excelexport_objPHPExcel->getActiveSheet()->getStyle( 'B' . ($XLSRowNo))->applyFromArray($BStyle);
          $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( 'B' . ($XLSRowNo), utf8_encode ( t('No ETC Forecast found!') ) );
        }
        $XLSRowNo++;
      }
      $sum_end = $XLSRowNo - 1; // Used to end the sum here.

      $rowFills = 'A'.$XLSRowNo.':K'.$XLSRowNo;
      $_excelexport_objPHPExcel->getActiveSheet()->getStyle($rowFills)->getFill()->setFillType(PHPExcel_Style_Fill::FILL_SOLID)->getStartColor()->setARGB('E3E3E3');

      for ($i = 0; $i <= count($detail_row_etc) - 1; $i++) {
        $colindexx = excelgeneratorurl_get_colindex ($i);
        $BStyle = array('borders' => array( 'allborders' => array( 'style' => PHPExcel_Style_Border::BORDER_THIN )), 'alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT, 'vertical' => PHPExcel_Style_Alignment::VERTICAL_BOTTOM,)); // Applying borders
        $_excelexport_objPHPExcel->getActiveSheet()->getStyle( $colindexx . ($XLSRowNo))->applyFromArray($BStyle);
        $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( $colindexx . ($XLSRowNo) )->getFont ()->setBold ( true );

        if ($i == 0) {
          $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( $colindexx . ($XLSRowNo), utf8_encode ( t('Total') ) );
        }
        else {
          $_excelexport_objPHPExcel->getActiveSheet()->getStyle($colindexx . ($XLSRowNo).':' . $colindexx .($XLSRowNo))->getNumberFormat()->setFormatCode('$#,##0_-');
          $_excelexport_objPHPExcel->setActiveSheetIndex ( 0 )->setCellValue ( $colindexx . ($XLSRowNo), '=SUM(' . $colindexx . $sum_start . ':' . $colindexx . $sum_end . ')' );
        }
      }

      $XLSRowNo += 4;
    }


    // Generating output.
    header ( 'Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' );
    header ( 'Content-Disposition: attachment;filename="projectSpendingForecast.xlsx"' );  
    header ( 'Cache-Control: max-age=0' );
    header ( 'Cache-Control: max-age=1' );
    header ( 'Expires: Mon, 26 Jul 1997 05:00:00 GMT' );
    header ( 'Last-Modified: ' . gmdate ( 'D, d M Y H:i:s' ) . ' GMT' );
    header ( 'Cache-Control: cache, must-revalidate' );
    header ( 'Pragma: public' );
    $BStyle = array('borders' => array( 'bottom' => array( 'style' => PHPExcel_Style_Border::BORDER_THIN ))); 
    //$_excelexport_objPHPExcel->getActiveSheet()->getStyle('B7:D7')->applyFromArray($BStyle);    
    
    $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( 'A1:Z500' )->getAlignment ()->setWrapText ( true );
    $_excelexport_objPHPExcel->getActiveSheet ()->getStyle ( 'A1:Z500' )->getAlignment ()->setVertical ( PHPExcel_Style_Alignment::VERTICAL_TOP );
    $_excelexport_objPHPExcel->getActiveSheet()->getColumnDimension('A')->setWidth(30);
    $_excelexport_objPHPExcel->getActiveSheet()->getColumnDimension('B')->setWidth(30);
    $_excelexport_objPHPExcel->getActiveSheet()->getColumnDimension('C')->setWidth(30);
    $_excelexport_objPHPExcel->getActiveSheet()->getColumnDimension('D')->setWidth(30);
    $_excelexport_objPHPExcel->getActiveSheet()->getColumnDimension('E')->setWidth(30);
    $_excelexport_objPHPExcel->getActiveSheet()->getColumnDimension('F')->setWidth(30);
    $_excelexport_objPHPExcel->getActiveSheet()->getColumnDimension('G')->setWidth(30);
    $_excelexport_objPHPExcel->getActiveSheet()->getColumnDimension('H')->setWidth(30);
    $_excelexport_objPHPExcel->getActiveSheet()->getColumnDimension('I')->setWidth(30);
    $_excelexport_objPHPExcel->getActiveSheet()->getColumnDimension('J')->setWidth(30);
    $_excelexport_objPHPExcel->getActiveSheet()->getColumnDimension('K')->setWidth(30);
    $_excelexport_objPHPExcel->getActiveSheet()->getColumnDimension('L')->setWidth(30);
    $_excelexport_objPHPExcel->getActiveSheet()->getColumnDimension('M')->setWidth(30);
    $obj_writer = PHPExcel_IOFactory::createWriter ( $_excelexport_objPHPExcel, 'Excel2007' );
    $obj_writer->setPreCalculateFormulas(true);
    $obj_writer->save ( 'php://output' );
  } // endif $type == 'spending-forecast'
}
// Excel section work ends here
// End Reports Sction
// =============================
// Start Add new Cost Code Section
// ===============================
function program_project_add_cost_code_content(){
  global $company;
  global $user;
  $elements = array();
  $elements['prgram-project-menu-items'] = array(
    '#markup' => new_programe_manager_setting_link_content(),
  '#prefix' => '<div class="clearfix">',
  '#suffix' => '</div>',
  );
  $elements['new_cost_code_form']= array(
    '#markup' => drupal_render(drupal_get_form('project_new_cost_code_form')),
  '#prefix' => '<div class="clearfix margin-bottom-10">',
  '#suffix' => '</div>',
  );  
  $elements['prgram-cost-code-listing'] = array(
    '#markup' => get_add_new_cost_code_table_data(),
  '#prefix' => '<div class="clearfix"><div class="all-cost-code-listing" id="all-cost-code-details">',
  '#suffix' => '</div></div>',
   );   
  return $elements;
}

function project_new_cost_code_form($form,&$form_state) {
  global $user;
  global $company;
  // Get all active cost code nodes
  $query= db_select('node','n'); 
  $query->join('field_data_field_manager_cost_code','mcc','mcc.entity_id = n.nid');
  $query->join('og_membership','om','om.etid=n.nid AND om.entity_type=:entityType', array(':entityType'=>'node'));
  $query->fields('n',array('nid'));
  $query->fields('mcc',array('field_manager_cost_code_value'));
  $query->condition('om.gid', $company->nid, '=');
  $query->condition('n.type', 'project_cost_code', '=');
  $getCostCodeData = $query->execute()->fetchAllKeyed(0,1);
  // =============================================
  drupal_add_js(drupal_get_path('module', 'm6connect_program') . '/js/m6connect_program.js');
  $form['#attributes']['enctype'] = "multipart/form-data";
  $form['#attributes']['class'] = array('project_new_cost_code_form');
  $form['prgram-project-page-title'] = array(
    '#markup' => '<div class="add-new-cc-btn pull-right" id="add-cc-button-custom">'. l('<input type="button" value="Add New Cost Code" class="form-submit new-record-cus-btn" />', '/program/add-cost-code', array('html' => TRUE, 'external' => TRUE, 'attributes' => array('class' => array('new-cc-link')))).'</div>',
  '#prefix' => '<div class="clearfix margin-bottom-10">',
  '#suffix' => '</div>',
  );  
  $form['select-cost-code'] = array(
    '#type' => 'select',
  '#title'=> 'Select Cost Code',
  '#options' => $getCostCodeData,
  '#attributes' => array('class'=> array('form-control project-cost-code-sel')),
  '#ajax' => array(
    'callback'=> 'change_cost_code_callback',
    'wrapper' => 'project_cost_code_main_container',
    'effect' => 'fade',
  ),
  '#prefix' => '<div style="display:none;">',
  '#suffix' => '</div>',  
  );
  /*$form['add_new_cost_code']= array(
    '#markup' => '',
  );*/      
  
  $form_state['storage_cost_code_project'] = array();
  if(isset($form_state['values'],$form_state['input'],$form_state['triggering_element'],$form_state['triggering_element']['#type'],$form_state['triggering_element']['#name']) && $form_state['triggering_element']['#type']=='select'){    
  $triggeringElement = $form_state['triggering_element'];
  if($form_state['triggering_element']['#name']=='select-cost-code') {
    $costCodeData = node_load($triggeringElement['#value']);
    $form_state['storage_cost_code_project'] = array(
      'manager_cost_code' => isset($costCodeData->field_manager_cost_code['und'])?$costCodeData->field_manager_cost_code['und'][0]['value']:'',
      'cost_code_category' => isset($costCodeData->field_manager_category_name['und'][0])?$costCodeData->field_manager_category_name['und'][0]['value']:'',
      'cost_code_description' => isset($costCodeData->field_cost_code_description['und'][0])?$costCodeData->field_cost_code_description['und'][0]['value']:'',
      'cost_code_type' => isset($costCodeData->field_cost_code_type['und'])?$costCodeData->field_cost_code_type['und'][0]['value']:'',
      'category_id' => isset($costCodeData->field_cost_code_category_id['und'])?$costCodeData->field_cost_code_category_id['und'][0]['value']:'',
      'cost_code_status' => isset($costCodeData->field_cost_code_status‎['und'])?$costCodeData->field_cost_code_status‎['und'][0]['value']:'',
      'is_project_contigency' => isset($costCodeData->field_cost_code_project_continge‎['und'])?$costCodeData->field_cost_code_project_continge‎['und'][0]['value']:'',

    );
  }
  }   
  $form['main-container']= array(
    '#type' => 'container',
  '#attributes' => array('class'=>array('row')), 
  '#prefix' => '<div class="clearfix margin-bottom-10"><div id="project_cost_code_main_container" class="project-detail project_cc_main_cust">',  
  '#suffix' => '</div></div>',
  '#process' => array('project_cost_code_main_container_process'),  
  );    
  /*$form['actions']['submit'] = array(
    '#type' => 'submit',
  '#submit'=> array('project_cost_code_submit'),  
  '#value' => 'Save', 
  '#prefix' => '<div class="clearfix custom-submit-cost-code">',  
  '#suffix' => '</div></div>',
  );*/  
  
  $form['actions']['submit'] = array(
    '#type' => 'submit',
  '#value' => 'Save',
  '#submit'=> array('project_cost_code_submit'),  
  '#prefix' => '<div class="custom-reset-button-schedule-div custom-submit-cost-code">',
  );
  $form['cancel'] = array(
    '#type' => 'markup',
    '#markup' => '<input type="button" value="Cancel" class="form-submit custom-reset-button-cc">',

  '#suffix' => '</div></div></div>',
  );
  return $form; 
}

function project_cost_code_main_container_process($element, &$form_state) {
  global $user;
  $defaultValues = $form_state['storage_cost_code_project'];
  
  $element['main-container']['left-container']= array(
    '#type' => 'container',
  '#attributes' => array('class'=>array('col-md-6','col-sm-6','col-xs-12','project-details-left')),
  '#weight' => 1,
  );
  $element['main-container']['right-container']= array(
    '#type' => 'container',
  '#attributes' => array('class'=>array('col-md-6','col-sm-6','col-xs-12','project-details-right')),
  '#weight' => 2,
  );     
  $element['main-container']['left-container']['manager_cost_code']= array(
    '#type' => 'textfield',
  '#title' => 'Cost Code',
  '#attributes' => array('class'=> array('form-control manager_cost_code')),
  '#required' => TRUE,
  '#default_value' => $defaultValues['manager_cost_code']!=''?$defaultValues['manager_cost_code']:'',
  '#prefix' => '<div class="project-details-border"><div class="clearfix form-item">',
  '#suffix' => '</div>',
  '#field_suffix' => '<div class="pull-right project-avail-status"><span class="text-danger"></span><span class="text-success"></span></div>'
  );
  $element['main-container']['left-container']['project_cost_code_nid']= array(
    '#type' => 'hidden',
  '#title_display' => 'invisible',
  '#attributes' => array('class'=> array('form-control project_cost_code_nid')),
  );
  $element['main-container']['left-container']['cost_code_description']= array(
    '#type' => 'textfield',
  '#title' => 'Description',
  '#attributes' => array('class'=> array('form-control cost_code_description')),
  '#default_value' => $defaultValues['cost_code_description']!=''?$defaultValues['cost_code_description']:'',
  '#prefix' => '<div class="clearfix form-item">',
  '#suffix' => '</div>',
  );
  $element['main-container']['left-container']['category_id']= array(
    '#type' => 'textfield',
  '#title' => 'Category Id',
  '#attributes' => array('class'=> array('form-control category_id')),
  '#required' => TRUE,
  '#default_value' => $defaultValues['category_id']!=''?$defaultValues['category_id']:'',
  '#prefix' => '<div class="clearfix form-item">',
  '#suffix' => '</div>',
  );
  $element['main-container']['left-container']['cost_code_category']= array(
    '#type' => 'textfield',
  '#title' => 'Category Name',
  '#attributes' => array('class'=> array('form-control cost_code_category')),
  '#required' => TRUE,
  '#default_value' => $defaultValues['cost_code_category']!=''?$defaultValues['cost_code_category']:'',
  '#prefix' => '<div class="clearfix form-item">',
  '#suffix' => '</div></div>',
  );
  $element['main-container']['right-container']['cost_code_type']= array(
    '#type' => 'select',
  '#title' => 'Cost Code Type',
  '#options'=> array('Capital' => 'Capital', 'Expense' => 'Expense'), 
  //'#validated' => 'true',
  '#empty_option' => '- Select -',
  '#attributes' => array('class'=> array('form-control cost_code_type')),
  '#default_value' => isset($defaultValues['cost_code_type'])?$defaultValues['cost_code_type']:'',  
  '#prefix' => '<div class="project-details-border"><div class="clearfix form-item">',
  '#suffix' => '</div></div>',
  );
  $element['main-container']['right-container']['cost_code_status']= array(
    '#type' => 'select',
  '#title' => 'Status',
  '#options'=> array('1' => 'Active', '0' => 'Deactive'), 
  '#attributes' => array('class'=> array('form-control cost_code_status')),
  '#default_value' => isset($defaultValues['cost_code_status'])?$defaultValues['cost_code_status']:'',  
  '#prefix' => '<div class="clearfix form-item">',
  '#suffix' => '</div>',
  );
  $element['main-container']['right-container']['is_project_contigency'] = array(
    '#type' =>'checkboxes',
  '#attributes'=> array('class'=> array('is_project_contigency')),
  '#options' => array(
    '1'=>'Contigency',
  ),
  '#prefix' => '<div class="form-group form-item">',
  '#suffix' => '</div></div>',
  );
  return $element;  
}

function change_cost_code_callback($form,&$form_state) {
  $commands = array();
  $triggeringElement = $form_state['triggering_element'];  
  if(!empty($triggeringElement['#value'])){
    $costCodeData = node_load($triggeringElement['#value']);  
  $storage_project = array(
    'manager_cost_code' => isset($costCodeData->field_manager_cost_code['und'])?$costCodeData->field_manager_cost_code['und'][0]['value']:'',
    'cost_code_category' => isset($costCodeData->field_manager_category_name['und'])?$costCodeData->field_manager_category_name['und'][0]['value']:'',
    'cost_code_description' => isset($costCodeData->field_cost_code_description['und'])?$costCodeData->field_cost_code_description['und'][0]['value']:'',
    'cost_code_type' => isset($costCodeData->field_cost_code_type['und'])?$costCodeData->field_cost_code_type['und'][0]['value']:'',
    'category_id' => isset($costCodeData->field_cost_code_category_id['und'])?$costCodeData->field_cost_code_category_id['und'][0]['value']:'',
    'cost_code_status' => isset($costCodeData->field_cost_code_status['und'])?$costCodeData->field_cost_code_status['und'][0]['value']:'',
    'is_project_contigency' => isset($costCodeData->field_cost_code_project_continge['und'])?$costCodeData->field_cost_code_project_continge['und'][0]['value']:'',
  );      
  $commands[] = ajax_command_invoke("input.manager_cost_code", 'val',array($storage_project['manager_cost_code']));
  $commands[] = ajax_command_invoke("input.cost_code_category", 'val',array($storage_project['cost_code_category']));
  $commands[] = ajax_command_invoke("input.cost_code_description", 'val',array($storage_project['cost_code_description']));   
  $commands[] = ajax_command_invoke("select.cost_code_type", 'val',array($storage_project['cost_code_type']));
  $commands[] = ajax_command_invoke("input.category_id", 'val',array($storage_project['category_id']));
  $commands[] = ajax_command_invoke("select.cost_code_status", 'val',array($storage_project['cost_code_status']));
  $code = $costCodeData->field_manager_cost_code['und'][0]['value'];
  if(strpos($code, ".") !== false) {
      $cCodeCal = explode('.',$code);
    $cCode = $cCodeCal[0];
    $query= db_select('node','n');
      $query->join('field_data_field_manager_cost_code','ed','ed.entity_id=n.nid');
    $query->join('field_data_field_cost_code_project_continge','pc','pc.entity_id=n.nid');
    $query->fields('pc', array('field_cost_code_project_continge_value'));
    $query->condition('ed.field_manager_cost_code_value',$cCode,'=');
    $getCheckVal = $query->execute()->fetchField();
    if($getCheckVal == 1) {
      $commands[] = ajax_command_invoke('.is_project_contigency input[type="checkbox"]', 'attr',array('checked', 'true'));  
    }
    else{
      $commands[] = ajax_command_invoke('input[type="checkbox"].is_project_contigency','removeAttr',array('checked'));  
    }   
    }
    else {
      if($storage_project['is_project_contigency'] == 1){
      $commands[] = ajax_command_invoke('.is_project_contigency input[type="checkbox"]', 'attr',array('checked', 'true'));  
    }
    else{
      $commands[] = ajax_command_invoke('input[type="checkbox"].is_project_contigency','removeAttr',array('checked'));  
    } 
    }                 
  }
  else{
  $commands[] = ajax_command_invoke('input[type="checkbox"].is_project_contigency','removeAttr',array('checked'));    
  $commands[] = ajax_command_invoke("input.manager_cost_code", 'val',array(''));
  $commands[] = ajax_command_invoke("input.cost_code_category", 'val',array(''));
  $commands[] = ajax_command_invoke("input.cost_code_description", 'val',array(''));    
  $commands[] = ajax_command_invoke("select.cost_code_type", 'val',array(''));
  $commands[] = ajax_command_invoke("input.category_id", 'val',array(''));
  $commands[] = ajax_command_invoke("select.cost_code_status", 'val',array(''));          
  }
  return array('#type' => 'ajax', '#commands' => $commands);
}

function project_cost_code_submit(&$form, &$form_state) {
  global $user; 
  global $company;  
  $formVal = $form_state['values']; 
  //Check for updated project or new one
  if($formVal['project_cost_code_nid'] != '') {
    $ccNode = node_load($formVal['project_cost_code_nid']);
  $ccNode->field_manager_cost_code['und'][0]['value'] = $formVal['manager_cost_code'];
  $ccNode->field_manager_category_name['und'][0]['value'] = $formVal['cost_code_category'];
  $ccNode->field_cost_code_description['und'][0]['value'] = $formVal['cost_code_description']; 
  $ccNode->field_cost_code_type['und'][0]['value'] = $formVal['cost_code_type'];  
  $ccNode->field_cost_code_category_id['und'][0]['value'] = $formVal['category_id'];  
  $ccNode->field_cost_code_status['und'][0]['value'] = $formVal['cost_code_status'];  
  
  $ccNode->field_cost_code_project_continge['und'][0]['value'] = $formVal['is_project_contigency'][1];  
  $ccNode->field_invoice_paid_date['und'][0]['value'] = $formVal['spending_invoice_paid_date'];
  node_save($ccNode);
  drupal_goto('/program/add-cost-code', array('query'=>array('id' => $ccNode->nid,'ccid' => $ccNode->nid)));
  drupal_set_message('Cost Code Updated successfully!');
  }
  else {
    $node = new stdClass();
  $node->type = 'project_cost_code';
  $node->title = date('m-d-Y H:i:s');
  $node->uid = $user->uid;
  $node->language = en;
  $node->status = 1;
  $node->og_group_ref['und'][0]['target_id'] = $company->nid; 
  $node->field_manager_cost_code['und'][0]['value'] = $formVal['manager_cost_code'];
  $node->field_manager_category_name['und'][0]['value'] = $formVal['cost_code_category'];
  $node->field_cost_code_description['und'][0]['value'] = $formVal['cost_code_description'];
  $node->field_cost_code_type['und'][0]['value'] = $formVal['cost_code_type'];
  $node->field_cost_code_category_id['und'][0]['value'] = $formVal['category_id'];
  $node->field_cost_code_status['und'][0]['value'] = $formVal['cost_code_status'];    
  $node->field_cost_code_project_continge['und'][0]['value'] = $formVal['is_project_contigency'];   
  node_save($node);
  drupal_goto('/program/add-cost-code', array('query'=>array('id' => $node->nid, 'ccid' => $node->nid)));
  drupal_set_message('New Cost Code created successfully!');    
  }
}

function get_add_new_cost_code_table_data() {
  global $company;  
  drupal_add_js(drupal_get_path('module', 'm6connect_program') . '/js/m6connect_program.js');
  $rows = array();
  $header = array(
  array('data'=>'Cost Code','class'=>array('text-left')),
  array('data'=>'Description','class'=>array('text-center')),
  array('data'=>'Status','class'=>array('text-center')),
  array('data'=>'Actions','class'=>array('text-center')),
  );  
  $query= db_select('node','n'); 
  $query->join('og_membership','om','om.etid=n.nid AND om.entity_type=:entityType', array(':entityType'=>'node'));        
  $query->join('field_data_field_manager_cost_code','mcc','mcc.entity_id = n.nid');  
  $query->join('field_data_field_cost_code_description','mcd','mcd.entity_id = n.nid');  
  $query->join('field_data_field_cost_code_status','ccs','ccs.entity_id = n.nid');  
  $query->fields('n',array('nid'));
  $query->fields('mcc',array('field_manager_cost_code_value'));
  $query->fields('mcd',array('field_cost_code_description_value'));
  $query->fields('ccs',array('field_cost_code_status_value'));   
  $query->condition('ccs.field_cost_code_status_value', '1', '=');
  $query->condition('om.gid', $company->nid, '=');
  $query->orderBy('mcc.field_manager_cost_code_value', 'ASC');
  $query->condition('n.type', 'project_cost_code', '=');
  $getCostCodeData = $query->execute()->fetchAll(); 
    
  if(!empty($getCostCodeData)) {
  foreach($getCostCodeData as $ccKey => $ccVal){    
    if($ccVal->field_cost_code_status_value != '') {
      if($ccVal->field_cost_code_status_value == 1) {
      $ccStatus = 'Active';
    }
    else {
      $ccStatus = 'Deactive';
    }
    }       
    $action = '<div class="project-action"><div class="btn-group"><div class="dropdown">
            <button id="dLabel" class="btn btn-success" type="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"> Actions</button>
          <ul class="dropdown-menu" role="menu" aria-labelledby="dLabel">
          <li>'.l('Edit', 'edit/'.$ccVal->nid.'/details', array('attributes' => array('class' => 'edit-cc-detail', 'for' => $ccVal->nid))).'</li>
          <li>'.l('Delete', url('node-delete/nojs/'.$ccVal->nid), array( 'external'=>TRUE, 'attributes'=> array('class'=>array('use-ajax ctools-modal-assign-dashboard-popup-style ctools-use-modal'))) ).'</li>
          </ul></div></div></div>';         
    //$rows[] = array($ccVal->field_manager_cost_code_value,$ccVal->field_cost_code_description_value,$ccStatus,$action);
    $data = explode('.',$ccVal->field_manager_cost_code_value);
    $dataCount = count($data);
    if( $dataCount > 1) {
    $query= db_select('field_data_field_manager_cost_code','mcc');
    $query->join('field_data_field_cost_code_status','ccs','ccs.entity_id = mcc.entity_id');  
    $query->fields('mcc',array('field_manager_cost_code_value'));
    $query->condition('ccs.field_cost_code_status_value', '1', '=');  
    $query->condition('mcc.field_manager_cost_code_value', '%' . db_like($data[0]) . '%', 'LIKE') ;
    $getCostCodeData = $query->execute()->fetchAll(); 
    if($dataCount == 2) {
        $style = 'style="margin-left:10px;"';
        }
      if($dataCount == 3) {
        $style = 'style="margin-left:32px;"';
      }
      if($dataCount == 4) {
        $style = 'style="margin-left:70px;"';
      }
      if($dataCount == 5) {
        $style = 'style="margin-left:120px;"';
      }
      if($dataCount == 6) {
        $style = 'style="margin-left:180px;"';
      }
      if($dataCount == 7) {
          $style = 'style="margin-left:240px;"';
        }
    if($dataCount == 8) {
          $style = 'style="margin-left:300px;"';
        }
    if($dataCount == 9) {
          $style = 'style="margin-left:360px;"';
        }
    if($dataCount == 10) {
          $style = 'style="margin-left:420px;"';
        }
    }
    else {
    $style = '';
    }

    $rows[] = array(
    'data' => array(
          array('data' => '<span '.$style.'>'.$ccVal->field_manager_cost_code_value.'</span>','class' => array('text-left')),
          array('data' => ucwords($ccVal->field_cost_code_description_value),'class' => array('text-left')),
          array('data' => ucwords($ccStatus),'class' => array('text-left')),

          array('data' => $action,'class' => array('text-center')),
          ),  
      //'class' => array('custom-odd'),
    );
  }
  }
  return theme('table', array('header'=>$header,'rows'=>$rows,'empty'=>'No Cost Code created yet','attributes'=>array('class'=>array('table','m6connect-custom-table','m6connect-custom-program-table','m6connect-program-commitment-table','table-hover','table-bordered','text-center')))); 
}

// End Cost code (Tab) Section
// ===========================
// =============================
// Start Add new asset category 
// Section
// ===============================
function program_project_manage_asset_category(){
  global $company;
  global $user;
  $elements = array();
  $elements['prgram-project-menu-items'] = array(
    '#markup' => new_programe_manager_setting_link_content(),
  '#prefix' => '<div class="clearfix">',
  '#suffix' => '</div>',
  );
  $elements['new_cost_code_form']= array(
    '#markup' => drupal_render(drupal_get_form('project_new_manager_category_form')),
  '#prefix' => '<div class="clearfix margin-bottom-10">',
  '#suffix' => '</div>',
  );      
  $elements['prgram-cost-code-listing-split'] = array(
    '#markup' => get_add_new_manage_category_table_data_split(),
  '#prefix' => '<div class="clearfix"><div class="all-cost-code-listing" id="all-cost-code-details">',
  '#suffix' => '</div></div>',
   );
   /*$elements['prgram-cost-code-listing-spread'] = array(
    '#markup' => get_add_new_manage_category_table_data_spread(),
  '#prefix' => '<div class="clearfix"><div class="all-cost-code-listing" id="all-cost-code-details">',
  '#suffix' => '</div></div>',
   );*/   
  return $elements;
}

function project_new_manager_category_form($form,&$form_state) {
  global $user;
  global $company;
  // Get all Assets Category
  $query= db_select('m6connect_project_asset_category','ac'); 
  $query->fields('ac',array('id','category_description'));
  $query->condition('ac.company_nid',$company->nid,'=');
  $getAssetData = $query->execute()->fetchAllKeyed(0,1);
  $getAssetData = array(''=>'None') + $getAssetData;
  drupal_add_js(drupal_get_path('module', 'm6connect_program') . '/js/m6connect_program.js');
  $form['#attributes']['enctype'] = "multipart/form-data";
  $form['#attributes']['class'] = array('project_new_cost_code_form');
  $form['prgram-project-page-title'] = array(
    '#markup' => '<div class="add-new-mc-btn pull-right margin-bottom-10" id="add-mc-button-custom">'. l('<input type="button" value="Add New Category" class="form-submit new-record-cus-btn" />', '/program/manage-asset-category', array('html' => TRUE, 'external' => TRUE, 'attributes' => array('class' => array('new-mc-link')))).'</div>',
  '#prefix' => '<div class="clearfix">',
  '#suffix' => '</div>',
  );  
  $form['select-category-cus'] = array(
    '#type' => 'select',
  '#title'=> 'Select Category',
  '#options' => $getAssetData,
  '#attributes' => array('class'=> array('form-control project-manage-category-sel')),
  '#ajax' => array(
    'callback'=> 'change_manage_category_callback',
    'wrapper' => 'project_manage_category_main_container',
    'effect' => 'fade',
  ),
  '#prefix' => '<div style="display:none;">',
  '#suffix' => '</div>',  
  );
  /*$form['add_new_cost_code']= array(
    '#markup' => '',
  );*/      
  
  $form_state['storage_manage_category_project'] = array();
  if(isset($form_state['values'],$form_state['input'],$form_state['triggering_element'],$form_state['triggering_element']['#type'],$form_state['triggering_element']['#name']) && $form_state['triggering_element']['#type']=='select'){    
  $triggeringElement = $form_state['triggering_element'];
  if($form_state['triggering_element']['#name']=='select-category-cus') {
    $query= db_select('m6connect_project_asset_category','ac'); 
      $query->fields('ac');
      $query->condition('ac.id',$triggeringElement['#value'],'=');
      $getAssetData = $query->execute()->fetchAll();
  
    $form_state['storage_manage_category_project'] = array(
      'category_type' => isset($costCodeData->field_manager_cost_code['und'])?$costCodeData->field_manager_cost_code['und'][0]['value']:'',
      'category_description' => isset($costCodeData->field_manager_category_name['und'][0])?$costCodeData->field_manager_category_name['und'][0]['value']:'',
      'cost_code_description' => isset($costCodeData->field_cost_code_description['und'][0])?$costCodeData->field_cost_code_description['und'][0]['value']:'',
      'cost_code_type' => isset($costCodeData->field_cost_code_type['und'])?$costCodeData->field_cost_code_type['und'][0]['value']:'',
      'category_id' => isset($costCodeData->field_cost_code_category_id['und'])?$costCodeData->field_cost_code_category_id['und'][0]['value']:'',
      'cost_code_status' => isset($costCodeData->field_cost_code_status‎['und'])?$costCodeData->field_cost_code_status‎['und'][0]['value']:'',
      'is_project_contigency' => isset($costCodeData->field_cost_code_project_continge‎['und'])?$costCodeData->field_cost_code_project_continge‎['und'][0]['value']:'',

    );
  }
  }   
  $form['main-container']= array(
    '#type' => 'container',
  '#attributes' => array('class'=>array('row')), 
  '#prefix' => '<div class="clearfix margin-bottom-10"><div id="project_asset_settings_main_container" class="project-detail project_asset_setting_main_cust">',  
  '#suffix' => '</div></div>',
  '#process' => array('project_manage_category_main_container_process'),  
  );    
  $form['actions']['submit'] = array(
    '#type' => 'submit',
  '#submit'=> array('project_manage_category_submit'),  
  '#value' => 'Save', 
  '#prefix' => '<div class="clearfix custom-submit-manage_cat">', 
  '#suffix' => '</div></div>',
  );  
  return $form; 
}

function change_manage_category_callback($form,&$form_state){
  global $company;  
  $commands = array();
  $triggeringElement = $form_state['triggering_element'];  
  if($form_state['triggering_element']['#name'] == 'select-category-cus') {
  if(!empty($triggeringElement['#value'])) {
    // Get all Assets Category      
    $query= db_select('m6connect_project_asset_category','ac'); 
      $query->fields('ac');
      $query->condition('ac.company_nid',$company->nid,'=');
    $query->condition('ac.id',$triggeringElement['#value'],'=');
      $getAssetData = $query->execute()->fetchAll();
    $storage_project = array(
      'asset_type' => $getAssetData[0]->category_type,
      'category_description' => $getAssetData[0]->category_description,
      'category_description_settings' => $getAssetData[0]->category_description_settings,
      'id' => $getAssetData[0]->id,
    );
    $commands[] = ajax_command_invoke("input.choose_type", 'val',array($storage_project['asset_type']));
    $commands[] = ajax_command_invoke("input.asset_category_title", 'val',array($storage_project['category_description']));     
    $commands[] = ajax_command_invoke("input.asset_description_settings", 'val',array($storage_project['category_description_settings']));
    $commands[] = ajax_command_invoke('input.asseting_edit_id','val',array($storage_project['id']));
    }
  else {
    $commands[] = ajax_command_invoke("input.choose_type", 'val',array(''));
    $commands[] = ajax_command_invoke("input.asset_category_title", 'val',array(''));     
    $commands[] = ajax_command_invoke("input.asset_description_settings", 'val',array(''));
    $commands[] = ajax_command_invoke('input.asseting_edit_id','val',array(''));
  } 
  } 
  else {      
  $commands[] = ajax_command_invoke("input.choose_type", 'val',array(''));
  $commands[] = ajax_command_invoke("input.asset_category_title", 'val',array(''));     
  $commands[] = ajax_command_invoke("input.asset_description_settings", 'val',array(''));
  $commands[] = ajax_command_invoke('input.asseting_edit_id','val',array(''));
  }     
  return array('#type' => 'ajax', '#commands' => $commands);
}

function project_manage_category_main_container_process($element, &$form_state) {
  global $user;
  $defaultValues = $form_state['storage_cost_code_project'];
  $element['main-container']['asseting_edit_id']= array(
    '#type' => 'hidden',
  '#attributes' => array('class'=>array('col-md-6','col-sm-6','col-xs-12','asseting_edit_id')),
  '#weight' => 2,
  );
  $element['main-container']['left-container-one']= array(
    '#type' => 'container',
  '#attributes' => array('class'=>array('col-md-3','col-sm-3','col-xs-12','project-details-left')),
  '#weight' => 1,
  );  
  $element['main-container']['left-container-two']= array(
    '#type' => 'container',
  '#attributes' => array('class'=>array('col-md-3','col-sm-3','col-xs-12','project-details-left')),
  '#weight' => 2,
  );
  $element['main-container']['left-container-three']= array(
    '#type' => 'container',
  '#attributes' => array('class'=>array('col-md-6','col-sm-6','col-xs-12','project-details-left')),
  '#weight' => 3,
  );
  /*$element['main-container']['left-container-one']['choose_type']= array(
    '#type' => 'select',
  '#title' => 'Choose Category Type',
  '#options'=> array('split' => 'Split', 'spread' => 'Spread'), 
  '#empty_option' => '- Select -',
  '#attributes' => array('class'=> array('form-control asset_type')),
  '#default_value' => isset($defaultValues['cost_code_type'])?$defaultValues['cost_code_type']:'',  
  '#prefix' => '<div class="project-details-border"><div class="clearfix form-item">',
  '#suffix' => '</div></div>',
  );*/
  $element['main-container']['left-container-one']['choose_type']= array(
    '#type' => 'textfield',
  '#title' => 'Asset Class',
  '#attributes' => array('class'=> array('form-control choose_type')),
  '#default_value' => $defaultValues['choose_type']!=''?$defaultValues['choose_type']:'',
  '#prefix' => '<div class="project-details-border"><div class="clearfix form-item">',
  '#suffix' => '</div></div>',
  ); 
  $element['main-container']['left-container-two']['asset_category_title']= array(
    '#type' => 'textfield',
  '#title' => 'Asset Category',
  '#attributes' => array('class'=> array('form-control asset_category_title')),
  '#default_value' => $defaultValues['asset_category_title']!=''?$defaultValues['asset_category_title']:'',
  '#prefix' => '<div class="project-details-border"><div class="clearfix form-item">',
  '#suffix' => '</div></div>',
  ); 
  $element['main-container']['left-container-three']['asset_description_settings']= array(
    '#type' => 'textfield',
  '#title' => 'Asset Category Description',
  '#attributes' => array('class'=> array('form-control asset_description_settings')),
  '#default_value' => $defaultValues['asset_description_settings']!=''?$defaultValues['asset_description_settings']:'',
  '#prefix' => '<div class="project-details-border"><div class="clearfix form-item">',
  '#suffix' => '</div></div>',
  );
  
  return $element;  
}

function project_manage_category_submit(&$form, &$form_state) {
  global $user; 
  global $company;
  $values = $form_state['values'];
  $categoryTitle = trim($values['asset_category_title']);    
  $categoryType = $values['choose_type'];
  $categoryDescr = $values['asset_description_settings'];
  
  if($values['select-category-cus'] == '') {    
  $categoryData = array(
    'company_nid' => $company->nid,
    'category_type' => strip_tags($categoryType),
    'category_description' => strip_tags($categoryTitle),
    'category_description_settings' => strip_tags($categoryDescr),
    'user_uid' => $user->uid,
  );
  $id = db_insert('m6connect_project_asset_category')->fields($categoryData)->execute();  
  drupal_goto('/program/manage-asset-category');
  } 
  else {
    db_merge('m6connect_project_asset_category')
    ->key(array('id' => $values['select-category-cus']))
    ->fields(array(
    'user_uid' => $user->uid,
    'category_type' => strip_tags($categoryType),
    'category_description' => strip_tags($categoryTitle),
    'category_description_settings' => strip_tags($categoryDescr),
    ))
    ->execute();
  drupal_goto('/program/manage-asset-category');
  }
}

function get_add_new_manage_category_table_data_split(){
  global $company;  
  drupal_add_js(drupal_get_path('module', 'm6connect_program') . '/js/m6connect_program.js');
  $rows = array();
  $header = array(
  array('data'=>'Asset Class','class'=>array('text-center','col-md-2')),
  array('data'=>'Asset Category','class'=>array('text-center','col-md-2')),
  array('data'=>'Assset Description','class'=>array('text-center')),
  //array('data'=>'User Name','class'=>array('text-center')),
  array('data'=>'Action','class'=>array('text-center')),
  );  
  $query = db_select('m6connect_project_asset_category', 'ac');
  $query->join('realname', 'r', 'r.uid=ac.user_uid');
  $query->fields('ac', array('id', 'category_type','category_description','category_description_settings'));
  $query->fields('r', array('realname'));   
  $query->condition('ac.company_nid', $company->nid, '=');
  //$query->condition('ac.category_type', 'split', '=');
  $getAssetData = $query->execute()->fetchAll();  
  if(!empty($getAssetData)) {
    foreach($getAssetData as $assetId => $assetVal){
    $assetType = $assetVal->category_type;
    $assetTitle = $assetVal->category_description;
    $assetDescription = $assetVal->category_description_settings;
    $crator = $assetVal->realname;
    $action = '<div class="project-action">
            <div class="btn-group"><div class="dropdown">
                <button id="dLabel" class="btn btn-success" type="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"> Actions</button>
              <ul class="dropdown-menu" role="menu" aria-labelledby="dLabel">
                <li>'.l('Edit', 'edit/'.$assetVal->id,array('attributes' => array('class' => 'edit-asset-setting-detail', 'for' => $assetVal->id))).'</li>
                <li>'.l('Delete', url('asset-category/delete/'.$assetVal->id.'/'.$company->nid.'/nojs'), array( 'external'=>TRUE, 'attributes'=> array('class'=>array('use-ajax ctools-modal-assign-dashboard-popup-style ctools-use-modal'))) ).'</li>
              </ul>
              </div>
            </div>
            </div>';
            
    $rows[] = array(
    'data' => array(          
          array('data' => ucwords($assetType),'class' => array('text-left','col-md-2')),
          array('data' => ucwords($assetTitle),'class' => array('text-left','col-md-2')),
          array('data' => $assetDescription,'class' => array('text-left')),
          array('data' => $action,'class' => array('text-right')),
          ),  
      //'class' => array('custom-odd'),
    );
    }   
  }
  return theme('table', array('header'=>$header,'rows'=>$rows,'empty'=>'No Asset Category Data Entered Yet','attributes'=>array('class'=>array('table','m6connect-custom-table','m6connect-custom-program-table','m6connect-program-asset-category-table','table-hover','table-bordered','text-center'))));
}

function get_add_new_manage_category_table_data_spread(){
  global $company;  
  drupal_add_js(drupal_get_path('module', 'm6connect_program') . '/js/m6connect_program.js');
  $rows = array();
  $header = array(
  array('data'=>'Category Type','class'=>array('text-center')),
  array('data'=>'Asset Title','class'=>array('text-center')),
  array('data'=>'User Name','class'=>array('text-center')),
  array('data'=>'Action','class'=>array('text-center')),
  );  
  $query = db_select('m6connect_project_asset_category', 'ac');
  $query->join('realname', 'r', 'r.uid=ac.user_uid');
  $query->fields('ac', array('id', 'category_type','category_description'));
  $query->fields('r', array('realname'));   
  $query->condition('ac.company_nid', $company->nid, '=');
  $query->condition('ac.category_type', 'spread', '=');
  $getAssetData = $query->execute()->fetchAll();  
  if(!empty($getAssetData)) {
    foreach($getAssetData as $assetId => $assetVal){
    $assetType = $assetVal->category_type;
    $assetTitle = $assetVal->category_description;
    $crator = $assetVal->realname;
    $action = '<div class="project-action">
            <div class="btn-group"><div class="dropdown">
                <button id="dLabel" class="btn btn-success" type="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"> Actions</button>
              <ul class="dropdown-menu" role="menu" aria-labelledby="dLabel">
                <li>'.l('Edit', 'edit/'.$assetVal->id,array('attributes' => array('class' => 'edit-milestone-detail', 'for' => $assetVal->id))).'</li>
                <li>'.l('Delete', url('project-default-milestone/delete/default/'.$assetVal->id.'/'.$projectId.'/nojs'), array( 'external'=>TRUE, 'attributes'=> array('class'=>array('use-ajax ctools-modal-assign-dashboard-popup-style ctools-use-modal'))) ).'</li>
              </ul>
              </div>
            </div>
            </div>';
            
    $rows[] = array(
    'data' => array(          
          array('data' => ucwords($assetType),'class' => array('text-center')),
          array('data' => ucwords($assetTitle),'class' => array('text-center')),
          array('data' => ucwords($crator),'class' => array('text-center')),
          array('data' => $action,'class' => array('text-center')),
          ),  
      //'class' => array('custom-odd'),
    );
    }   
  }
  return theme('table', array('header'=>$header,'rows'=>$rows,'empty'=>'No Asset Category Data Entered Yet','attributes'=>array('class'=>array('table','m6connect-custom-table','m6connect-custom-program-table','m6connect-program-asset-category-table','table-hover','table-bordered','text-center'))));
}
// Start default project milestone work
// ====================================
function program_project_add_default_milestone_content(){
  global $company;    
  $getEstimateByCompany = _project_list_by_company($company->nid, 'project_management');    
  reset( $array );
  $firstProject = key( $getEstimateByCompany ); 
  $elements = array();
  $elements['prgram-project-menu-items'] = array(
    '#markup' => new_programe_manager_setting_link_content(),
  '#prefix' => '<div class="clearfix">',
  '#suffix' => '</div>',
  );
  $elements['default_milestone_form']= array(
    '#markup' => drupal_render(drupal_get_form('project_default_milestone_form')),
  '#prefix' => '<div class="clearfix margin-bottom-10">',
  '#suffix' => '</div>',
  );  
  $elements['project-default-milestone-listing'] = array(
    '#markup' => get_default_milestone_table_data($firstProject),
  '#prefix' => '<div class="clearfix"><div class="project-default-milestone-listing" id="project-default-milestone-details">',
  '#suffix' => '</div></div>',
   ); 
  return $elements;
}

function project_default_milestone_form($form,&$form_state){
  global $user;   
  global $company;  
  drupal_add_js(drupal_get_path('module', 'm6connect_program') . '/js/m6connect_program.js');
  // Get project list by company  
  $getProjectByCompany = _project_list_by_company($company->nid, 'project_management');
  
  $query = db_select('m6connect_project_default_milestone', 'pdm');
  $query->fields('pdm', array('id', 'milestone_title'));
  $query->condition('pdm.company_nid', $company->nid, '=');
  $query->orderBy('pdm.timestamp', 'ASC');
  $milestoneData = $query->execute()->fetchAllKeyed(0,1);
  
  $form['#attributes']['class'] = array('project_default_milestone_form');  
  $form['add-new-milestone'] = array(
    '#markup' => '<div class="add-new-dm-btn pull-right" id="add-dm-button-custom">'. l('<input type="button" value="Add New Milestone" class="form-submit new-record-cus-btn" />', '/program/add-default-milestone', array('html' => TRUE, 'external' => TRUE, 'attributes' => array('class' => array('new-default-mile-link')))).'</div>',
  );
  $form['get-default-milestone'] = array(
    '#type' => 'select',
  '#title'=> 'Select Project',
  '#options' => $milestoneData,
  '#attributes' => array('class'=> array('form-control project-sel-default-milestone')),
  '#ajax' => array(
    'callback'=> 'change_project_default_milestone_callback',
    'wrapper' => 'project_default_milestone_main_container',
    'effect' => 'fade',
  ),
  '#prefix' => '<div class="clearfix" style="display:none;"><div class="pull-left form-inline">',
  '#suffix' => '</div></div>',
  ); 
  $form_state['storage_project_default_milestone'] = array();
  if(isset($form_state['values'],$form_state['input'],$form_state['triggering_element'],$form_state['triggering_element']['#type'],$form_state['triggering_element']['#name']) && $form_state['triggering_element']['#type']=='select' && $form_state['triggering_element']['#name']=='get-default-milestone'){
  $milestoneId = $triggeringElement['#value'];      
  $query = db_select('m6connect_project_default_milestone', 'pdm');
    $query->fields('pdm', array('id', 'milestone_title'));
  $query->condition('pdm.id', $milestoneId, '=');
    $query->condition('pdm.company_nid', $company->nid, '=');
    $milestoneData = $query->execute()->fetchAll();  
  $form_state['storage_project_default_milestone'] = array(
    'default_milestone' => $milestoneData->milestone_title,
    'default_status' => $milestoneData->milestone_status,
  );    
  }    
  $form['main-container']= array(
    '#type' => 'container',
  '#attributes' => array('class'=>array('row')),
  '#prefix' => '<div class="clearfix"><div id="project_default_milestone_main_container">',
  '#suffix' => '</div>',
  '#process' => array('project_default_milestone_main_container_process'),  
  );    
  $form['submit'] = array(
    '#type' => 'submit',
  '#value' => 'Save',
  '#submit' => array('project_default_milestone_submit'),
  '#prefix' => '<div class="clearfix custom-submit-default_milestone">',  
  '#suffix' => '</div></div>',
  );
  return $form; 
}

function project_default_milestone_main_container_process($element, &$form_state) {  
  $defaultValues = $form_state['storage_project_default_milestone'];        
  $element['main-container']['full-container']= array(
    '#type' => 'container',
  '#attributes' => array('class'=>array('col-md-12','col-sm-12','col-xs-12')),
  //'#weight' => 1,
  );    
  $element['main-container']['full-container']['project_ref_nid']= array(
    '#type' => 'hidden',
  '#title_display' => 'invisible',
  '#attributes' => array('class'=> array('form-control project_ref_nid')),
  );
  $element['main-container']['full-container']['project_default_milestone_nid']= array(
    '#type' => 'hidden',
  '#title_display' => 'invisible',
  '#attributes' => array('class'=> array('form-control project_default_milestone_nid')),
  );
  $element['main-container']['full-container']['add_default_milestone']= array(
    '#type' => 'textfield',
  '#title' => 'Default Milestone',
  '#attributes'=> array('class'=> array('form-control add_default_milestone')),
  '#default_value' => isset($defaultValues['default_milestone'])?$defaultValues['default_milestone']:'',
  '#prefix' => '<div class="project-details-border"><div class="clearfix form-item">',
  '#suffix' => '</div></div>',
  );  
  return $element;
}

function change_project_default_milestone_callback($form,&$form_state){
  global $company;  
  $commands = array();
  $triggeringElement = $form_state['triggering_element'];
  if(!empty($triggeringElement['#value']) && $form_state['triggering_element']['#name']=='get-default-milestone') {
    $milestoneId = $triggeringElement['#value'];
  $query = db_select('m6connect_project_default_milestone', 'pdm');
    $query->fields('pdm', array('id', 'milestone_title'));
  $query->condition('pdm.id', $milestoneId, '=');
    $query->condition('pdm.company_nid', $company->nid, '=');
    $milestoneData = $query->execute()->fetchAll(); 
  $storage_project = array(
    'default_milestone' => $milestoneData[0]->milestone_title,
  );  
  $commands[] = ajax_command_invoke("input.add_default_milestone", 'val',array($storage_project['default_milestone']));
  $commands[] = ajax_command_html("#project-default-milestone-details", get_default_milestone_table_data($milestoneData[0]->project_ref_id));
  }
  else {  
  $commands[] = ajax_command_html("#project-default-milestone-details", get_default_milestone_table_data($triggeringElement['#value']));
  $commands[] = ajax_command_invoke("input.add_default_milestone", 'val',array(''));  
  }
    return array('#type' => 'ajax', '#commands' => $commands);
}

function project_default_milestone_submit(&$form, &$form_state) {
  global $user; 
  global $company;
  $values = $form_state['values'];  
  if($values['project_default_milestone_nid']) {
    $milestoneTitle = trim($values['add_default_milestone']);    
  $milestoneStatus = $values['milestone_status'][1];
    $dateObject = new DateObject(time(), new DateTimeZone('UTC'));
    $dateTimeNew =  date_format_date($dateObject, 'custom', 'Y-m-d H:i');
    $currentTimestamp = strtotime($dateTimeNew);    
    $num_updated = db_update('m6connect_project_default_milestone')
      ->fields(array(
      'company_nid' => $company->nid,
      'milestone_title' => strip_tags($milestoneTitle),
      'user_uid' => $user->uid,
      'timestamp' => $currentTimestamp,
    ))
    ->condition('id',$values['project_default_milestone_nid'], '=')
    ->execute();  
  drupal_goto('/program/add-default-milestone', array('query'=>array('pid' => $values['project_default_milestone_nid'],'dm' => $values['project_default_milestone_nid'])));
  }
  else {
    $milestoneTitle = trim($values['add_default_milestone']);    
  $milestoneStatus = $values['milestone_status'][1];
    $dateObject = new DateObject(time(), new DateTimeZone('UTC'));
    $dateTimeNew =  date_format_date($dateObject, 'custom', 'Y-m-d H:i');
    $currentTimestamp = strtotime($dateTimeNew);  
    if(!empty($milestoneTitle) && is_numeric($values['select-project'])) {
    $milestoneData= array(
      'company_nid' => $company->nid,
      'milestone_title' => strip_tags($milestoneTitle),
      'user_uid' => $user->uid,
      'timestamp' => $currentTimestamp,
    );
    $id = db_insert('m6connect_project_default_milestone')->fields($milestoneData)->execute();    
    } 
  drupal_goto('/program/add-default-milestone', array('query'=>array('pid'=>$id, 'dm' => $id)));
  }  
}

function get_default_milestone_table_data($projectId=0){
  global $company;  
  drupal_add_js(drupal_get_path('module', 'm6connect_program') . '/js/m6connect_program.js');
  $rows = array();
  $header = array(
  array('data'=>'Milestone','class'=>array('text-center')),
  array('data'=>'Action','class'=>array('text-center')),
  );  
  $query = db_select('m6connect_project_default_milestone', 'pdm');
  $query->join('realname', 'r', 'r.uid=pdm.user_uid');
  $query->fields('pdm', array('id', 'milestone_title','user_uid'));
  $query->fields('r', array('realname'));   
  $query->condition('pdm.company_nid', $company->nid, '=');
  $query->orderBy('pdm.timestamp', 'ASC');
  $getMilestones = $query->execute()->fetchAll();  
  if(!empty($getMilestones)) {
    foreach($getMilestones as $milestoneId => $milestoneVal){
    $milestoneTitle = $milestoneVal->milestone_title;
    $milestoneStatus = $milestoneVal->milestone_status != 0?'Yes':'No';
    $crator = $milestoneVal->user_uid;
    $action = '<div class="project-action">
            <div class="btn-group"><div class="dropdown">
                <button id="dLabel" class="btn btn-success" type="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"> Actions</button>
              <ul class="dropdown-menu" role="menu" aria-labelledby="dLabel">
                <li>'.l('Edit', 'edit/'.$milestoneVal->id,array('attributes' => array('class' => 'edit-milestone-detail', 'for' => $milestoneVal->id))).'</li>
                <li>'.l('Delete', url('project-default-milestone/delete/default/'.$milestoneVal->id.'/'.$projectId.'/nojs'), array( 'external'=>TRUE, 'attributes'=> array('class'=>array('use-ajax ctools-modal-assign-dashboard-popup-style ctools-use-modal'))) ).'</li>
              </ul>
              </div>
            </div>
            </div>';
            
    $rows[] = array(
    'data' => array(          
          array('data' => ucwords($milestoneTitle),'class' => array('text-left')),
          array('data' => $action,'class' => array('text-center')),
          ),  
      //'class' => array('custom-odd'),
    );
    }   
  }
  return theme('table', array('header'=>$header,'rows'=>$rows,'empty'=>'No Default Milestone Data Entered Yet','attributes'=>array('class'=>array('table','m6connect-custom-table','m6connect-custom-program-table','m6connect-program-default-milestone-table','table-hover','table-bordered','text-center'))));
}

function custom_project_default_milestone_delete($from_delete, $tabel_id, $projectId, $ajax = NULL) {
  if ($ajax) {
    ctools_include('ajax');
    ctools_include('modal');
      $form_state = array(
      'ajax' => TRUE,
      'tabel_id' => $tabel_id,
      'project_id'=>$projectId,
      'from_delete' => $from_delete,
      );
    $output = ctools_modal_form_wrapper('custom_project_default_milestone_delete_box_form', $form_state);
  if (!empty($form_state['ajax_commands'])) {
    $output = $form_state['ajax_commands'];
    }
  print ajax_render($output);
  drupal_exit();
  }
  return drupal_get_form('custom_project_default_milestone_delete_box_form', $from_delete, $tabel_id,$projectId);
}

function custom_project_default_milestone_delete_box_form($form, &$form_state, $from_delete = '', $tabel_id = '', $projectId = '') {

  $tabel_id = empty($tabel_id) ? (!empty($form_state['tabel_id']) ? $form_state['tabel_id'] : '') : '';
  $projectId = empty($projectId) ? (!empty($form_state['project_id']) ? $form_state['project_id'] : '') : '';
  $from_delete = empty($from_delete) ? (!empty($form_state['from_delete']) ? $form_state['from_delete'] : '') : '';

  $projectData = node_load($projectId);
  $form['default_milestone_delete_title'] = array(
    '#type' => 'markup',
    '#title' => t('status'),
    '#markup' => '<div class="group-action-status"><h4><p>Are you sure you want to delete project: '.$projectData->title.'?</p></h4><p> All the related budget,commitment,spending,etc will deleted for this project.</p></div>', 
  );
  $form['tabel_id'] = array(
    '#type' => 'hidden',
   '#value' => $tabel_id, 
  );
  $form['from_delete'] = array(
    '#type' => 'hidden',
    '#value' => $from_delete,
  );
  $form['project_id'] = array(
    '#type' => 'hidden',
    '#value' => $projectId,
  );
  $form['submit_default_milestone_delete'] = array(
    '#type' => 'submit',
   '#value' => t('Confirm')
  );

  $form['submit_default_milestone_delete_cancel']['close'] = array(
    '#markup' => '&nbsp;&nbsp;' . l('<input type="button" class="btn btn primary form-submit" value="Cancel" />', 'javascript:void(0);', array('external' => TRUE, 'html' => TRUE, 'attributes' => array('class' => array('group-delete-popup-close'), 'onclick' => 'jQuery("span.popups-close").click();'))),
    '#weight' => 10,
  );
  return $form;
}

function custom_project_default_milestone_delete_box_form_submit($form, &$form_state) {
  global $company;
  $form_values = $form_state['values'];
  $tabel_id = $form_values['tabel_id'];
  $projectId = $form_values['project_id'];
  $from_delete = $form_values['from_delete'];
  if(!empty($tabel_id)) {
    // delete node
  if(db_table_exists('m6connect_project_default_milestone_lock_date')){ 
      db_delete('m6connect_project_default_milestone_lock_date')               
      ->condition('id',$tabel_id, '=')
      ->execute();
  }
  
  // Get all the Budget,estimate details,commitment,spending,safety,schedule,reports NIds By project
  if(!empty($projectId)) {
    $query= db_select('node','n'); 
    $query->join('field_data_field_project_reference','pr','n.nid=pr.entity_id');         
    $query->fields('n',array('nid'));
    $query->condition('pr.field_project_reference_nid', $projectId, '=');
    $nodeIds = $query->execute()->fetchCol(); 
    $nodeIds[] = $projectId;
    node_delete_multiple($nodeIds);
  }
    //drupal_set_message('Record deleted successfully', 'status');
    if ((isset($form_state['ajax'])) ? (($form_state['ajax'] == 1) ? true : false) : false) {
      $form_state['ajax_commands'][] = ctools_modal_command_dismiss();
    if ($from_delete == 'archive') {
      $form_state['ajax_commands'][] = ajax_command_html("#project_archived_summary_container", get_archived_projects_summary_table_data());
    }
    else {
      $form_state['ajax_commands'][] = ajax_command_html("#project-default-milestone-lock-date-details", get_default_milestone_lock_date_table_data());
    }
    }
  }
}
// End default project milestone work
// ===============================
// Start work for asset category delete
// ====================================
function asset_category_delete($categoryId,$cnid, $ajax = NULL) {
  if ($ajax) {
    ctools_include('ajax');
    ctools_include('modal');
      $form_state = array(
      'ajax' => TRUE,
      'category_id' => $categoryId,
      'company_nid' => $cnid,
    );
    $output = ctools_modal_form_wrapper('asset_category_delete_form', $form_state);
  if (!empty($form_state['ajax_commands'])) {
    $output = $form_state['ajax_commands'];
    }
  print ajax_render($output);
  drupal_exit();
  }
  return drupal_get_form('asset_category_delete_form', $from_delete, $categoryId,$cnid);
}

function asset_category_delete_form($form, &$form_state) {
  $tabel_id = $form_state['category_id'];
  $comNid = $form_state['company_nid'];
  $form['default_milestone_delete_title'] = array(
    '#type' => 'markup',
  '#title' => t('status'),
  '#markup' => '<div class="group-action-status"><h4><p>Are you sure you want to delete this asset category?</p></h4></div>', 
  );
  $form['tabel_id'] = array(
    '#type' => 'hidden',
  '#value' => $tabel_id, 
  );
  $form['submit_default_category_delete'] = array(
    '#type' => 'submit',
  '#value' => t('Confirm')
  );

  $form['submit_category_delete_cancel']['close'] = array(
    '#markup' => '&nbsp;&nbsp;' . l('<input type="button" class="btn btn primary form-submit" value="Cancel" />', 'javascript:void(0);', array('external' => TRUE, 'html' => TRUE, 'attributes' => array('class' => array('group-delete-popup-close'), 'onclick' => 'jQuery("span.popups-close").click();'))),
    '#weight' => 10,
  );
  return $form;
}

function asset_category_delete_form_submit($form, &$form_state) {
  global $company;
  $form_values = $form_state['values'];
  $tabel_id = $form_state['category_id'];  
  $comNid = $form_state['company_nid'];
  $from_delete = $form_state['from_delete'];
  if(!empty($tabel_id)) {
    // delete node
  if(db_table_exists('m6connect_project_asset_category')){ 
      db_delete('m6connect_project_asset_category')               
      ->condition('id',$tabel_id, '=')
      ->condition('company_nid',$comNid, '=')     
      ->execute();
  }
  
  // Get all the Budget,estimate details,commitment,spending,safety,schedule,reports NIds By project
    //drupal_set_message('Record deleted successfully', 'status');
    if ((isset($form_state['ajax'])) ? (($form_state['ajax'] == 1) ? true : false) : false) {
      $form_state['ajax_commands'][] = ctools_modal_command_dismiss();    
      $form_state['ajax_commands'][] = ajax_command_html("#all-cost-code-details", get_add_new_manage_category_table_data_split());    
    }
  }
}
// End asset category delete
// =========================
// Start work for archived project
// ==================================
function program_project_archive_project_content(){
  global $company;  
  $elements = array();
  $elements['prgram-project-listing'] = array(
    '#markup' => get_archived_projects_summary_table_data(),
  '#prefix' => '<div id="project_archived_summary_container"><div class="clearfix"><div class="table-responsive">',
  '#suffix' => '</div></div></div>',
   ); 
  return $elements;
}

function get_archived_projects_summary_table_data() {
  global $company;  
  drupal_add_library('system', 'ui.resizable');  
  $rows = array();
  $header = array(
  array('data'=>'Project Name','class'=>array('text-center')),
  array('data'=>'Archived Date','class'=>array('text-center')),
  array('data'=>'Action','class'=>array('text-center')),
  );
  // Get cost code by and budget amount by project    
  $query= db_select('node','n'); 
  $query->join('og_membership','om','om.etid=n.nid AND om.entity_type=:entityType', array(':entityType'=>'node'));
  // Added a boolean field for archive, checking here.
  $query->join('field_data_field_project_archive_status', 'par', 'par.entity_id = n.nid');
  $query->condition('par.field_project_archive_status_value', 1);

  $query->fields('n',array('nid'));
  $query->condition('om.gid', $company->nid, '=');
  $query->condition('n.type', 'project_management', '=');
  $proNId = $query->execute()->fetchCol();

  foreach($proNId as $proKey => $proVal) {
    $milestoneId = _get_milestone_id_by_project_id($proVal);
    $projectData = node_load($proVal);
  $action = '<div class="project-action">
            <div class="btn-group"><div class="dropdown">
              <button id="dLabel" class="btn btn-success" type="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"> Actions</button>
          <ul class="dropdown-menu" role="menu" aria-labelledby="dLabel">
          <li>'.l(t('Restore'),'program/restore-archive/' . $projectData->nid . '/nojs',array('attributes' => array('class' => 'ctools-modal-assign-dashboard-popup-style ctools-use-modal'))).'</li>
          <li>'.l(t('Delete Permanently'), url('project-default-milestone/delete/archive/' . $milestoneId . '/' . $projectData->nid . '/nojs'), array( 'external'=>TRUE, 'attributes'=> array('class'=>array('use-ajax ctools-modal-assign-dashboard-popup-style ctools-use-modal'))) ).'</li>
          </ul>
          </div></div></div>';
    $rows[] = array( 
      'data' => array($projectData->title,date('m/d/Y',$projectData->changed),$action),
    );
  }
    
  return theme('table', array('header'=>$header,'rows'=>$rows,'empty'=>'Not found any archived Projects','attributes'=>array('class'=>array('table','m6connect-custom-program-table','m6connect-program-archived-projects-main-table','table-header-border','table-hover','text-center'))));  
}
// End archive project work
// =========================
// Start lock milestone work
// ==================================
function program_project_add_lock_milestone_content(){
  global $company;
  $getProList = _project_list_by_company($company->nid, 'project_management');
  reset($getProList);
  $firstProject = key($getProList);
  $elements = array();
  $elements['prgram-project-menu-items'] = array(
    '#markup' => new_programe_manager_setting_link_content(),
  '#prefix' => '<div class="clearfix">',
  '#suffix' => '</div>',
  );
  $elements['default_milestone_form']= array(
    '#markup' => drupal_render(drupal_get_form('project_default_milestone_lock_date_form')),
  '#prefix' => '<div class="clearfix margin-bottom-10" style="display:none;">',
  '#suffix' => '</div>',
  );  
  $elements['project-default-milestone-listing'] = array(
    '#markup' => get_default_milestone_lock_date_table_data($firstProject),
  '#prefix' => '<div class="clearfix"><div id="project-default-milestone-lock-date-details">',
  '#suffix' => '</div></div>',
   ); 
  return $elements;
}

function project_default_milestone_lock_date_form($form,&$form_state){
  global $user;   
  global $company;  
  drupal_add_js(drupal_get_path('module', 'm6connect_program') . '/js/m6connect_program.js');  
  $query = db_select('m6connect_project_default_milestone_lock_date', 'dmd');
  $query->fields('dmd', array('id', 'project_id'));
  $query->condition('dmd.company_nid', $company->nid, '=');
  $query->orderBy('dmd.created', 'ASC');
  $lockProjectData = $query->execute()->fetchAllKeyed(0,1);  
  $form['#attributes']['class'] = array('project_default_milestone_lock_date_form');
  $form['add-new-milestone-lock-date'] = array(
    '#markup' => '<div class="add-new-dm-btn pull-right" id="add-dm-button-custom">'. l('<input type="button" value="Add New Lock Date" class="form-submit new-record-cus-btn" />', '/program/lock-milestone-date', array('html' => TRUE, 'external' => TRUE, 'attributes' => array('class' => array('new-default-mile-lock-link')))).'</div>',
  );
  $form['get-milestone-lock-date'] = array(
    '#type' => 'select',
  '#title'=> 'Select Project',
  '#options' => $lockProjectData,
  '#empty_option' => 'none',
  '#attributes' => array('class'=> array('form-control project-sel-default-milestone-lock')),
  '#ajax' => array(
    'callback'=> 'change_project_default_milestone_lock_date_callback',
    'wrapper' => 'project_default_milestone_lock_date_main_container',
    'effect' => 'fade',
  ),
  '#prefix' => '<div class="clearfix" style="display:none;"><div class="pull-left form-inline">',
  '#suffix' => '</div></div>',
  ); 
  $form['main-container']= array(
    '#type' => 'container',
  '#attributes' => array('class'=>array('row margin-5')),
  '#prefix' => '<div class="clearfix"><div id="project_default_milestone_lock_date_main_container">',
  '#suffix' => '</div>',
  '#process' => array('project_default_milestone_lock_date_main_container_process'),  
  );
   $form['add-new-milestone-lock-date-submit'] = array(
    '#markup' =>  l('<input type="button" value="Save" class="form-submit lock-milestone-submit" />', '#', array('html' => TRUE, 'external' => TRUE, 'attributes' => array('class' => array('default-mile-submit-link')))),
  '#prefix' => '<div class="simple-button-for-lock" style="display:none;">',
  '#suffix' => '</div></div>',
  );
  $form['lock-duration-dialog']= array(
    '#markup' => '',
    '#prefix' => '<div id="lock-milestone-duration-dialog">',
    '#suffix' => '</div>',
  );    
  $form['move-to-archive-dialog']= array(
    '#markup' => '',
    '#prefix' => '<div id="move-to-archive-dialog">',
    '#suffix' => '</div>',
  );    
  $form['submit'] = array(
    '#type' => 'submit',
  '#value' => 'Save', 
  '#validate' => array('project_default_milestone_lock_date_validate'),
  '#submit' => array('project_default_milestone_lock_date_submit'),
  '#prefix' => '<div class="clearfix custom-submit-default_milestone_lock_date">',  
  '#suffix' => '</div></div>',
  );
  return $form; 
}

function project_default_milestone_lock_date_validate(&$form, &$form_state) {  
  global $company;
  $values = $form_state['values'];
  if($values['project_default_milestone_lock_date_nid'] == '') {
    if(!empty($values['select-project'])) {
      $query = db_select('m6connect_project_default_milestone_lock_date', 'pdm');
      $query->fields('pdm', array('id', 'project_id','status'));
      $query->condition('pdm.project_id', $values['select-project'], '=');
      $query->condition('pdm.company_nid', $company->nid, '=');
      $milestoneData = $query->execute()->fetchCol(); 
      if(!empty($milestoneData)) {
        form_set_error('select-project', 'You have already submitted record for this project.');
      }
  }
  }
}

function project_default_milestone_lock_date_main_container_process($element, &$form_state) {
  global $company;  
  // === Getting project manager list by company
  $projectManager = _get_company_users_list_by_og_roles($company->nid, 'project manager');
  $getProjectByCompany = _project_list_by_company($company->nid, 'project_management');
  $defaultValues = $form_state['storage_project_default_milestone_lock_date'];
  $element['main-container']['full-container']['col1-inner'] = array(
    '#type' => 'container',
  '#attributes' => array('class'=>array('col-md-4','col-sm-6','col-xs-12','padding-5')),
  );
  $element['main-container']['full-container']['col2-inner'] = array(
    '#type' => 'container',
  '#attributes' => array('class'=>array('col-md-4','col-sm-6','col-xs-12','padding-5')),
  );
  $element['main-container']['full-container']['col3-inner'] = array(
    '#type' => 'container',
  '#attributes' => array('class'=>array('col-md-2','col-sm-6','col-xs-12','padding-5')),
  );

  $element['main-container']['full-container']['project_default_milestone_lock_date_nid']= array(
    '#type' => 'hidden',
  '#title_display' => 'invisible',
  '#attributes' => array('class'=> array('form-control project_default_milestone_lock_date_nid')),
  );  
  $element['main-container']['full-container']['lock-milestone-duration']= array(
    '#type' => 'hidden',
  '#title_display' => 'invisible',
  '#attributes' => array('class'=> array('form-control lock-milestone-duration')),
  );  
  $element['main-container']['full-container']['send-message']= array(
    '#type' => 'hidden',
  '#title_display' => 'invisible',
  '#attributes' => array('class'=> array('form-control send-message')),
  );  
  $element['main-container']['full-container']['move-archive']= array(
    '#type' => 'hidden',
  '#title_display' => 'invisible',  
  '#attributes' => array('class'=> array('form-control move-archive')),
  );  
  $element['main-container']['full-container']['col1-inner']['select-project'] = array(
    '#type' => 'select',
  '#title'=> 'Select Project',
  '#empty_option' => 'Choose project',
  '#options' => $getProjectByCompany,
  '#required' => TRUE,
  '#attributes' => array('class'=> array('form-control project-default-milestone-lock-sel')),
  '#prefix' => '<div class="project-details-border"><div class="clearfix form-item">',
  '#suffix' => '</div></div>',
  );    
  $element['main-container']['full-container']['col2-inner']['project-manager'] = array(
    '#type' => 'select',
  '#title' => 'Project Manager',
  '#options' => $projectManager,
  '#empty_option' => '- Select Project Manager -',
  '#attributes' => array('class'=> array('form-control project-manager')),
  '#default_value' => isset($defaultValues['project-manager'])?$defaultValues['project-manager']:'',
  '#prefix' => '<div class="project-details-border"><div class="clearfix form-item">',  
  '#suffix' => '</div></div>', 
  );    
  $element['main-container']['full-container']['col3-inner']['milestone_status']= array(
    '#type' =>'checkboxes',
  '#attributes'=> array('class'=> array('milestone_status')),
  '#options' => array(
    '1'=>'Lock original dates',
    '#default_value' => isset($defaultValues['default_status'])?$defaultValues['default_status']:'',  
  ),
  '#prefix' => '<div class="project-details-border"><div class="clearfix form-item"><p>&nbsp;</p>',
  '#suffix' => '</div></div>',
  );
  return $element;
}

function change_project_default_milestone_lock_date_callback($form,&$form_state){
  global $company;
  $commands = array();
  $triggeringElement = $form_state['triggering_element'];
  if(!empty($triggeringElement['#value']) && $form_state['triggering_element']['#name']=='get-milestone-lock-date') {
    $milestoneId = $triggeringElement['#value'];
  $query = db_select('m6connect_project_default_milestone_lock_date', 'pdm');
    $query->fields('pdm', array('id', 'project_id','status'));
  $query->condition('pdm.id', $milestoneId, '=');
    $query->condition('pdm.company_nid', $company->nid, '=');
    $milestoneData = $query->execute()->fetchAll();
  $projectData = node_load($milestoneData[0]->project_id);
  $projectManager = $projectData->field_project_mgmt_manager['und'][0]['value'];
  $storage_project = array(
    'project_id' => $milestoneData[0]->project_id,
    'default_status' => $milestoneData[0]->status,
    'proManager' => $projectManager,
  );
  $commands[] = ajax_command_invoke("select.project-default-milestone-lock-sel", 'val',array($storage_project['project_id']));
  $commands[] = ajax_command_invoke("select.project-manager", 'val',array($storage_project['proManager']));
  if($storage_project['default_status'] == 1){
    $commands[] = ajax_command_invoke('.milestone_status input[type="checkbox"]', 'attr',array('checked', 'true')); 
  }
  else{
    $commands[] = ajax_command_invoke('input[type="checkbox"].milestone_status','removeAttr',array('checked')); 
  }
  }
  else {
  $commands[] = ajax_command_invoke("select.project-default-milestone-lock-sel", 'val',array(''));  
  $commands[] = ajax_command_invoke("select.project-manager", 'val',array(''));
  $commands[] = ajax_command_invoke('input[type="checkbox"].milestone_status','removeAttr',array('checked')); 
  }
  return array('#type' => 'ajax', '#commands' => $commands);
}

function project_default_milestone_lock_date_submit(&$form, &$form_state) {
  global $user; 
  global $company;    
  $values = $form_state['values'];    
  if($values['project_default_milestone_lock_date_nid'] != '') {  
  $milestoneStatus = $values['milestone_status'][1];
  $milestoneDuration = $values['lock-milestone-duration']!= ''?$values['lock-milestone-duration']:0;  
  $sendMessage = $values['send-message'];
  if($sendMessage == 1) {
    $getProjectData = node_load($values['select-project']);
    $proManager = isset($getProjectData->field_project_mgmt_manager['und'])?$getProjectData->field_project_mgmt_manager['und'][0]['value']:0;
    if($proManager != 0) {
      $userData = user_load($proManager);
    $phoneNumber = $userData->field_phone['und'][0]['value'];
    if($milestoneDuration == 5) {
      $message = ucwords(_get_user_realname($proManager)).' your schedule dates for - '.ucwords($getProjectData->title).' has been unlocked for '.$milestoneDuration.' Days. You can now change the dates '.$milestoneDuration.' days , after '.$milestoneDuration.' days dates will be locked again';
    }
    else if($milestoneDuration == 10){
      $message = ucwords(_get_user_realname($proManager)).' Your schedule dates for - '.ucwords($getProjectData->title).' has been unlocked permanently. You can now change the dates';
    }

    //$phoneNumber = '+919785529744';
    $dialCode = _get_dial_code_by_phone_number($phoneNumber);
    $phoneNumber = str_replace($dialCode,'',$phoneNumber);
    m6connect_alert_twilio_send($phoneNumber, $message, $dialCode); 
    }
  }
  $projectId = $values['select-project'];
    $dateObject = new DateObject(time(), new DateTimeZone('UTC'));
    $dateTimeNew =  date_format_date($dateObject, 'custom', 'Y-m-d H:i');
    $currentTimestamp = strtotime($dateTimeNew);    
    $num_updated = db_update('m6connect_project_default_milestone_lock_date')
      ->fields(array(
      'company_nid' => $company->nid,
    'project_id' => $projectId,
    'status' => $milestoneStatus,
    'duration' => $milestoneDuration,
      'user_uid' => $user->uid,     
      'created' => $currentTimestamp,
    ))
    ->condition('id',$values['project_default_milestone_lock_date_nid'], '=')
    ->execute();  
  drupal_goto('/program/lock-milestone-date', array('query'=>array('pid' => $values['project_default_milestone_lock_date_nid'], 'md' => $values['project_default_milestone_lock_date_nid'])));
  }
  else { // Start adding new records
  $milestoneStatus = $values['milestone_status'][1];
  $milestoneDuration = $values['lock-milestone-duration']!= ''?$values['lock-milestone-duration']:0;
  $projectId = $values['select-project'];
    $dateObject = new DateObject(time(), new DateTimeZone('UTC'));
    $dateTimeNew =  date_format_date($dateObject, 'custom', 'Y-m-d H:i');
    $currentTimestamp = strtotime($dateTimeNew);  
    if(is_numeric($values['select-project'])) {
    $milestoneData= array(
      'company_nid' => $company->nid,
      'project_id' => $projectId,
    'status' => $milestoneStatus,
    'duration' => $milestoneDuration,
      'user_uid' => $user->uid,
      'created' => $currentTimestamp,
    );
    $id = db_insert('m6connect_project_default_milestone_lock_date')->fields($milestoneData)->execute();    
    } 
  drupal_goto('/program/lock-milestone-date', array('query'=>array('pid' => $id, 'md' => $id)));
  }  
}

function get_default_milestone_lock_date_table_data(){
  global $company,$user;  
  drupal_add_js(drupal_get_path('module', 'm6connect_program') . '/js/m6connect_program.js');
  $rows = array();
  $header = array(
  array('data'=>'Project','class'=>array('text-center')),
  array('data'=>'Project Manager','class'=>array('text-center')),
  array('data'=>'Status','class'=>array('text-center')),
  array('data'=>'Action','class'=>array('text-center')),
  );  
  $getProList = _project_list_by_company($company->nid, 'project_management','cmfalse');
  foreach($getProList as $proKey => $proName) {
    $query = db_select('m6connect_project_default_milestone_lock_date', 'pdm');
    $query->fields('pdm', array('project_id'));
    $query->condition('pdm.company_nid', $company->nid, '=');
  $query->condition('pdm.project_id', $proKey, '=');
    $getExist = $query->execute()->fetchField();
  if(empty($getExist)) {
    $dateObject = new DateObject(time(), new DateTimeZone('UTC'));
      $dateTimeNew =  date_format_date($dateObject, 'custom', 'Y-m-d H:i');
      $currentTimestamp = strtotime($dateTimeNew);    
    $milestoneData= array(
      'company_nid' => $company->nid,
      'project_id' => $proKey,
    'status' => 0,
    'duration' => 0,
      'user_uid' => $user->uid,
      'created' => $currentTimestamp,
    );
    $id = db_insert('m6connect_project_default_milestone_lock_date')->fields($milestoneData)->execute();    
  }
  }
  $query = db_select('m6connect_project_default_milestone_lock_date', 'pdm');
  $query->join('realname', 'r', 'r.uid=pdm.user_uid');
  $query->fields('pdm', array('id', 'project_id','status','user_uid'));
  $query->fields('r', array('realname'));   
  $query->condition('pdm.company_nid', $company->nid, '=');
  //$query->condition('pdm.status', 1);
  $query->orderBy('pdm.created', 'ASC');
  $getMilestones = $query->execute()->fetchAll();  
  if(!empty($getMilestones)) {
    foreach($getMilestones as $milestoneId => $milestoneVal) {
    $projectData = node_load($milestoneVal->project_id);
    $milestoneTitle = $projectData->title;
    $projectManager = isset($projectData->field_project_mgmt_manager['und'])?_get_user_realname($projectData->field_project_mgmt_manager['und'][0]['value']):' - None -';
    $milestoneStatus = $milestoneVal->status != 0?'Locked':'Unlocked';
    $lockStatus = $milestoneVal->status != 0?'<i class="fa fa-lock" aria-hidden="true"></i>':'<i class="fa fa-unlock" aria-hidden="true"></i>';
    if($milestoneVal->status == 1) { 
      $action = '<div class="project-action">
            <div class="btn-group"><div class="dropdown">
                <button id="dLabel" class="btn btn-success" type="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"> Actions</button>
              <ul class="dropdown-menu" role="menu" aria-labelledby="dLabel">
                <li>'.l('Unlock for 5 days', 'unlock/5',array('attributes' => array('class' => 'lock-milestone-submit-5', 'for' => $milestoneVal->id))).'</li>
                <li>'.l('Unlock permanently', 'unlock/10',array('attributes' => array('class' => 'lock-milestone-submit-10', 'for' => $milestoneVal->id))).'</li>
                <li>'.l('Delete', url('project-default-milestone/delete/default/'.$milestoneVal->id.'/'.$milestoneVal->project_id.'/nojs'), array( 'external'=>TRUE, 'attributes'=> array('class'=>array('use-ajax', 'ctools-modal-assign-dashboard-popup-style', 'ctools-use-modal'))) ).'</li>
              </ul>
              </div>
            </div>
            </div>';  
    }
    else { // Unlock
      $action = '<div class="project-action">
            <div class="btn-group"><div class="dropdown">
                <button id="dLabel" class="btn btn-success" type="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"> Actions</button>
              <ul class="dropdown-menu" role="menu" aria-labelledby="dLabel">               
                <li>'.l('Lock', 'lock/'.$milestoneVal->id,array('attributes' => array('class' => 'lock-milestone-detail', 'for' => $milestoneVal->id))).'</li>
                <li>'.l('Delete', url('project-default-milestone/delete/default/'.$milestoneVal->id.'/'.$milestoneVal->project_id.'/nojs'), array( 'external'=>TRUE, 'attributes'=> array('class'=>array('use-ajax ctools-modal-assign-dashboard-popup-style ctools-use-modal'))) ).'</li>
              </ul>
              </div>
            </div>
            </div>';
    }
            
    $rows[] = array(
    'data' => array(
          array('data' => ucwords($milestoneTitle),'class' => array('text-left','pro-name')),
          array('data' => ucwords($projectManager),'class' => array('text-left')),
          array('data' => ucwords($milestoneStatus).' '.$lockStatus,'class' => array('text-center')),         
          array('data' => $action,'class' => array('text-center')),
          ),  
      //'class' => array('custom-odd'),
    );
    }   
  }
  return theme('table', array('header'=>$header,'rows'=>$rows,'empty'=>'No Data Entered Yet','attributes'=>array('class'=>array('table','m6connect-custom-table','m6connect-custom-program-table','m6connect-program-default-milestone-table','table-hover','table-bordered','text-center'))));
}
// End work for lock date of milestone
// ===================================

function _project_list_by_company($cnid, $ctype = '', $prodStatus = '') {
  if(is_numeric($cnid) && $ctype != '') {
    // Get project list by company
    $query = db_select('node','n');
    $query->join('og_membership','om','om.etid=n.nid AND om.entity_type=:entityType', array(':entityType'=>'node'));

    // New field to distinguish between projects of CPM vs SCM
    $query->leftJoin('field_data_field_m6_service_type', 'st', 'st.entity_id=n.nid');

    if ($prodStatus != '') {
      if ($prodStatus == 'cmtrue') {
        $query->join('field_data_field_product_status‎','ps','ps.entity_id=n.nid');
        $query->condition('ps.field_product_status_value', 'cmtrue', '=');
      }
      elseif ($prodStatus == 'crtrue') {
        $query->join('field_data_field_product_status‎','ps','ps.entity_id=n.nid');
        $query->condition('ps.field_product_status_value', 'crtrue', '=');
      }
      // else {
      //   $query->join('field_data_field_product_status‎','ps','ps.entity_id=n.nid');
      //   $query->condition('ps.field_product_status_value', 'cmfalse', '=');
      // }
    }

    $query->fields('n', array('nid', 'title'));
    $query->condition('om.gid', $cnid, '=');
    $query->condition(db_or()->condition('st.field_m6_service_type_value' ,'scm', '!=')->isNull('st.field_m6_service_type_value'));
    $query->condition('n.type', $ctype,'=');
    $query->orderBy('n.created', 'DESC');
    $projectByCompany = $query->execute()->fetchAllKeyed(0,1);
    return $projectByCompany;
  }
  return array();
}

function _project_commitment_list_by_company($cnid) {
  if(is_numeric($cnid)) { 
    // Get Commitment list by company
    $query = db_select('node','n');
    $query->join('og_membership','om','om.etid=n.nid AND om.entity_type=:entityType', array(':entityType'=>'node'));
    $query->fields('n', array('nid', 'title'));
    $query->condition('om.gid', $cnid, '=');
    $query->condition('n.type', 'project_commitement','=');
    $projectByCompany = $query->execute()->fetchAllKeyed(0,1);
  $projectByCompany = array(''=>'None') + $projectByCompany;
  return $projectByCompany;
  }
  return array();
}

function _project_spending_list_by_company($cnid) {
  if(is_numeric($cnid)) { 
    // Get Commitment list by company
    $query = db_select('node','n');
    $query->join('og_membership','om','om.etid=n.nid AND om.entity_type=:entityType', array(':entityType'=>'node'));
    $query->fields('n', array('nid', 'title'));
    $query->condition('om.gid', $cnid, '=');
    $query->condition('n.type', 'project_spending','=');
    $projectByCompany = $query->execute()->fetchAllKeyed(0,1);
  $projectByCompany = array(''=>'None') + $projectByCompany;
  return $projectByCompany;
  }
  return array();
}

function _project_etc_list_by_company($cnid) {
  if(is_numeric($cnid)) { 
    // Get Commitment list by company
    $query = db_select('node','n');
    $query->join('og_membership','om','om.etid=n.nid AND om.entity_type=:entityType', array(':entityType'=>'node'));
    $query->fields('n', array('nid', 'title'));
    $query->condition('om.gid', $cnid, '=');
    $query->condition('n.type', 'project_etc','=');
    $projectByCompany = $query->execute()->fetchAllKeyed(0,1);
  return $projectByCompany;
  }
  return array();
}
function _project_get_estimate_cost_code_list($cnid) {
  if(is_numeric($cnid)) { 
    // Get estimate details list by company
    $query = db_select('node','n');
    $query->join('og_membership','om','om.etid=n.nid AND om.entity_type=:entityType', array(':entityType'=>'node'));
    $query->fields('n', array('nid', 'title'));
    $query->condition('om.gid', $cnid, '=');
    $query->condition('n.type', 'estimate_detail','=');
    $projectByCompany = $query->execute()->fetchAllKeyed(0,1);
  return $projectByCompany;
  }
  return array();
}

function _project_get_estimate_nodes_ny_project($cnid, $projectId) {
  if(is_numeric($cnid)) { 
    $query = db_select('node','n');
    $query->join('og_membership','om','om.etid=n.nid AND om.entity_type=:entityType', array(':entityType'=>'node'));
  $query->join('field_data_field_project_reference','pr','n.nid=pr.entity_id');
    $query->fields('n', array('nid', 'title'));
    $query->condition('om.gid', $cnid, '=');
    $query->condition('n.type', 'project_estimate','=');
  $query->condition('pr.field_project_reference_nid', $projectId,'=');
    $projectByCompany = $query->execute()->fetchAllKeyed(0,1);
  return $projectByCompany; 
  }
  return array();
}
  

function _project_get_schedule_list($cnid) {
  if(is_numeric($cnid)) { 
    // Get schedule details list by company
    $query = db_select('node','n');
    $query->join('og_membership','om','om.etid=n.nid AND om.entity_type=:entityType', array(':entityType'=>'node'));
    $query->fields('n', array('nid', 'title'));
    $query->condition('om.gid', $cnid, '=');
    $query->condition('n.type', 'project_schedule','=');
    $projectByCompany = $query->execute()->fetchAllKeyed(0,1);
  return $projectByCompany;
  }
  return array();
}

function _project_get_safety_list($cnid) {
  if(is_numeric($cnid)) { 
    // Get schedule details list by company
    $query = db_select('node','n');
    $query->join('og_membership','om','om.etid=n.nid AND om.entity_type=:entityType', array(':entityType'=>'node'));
    $query->fields('n', array('nid', 'title'));
    $query->condition('om.gid', $cnid, '=');
    $query->condition('n.type', 'project_safety','=');
    $projectByCompany = $query->execute()->fetchAllKeyed(0,1);
  return $projectByCompany;
  }
  return array();
}

function commitment_company_autocomplete($string = ''){
  global $company;  
  $matches = array();
  if(!empty($string)){
  $comppanyListing = array(); 
  if(isset($_SESSION['project_commitment_vender']) && !empty($_SESSION['project_commitment_vender'])){    
    $comppanyListing = $_SESSION['project_commitment_vender'];
  }
  else{
    $comppanyListing = _get_all_organigation_mapping(); 
  } 
    $query = db_select('field_data_field_vendor', 'cv');
    $query->join('field_data_field_outside_company', 'oc', 'oc.entity_id=cv.entity_id');
  $query->join('og_membership','om','om.etid=cv.entity_id AND om.entity_type=:entityType', array(':entityType'=>'node'));
  $query->fields('cv',array('field_vendor_value'));
  $query->condition('oc.field_outside_company_value', 'yes', '=');
  $query->condition('om.gid', $company->nid, '=');
  $companyList = $query->execute()->fetchCol();
  if(!empty($companyList)) {
    $comppanyListing = array_merge($companyList, $comppanyListing);
  }
  else {
    $comppanyListing = $comppanyListing;
  }
    //$comppanyListing = array_flip($comppanyListing);
    $matchedOwner = preg_grep("/^{$string}/i",array_values($comppanyListing));
    foreach($matchedOwner as $index => $userVal){
      $matches[$userVal] = $userVal; 
    }
  }
  drupal_json_output($matches);
}

function vendor_number_autocomplete($string = '') {
  global $company;  
  $matches = array();
  $query = db_select('field_data_field_vendor_number', 'vn');
  $query->join('og_membership','om','om.etid=vn.entity_id AND om.entity_type=:entityType', array(':entityType'=>'node'));
  $query->fields('vn',array('field_vendor_number_value'));
  $query->condition('om.gid', $company->nid, '=');
  $venorNumberList = $query->execute()->fetchCol();
  $matchedOwner = preg_grep("/^{$string}/i",array_values($venorNumberList));
  foreach($matchedOwner as $index => $userVal){
    $matches[$userVal] = $userVal; 
  }
  drupal_json_output($matches);
}

function commitment_number_company_autocomplete($string = ''){  
  $matches = array();
  if(!empty($string)){
  $comppanyListing = array();
  //if(isset($_SESSION['comapny_listing']) && !empty($_SESSION['comapny_listing'])){
  if(isset($_SESSION['commitment_number_select_list']) && !empty($_SESSION['commitment_number_select_list'])){    
    $comppanyListing = $_SESSION['commitment_number_select_list'];
  }
    //$comppanyListing = array_flip($comppanyListing);
    $matchedOwner = preg_grep("/^{$string}/i",array_values($comppanyListing));
    foreach($matchedOwner as $index => $userVal){
      $matches[$userVal] = $userVal; 
    }
  }
  drupal_json_output($matches);
}

function commitment_autocomplete_callback($form,&$form_state){  
  global $company;
  $commands = array();  
  $companyListing = $form_state['project_commitment_vender'];
  $companyListing = array_flip($companyListing);
  $triggering_element = $form_state['triggering_element'];
  $identifer = $triggering_element['#parents'][1];
  $commands[] = ajax_command_replace("#workflow-container-section", render($form['select-commitment']));
  $commands[] = ajax_command_invoke("input.vendor_number", 'val',array(''));
  
  // Check for vendor
  // First check if venodr is outside or from system
  // if form state contains company id then vendor from system
  if(!empty($form_state['values']['company_nid'])) {
    // if has company nid then we need to load vendor number by company nid
	$getVenodrName = $form_state['values']['company_nid'];
    // Get vendor number from the system 
	// which are already added for this vendor
	$query = db_select('node','n');
    $query->join('og_membership','om','om.etid=n.nid AND om.entity_type=:entityType', array(':entityType'=>'node'));    
    $query->join('field_data_field_vendor_number','vn', 'vn.entity_id = n.nid');
	$query->join('field_data_field_vendor','fv', 'fv.entity_id = n.nid');
    $query->fields('vn', array('field_vendor_number_value'));
    $query->condition('om.gid', $company->nid, '=');
    $query->condition('fv.field_vendor_value', $getVenodrName, '=');
    $getVendorNumber = $query->execute()->fetchField();
	if(!empty($getVendorNumber)) {
	  $commands[] = ajax_command_invoke("input.vendor_number", 'val',array($getVendorNumber));
	}
  }
  else {
    // if has company nid then we need to load vendor number by company nid
	$getVenodrName = $triggering_element['#value'];
    // Get vendor number from the system 
	// which are already added for this vendor
	$query = db_select('node','n');
    $query->join('og_membership','om','om.etid=n.nid AND om.entity_type=:entityType', array(':entityType'=>'node'));    
    $query->join('field_data_field_vendor_number','vn', 'vn.entity_id = n.nid');
	$query->join('field_data_field_vendor','fv', 'fv.entity_id = n.nid');
    $query->fields('vn', array('field_vendor_number_value'));
    $query->condition('om.gid', $company->nid, '=');
    $query->condition('fv.field_vendor_value', $getVenodrName, '=');
    $getVendorNumber = $query->execute()->fetchField();
	if(!empty($getVendorNumber)) {
	  $commands[] = ajax_command_invoke("input.vendor_number", 'val',array($getVendorNumber));
	}
  }
  
  $companyNid='';
  if(isset($companyListing[$triggering_element['#value']])){
    $companyNid = $companyListing[$triggering_element['#value']];
    if(is_numeric($companyNid)) {
      $getCompanyDetails = node_load($companyNid);
      if(isset($getCompanyDetails->field_logo['und'])) {
        $companyLogo = '<img src="'.image_style_url('thumbnail', $getCompanyDetails->field_logo['und'][0]['uri']).'">'; 
      }
      else {
        $companyLogo = '<img src="/sites/all/themes/m6connect/images/default_company_profile.jpg" style="height:100px; width:66px;">';
      }
      $commands[] = ajax_command_html(".company-details-by-email", '<label>&nbsp;</label>'.$companyLogo.'<strong>&nbsp;&nbsp;&nbsp;'.$getCompanyDetails->title.'</strong>');  
      $commands[] = ajax_command_invoke("input.company_nid", 'val',array($companyNid));
      $commands[] = ajax_command_invoke("input.outside_company", 'val',array('no'));
    }
    else {
      $commands[] = ajax_command_html(".company-details-by-email", '<label>&nbsp;</label><strong>'.$triggering_element['#value'].'</strong>');  
      $commands[] = ajax_command_invoke("input.company_nid", 'val',array($triggering_element['#value']));
      $commands[] = ajax_command_invoke("input.outside_company", 'val',array('yes'));
    }
  }  
  else {
    $commands[] = ajax_command_html(".company-details-by-email", '<label>&nbsp;</label><strong>'.$triggering_element['#value'].'</strong>');  
    $commands[] = ajax_command_invoke("input.company_nid", 'val',array($triggering_element['#value']));
    $commands[] = ajax_command_invoke("input.outside_company", 'val',array('yes'));
  }  
  return array('#type' => 'ajax','#commands' => $commands);
}

function commitment_number_autocomplete_callback($form,&$form_state) {
  $commands = array();
  $commitmentListing = $_SESSION['commitment_number_select_list'];
  //$commands[] = ajax_command_replace("#workflow-container-section", render($form['select-commitment']));  
  $key = array_search($form_state['values']['commitment_number_select'], $_SESSION['commitment_number_select_list']);
  if(!empty($key) && $key != '') {
  $commands[] = ajax_command_invoke("input.commitment_clone", 'val',array(1));
  $commands[] = ajax_command_invoke("input.commitment_number_select_2", 'val',array($key));
  $commands[] = ajax_command_invoke(".disbled-section", 'addClass',array('container-disabled'));  
  $commands[] = ajax_command_invoke("select.commitment_number_select_old", 'val',array($key));
  $commands[] = ajax_command_invoke("select.commitment_number_select_old", 'trigger',array('change'));
  
  /*$commands[] = ajax_command_invoke("select.project-program-sel-commitment", 'val',array($key));
  $commands[] = ajax_command_invoke("select.project-program-sel-commitment", 'trigger',array('change'));      
  $commands[] = ajax_command_invoke("input.cost_code", 'addAttr',array('disabled', 'true'));
  $commands[] = ajax_command_invoke("input.project_number", 'attr',array('disabled', 'true'));
  $commands[] = ajax_command_invoke("input.commitment_status", 'attr',array('disabled', 'true'));
  $commands[] = ajax_command_invoke("input.entered_date", 'attr',array('disabled', 'true'));
  $commands[] = ajax_command_invoke("commitment_description", 'attr',array('disabled', 'true'));
  $commands[] = ajax_command_css('.project-details-right', array('pointer-events' => 'none'));
  $commands[] = ajax_command_css('#alert-container-section', array('pointer-events' => 'none'));  */
  }
  else {    
  $commands[] = ajax_command_invoke("select.commitment_type", 'val',array($form_state['values']['commitment_type']));
  $commands[] = ajax_command_invoke("input.commitment_number_select_2", 'val',array(''));
  $commands[] = ajax_command_invoke(".disbled-section", 'removeClass',array('container-disabled'));
  
  }
  return array('#type' => 'ajax','#commands' => $commands);
}

function vendor_number_autocomplete_callback($form,&$form_state) {
  $commands = array();  
  $triggering_element = $form_state['triggering_element'];
  $identifer = $triggering_element['#parents'][1];  
  $commands[] = ajax_command_invoke("input.vendor_number_cust", 'val',array($triggering_element['#value']));
  return array('#type' => 'ajax','#commands' => $commands);
}

function spending_autocomplete_callback($form,&$form_state){
  global $company;
  $commands = array();
  $companyListing = $form_state['project_spending_vender'];
  $companyListing = array_flip($companyListing);
  $triggering_element = $form_state['triggering_element'];
  $identifer = $triggering_element['#parents'][1];
  $commands[] = ajax_command_replace("#workflow-container-section", render($form['select-spending']));
  $companyNid='';
  // Check for vendor
  // First check if venodr is outside or from system
  // if form state contains company id then vendor from system
  if(!empty($form_state['values']['company_nid'])) {
    // if has company nid then we need to load vendor number by company nid
	$getVenodrName = $form_state['values']['company_nid'];
    // Get vendor number from the system 
	// which are already added for this vendor
	$query = db_select('node','n');
    $query->join('og_membership','om','om.etid=n.nid AND om.entity_type=:entityType', array(':entityType'=>'node'));    
    $query->join('field_data_field_vendor_number','vn', 'vn.entity_id = n.nid');
	$query->join('field_data_field_vendor','fv', 'fv.entity_id = n.nid');
    $query->fields('vn', array('field_vendor_number_value'));
    $query->condition('om.gid', $company->nid, '=');
    $query->condition('fv.field_vendor_value', $getVenodrName, '=');
    $getVendorNumber = $query->execute()->fetchField();
	if(!empty($getVendorNumber)) {
	  $commands[] = ajax_command_invoke("input.vendor_number", 'val',array($getVendorNumber));
	}
  }
  else {
    // if has company nid then we need to load vendor number by company nid
	$getVenodrName = $triggering_element['#value'];
    // Get vendor number from the system 
	// which are already added for this vendor
	$query = db_select('node','n');
    $query->join('og_membership','om','om.etid=n.nid AND om.entity_type=:entityType', array(':entityType'=>'node'));    
    $query->join('field_data_field_vendor_number','vn', 'vn.entity_id = n.nid');
	$query->join('field_data_field_vendor','fv', 'fv.entity_id = n.nid');
    $query->fields('vn', array('field_vendor_number_value'));
    $query->condition('om.gid', $company->nid, '=');
    $query->condition('fv.field_vendor_value', $getVenodrName, '=');
    $getVendorNumber = $query->execute()->fetchField();
	if(!empty($getVendorNumber)) {
	  $commands[] = ajax_command_invoke("input.vendor_number", 'val',array($getVendorNumber));
	}
  }
  if(isset($companyListing[$triggering_element['#value']])){
    $companyNid = $companyListing[$triggering_element['#value']]; 
    if(is_numeric($companyNid)) {
      $commands[] = ajax_command_invoke("input.company_nid", 'val',array($companyNid));
      $commands[] = ajax_command_invoke("input.outside_company", 'val',array('no'));
    }
    else {
      $commands[] = ajax_command_invoke("input.company_nid", 'val',array($triggering_element['#value']));
      $commands[] = ajax_command_invoke("input.outside_company", 'val',array('yes'));
    }
  }  
  else {
    $commands[] = ajax_command_invoke("input.company_nid", 'val',array($triggering_element['#value']));
    $commands[] = ajax_command_invoke("input.outside_company", 'val',array('yes'));
  }
  return array('#type' => 'ajax','#commands' => $commands);
}

function m6connect_programe_date_prerender($element) {
  unset($element['date']['#description']);
  unset($element['date']['#title']);  
  return $element;
}


function m6connect_program_node_presave($node) {
  /*if($node->type == 'project_management') {
    //$projectNumber = $node->field_project_mgmt_sr_number['und'][0]['value'];    
  $projectNumber = variable_get('ProjectNumber');
  // Commitment number calculation
    $currentYear = date('Y');
    $makeSr = str_pad($projectNumber, 6, "0", STR_PAD_LEFT);
    $proNumber = 'CM-'.$makeSr.'-'.$currentYear;    
  $node->field_project_mgmt_number['und'][0]['value'] = $proNumber;
  variable_set('ProjectNumber', $projectNumber);            
  }*/
  if($node->type == 'project_etc') {
    /*$projectNumber = $node->field_etc_number['und'][0]['value'];
  // ETC number calculation
    $makeSr = str_pad($projectNumber, 6, "0", STR_PAD_LEFT);
    $ETCNumber = 'ETC'.$makeSr.'-'.date('Y');  
  $node->field_etc_number_calc['und'][0]['value'] = $ETCNumber;
  variable_set('ETCNumber', $projectNumber);*/
  }
  if($node->type == 'project_spending') {
    /*$invNumber = $node->field_invoice_number['und'][0]['value'];    
  // ETC number calculation
    $makeSr = str_pad($invNumber, 6, "0", STR_PAD_LEFT);
    $invNumberCal = 'INV'.$makeSr.'-'.date('Y');
  $node->field_invoice_number_cal['und'][0]['value'] = $invNumberCal;
  variable_set('spendingNumber', $invNumber);*/
  }  
  if($node->type == 'project_commitement') {
    /*$commitmentNumber = $node->field_commitment_number['und'][0]['value'];    
  // Commitment number calculation
    $currentYear = date('Y');
    $makeSr = str_pad($commitmentNumber, 6, "0", STR_PAD_LEFT);
    $cmtNumber = 'COM'.$makeSr.'-'.$currentYear;    
  $node->field_commitment_number_calculat['und'][0]['value'] = $cmtNumber;    */
  $projectMgmtNo = $node->field_project_mgmt_number['und'][0]['value'];
    if($projectMgmtNo != '' && $node->is_new) {   
    $query= db_select('field_data_field_project_mgmt_number','pr');
      $query->fields('pr', array('entity_id'));
      $query->condition('pr.field_project_mgmt_number_value', $projectMgmtNo, '=');
      $projectNid = $query->execute()->fetchCol();
    $node->field_project_reference['und'][0]['nid'] = $projectNid[0]; 
  }
  //variable_set('CommitmentNumber', $commitmentNumber);
  }        
}

function get_etc_by_project($projectId = 0,$option = '') {  
  if($projectId != 0 && $option != '') {
  if($option == 'commitments') {   
      $query = db_select('field_data_field_project_reference','pr');
      $query->join('node','n','n.nid=pr.entity_id');
      $query->fields('pr', array('entity_id'));
      $query->fields('n', array('title'));
      $query->condition('pr.field_project_reference_nid', $projectId, '=');
      $query->condition('pr.bundle','project_commitement','=');
      $getCommitmentNodes = $query->execute()->fetchAllKeyed(0,1);
      return $getCommitmentNodes;
  }
  else if($option == 'costCode'){
    $query = db_select('field_data_field_est_cost_code','cc');
    $query->join('field_data_field_project_reference','pr','pr.entity_id=cc.entity_id');
      $query->fields('cc', array('field_est_cost_code_value'));
      $query->condition('pr.field_project_reference_nid', $projectId, '=');
      $query->condition('pr.bundle','estimate_detail','=');
      $getCommitmentNodes = $query->execute()->fetchCol();
    $comNodeCC = array();
    foreach($getCommitmentNodes as $comKey => $comVal) {
      $comNodeCC[$comVal] = $comVal;
    }
      return $comNodeCC;
  }
  }
  return array();
}

function cost_code_details_callback($projectId, $estimateNid ,$ajax = TRUE) {
  if ($ajax) {
    ctools_include('ajax');
    ctools_include('modal');
    $form_state = array(
      'ajax' => TRUE,
      'title' => t('New Budget Line Item'),
    'projectId' => $projectId,
    'estimateId' => $estimateNid,
    );
    $output = ctools_modal_form_wrapper('program_modify_estimates_detail_form', $form_state);
    if (!empty($form_state['ajax_commands'])) {
      $output = $form_state['ajax_commands'];
    }    
    print ajax_render($output);
    drupal_exit();
  }
  else {
    return drupal_get_form('program_modify_estimates_detail_form');
  } 
}

function po_items_details_callback($projectId ,$ajax = TRUE) {
  if ($ajax) {
    ctools_include('ajax');
    ctools_include('modal');
    $form_state = array(
      'ajax' => TRUE,
      'title' => t('Add New Line item: '.node_load(arg(1))->field_commitment_number_calculat['und'][0]['value']),
    'projectId' => $projectId,
    );
    $output = ctools_modal_form_wrapper('po_item_details_form', $form_state);
    if (!empty($form_state['ajax_commands'])) {
      $output = $form_state['ajax_commands'];
    }    
    print ajax_render($output);
    drupal_exit();
  }
  else {
    return drupal_get_form('po_item_details_form');
  } 
}

function po_item_details_form($form,&$form_state) {
  $form = array();
  if(empty($form_state['invite_m6_storage'])){
    $tempIdentifer = uniqid();
    $form_state['invite_m6_storage'][]  = $tempIdentifer;
  }      
  $form['#attached']['js'][] = array(
    'data'=>drupal_get_path('module', 'm6connect_program') . '/js/m6connect_program.js',
  'type'=>'file'
  );
  $form['main_container']= array(
    '#type' => 'container',
    '#theme' => 'invite_m6_theme',
    '#attributes' => array('class'=>array('alert-container-section')),
    '#prefix' => '<div class="clearfix"><div id="alert-container-section" class="add-new-alert-detail margin-bottom-10">', 
    '#suffix' => '</div></div>',
    '#process' => array('invite_to_m6_process'),
  );
  /*$form['close'] = array(
    '#markup' => l('<input type="button" class="btn btn primary form-submit" value="Cancel" />', '/alerts', array('external' => TRUE, 'html' => TRUE, 'attributes' => array('class' => array('assign-bid-packages-popup-close'), ))),
    '#weight' => 10,
  );*/
  $form['close'] = array(
        '#markup' => '&nbsp;&nbsp;' . l('<input type="button" class="btn btn primary form-submit" value="Cancel" />', 'javascript:void(0);', array('external' => TRUE, 'html' => TRUE, 'attributes' => array('class' => array('assign-bid-packages-popup-close'), 'onclick' => 'jQuery("span.popups-close").click();'))),        
    );
  $form['submit'] = array(
    '#value' => 'Save',
    '#type' => 'submit',
    //'#validate' => array('alert_new_row_validate_handler'),
    '#submit' => array('invite_m6_new_row_submit_handler'),
  ); 
  $form['workflow_add_new_row'] = array(
    '#type'=>'submit',
    '#value' => 'Add New',
    '#name' => 'workflow_add_new_row',
    '#attributes'=> array('class'=>array('routing-workflow-action','routing-workflow-action-add-company'),'title'=>'Add New Detail'),
    "#limit_validation_errors" => array(),
    '#submit'=> array('add_new_row_submit_handler_invite_m6'),
    '#ajax' => array(
    'callback' => 'add_new_row_invite_m6_action_callback',
    'wrapper' => 'alert-container-section',
    'method' => 'replace',
    'effect' => 'fade',
    'progress' => array('type'=> 'throbber', 'message'=> NULL),
    ),
  );   
  return $form;
}

function add_new_row_submit_handler_invite_m6(&$form, &$form_state) {
  $triggerElement = $form_state['triggering_element'];
  if($triggerElement['#name'] =='workflow_add_new_row'){
    $tempIdentifer = uniqid();
    $form_state['invite_m6_storage'][]  = $tempIdentifer;
  }
  $form_state['rebuild'] = TRUE;
}

// add ajax callback
function add_new_row_invite_m6_action_callback(&$form, &$form_state) {  
  return $form['main_container2'];
}

function theme_invite_m6_theme($variables) {
  $element = $variables['form'];
  $storage = $element['#storage'];
  $output = '';
  //$header = array('Unit Cost', 'Quantity', 'Unit of Measure', 'Cost Code|Description','Item Description','Total', '');
  //$header = array('Unit Cost', 'Quantity', 'Unit of Measure', 'Item Description','Total', '');
  $header = array('Unit Cost', 'Quantity', 'Unit of Measure','Cost Code|Description','Total', '');
  $rowNo = 1;
  foreach ($storage as $key => $uniqId) {
    $rows[] = array(
    'data'=> array(
    array('data'=>drupal_render($element['unit_cost'][$uniqId]),'class'=> array('col-md-2')),
    array('data'=>drupal_render($element['quantity'][$uniqId]),'class'=> array('col-md-2')),
    array('data'=>drupal_render($element['unit_measure'][$uniqId]),'class'=> array('col-md-2')),
    array('data'=>drupal_render($element['ws_code'][$uniqId]),'class'=> array('col-md-3')),
    array('data'=>drupal_render($element['ws_code_hidden'][$uniqId]),'class'=> array('col-md-2'),'style' => 'display:none;'),   
    array('data'=>drupal_render($element['po_total'][$uniqId]),'class'=> array('col-md-2')),
    array('data'=>drupal_render($element['etc_status_id'][$uniqId]),'style' => 'display:none;'),
    array('data'=>drupal_render($element['itemCount'][$uniqId]),'style' => 'display:none;'),    
    array('data'=>drupal_render($element['remove'][$uniqId]),'class'=> array('workflow-remove-td')),
      ),    
    'id' => array('alert-table-list-'.$rowNo),
    );
  $rows[] = array(
    'data'=> array(
      array('data'=> '<strong>Item Description</strong>','colspan' => 1),
      array('data'=>drupal_render($element['po_item_description'][$uniqId]),'colspan' => 4),
        ),   
    'id' => array('alert-table-list-'.$rowNo),
    );
    $rowNo++;
  }
  $rows[] = array(
    'data' => array(  
    array('data'=>drupal_render($element['workflow_add_new_row']),'colspan' => 7),
  ),  
  );
  $rows[] = array(
    'data' => array(  
    //array('data'=>drupal_render($element['workflow_add_new_row'])),   
    array('data'=>drupal_render($element['final_total']),'style' => 'display:none;'),   
    //array('data'=>drupal_render($element['commitment_cost_code'])),       
    array('data'=>drupal_render($element['notes_and_instructions']),'colspan' => 3),
    array('data'=>drupal_render($element['final_total_details']),'colspan' => 3), 
  ),  
  );
  $output .= theme('table', array('header' => $header, 'rows' => $rows, 'attributes'=> array('class'=> array('project-mgmt-po-item-table','table','table-hover','m6connect-custom-table','m6connect-table-border'))));
  $output .= drupal_render_children($element);
  return $output;
}

function invite_to_m6_process($element, &$form_state){   
  // Get all approved Cost code
  drupal_add_js(drupal_get_path('module', 'm6connect_program') . '/js/m6connect_program.js');
  drupal_add_js(drupal_get_path('module', 'm6connect_program') . '/js/Prototype_Price_Format_0.1.js');
  $query= db_select('node','n'); 
  $query->join('field_data_field_estimate_reference','er','er.entity_id = n.nid');
  $query->join('node','enode','enode.nid=er.field_estimate_reference_nid');
  $query->join('field_data_field_project_estimate_status','es','es.entity_id = enode.nid');   
  $query->leftjoin('field_data_field_est_cost_code','cc','cc.entity_id=n.nid');
  $query->leftjoin('field_data_field_project_est_description','ccd','ccd.entity_id=n.nid');
  $query->fields('cc',array('field_est_cost_code_value'));
  $query->fields('ccd',array('field_project_est_description_value'));  
  $query->condition('es.field_project_estimate_status_value', 'approved', '=');
  $getCostCode = $query->execute()->fetchAllKeyed(0,1); 
  $comNodeCC = array('0' => '- None -');
  foreach($getCostCode as $comKey => $comVal) {
    $getCcDes = db_select('node','n'); 
    $getCcDes->join('field_data_field_manager_cost_code','mcc','mcc.entity_id = n.nid'); 
    $getCcDes->join('field_data_field_cost_code_description','ccd','ccd.entity_id = n.nid');    
    $getCcDes->fields('ccd',array('field_cost_code_description_value'));
    $getCcDes->condition('mcc.field_manager_cost_code_value',$comKey, '=');
    $costCodeDes = $getCcDes->execute()->fetchField();      
    $comNodeCC[$comKey] = $comKey.' - '.$costCodeDes;
  }
  // End work for cost code
  $storage = $form_state['invite_m6_storage'];  
  if(isset($form_state['projectId'])) {
    $commitNode = node_load($form_state['projectId']);
    if(isset($commitNode->field_cost_code['und'])) {
      $costCode = $commitNode->field_cost_code['und'][0]['value'];
      $string = htmlentities($costCode, null, 'utf-8');
      $content = str_replace("&nbsp;", " ", $string);
      $upCCode = html_entity_decode($content);
    }
  }
  $element['#storage'] = $storage;
  foreach ($storage as $key => $uniqId) {  
    $element['unit_cost'][$uniqId] = array(
    '#type' => 'textfield', 
      //'#default_value' => '0',    
      //'#required' => TRUE,
    '#attributes'=> array('class'=> array('form-control','workflow-auto','unit_cost'),'placeholder'=>'Enter Unit Cost'),
      '#parents' => array('alert',$uniqId,'unit_cost'),
    );
  $element['quantity'][$uniqId] = array(
    '#type' => 'textfield', 
    //'#title' => t('Last Name'), 
    //'#default_value' => '0',
    //'#required' => TRUE,
    '#attributes'=> array('class'=> array('form-control','workflow-auto','po_quantity'),'placeholder'=>'Enter Quantity'),
    '#parents' => array('alert',$uniqId,'quantity'),
    );
  $element['unit_measure'][$uniqId] = array(
    //'#type' => 'textfield', 
    '#type' => 'select',
    '#options' => array('each' => 'Each','hours' => 'Hours','Lump Sum' => 'Lump Sum'),
    '#empty_option' => 'None',
    '#default_value' => '',     
    //'#required' => TRUE,
    '#attributes'=> array('class'=> array('form-control','workflow-auto','unit_measure'),'placeholder'=>'Enter Unit Measure'),
    '#parents' => array('alert',$uniqId,'unit_measure'),
  );
  $element['ws_code'][$uniqId] = array(
    '#type' => 'select',
    //'#options' => $comNodeCC,
    '#default_value' => '',
    //'#disabled' => TRUE,
    '#attributes'=> array('class'=> array('form-control','workflow-auto','ws_code','cost_code_update')),
    '#parents' => array('alert',$uniqId,'ws_code'),
  );  
  $element['ws_code_hidden'][$uniqId] = array(
    '#type' => 'textfield',   
    '#attributes'=> array('class'=> array('form-control','workflow-auto','ws_code_hidden')),
    '#parents' => array('alert',$uniqId,'ws_code_hidden'),
    '#prefix' => '<div class="ws-code-hidden" style="display:none;">',
    '#suffix' => '</div>',
  );  
  $element['po_item_description'][$uniqId] = array(
    '#type' => 'textfield', 
    '#default_value' => '',     
    //'#required' => TRUE,
    '#attributes'=> array('class'=> array('form-control','workflow-auto','po_item_description')),
    '#parents' => array('alert',$uniqId,'po_item_description'),
  );    
  $element['po_total'][$uniqId] = array(
    '#type' => 'textfield', 
    '#default_value' => '',     
    //'#required' => TRUE,
    '#attributes'=> array('class'=> array('form-control','workflow-auto','po_total')),
    '#parents' => array('alert',$uniqId,'po_total'),
  );    
  $element['etc_status_id'][$uniqId] = array(
    '#type' => 'textfield', 
    '#default_value' => '',     
    //'#required' => TRUE,
    '#attributes'=> array('class'=> array('form-control','workflow-auto','etc_status_id')),
    '#parents' => array('alert',$uniqId,'etc_status_id'),
  );    
  $element['itemCount'][$uniqId] = array(
    '#type' => 'textfield', 
    '#default_value' => '',     
    //'#required' => TRUE,
    '#attributes'=> array('class'=> array('form-control','workflow-auto','itemCount')),
    '#parents' => array('alert',$uniqId,'itemCount'),
  );    
  $element['remove'][$uniqId] = array(
    '#type' => 'submit',
    '#value' => decode_entities('&#xf014;'),
    '#name' => $uniqId,
    '#attributes'=> array('style'=> array('font-family:FontAwesome;'),'class'=>array('alert-container-section', 'workflow-remove-submit')),
    '#parents' => array('alert', $uniqId, 'remove'),
    "#limit_validation_errors" => array(),
    '#submit'=> array('remove_invite_m6_row_handler'),
      '#ajax' => array(
      'callback' => 'remove_m6_invite_row_callback',
      'wrapper' => 'alert-container-section',
      'method' => 'replace',
      'effect' => 'fade',
      'progress' => array('type'=> 'throbber', 'message'=> NULL),
    ),    
    );
    if(isset($form_state['po_storage_default_value'][$uniqId])) {
      $stdefault = $form_state['po_storage_default_value'][$uniqId];
        $element['unit_cost'][$uniqId]['#default_value'] = $stdefault['unitCost'];
        $element['quantity'][$uniqId]['#default_value'] = $stdefault['commitmentQuantity'];
        $element['unit_measure'][$uniqId]['#default_value'] = $stdefault['unitMeasure'];
        $element['ws_code'][$uniqId]['#default_value'] = $stdefault['wsCode'];
    $element['ws_code_hidden'][$uniqId]['#default_value'] = $stdefault['wsCodeHidden'];   
      $element['po_total'][$uniqId]['#default_value'] = $stdefault['poTotal'];
    $element['po_item_description'][$uniqId]['#default_value'] = $stdefault['poDesc'];
    $element['etc_status_id'][$uniqId]['#default_value'] = $stdefault['etc_status_id'];   
    $element['itemCount'][$uniqId]['#default_value'] = $stdefault['itemCount'];       
      }    
    }
  $element['notes_and_instructions'] = array(
      '#type' => 'textarea',
    '#title' => 'Notes and instructions',
    '#rows' => 8,
    '#attributes' => array('class'=> array('form-control', 'final_total_instructions')),
    );
  $element['final_total_details_dis'] = array(
    '#type' => 'textfield',
    '#title' => 'Po Discount',
    '#attributes' => array('class'=> array('form-control', 'po_amt_discount_form')),
    '#prefix' => '<div class="line-item-additonal-data" style="display:none;">',
  );
  $element['final_total_details_sales_tax_amt'] = array(
    '#type' => 'textfield',
    '#title' => 'Po Sales tax amt',
    '#attributes' => array('class'=> array('form-control', 'po_amt_sales_tax_amt_form')),
  );
  $element['final_total_details_sales_tax_per'] = array(
    '#type' => 'textfield',
    '#title' => 'Po Sales tax per',
    '#attributes' => array('class'=> array('form-control', 'po_amt_sales_tax_per_form')),
  );
  $element['final_total_details_other_cost'] = array(
    '#type' => 'textfield',
    '#title' => 'Po other tax',
    '#attributes' => array('class'=> array('form-control', 'po_amt_other_cost_form')),
  );
  $element['final_total_details_sandh'] = array(
    '#type' => 'textfield',
    '#title' => 'Po s and h',
    '#attributes' => array('class'=> array('form-control', 'po_amt_discount_sh_form')),
    '#suffix' => '</div>',
  );
  $element['workflow_add_new_row'] = array(
    '#type'=>'submit',
    '#value' => 'Add New',
    '#name' => 'workflow_add_new_row',
    '#attributes'=> array('class'=>array('routing-workflow-action','commitment-workflow-action-add-po-details'),'title'=>'Add New Detail'),
    "#limit_validation_errors" => array(),
    '#submit'=> array('add_new_row_submit_handler_invite_m6'),
    '#ajax' => array(
    'callback' => 'add_new_row_invite_m6_action_callback',
    'wrapper' => 'alert-container-section',
    'method' => 'replace',
    'effect' => 'fade',
    'progress' => array('type'=> 'throbber', 'message'=> NULL),
    ),
    );  
  $element['final_total_details'] = array(
    '#markup' => '<div class="final_total_details">             
          <dl class="dl-horizontal margin-bottom-10 clearfix"><dt>Subtotal</dt><dd><div class="total_po_amount">0</div></dd></dl>         
          <dl class="dl-horizontal margin-bottom-10 clearfix"><dt>Discount</dt><dd><input type="text" class="form-control po_amt_discount" placeholder="-"></dd></dl>                   
          
          <dl class="dl-horizontal margin-bottom-10 clearfix"><dt>Sales Tax</dt><dd><div class="row margin-5">
          <div class="col-md-6 padding-5"><input type="text" class="form-control po_amt_sales_tax_amt col-md-6"></div>
          <div class="col-md-6 padding-5"><input type="text" class="form-control po_amt_sales_tax_per" style="display: inline-block;width: 82%;"><span style="line-height:29px;" class="padding-5">%<span></div></div></dd></dl><dl class="dl-horizontal margin-bottom-10 clearfix"><dt>Other Cost $</dt><dd><input type="text" class="form-control po_amt_other_cost"></dd></dl>                   
          <dl class="dl-horizontal margin-bottom-10 clearfix"><dt>S & H</dt><dd><input type="text" class="form-control po_amt_discount_sh"></dd></dl>                   
          <dl class="dl-horizontal margin-bottom-10 clearfix"><dt>Total:</dt><dd><div class="total_po_amount_final">$ 0</div></dd></dl>                             
          </div>',
    '#attributes'=> array('class'=> array('final_total_details')),
    //'#parents' => array('final_total',$uniqId,'unit_measure'),
  );  
  $element['final_total'] = array(
    //'#type' => 'hidden', 
    '#type' => 'hidden', 
    '#attributes'=> array('class'=> array('final_po_total_amt')),
  );
  $element['commitment_cost_code'] = array(
    '#type' => 'hidden',
    '#default_value' => $upCCode,
    '#attributes'=> array('class'=> array('commitment_cost_code')),
  );
  return $element;
}

function invite_m6_new_row_submit_handler(&$form, &$form_state) {
  $values = $form_state['values'];  
  $getProjectId = node_load($form_state['projectId'])->field_project_reference['und'][0]['nid'];  
  $storage = $form_state['invite_m6_storage'];
  global $company;
  global $user;
  $nid = $company->nid;
  $uid = $user->uid;    
  $alert = $values['alert'];    
  // Preapring node
  $node = new stdClass();
  $node->type = 'commitment_po_item_detail';
  $node->title = 'Po-detail'.date('m-d-Y:H:i:s'); 
  $node->uid = $user->uid;    
  $node->status = 1;
  $node->og_group_ref['und'][0]['target_id'] = $company->nid;
  $node->field_commitment_reference['und'][0]['nid'] = $form_state['projectId'];
  $count = 0;
  foreach ($alert as $key => $alert_detail) {
    $node->field_commitment_unit_measure['und'][$count]['value'] = $alert_detail['unit_measure']; 
  $node->field_commitment_unit_cost['und'][$count]['value'] = $alert_detail['unit_cost'];
  $node->field_commitment_quantity['und'][$count]['value'] = $alert_detail['quantity'];         
  $node->field_po_total['und'][$count]['value'] = $alert_detail['po_total'];
  $count++;
  }
  $node->field_commitment_cost_code['und'][$count]['value'] = $values['commitment_cost_code'];
  $node->field_commitment_po_final_total['und'][0]['value'] = $values['final_total'];
  $node->field_project_reference['und'][0]['nid'] = $getProjectId;    
  node_save($node);
  if((isset($form_state['ajax']))?(($form_state['ajax']==1)?true:false):false) {
    $form_state['ajax_commands'][] = ctools_modal_command_dismiss();    
  }
  else {
    $form_state['redirect'] = 'program/commitments'; 
  } 
}

function remove_m6_invite_row_callback(&$form, &$form_state) {
  return $form['main_container2'];
}

function remove_invite_m6_row_handler(&$form,&$form_state) {
$triggering_element = $form_state['triggering_element'];
  $identifier = $triggering_element['#parents'][1];
  if(isset($form_state['invite_m6_storage'])){
    foreach ($form_state['invite_m6_storage'] as $key => $value) {
      if($form_state['invite_m6_storage'][$key] == $identifier){
    //drup_msg($form_state['invite_m6_storage'][$key]);
    //drup_msg($form_state['invite_m6_storage']);  
        unset($form_state['invite_m6_storage'][$key]);
    unset($form_state['po_storage_default_value'][$identifier]);
    //unset($form_state['po_storage_default_value'][$key]);
      } 
    }             
  }   
  $form_state['rebuild'] = TRUE;
}

function edit_estimate_code_code_details_callback($estmateNid,$ajax){
  if ($ajax) {
    ctools_include('ajax');
    ctools_include('modal');
    $form_state = array(
      'ajax' => TRUE,
      'title' => t('Edit Cost Code details'),
    'est_id' => $estmateNid,
    );
    $output = ctools_modal_form_wrapper('program_modify_estimates_detail_form', $form_state);
    if (!empty($form_state['ajax_commands'])) {
      $output = $form_state['ajax_commands'];
    }    
    print ajax_render($output);
    drupal_exit();
  }
  else {
    return drupal_get_form('program_modify_estimates_detail_form',$estmateNid);
  } 
}

function m6connect_sendinvite_tom6_callback($ajax=TRUE){
  if ($ajax) {
    ctools_include('ajax');
    ctools_include('modal');
    $form_state = array(
      'ajax' => TRUE,
      'title' => t('Send Invite'),
    );
    $output = ctools_modal_form_wrapper('m6connect_sendinvite_tom6_users_form', $form_state);
    if (!empty($form_state['ajax_commands'])) {
      $output = $form_state['ajax_commands'];
    }    
    print ajax_render($output);
    drupal_exit();
  }
  else {
    return drupal_get_form('m6connect_sendinvite_tom6_users_form');
  } 
}

function m6connect_sendinvite_tom6_users_form($form,&$form_state) {  
  $form['main-container']['invite_to_m6_company']= array(
    '#type' => 'textfield',
  '#title' => 'Company Name',
  '#required' => true,
  '#attributes' => array('class'=> array('form-control invite_to_m6_company')),
  //'#default_value' => isset($defaultValues['invite_to_m6'])?$defaultValues['invite_to_m6']:'',    
  '#prefix' => '<div class="clearfix form-item invite-m6">',  
  '#suffix' => '</div>',
  );    
  $form['main-container']['invite_to_m6']= array(
    '#type' => 'textfield',
  '#title' => 'E-mail',
  '#attributes' => array('class'=> array('form-control invite_to_m6'),'type'=> array('email')),
  //'#default_value' => isset($defaultValues['invite_to_m6'])?$defaultValues['invite_to_m6']:'',    
  '#prefix' => '<div class="clearfix form-item invite-m6">',  
  '#element_validate' => array('project_ecommitment_email_validate'),
  '#suffix' => '</div>',
  );      
  $form['actions']['submit'] = array(
    '#type' => 'submit',
  '#submit'=> array('sendinvite_m6_submit'),
  '#value' => 'OK',
  '#prefix' => '<div class="clearfix">', 
  '#attributes' => array('class'=> array('custom_submit_call_for_invite')), 
  );  
  $form['close'] = array(
        '#markup' => '&nbsp;&nbsp;' . l('<input type="button" class="btn btn primary form-submit" value="Cancel" />', 'javascript:void(0);', array('external' => TRUE, 'html' => TRUE, 'attributes' => array('class' => array('assign-bid-packages-popup-close'), 'onclick' => 'jQuery("span.popups-close").click();'))),        
    '#suffix' => '</div>',  
    );
  return $form; 
}

function sendinvite_m6_submit(&$form, &$form_state) {
  global $user; 
  $getEmail = $form_state['values']['invite_to_m6'];
  $getCompany = $form_state['values']['invite_to_m6_company'];
  if($getEmail != '') {
    $getEmail = $form_state['values']['invite_to_m6'];
    //==========================
    // Invite user by mail to M6
    $message = '<p>Welcome to M6</p>';
    $params = array(
      'subject' => 'M6 invite you for commitment',
    'body' => $message,
    'sender' => $user->mail,
    'language' => language_default(),
    'module' => 'm6connect_misc',
    'key' => 'commitment_mail___invite_2_m6_notify',
    'build' => TRUE,
    );
    drupal_mail($params['module'], $params['key'], $getEmail, $params['language'], $params);
  }
  if((isset($form_state['ajax']))?(($form_state['ajax']==1)?true:false):false) {      
    $getCompanyDetails = _get_comapny_details_by_og_email($getEmail);
  if(!empty($getCompanyDetails)) {
    $form_state['ajax_commands'][] = ajax_command_invoke("input.vendor", 'val',array($getCompanyDetails['title']));
    $form_state['ajax_commands'][] = ajax_command_html(".company-details-by-email", '<label>&nbsp;</label><img src="'.image_style_url('thumbnail', $getCompanyDetails['company_uri']).'"><strong>&nbsp;&nbsp;&nbsp;'.$getCompanyDetails['title'].'</strong>');
    $form_state['ajax_commands'][] = ajax_command_invoke("input.company_nid", 'val',array($getCompanyDetails['entity_id']));
    $form_state['ajax_commands'][] = ajax_command_invoke("input.outside_company", 'val',array('no'));
  }
  else {
      $form_state['ajax_commands'][] = ajax_command_invoke("input.vendor", 'val',array($getCompany));
    $form_state['ajax_commands'][] = ajax_command_html(".company-details-by-email", '<label>&nbsp;</label><strong>'.$getCompany.'</strong>');    
    $form_state['ajax_commands'][] = ajax_command_invoke("input.company_nid", 'val',array($getCompany));
    $form_state['ajax_commands'][] = ajax_command_invoke("input.outside_company", 'val',array('yes'));
  }
  $form_state['ajax_commands'][] = ctools_modal_command_dismiss();    
  }
  else {
    $form_state['redirect'] = 'program/commitments'; 
  }  
}

function m6connect_get_cc_commitment_callback($projectId = 0,$ajax=TRUE){
  if ($ajax) {
    ctools_include('ajax');
    ctools_include('modal');
    $form_state = array(
      'ajax' => TRUE,
      'title' => t('Commitment and Cost code for Etc'),
    'projectId' => $projectId,
    );
    $output = ctools_modal_form_wrapper('m6connect_get_cc_commitment_form', $form_state);
    if (!empty($form_state['ajax_commands'])) {
      $output = $form_state['ajax_commands'];
    }    
    print ajax_render($output);
    drupal_exit();
  }
  else {
    return drupal_get_form('m6connect_get_cc_commitment_form');
  } 
}

function m6connect_get_cc_commitment_form($form,&$form_state) {  
  drupal_add_js(drupal_get_path('module', 'm6connect_program') . '/js/m6connect_program.js');
  drupal_add_js(drupal_get_path('module', 'm6connect_program') . '/js/Prototype_Price_Format_0.1.js');
  
  if(isset($form_state['projectId'])) {
  // Get commitment list by project  
    $getCommitmentData = array('' => 'Select commitment');
    $query= db_select('field_data_field_commitment_number_calculat','cn'); 
    $query->join('field_data_field_project_reference','pr','pr.entity_id = cn.entity_id');
    $query->fields('pr', array('entity_id'));
    $query->fields('cn', array('field_commitment_number_calculat_value'));
    $query->condition('pr.field_project_reference_nid', $form_state['projectId'], '=');
    $query->condition('pr.bundle','project_commitement','=');
    $getCommitmentData = $query->execute()->fetchAllKeyed(0,1);  
    $commitArr = array('' => 'Select Commitment');
    foreach($getCommitmentData as $commID => $commVal) {
      $commitArr[$commID] = $commVal;
    }
  // Get cost code by project
  $query= db_select('node','n'); 
    $query->join('field_data_field_estimate_reference','er','er.entity_id = n.nid');
    $query->join('node','enode','enode.nid=er.field_estimate_reference_nid');
    $query->join('field_data_field_project_estimate_status','es','es.entity_id = enode.nid');
    $query->join('field_data_field_project_reference','pr','enode.nid=pr.entity_id');
    $query->leftjoin('field_data_field_est_cost_code','cc','cc.entity_id=n.nid');
    $query->fields('cc',array('field_est_cost_code_value'));
    $query->condition('es.field_project_estimate_status_value', 'approved', '=');
    $query->condition('pr.field_project_reference_nid', $form_state['projectId'], '=');
    $costCode = $query->execute()->fetchCol();  
    $ccArr = array('' => '-Select Cost Code-');
    foreach($costCode as $codeKey => $codeVal) {
      $ccArr[$codeVal] = $codeVal;  
    }
  }
  
  $form['main-container']['etc_commitment']= array(
    '#type'=>'select',
  '#title' => 'Commitment',
  '#options'=> $commitArr,
  '#validated' => 'true',
  '#empty_option' => '- Select Commitment -',
  '#attributes' => array('class'=> array('form-control etc_commitment')),
  //'#default_value' => isset($defaultValues['etc_commitment'])?$defaultValues['etc_commitment']:'',  
  '#prefix' => '<div class="clearfix form-item">',
  '#suffix' => '</div>',
  );  
  $form['main-container']['etc_cost_code']= array(
    '#type'=>'select',
  '#title' => 'Cost Code',
  '#options'=> $ccArr,
  '#empty_option' => '- Select Cost Code-',
  '#validated' => 'true',
  '#attributes' => array('class'=> array('form-control etc_cost_code')),
  '#required' => TRUE,
  //'#default_value' => isset($defaultValues['etc_cost_code'])?$defaultValues['etc_cost_code']:'',
  '#prefix' => '<div class="clearfix form-item">',
  '#suffix' => '</div></div>',
  );
  $form['actions']['submit'] = array(
    '#type' => 'submit',
  '#submit'=> array('get_cost_code_commitment_submit'),
  '#value' => 'OK',
  '#prefix' => '<div class="clearfix">', 
  '#attributes' => array('class'=> array('custom_submit_call_for_invite')), 
  );  
  $form['close'] = array(
        '#markup' => '&nbsp;&nbsp;' . l('<input type="button" class="btn btn primary form-submit" value="Cancel" />', 'javascript:void(0);', array('external' => TRUE, 'html' => TRUE, 'attributes' => array('class' => array('assign-bid-packages-popup-close'), 'onclick' => 'jQuery("span.popups-close").click();'))),        
    '#suffix' => '</div>',  
    );
  return $form; 
}

function get_cost_code_commitment_submit(&$form, &$form_state) {
    $values = $form_state['values'];
  if((isset($form_state['ajax']))?(($form_state['ajax']==1)?true:false):false) {      
    if(!empty($values['etc_commitment'])) {
    $getCommitData = node_load($values['etc_commitment']);      
    $getCostCode = $getCommitData->field_cost_code['und'][0]['value'];
      $form_state['ajax_commands'][] = ajax_command_invoke("input.etc_commitment_nid", 'val',array($values['etc_commitment']));
      $form_state['ajax_commands'][] = ajax_command_invoke("input.etc_commitment_cost_code", 'val',array($getCostCode));    
    }
      $form_state['ajax_commands'][] = ctools_modal_command_dismiss();    
    }
    else {
      $form_state['redirect'] = 'program/commitments'; 
    }
    drupal_set_message('Successfully saved');
}

function get_current_project_id($proId = 0,$estimateNid) {
  global $company;  
  /*if($proId == 0) {
    $getEstimateByCompany = _project_list_by_company($company->nid, 'project_management');    
    reset( $array );
    $firstProject = key( $getEstimateByCompany );
  $getEstimateList = _project_get_estimate_nodes_ny_project($company->nid, $proId);  
  } 
  else {
    $getEstimateList = _project_get_estimate_nodes_ny_project($company->nid, $proId);  
  }
  
  $content = '';
  if(!empty($getEstimateList)) {
    $content = '<div class="cost-code-button pull-right" id="cost-code-button-custom">'. l('<input type="button" value="+ New Budget Line Item" class="form-submit new-budget-cost-code" />', '/cost-code-details/'.$proId.'/nojs', array('html' => TRUE, 'external' => TRUE, 'attributes' => array('class' => array('ctools-modal-assign-dashboard-popup-style ctools-use-modal new-budget-cost-code-link', 'btn btn-primary ')))).'</div>';
  }
  else {
    $content = '<div class="cost-code-button pull-right margin-bottom-10 margin-top-10" id="cost-code-button-custom">'. l('<input type="button" value="+ New Budget Line Item" class="form-submit new-budget-cost-code-nodata" />', '/cost-code-details-nodata/nojs', array('html' => TRUE, 'external' => TRUE, 'attributes' => array('class' => array('nod-data-post-popup', 'btn btn-primary ')))).'</div>';
  }*/
  $content = l('+ New Budget Line Item', '/cost-code-details/'.$proId.'/'.$estimateNid.'/nojs', array('html' => TRUE, 'external' => TRUE, 'attributes' => array('class' => array('ctools-modal-assign-dashboard-popup-style ctools-use-modal new-budget-cost-code-link'))));
  return $content;
}

function get_project_loaction() {
  $currUser = user_load($user->uid);
  $user_groups = og_get_groups_by_user($currUser, 'node');  
  $query= db_select('node','n');
  $query->join('field_data_field_org_address','oa','oa.entity_id=n.nid');
  $query->fields('oa', array('field_org_address_thoroughfare', 'field_org_address_locality', 'field_org_address_administrative_area', 'field_org_address_country'));  
  $query->fields('n', array('nid'));
  $query->condition('n.nid', $user_groups, 'in');
  $query->condition('oa.field_org_address_thoroughfare', '', '!=');
  $query->condition('n.type','organization','=');
  $getLocation = $query->execute()->fetchAll();  
  if(!empty($getLocation)) {
    return $getLocation;
  }
  return $getLocation;
}

function get_costcode_option_callback($projectNode,$ajax=TRUE) {
  global $company;      
  // Check if project id or commitment id
  $getNodeDetail = node_load($projectNode);
  if($getNodeDetail->type == 'project_commitement') {
    // COST CODE APPROVED ONLY
    $costCodeArr = array(); 
    if(isset($getNodeDetail->field_commitment_ws_code['und']) && $getNodeDetail->field_commitment_ws_code['und'][0]['value'] != '') {
      foreach($getNodeDetail->field_commitment_ws_code['und'] as $wsKey => $wsVal) {        
      $costCodeArr[$getNodeDetail->field_commitment_ws_code['und'][$wsKey]['value']] = get_description_by_cost_code_mod($getNodeDetail->field_commitment_ws_code['und'][$wsKey]['value']);        
    }
    drupal_json_output($costCodeArr);
        drupal_exit(0);
    }
    else {
      drupal_json_output(0);
        drupal_exit(0);
    }
  /* if(isset($getNodeDetail->field_cost_code['und'])) {
    $costCode = $getNodeDetail->field_cost_code['und'][0]['value'];
    $getCcDes = db_select('node','n'); 
      $getCcDes->join('field_data_field_manager_cost_code','mcc','mcc.entity_id = n.nid'); 
        $getCcDes->join('field_data_field_cost_code_description','ccd','ccd.entity_id = n.nid');    
      $getCcDes->fields('ccd',array('field_cost_code_description_value'));
      $getCcDes->condition('mcc.field_manager_cost_code_value',$costCode, '=');
      $costCodeDes = $getCcDes->execute()->fetchField();    
    $costCodeArr[$costCode] = $costCode.'|'.$costCodeDes;
      drupal_json_output($costCodeArr);
        drupal_exit(0);
    }*/
  } 
  else {  
    // COST CODE APPROVED ONLY  
    $query= db_select('node','n'); 
    $query->join('field_data_field_estimate_reference','er','er.entity_id = n.nid');
    $query->join('node','enode','enode.nid=er.field_estimate_reference_nid');
    $query->join('field_data_field_project_estimate_status','es','es.entity_id = enode.nid');
    $query->join('field_data_field_project_reference','pr','enode.nid=pr.entity_id');
    $query->leftjoin('field_data_field_est_cost_code','cc','cc.entity_id=n.nid');
    $query->fields('cc',array('field_est_cost_code_value'));
    $query->condition('es.field_project_estimate_status_value', 'approved', '=');
    $query->condition('pr.field_project_reference_nid', $projectNode, '=');
  $query->orderBy('cc.field_est_cost_code_value', 'ASC');
    $costCode = $query->execute()->fetchCol();  
    foreach($costCode as $codeKey => $codeVal) {
    $getCcDes = db_select('node','n'); 
    $getCcDes->join('field_data_field_manager_cost_code','mcc','mcc.entity_id = n.nid'); 
      $getCcDes->join('field_data_field_cost_code_description','ccd','ccd.entity_id = n.nid');    
    $getCcDes->fields('ccd',array('field_cost_code_description_value'));
    $getCcDes->condition('mcc.field_manager_cost_code_value',$codeVal, '=');
    $costCodeDes = $getCcDes->execute()->fetchField();
      $ccArr[$codeVal] = $codeVal.'|'.$costCodeDes; 
    } 
    drupal_json_output($ccArr);
    drupal_exit(0);
  }
}

function get_project_availability_callback($projectNo,$type,$proNo,$ajax=TRUE) {
  global $company;
  if($projectNo != '') {  
    $query = db_select('node','n');    
    $query->join('og_membership','om','om.etid=n.nid AND om.entity_type=:entityType', array(':entityType'=>'node'));
    $query->fields('n', array('nid'));
  if($type == 'project') {   
    $query->join('field_data_field_project_mgmt_number','pn', 'pn.entity_id = n.nid');
      $query->condition('pn.field_project_mgmt_number_value', $projectNo,'=');
    $query->condition('om.gid', $company->nid, '=');
  }
  if($type == 'commitment') {   
    $query->join('field_data_field_commitment_number_calculat','cn', 'cn.entity_id = n.nid');
    $query->join('field_data_field_project_reference','pr', 'pr.entity_id = n.nid');    
      $query->condition('cn.field_commitment_number_calculat_value', $projectNo,'=');
    $query->condition('pr.field_project_reference_nid', $proNo,'=');
    $query->condition('om.gid', $company->nid, '=');
  }
  if($type == 'spending') {   
    $query->join('field_data_field_invoice_number_cal','inv', 'inv.entity_id = n.nid');
    $query->join('field_data_field_project_reference','pr', 'pr.entity_id = n.nid');    
      $query->condition('inv.field_invoice_number_cal_value', $projectNo,'=');
    $query->condition('pr.field_project_reference_nid', $proNo,'=');
    $query->condition('om.gid', $company->nid, '=');
  }
  if($type == 'etc') {   
    $query->join('field_data_field_etc_number_calc','en', 'en.entity_id = n.nid');
    $query->join('field_data_field_project_reference','pr', 'pr.entity_id = n.nid');    
      $query->condition('en.field_etc_number_calc_value', $projectNo,'=');
    $query->condition('pr.field_project_reference_nid', $proNo,'=');
    $query->condition('om.gid', $company->nid, '=');
  } 
  if($type == 'cost') {   
      $query->join('field_data_field_manager_cost_code','cc', 'cc.entity_id = n.nid');
     $query->condition('cc.field_manager_cost_code_value', $projectNo,'=');
    }    
    $resultAvailability = $query->execute()->fetchField();
  $status = array();
  if(!empty($resultAvailability)) {
    $status['access'] = 0;
    if($type == 'project') { $status['message'] = 'Project number already exists.'; }
    if($type == 'commitment') { $status['message'] = 'Commitment number already exists.'; }
    if($type == 'spending') { $status['message'] = 'Spending number already exists.'; }
    if($type == 'etc') { $status['message'] = 'ETC number already exists.'; }
    if($type == 'cost') { $status['message'] = 'Cost code already exists.'; }
    }
    else {
    $status['access'] = 1;  
      $status['message'] = 'Project number available.';
    }
  drupal_json_output($status);
  }      
  //drupal_json_output($status);
  //return $status;
  drupal_exit(0);
}

function update_spending_reco_callback($spendingId,$status,$ajax=TRUE) {
  global $company;
  if($spendingId != '') { 
    $spendingNode = node_load($spendingId); 
  $spendingNode->field_invoice_is_reconciled['und'][0]['value'] = $status==1?0:1;
  field_attach_update('node', $spendingNode);
  node_save($spendingNode);
  $resArr = array('status' => 'update');
  drupal_json_output($resArr);
  }      
  drupal_exit(0);
}

function update_image_remove_callback($fid,$nid,$ajax=TRUE) {
  global $company;
  if($fid != '') {  
    $getNodeData = node_load($nid);   
    if($getNodeData->type == 'project_spending') {
      if(isset($getNodeData->field_invoice_attechment['und'])) {
        foreach($getNodeData->field_invoice_attechment['und'] as $key => $val) {
          if($val['fid'] == $fid) {
            unset($getNodeData->field_invoice_attechment['und'][$key]);
          }   
        }
        reset($getNodeData->field_invoice_attechment['und']);
        node_save($getNodeData);
        $resArr = array('NodeId' => $nid,'status' => 'updated');
      }
    }
    if($getNodeData->type == 'project_commitement') {
      if(isset($getNodeData->field_commitment_attachment['und'])) {
        foreach($getNodeData->field_commitment_attachment['und'] as $key => $val) {
          if($val['fid'] == $fid) {
            unset($getNodeData->field_commitment_attachment['und'][$key]);
          }   
        }
        reset($getNodeData->field_commitment_attachment['und']);
        node_save($getNodeData);
        $resArr = array('NodeId' => $nid,'status' => 'updated');
      }
    }
    if($getNodeData->type == 'scm_requests') {
      if(isset($getNodeData->field_my_request_attachment['und'])) {
        foreach($getNodeData->field_my_request_attachment['und'] as $key => $val) {
          if($val['fid'] == $fid) {
            unset($getNodeData->field_my_request_attachment['und'][$key]);
          }   
        }
        reset($getNodeData->field_my_request_attachment['und']);
        node_save($getNodeData);
        $resArr = array('NodeId' => $nid,'status' => 'updated');
      }
    }

    
  }  
  else {
    $resArr = array('status' => 'notupdate');
  }    
  drupal_json_output($resArr);
  drupal_exit(0);
}

function get_commit_amount_callback($amount,$commitNo,$ajax=TRUE) {
  global $company;
  $query = db_select('node','n');    
  $query->join('og_membership','om','om.etid=n.nid AND om.entity_type=:entityType', array(':entityType'=>'node'));    
  $query->join('field_data_field_commitment_po_total','pt', 'pt.entity_id = n.nid');
  $query->fields('pt', array('field_commitment_po_total_value'));
  $query->condition('om.gid', $company->nid, '=');
  $query->condition('n.nid', $commitNo, '=');
  $resultAvailability = $query->execute()->fetchField();  
  $status = array();
  if(!empty($resultAvailability)) {
    $getCommitAmt = str_replace(',','',str_replace("$","",$resultAvailability));
    $getInvAmt = str_replace(',','',str_replace("$","",$amount));
    if($getInvAmt > $getCommitAmt) {
      $status['access'] = 0;
      $status['message'] = 'The invoice is over the commitment amount. Would you like to proceed?';
      drupal_json_output($status);
    }
  }  
  drupal_exit(0);
}

function get_project_title_availability_callback($projectNo,$type,$proNo,$ajax=TRUE) {
  global $company;
  if($projectNo != '') {  
    $query = db_select('node','n');    
    $query->join('og_membership','om','om.etid=n.nid AND om.entity_type=:entityType', array(':entityType'=>'node'));
    $query->fields('n', array('nid'));
    
  if($type == 'project') {      
      $query->condition('n.title', $projectNo,'=');
  } 
  if($type == 'scm-project') {  
    $query->leftJoin('field_data_field_m6_service_type','ser', 'ser.entity_id = n.nid');  
    $query->condition('n.title', $projectNo,'=');
    $query->condition('ser.field_m6_service_type_value', 'scm','=');
  }

  //field_m6_service_type
  if($type == 'etc') {   
    $query->join('field_data_field_project_reference','pr', 'pr.entity_id = n.nid');    
    $query->condition('n.title', $projectNo,'=');
    $query->condition('pr.field_project_reference_nid', $proNo,'=');
  } 
  if($type == 'budget') {
    $query->join('field_data_field_project_reference','pr', 'pr.entity_id = n.nid');    
    $query->condition('n.title', $projectNo,'=');
    $query->condition('pr.field_project_reference_nid', $proNo,'=');
  }
  $query->condition('om.gid', $company->nid, '=');
  $resultAvailability = $query->execute()->fetchField();
  $status = array();
  if(!empty($resultAvailability)) {
    $status['access'] = 0;
    if($type == 'scm-project') { $status['message'] = 'Project title already exists.'; }
    if($type == 'project') { $status['message'] = 'Project title already exists.'; }
    if($type == 'budget') { $status['message'] = 'Budget Name already exists.'; }
    if($type == 'etc') { $status['message'] = 'ETC title already exists.'; }      
  }
  else {
    $status['access'] = 1;  
    $status['message'] = 'Project number available.';
  }
  drupal_json_output($status);
  }      
  //drupal_json_output($status);
  //return $status;
  drupal_exit(0);
}

function get_vendor_by_commitment_callback($commitId) {
  $commitNodeDetail = node_load($commitId);
  $vendorData = array();
  if(isset($commitNodeDetail->field_vendor['und'])) {
    $vendorId = $commitNodeDetail->field_vendor['und'][0]['value'];
    if(is_numeric($vendorId)) {
      $vendorName = node_load($vendorId)->title;
      $vendorData[$vendorId] = $vendorName; 
    }
    else {
      $vendorData[$vendorId] = $vendorId; 
    } 
    drupal_json_output($vendorData);
    drupal_exit(0);
  }
}

function get_commitment_option_project_callback($projectNode,$ajax=TRUE) {
  global $company;      
  // Commitment List by Project
  //$proId = '15406';
  $getCommitmentData = array('' => 'Select commitment');
  $query= db_select('field_data_field_commitment_number_calculat','cn'); 
  $query->join('field_data_field_project_reference','pr','pr.entity_id = cn.entity_id');
  $query->join('field_data_field_vendor','fv', 'pr.entity_id = fv.entity_id');
  $query->fields('pr', array('entity_id'));
  $query->fields('cn', array('field_commitment_number_calculat_value'));
  $query->fields('fv', array('field_vendor_value'));
  $query->condition('pr.field_project_reference_nid', $projectNode, '=');
  $query->condition('pr.bundle','project_commitement','=');
  $getCommitmentData = $query->execute()->fetchAll();
  //$commitArr = array('' => 'Select Commitment');
  $commitArr = array();
  foreach($getCommitmentData as $commID => $commVal) {
    if($commVal->field_vendor_value != '') {  
      if(is_numeric($commVal->field_vendor_value)) {
        $vendorName = node_load($commVal->field_vendor_value)->title;
      } 
      else {
        $vendorName = $commVal->field_vendor_value;
      }
    }
    else {
      $vendorName = '';
    }
    $commitArr[$commVal->entity_id] = $vendorName!=''?$commVal->field_commitment_number_calculat_value.'|'.$vendorName:$commVal->field_commitment_number_calculat_value;
  }
  drupal_json_output($commitArr);
  drupal_exit(0);  
}

function get_commitment_option_by_type_project_callback($commitId,$ajax=TRUE) {
  global $company;      
  // Commitment List by Project
  //$proId = '15406';
  $getCommitmentData = array('' => 'Select commitment');
  $query= db_select('node','n');  
  $query->join('field_data_field_commitment_type','ct','ct.entity_id = n.nid');
  $query->fields('ct', array('field_commitment_type_value'));
  $query->condition('ct.entity_id', $commitId, '=');
  $query->condition('n.type','project_commitement','=');  
  $getCommitmentData = $query->execute()->fetchField();  
  drupal_json_output($getCommitmentData);
  drupal_exit(0);  
}

function _generating_button_for_new_po_item($proId = 0) {
  global $company;    
  $content = '';  
  if(!empty($proId) && $proId != 0) {
    $getCommitmentNode = node_load($proId);
    if($getCommitmentNode->type == 'project_commitement') {  
      $content .= '<div class="cost-code-button pull-right" id="po-item-button-custom">'. l('<input type="button" value="+ Add New" class="form-submit new-po-item btn btn-primary " />', '/po-items-details/'.$proId.'/nojs', array('html' => TRUE, 'external' => TRUE, 'attributes' => array('class' => array('ctools-modal-assign-dashboard-popup-style ctools-use-modal new-po-item-link')))).'</div>';
    }
    else {
      $content .= '<div class="cost-code-button pull-right" id="po-item-button-custom">'. l('<input type="button" value="+ Add New" class="form-submit new-po-item-nodata btn btn-primary " />', 'nodata', array('html' => TRUE, 'external' => TRUE, 'attributes' => array('class' => array('new-po-item-link-nodata')))).'</div>';   
    }
  }  
  return $content;
}

function _generating_cost_commitment_link($proId = 0) {
  $content ='<div class="form-inline" id="custom_cost_code_commitment_link" style="display:none;"><div class="form-group"><a href="/get-commitment-and-costcode/'.$proId.'/nojs" class="ctools-use-modal ctools-modal-assign-dashboard-popup-style get_cc_commitment_custom"> + Invite to M6</a></div></div>';
  return $content;
}

function _get_approved_cost_code_by_project() {
  // Get cost code by project
  $query= db_select('node','n'); 
  $query->join('field_data_field_estimate_reference','er','er.entity_id = n.nid');
  $query->join('node','enode','enode.nid=er.field_estimate_reference_nid');
  $query->join('field_data_field_project_estimate_status','es','es.entity_id = enode.nid');
  $query->leftjoin('field_data_field_est_cost_code','cc','cc.entity_id=n.nid');
  $query->fields('cc',array('field_est_cost_code_value'));
  $query->condition('es.field_project_estimate_status_value', 'approved', '=');
  $query->orderBy('cc.field_est_cost_code_value', 'ASC');
  $costCode = $query->execute()->fetchCol();  
  $ccArr = array('0' => '-Select Cost Code-');
  foreach($costCode as $codeKey => $codeVal) {
    $getCcDes = db_select('node','n'); 
    $getCcDes->join('field_data_field_manager_cost_code','mcc','mcc.entity_id = n.nid'); 
    $getCcDes->join('field_data_field_cost_code_description','ccd','ccd.entity_id = n.nid');    
    $getCcDes->fields('ccd',array('field_cost_code_description_value'));
    $getCcDes->condition('mcc.field_manager_cost_code_value',$codeVal, '=');
    $costCodeDes = $getCcDes->execute()->fetchField();      
    $ccArr[$codeVal] = $codeVal.'|'.$costCodeDes; 
  } 
  return $ccArr;
}

function node_delete_custom_callback($ajax, $nodeId = 0) {
  if ($ajax) {
    ctools_include('ajax');
    ctools_include('modal');
    $form_state = array(
      'ajax' => TRUE,
      'node_id' => $nodeId,
    );
	$output = ctools_modal_form_wrapper('node_delete_form', $form_state);
    if (!empty($form_state['ajax_commands'])) {
      $output = $form_state['ajax_commands'];
    }
    print ajax_render($output);
    drupal_exit();
  }
  return drupal_get_form('node_delete_form', $nodeId);
}

function node_delete_form($form, &$form_state, $nodeId = 0) {
  if(!$nodeId) {
    $nodeId = $nodeId;
  }
  $form['node_action_title'] = array(
    '#type' => 'markup',
    '#title' => t('status'),
    '#markup' => '<div class="group-action-status"><p>Are you sure you want to delete this record?</p></div>',  
  );
  $form['node_id'] = array(
    '#type' => 'hidden',
    '#value' => $nodeId, 
  );
  $form['submit_action_dgroup'] = array(
    '#type' => 'submit',
    '#value' => t('Confirm')
  );
  $form['submit_action_cancel']['close'] = array(
    '#markup' => '&nbsp;&nbsp;' . l('<input type="button" class="btn btn primary form-submit" value="Cancel" />', 'javascript:void(0);', array('external' => TRUE, 'html' => TRUE, 'attributes' => array('class' => array('group-delete-popup-close'), 'onclick' => 'jQuery("span.popups-close").click();'))),
    '#weight' => 10,
  );
  return $form;
}

// function for delete group
function node_delete_form_submit($form, &$form_state) { 
  global $company;
  $form_values = $form_state['values'];
  $nodeId = $form_state['node_id'];
  $nodeDetail = node_load($nodeId);
  if($nodeDetail->type == 'estimate_detail') {
    $url = '/program/estimates';
  }
  else if($nodeDetail->type == 'project_estimate') {
    $url = '/program/estimates';
  }
  else if($nodeDetail->type == 'project_commitement') {
    $url = '/program/commitments';
  }
  else if($nodeDetail->type == 'project_etc') {
    $url = '/program/etc';
  }
  else if($nodeDetail->type == 'project_schedule') {
    $url = '/program/schedule';
  }
  else if($nodeDetail->type == 'project_spending') {
    $url = '/program/spending';
  }
  else if($nodeDetail->type == 'project_cost_code') {
    $url = '/program/add-cost-code';
  }
  else if($nodeDetail->type == 'project_management') {
    $url = '/scm/my-project';
  }
  else if($nodeDetail->type == 'contract') {
    $url = '/insurance-certificates/contracts';
  }
  else if($nodeDetail->type == 'program_assets') {
    $url = '/program/assets';
  }
  else if($nodeDetail->type == 'scm_requests') {
    $url = '/scm/my-request';
  }
  else if($nodeDetail->type == 'scm_setting_location_region') {
    $url = '/scm/settings/locations-region';
  }
  else if($nodeDetail->type == 'scm_setting_location_entity') {
    $url = '/scm/settings/locations-entity';
  }
  else if($nodeDetail->type == 'scm_setting_location_buildings') {
    $url = '/scm/settings/locations-buildings';
  }
  else if($nodeDetail->type == 'scm_add_items') {
    $url = '/scm/add-items';
  }
  if(!empty($nodeId)) {
    // delete node
    $nodeData = node_load($nodeId);
    // node_delete($nodeId);
    if($nodeData->type == 'project_commitement') {
      if($nodeData->field_commitment_po_final_total['und'][0]['value'] == '') {
        $amount = '$0.00';
      }
      else {
        $amount = '$'.number_format($nodeData->field_commitment_po_final_total['und'][0]['value'],2);
      } 
      drupal_set_message('Commitment '.$nodeData->field_commitment_number_calculat['und'][0]['value'].' in the amount of '.$amount.' has been deleted.', 'status');
    }
    else if($nodeData->type == 'project_spending') {
      $nodeDataStatus = $nodeData->field_has_asset['und'][0]['value'];
      // Deleting all the assets from this node and asset nodes.
      clear_asset_data_callback($nodeData->nid, NULL, TRUE);
    //   if($nodeDataStatus == 'TRUE') {
    //     // Check for split or spread
    //     if($nodeData->field_asset_type['und'][0]['value'] == 'Split') {
    //       foreach($nodeData->field_asset_category_split['und'] as $delta => $assetVal) {
    //         $getAssetCost = $nodeData->field_asset_cost['und'][$delta]['value']!= ''?$nodeData->field_asset_cost['und'][$delta]['value']:0;
    //       $getAssetInstall = $nodeData->field_asset_installation['und'][$delta]['value']!= ''?$nodeData->field_asset_installation['und'][$delta]['value']:0;
    //   $getAssetOutside = $nodeData->field_asset_outside_consultant['und'][$delta]['value']!=''?$nodeData->field_asset_outside_consultant['und'][$delta]['value']:0;
    //   $getAssetInteral = $nodeData->field_asset_internal_charge['und'][$delta]['value']!=''?$nodeData->field_asset_internal_charge['und'][$delta]['value']:0;
    //   $getAssetNode = $nodeData->field_asset_description_spending['und'][$delta]['value'];
    //   $getAssetId = explode('-', $getAssetNode);
    //   $getAssetId = $getAssetId[0];
    //   $assetNode = node_load($getAssetId);
    //   $asseCost = $assetNode->field_asset_cost['und'][0]['value']!=''?$assetNode->field_asset_cost['und'][0]['value']:0;
    //   $asseInstall = $assetNode->field_asset_installation['und'][0]['value']!=''?$assetNode->field_asset_installation['und'][0]['value']:0;
    //   $asseOutside = $assetNode->field_asset_outside_consultant['und'][0]['value']!=''?$assetNode->field_asset_outside_consultant['und'][0]['value']:0;
    //   $asseInternal = $assetNode->field_asset_internal_charge['und'][0]['value']!=''?$assetNode->field_asset_internal_charge['und'][0]['value']:0;
      
    //   $current_total = $getAssetCost + $getAssetInstall + $getAssetOutside + $getAssetInteral;
    //   $current_asset_value = $assetNode->field_current_asset_value['und'][0]['value'];
    //   $new_asset_value_asset = $assetNode->field_new_asset_value['und'][0]['value'];

    //   $new_current_asset_value = FALSE;
    //   $new_new_asset_value = FALSE;

    //   if ($current_asset_value > $current_total) {
    //     $new_current_asset_value = $current_asset_value - $current_total;
    //   }
    //   if ($new_asset_value_asset > $current_total) {
    //     $new_new_asset_value = $new_asset_value_asset - $current_total;
    //   }

    //   //Updating all split amount
    //   $assetNode->field_asset_cost['und'][0]['value'] = ($asseCost - $getAssetCost);
    //   $assetNode->field_asset_installation['und'][0]['value'] = ($asseInstall - $getAssetInstall);
    //   $assetNode->field_asset_outside_consultant['und'][0]['value'] = ($asseOutside - $getAssetOutside);
    //   $assetNode->field_asset_internal_charge['und'][0]['value'] = ($asseInternal - $getAssetInteral);

    //   if ($new_current_asset_value && $new_current_asset_value > 0) {
    //     $assetNode->field_current_asset_value['und'][0]['value'] = $new_current_asset_value;
    //   }
    //   if ($new_asset_value_asset && $new_asset_value_asset > 0) {
    //     $assetNode->field_new_asset_value['und'][0]['value'] = $new_asset_value_asset;
    //   }

    //   field_attach_presave('node', $assetNode);
    //   field_attach_update('node', $assetNode);
    //   entity_get_controller('node')->resetCache(array($assetNode->nid));
    //       }
    //   }
    // }
      drupal_set_message('Invoice '.$nodeData->field_invoice_number_cal['und'][0]['value'].' in the amount of $'.number_format($nodeData->field_invoice_amount['und'][0]['value'],2).' has been deleted.', 'status');
  }
  else if($nodeData->type == 'program_assets') {
    $query = db_select('node','n');
    $query->fields('n', array('nid'));
    $query->join('field_data_field_asset_description_spending','ad','n.nid=ad.entity_id');
    $query->condition('ad.field_asset_description_spending_value', '%' . db_like($nodeData->nid) . '%', 'LIKE') ;
    $query->condition('n.type','project_spending','=');
    $getSpendingNodes = $query->execute()->fetchCol();
    if(!empty($getSpendingNodes)) {
      foreach($getSpendingNodes as $delta => $spendId) {
        $spendNode = node_load($spendId);    
        $assetCount = count($spendNode->field_asset_description_spending);
        foreach($spendNode->field_asset_description_spending['und'] as $spendDelta => $assetIds) {
          $calcAsset = explode('-',$assetIds['value']);
          if ($calcAsset[0] == $nodeData->nid) {      
            unset($spendNode->field_asset_description_spending['und'][$spendDelta]);
          }  
        }
        if($assetCount == 1){
          unset($spendNode->field_asset_category_split['und']);
          unset($spendNode->field_asset_category_spread['und']);
          unset($spendNode->field_asset_cost['und']);
          unset($spendNode->field_asset_installation['und']);
          unset($spendNode->field_asset_outside_consultant['und']);
          unset($spendNode->field_asset_internal_charge['und']);
          unset($spendNode->field_asset_reference['und']);
          unset($spendNode->field_asset_description_spending['und']);   
          unset($spendNode->field_has_asset['und']);
          unset($spendNode->field_asset_type['und']);
          unset($spendNode->field_spread_auto['und']);
        }
        field_attach_update('node', $spendNode);
        node_save($spendNode);
      }
    }
	// Clearing asset entries from table also.
    _clear_assets_from_table(array($nodeData->nid));
  }
  else {
    drupal_set_message('Record has been deleted successfully!');
  }
  if ((isset($form_state['ajax'])) ? (($form_state['ajax'] == 1) ? true : false) : false) {
    $form_state['ajax_commands'][] = ctools_modal_command_dismiss();
    $form_state['ajax_commands'][] = ctools_ajax_command_redirect($url);
  }
  // Deleting the node itself
  node_delete($nodeId);
  }
}

function custom_project_manager_comment_delete($tabel_id,$projectId,$ajax = NULL) {
  if ($ajax) {
    ctools_include('ajax');
    ctools_include('modal');
    $form_state = array(
      'ajax' => TRUE,
      'tabel_id' => $tabel_id,
      'project_id'=>$projectId,
    );
    $output = ctools_modal_form_wrapper('custom_project_manager_comment_delete_box_form', $form_state);
    if (!empty($form_state['ajax_commands'])) {
      $output = $form_state['ajax_commands'];
    }
    print ajax_render($output);
    drupal_exit();
  }
  return drupal_get_form('custom_project_manager_comment_delete_box_form', $tabel_id,$projectId);
}

function custom_project_manager_comment_delete_box_form($form, &$form_state) {
  if(!$tabel_id) {
    $tabel_id = $form_state['tabel_id'];
    $projectId = $form_state['project_id'];
  }
  $form['manager_comment_delete_title'] = array(
    '#type' => 'markup',
    '#title' => t('status'),
    '#markup' => '<div class="group-action-status"><p>Are you sure you want to delete this record?</p></div>',  
  );
  $form['tabel_id'] = array(
    '#type' => 'hidden',
    '#value' => $tabel_id, 
  );
  $form['submit_manager_comment_delete'] = array(
    '#type' => 'submit',
    '#value' => t('Confirm')
  );
  $form['submit_manager_comment_delete_cancel']['close'] = array(
    '#markup' => '&nbsp;&nbsp;' . l('<input type="button" class="btn btn primary form-submit" value="Cancel" />', 'javascript:void(0);', array('external' => TRUE, 'html' => TRUE, 'attributes' => array('class' => array('group-delete-popup-close'), 'onclick' => 'jQuery("span.popups-close").click();'))),
    '#weight' => 10,
  );
  return $form;
}

function custom_project_manager_comment_delete_box_form_submit($form, &$form_state) { 
  global $company;
  $form_values = $form_state['values'];
  $tabel_id = $form_state['tabel_id'];
  $projectId = $form_state['project_id'];
  if(!empty($tabel_id)) { 
    // delete node
    if(db_table_exists('m6connect_project_manager_comment')){
      db_delete('m6connect_project_manager_comment')               
      ->condition('id',$tabel_id, '=')
      ->execute();
    }
    drupal_set_message('Record deleted successfully', 'status');
    if ((isset($form_state['ajax'])) ? (($form_state['ajax'] == 1) ? true : false) : false) {
      $form_state['ajax_commands'][] = ctools_modal_command_dismiss();      
      $form_state['ajax_commands'][] = ajax_command_html("#project_manager_message_container", get_comment_message_table_data($projectId,$company->nid));
    //$form_state['ajax_commands'][] =ctools_ajax_command_redirect('/alerts');
    }
  }
}

function custom_project_manager_comment_edit($tabel_id,$projectId,$ajax = NULL) {
  if ($ajax) {
    ctools_include('ajax');
    ctools_include('modal');
      $form_state = array(
      'ajax' => TRUE,
      'tabel_id' => $tabel_id,
      'project_id' => $projectId,
      );
    $output = ctools_modal_form_wrapper('custom_project_manager_comment_edit_box_form', $form_state);
  if (!empty($form_state['ajax_commands'])) {
    $output = $form_state['ajax_commands'];
  }
    print ajax_render($output);
    drupal_exit();
  }
  return drupal_get_form('custom_project_manager_comment_edit_box_form', $tabel_id,$projectId);
}

function custom_project_manager_comment_edit_box_form($form, &$form_state) {
  global $company;
  if(!$tabel_id) {
    $tabel_id = $form_state['tabel_id'];
    $projectId = $form_state['project_id'];
  }
  
  $query = db_select('m6connect_project_manager_comment', 'pmc');
  $query->fields('pmc', array('message'));
  $query->condition('pmc.id', $tabel_id, '=');  
  $message = $query->execute()->fetchField();
  
  $form['manager_comment_edit'] = array(
    '#type' => 'textfield', 
    '#title' => t('Comment'),
    '#default_value' => $message, 
  );  
  $form['submit_manager_comment_edit'] = array(
    '#type' => 'submit',
    '#value' => t('Confirm'),
    '#submit' => array('project_manager_custom_submit'),
  );

  $form['submit_manager_comment_edit_cancel']['close'] = array(
    '#markup' => '&nbsp;&nbsp;' . l('<input type="button" class="btn btn primary form-submit" value="Cancel" />', 'javascript:void(0);', array('external' => TRUE, 'html' => TRUE, 'attributes' => array('class' => array('group-delete-popup-close'), 'onclick' => 'jQuery("span.popups-close").click();'))),
    '#weight' => 10,
  );


  return $form;
}

function project_manager_custom_submit(&$form, &$form_state) {  
  global $company;
  $form_values = $form_state['values'];
  $tabel_id = $form_state['tabel_id'];
  $projectId = $form_state['project_id'];
  $manager_comment_edit = $form_values['manager_comment_edit'];
  
  $num_updated = db_update('m6connect_project_manager_comment')
    ->fields(array(
    'message' => $manager_comment_edit,
    'timestamp' => time(),
    ))
    ->condition('id',$tabel_id, '=')
    ->execute();

  if ((isset($form_state['ajax'])) ? (($form_state['ajax'] == 1) ? true : false) : false) {
      $form_state['ajax_commands'][] = ctools_modal_command_dismiss();      
      $form_state['ajax_commands'][] = ajax_command_html("#project_manager_message_container", get_comment_message_table_data($projectId,$company->nid));
    //$form_state['ajax_commands'][] =ctools_ajax_command_redirect('/alerts');
  }
 
}
// estimates subtab
// estimates subtab - capital request

function program_project_estimates_content_capital_request($form, &$form_state) {
  global $company;      
  $elements = array();  
  $elements['estimates_form']= array(
    '#markup' => drupal_render(drupal_get_form('program_modify_estimates_capital_request_form')),
  '#prefix' => '<div class="clearfix margin-bottom-10">',
  '#suffix' => '</div>',
  ); 
  return $elements;
}

function program_modify_estimates_capital_request_form($form,&$form_state){
  global $user;
  global $company;    
  $getEstimateByCompany = _project_list_by_company($company->nid, 'project_management');

  $getEstNodes = _project_list_by_company($company->nid, 'project_estimate');
    if(empty($form_state['est_project_trigger_option'])){
    $form_state['est_project_trigger_option'] = array(); //$getEstNodes;
  }
  drupal_add_js(drupal_get_path('module', 'm6connect_program') . '/js/m6connect_program.js');
  drupal_add_js(drupal_get_path('module', 'm6connect_program') . '/js/Prototype_Price_Format_0.1.js');  
  $form['#attached']['js'][] = array(
    'data'=>drupal_get_path('module', 'm6connect_routing') . '/js/routing_type_slip_form.js',
  'type'=>'file'
  );
  $form['#attributes']['class'] = array('program_modify_estimates_capital_request_form');
 /* $form['prgram-project-page-title'] = array(
  '#markup' => '<h1>Estimates</h1>',
  '#prefix' => '<div class="clearfix">',
  '#suffix' => '</div>',
  );*/  
  $form['select-estimate'] = array(
  '#type'=>'select',
  '#title'=> 'Select Project',
  '#options' => $getEstimateByCompany,
  '#default_value' => isset($_GET['pnid'])?check_plain($_GET['pnid']):'', 
  '#attributes' => array('class'=> array('form-control project-program-sel')),
  '#ajax' => array(
    'callback'=> 'change_program_estimate_subtab_callback',
   // 'wrapper' => 'project_estimatesub_main_container',
    'effect' => 'fade',
  ),
  '#prefix' => '<div class="clearfix"><div class="pull-left form-inline">',
  '#suffix' => '</div><div class="add-new-budget-btn pull-right" id="add-budget-button-custom">'. l('<input type="button" value="Create New Budget" class="form-submit new-record-cus-btn" />', '/program/estimates', array('html' => TRUE, 'external' => TRUE, 'attributes' => array('class' => array('new-budget-link')))).'</div></div>',
  );
  $form['estimate-nodata-dialog']= array(
  '#markup' => '',
  '#prefix' => '<div id="estimate-approve-nodata-dialog">',
  '#suffix' => '</div>',
  );  
  $form['prgram-project-menu-items'] = array(
    '#markup' => program_project_menu_links_content(),
  '#prefix' => '<div class="clearfix">',
  '#suffix' => '</div>',
  );
  //estimate subtab
  $form['prgram-project-menu-items-estimate-subtab'] = array(
    '#markup' => program_project_estimate_subtab(),
  '#prefix' => '<div class="clearfix">',
  '#suffix' => '</div>',
  );
  $form_state['storage_project_estimate'] = array();
  if(isset($form_state['values'],$form_state['input'],$form_state['triggering_element'],$form_state['triggering_element']['#type'],$form_state['triggering_element']['#name']) && $form_state['triggering_element']['#type']=='select' && $form_state['triggering_element']['#name']=='subchoose-estimate'){
  $triggeringElement = $form_state['triggering_element'];
  if($triggeringElement['#value'] != 0 && !empty($triggeringElement['#value'])) {   
    $estimateNode = node_load($triggeringElement['#value']);    
    $form_state['storage_project_estimate'] = array(
      'estimate_name' => $estimateNode->title,
      'estimate_status' => isset($estimateNode->field_project_estimate_status['und'])?$estimateNode->field_project_estimate_status['und'][0]['value']:'',
      'request_date' => isset($estimateNode->field_project_est_request_date['und'])?$estimateNode->field_project_est_request_date['und'][0]['value']:'',
    'agree_date' => isset($estimateNode->field_project_est_agree_to_date['und'])?$estimateNode->field_project_est_agree_to_date['und'][0]['value']:'',
    'planed_completion_date' => isset($estimateNode->field_planned_completion_date['und'])?$estimateNode->field_planned_completion_date['und'][0]['value']:'',
    'submit_date' => isset($estimateNode->field_project_est_submit_date['und'])?$estimateNode->field_project_est_submit_date['und'][0]['value']:'',
    'approval_date' => isset($estimateNode->field_project_est_approval_date['und'])?$estimateNode->field_project_est_approval_date['und'][0]['value']:'',
    'estimate_amount' => isset($estimateNode->field_project_estimate_amount['und'])?$estimateNode->field_project_estimate_amount['und'][0]['value']:'',
    'installation_type' => isset($estimateNode->field_project_installation_type['und'])?$estimateNode->field_project_installation_type['und'][0]['value']:'',
    'spend_start_date' => isset($estimateNode->field_project_spend_start_date['und'])?$estimateNode->field_project_spend_start_date['und'][0]['value']:'',
    'spend_end_date' => isset($estimateNode->field_project_spend_end_date['und'])?$estimateNode->field_project_spend_end_date['und'][0]['value']:'',
    'estimate_set_date' => isset($estimateNode->field_project_estimate_set_date['und'])?$estimateNode->field_project_estimate_set_date['und'][0]['value']:'',
    'plan_budget' => isset($estimateNode->field_plan_budget['und'])?$estimateNode->field_plan_budget['und'][0]['value']:'',
    'capital_contingency' => isset($estimateNode->field_capital_contingency['und'])?$estimateNode->field_capital_contingency['und'][0]['value']:'10',
    'estimate_approver' => isset($estimateNode->field_estimate_approver['und'])?$estimateNode->field_estimate_approver['und'][0]['value']:'',
    'comment' => isset($estimateNode->body['und'])?$estimateNode->body['und'][0]['value']:'',
    );    
    }    
  }else if(isset($form_state['values'],$form_state['input'],$form_state['triggering_element'],$form_state['triggering_element']['#type'],$form_state['triggering_element']['#name']) && $form_state['triggering_element']['#type']=='select' && $form_state['triggering_element']['#name']=='select-estimate'){
     $triggeringElement = $form_state['triggering_element'];
     if($triggeringElement['#value'] != 0 && !empty($triggeringElement['#value'])) {
       $estimateOptions = get_estimate_nodes_by_projectid($triggeringElement['#value']);
       //drup_msg($estimateOptions);
       $form_state['est_project_trigger_option'] = $estimateOptions;
     }
  }
  
  //drup_msg($form_state['est_project_trigger_option']);
  
  
  $form['main-container']= array(
  '#type' => 'container',
  '#attributes' => array('class'=>array('row')), 
  '#prefix' => '<div class="clearfix"><div id="project_estimatesub_main_container" class="project-detail">',
  '#process' => array('project_estimate_capital_request_main_container_process'),
  '#suffix' => '</div></div>',  
  );  
  
  $form['estimate-dialog']= array(
  '#markup' => '',
  '#prefix' => '<div id="estimate-approve-change-dialog">',
  '#suffix' => '</div>',
  );    
  $form['actions']['submit'] = array(
  '#type' => 'submit',
  '#name' => 'main_call',
  '#submit'=> array('project_estimate_capital_request_submit'),
  '#attributes' => array('class'=>array('main-estimate-submit-call')), 
  '#value' => 'Save',
  /*'#prefix' => '<div style="visibility:hidden;height:0px;width:0px;">', 
  '#suffix' => '</div>', */
  );      
  return $form; 
}

function project_estimate_capital_request_main_container_process($element, &$form_state) {
  global $user;
  global $company;    
  $getEstimateByCompany = _project_list_by_company($company->nid, 'project_management');
  $getEstNodes = _project_list_by_company($company->nid, 'project_estimate');
  drupal_add_js(drupal_get_path('module', 'm6connect_program') . '/js/m6connect_program.js');  
  drupal_add_js(drupal_get_path('module', 'm6connect_program') . '/js/Prototype_Price_Format_0.1.js');
  
  $defaultValues = $form_state['storage_project_estimate'];     
  $element['main-container']['left-container']= array(
  '#type' => 'container',
  '#attributes' => array('class'=>array('col-md-6','col-sm-6','col-xs-12','project-details-left')),
  '#weight' => 1,
  );  
  $element['main-container']['right-container']= array(
  '#type' => 'container',
  '#attributes' => array('class'=>array('col-md-6','col-sm-6','col-xs-12','project-details-right')),
  '#weight' => 2,
  );   
  /*$element['main-container']['full-container']= array(
    '#type' => 'container',
  '#attributes' => array('class'=>array('col-md-12','col-sm-12','col-xs-12','project-details-full','margin-bottom-10')),
  '#weight' => 3,
  );*/
  $element['project_est_ref_nid']= array(
  '#type'=>'hidden',
  '#title_display' => 'invisible',
  '#attributes' => array('class'=> array('form-control project_est_ref_nid')),  
  );   
  $element['approve-status-drop'] = array(
  '#type'=>'select',
  '#options' => array('ok' => 'OK', 'cancel' => 'Cancel'),
  '#prefix' => '<div style="display:none">',
  '#suffix' => '</div>',
  );  
  $element['approve_status_previous_approved']= array(
  '#type'=>'hidden',
  '#title_display' => 'invisible',
  '#attributes' => array('class'=> array('form-control approve_status_previous_approved')), 
  );   
  /*$element['main-container']['left-container']['estimate_name']= array(
  '#type'=>'textfield',
  '#title' => 'Estimate Name',
  '#attributes' => array('class'=> array('form-control estimate_name')),
  '#required' => TRUE,
  '#default_value' => isset($defaultValues['estimate_name'])?$defaultValues['estimate_name']:'',
  '#prefix' => '<div class="project-details-border"><div class="form-item clearfix">',
  '#suffix' => '</div>',
  );*/
  krsort($form_state['est_project_trigger_option']);
  $element['main-container']['left-container']['subchoose-estimate'] = array(
  '#type'=>'select',
  '#title'=> 'Select Budget',
  //'#options' => $getEstNodes, 
  '#options' => $form_state['est_project_trigger_option'],
  '#attributes' => array('class'=> array('form-control project-program-sel-est-details')),
  '#ajax' => array(
    'callback'=> 'change_program_estimate_subtab_callback',
    'wrapper' => 'project_estimatesub_main_container',
    'effect' => 'fade',
  ),
  //'#empty_option' => '',
  '#prefix' => '<div class="project-details-border"><div class="form-item clearfix">',
  '#suffix' => '</div>',
  );    
    $element['main-container']['left-container']['estimate_capital_executive_summary']= array(
  '#type'=>'textarea',
  '#title' => 'Executive Summary',
  '#attributes' => array('class'=> array('form-control estimate_capital_executive_summary')),
  //'#required' => TRUE,
  '#default_value' => isset($defaultValues['estimate_capital_executive_summary'])?$defaultValues['estimate_capital_executive_summary']:'',
  '#prefix' => '<div class="form-item clearfix">',
  '#suffix' => '</div>',
  );
  $element['main-container']['left-container']['estimate_capital_background']= array(
  '#type'=>'textarea',
  '#title' => 'Background',
  '#attributes' => array('class'=> array('form-control estimate_capital_background')),
  //'#required' => TRUE,
  '#default_value' => isset($defaultValues['estimate_capital_background'])?$defaultValues['estimate_capital_background']:'',
  '#prefix' => '<div class="form-item clearfix">',
  '#suffix' => '</div>',
  );
  $element['main-container']['left-container']['estimate_capital_justification']= array(
  '#type'=>'textarea',
  '#title' => 'Justification',
  '#attributes' => array('class'=> array('form-control estimate_capital_justification')),
  //'#required' => TRUE,
  '#default_value' => isset($defaultValues['estimate_capital_justification'])?$defaultValues['estimate_capital_justification']:'',
  '#prefix' => '<div class="form-item clearfix">',
  '#suffix' => '</div>',
  );
  $element['main-container']['left-container']['estimate_capital_alternatives']= array(
  '#type'=>'textarea',
  '#title' => 'Alternatives',
  '#attributes' => array('class'=> array('form-control estimate_capital_alternatives')),
  //'#required' => TRUE,
  '#default_value' => isset($defaultValues['estimate_capital_alternatives'])?$defaultValues['estimate_capital_alternatives']:'',
  '#prefix' => '<div class="form-item clearfix">',
  '#suffix' => '</div></div>',
  );
  $element['main-container']['right-container']['estimate_capital_project_management']= array(
  '#type'=>'textarea',
  '#title' => 'Project Management',
  '#attributes' => array('class'=> array('form-control estimate_capital_project_management')),
  //'#required' => TRUE,
  '#default_value' => isset($defaultValues['estimate_capital_project_management'])?$defaultValues['estimate_capital_project_management']:'',
  '#prefix' => '<div class="form-item clearfix">',
  '#suffix' => '</div>',
  );
  $element['main-container']['right-container']['estimate_capital_cpa_cost']= array(
  '#type'=>'textarea',
  '#title' => 'CPA Cost',
  '#attributes' => array('class'=> array('form-control estimate_capital_cpa_cost')),
  //'#required' => TRUE,
  '#default_value' => isset($defaultValues['estimate_capital_cpa_cost'])?$defaultValues['estimate_capital_cpa_cost']:'',
  '#prefix' => '<div class="form-item clearfix">',
  '#suffix' => '</div>',
  );
  $element['main-container']['right-container']['estimate_capital_committee_approvals']= array(
  '#type'=>'textarea',
  '#title' => 'Committee Approvals',
  '#attributes' => array('class'=> array('form-control estimate_capital_committee_approvals')),
  //'#required' => TRUE,
  '#default_value' => isset($defaultValues['estimate_capital_committee_approvals'])?$defaultValues['estimate_capital_committee_approvals']:'',
  '#prefix' => '<div class="form-item clearfix">',
  '#suffix' => '</div>',
  );
  $element['main-container']['right-container']['estimate_capital_attachment'] = array(
  '#name' => 'files[' . implode('_', $element['#parents']) . ']',
  '#type' => 'file',
  '#title' => t('Choose a file'),
  '#title_display' => 'invisible',
  //'#size' => 22,
  //'#theme_wrappers' => array(),
  //'#weight' => -10,
  '#prefix' => '<div class="form-item clearfix">',
  '#suffix' => '</div></div>',
  );
 
  
  
  return $element;
}



// estimates subtab - estimate schedule
function program_project_estimates_content_estimate_schedule($form, &$form_state) {
  global $company;    
  $getEstimateByCompany = _project_list_by_company($company->nid, 'project_management');    
  reset( $array );
  $firstProject = key( $getEstimateByCompany );
  $elements = array();  
  $elements['estimates_form']= array(
  '#markup' => drupal_render(drupal_get_form('program_modify_estimates_schedule_form')),
  '#prefix' => '<div class="clearfix margin-bottom-10">',
  '#suffix' => '</div>',
  ); 
  return $elements;
}

function program_modify_estimates_schedule_form($form,&$form_state){
  global $user;
  global $company;    
  $getEstimateByCompany = _project_list_by_company($company->nid, 'project_management');
  $getEstNodes = _project_list_by_company($company->nid, 'project_estimate');
  if(empty($form_state['est_project_trigger_option'])){
    $form_state['est_project_trigger_option'] = array(); //$getEstNodes;
  }
  
  drupal_add_js(drupal_get_path('module', 'm6connect_program') . '/js/m6connect_program.js');  
  drupal_add_js(drupal_get_path('module', 'm6connect_program') . '/js/Prototype_Price_Format_0.1.js');
  $form['#attached']['js'][] = array(
  'data'=>drupal_get_path('module', 'm6connect_routing') . '/js/routing_type_slip_form.js',
  'type'=>'file'
  );
  $form['#attributes']['class'] = array('program_modify_estimates_schedule_form');
 /* $form['prgram-project-page-title'] = array(
  '#markup' => '<h1>Estimates</h1>',
  '#prefix' => '<div class="clearfix">',
  '#suffix' => '</div>',
  );*/  
  $form['select-estimate'] = array(
  '#type'=>'select',
  '#title'=> 'Select Project',
  '#options' => $getEstimateByCompany,
  '#default_value' => isset($_GET['pnid'])?check_plain($_GET['pnid']):'',
  '#attributes' => array('class'=> array('form-control project-program-sel')),
  '#ajax' => array(
    'callback'=> 'change_program_estimate_subtab_callback',
   // 'wrapper' => 'project_estimatesub_main_container',
    'effect' => 'fade',
  ),
  '#prefix' => '<div class="clearfix"><div class="pull-left form-inline">',
  '#suffix' => '</div><div class="add-new-budget-btn pull-right" id="add-budget-button-custom">'. l('<input type="button" value="Create New Budget" class="form-submit new-record-cus-btn" />', '/program/estimates', array('html' => TRUE, 'external' => TRUE, 'attributes' => array('class' => array('new-budget-link')))).'</div></div>',
  );
  $form['choose-estimate'] = array(
  '#type'=>'select',
  '#title'=> 'Select Project',
  '#options' => $getEstNodes, 
  '#attributes' => array('class'=> array('form-control project-program-sel-est-details')),
  '#ajax' => array(
    'callback'=> 'change_program_estimate_subtab_callback',
    'wrapper' => 'project_estimate_main_container',
    'effect' => 'fade',
  ),
  '#prefix' => '<div class="clearfix" style="display:none;"><div class="pull-left form-inline">',
  '#suffix' => '</div></div>',
  );
  $form['estimate-nodata-dialog']= array(
  '#markup' => '',
  '#prefix' => '<div id="estimate-approve-nodata-dialog">',
  '#suffix' => '</div>',
  );  
  $form['prgram-project-menu-items'] = array(
  '#markup' => program_project_menu_links_content(),
  '#prefix' => '<div class="clearfix">',
  '#suffix' => '</div>',
  );
  //estimate subtab
  $form['prgram-project-menu-items-estimate-subtab'] = array(
    '#markup' => program_project_estimate_subtab(),
  '#prefix' => '<div class="clearfix">',
  '#suffix' => '</div>',
  );
  $form_state['storage_project_estimate'] = array();
  if(isset($form_state['values'],$form_state['input'],$form_state['triggering_element'],$form_state['triggering_element']['#type'],$form_state['triggering_element']['#name']) && $form_state['triggering_element']['#type']=='select' && $form_state['triggering_element']['#name']=='subchoose-estimate'){
  $triggeringElement = $form_state['triggering_element'];
  if($triggeringElement['#value'] != 0 && !empty($triggeringElement['#value'])) {   
    $estimateNode = node_load($triggeringElement['#value']);    
    $form_state['storage_project_estimate'] = array(
      'estimate_name' => $estimateNode->title,
      'estimate_status' => isset($estimateNode->field_project_estimate_status['und'])?$estimateNode->field_project_estimate_status['und'][0]['value']:'',
      'request_date' => isset($estimateNode->field_project_est_request_date['und'])?$estimateNode->field_project_est_request_date['und'][0]['value']:'',
    'agree_date' => isset($estimateNode->field_project_est_agree_to_date['und'])?$estimateNode->field_project_est_agree_to_date['und'][0]['value']:'',
    'planed_completion_date' => isset($estimateNode->field_planned_completion_date['und'])?$estimateNode->field_planned_completion_date['und'][0]['value']:'',
    'submit_date' => isset($estimateNode->field_project_est_submit_date['und'])?$estimateNode->field_project_est_submit_date['und'][0]['value']:'',
    'approval_date' => isset($estimateNode->field_project_est_approval_date['und'])?$estimateNode->field_project_est_approval_date['und'][0]['value']:'',
    'estimate_amount' => isset($estimateNode->field_project_estimate_amount['und'])?$estimateNode->field_project_estimate_amount['und'][0]['value']:'',
    'installation_type' => isset($estimateNode->field_project_installation_type['und'])?$estimateNode->field_project_installation_type['und'][0]['value']:'',
    'spend_start_date' => isset($estimateNode->field_project_spend_start_date['und'])?$estimateNode->field_project_spend_start_date['und'][0]['value']:'',
    'spend_end_date' => isset($estimateNode->field_project_spend_end_date['und'])?$estimateNode->field_project_spend_end_date['und'][0]['value']:'',
    'estimate_set_date' => isset($estimateNode->field_project_estimate_set_date['und'])?$estimateNode->field_project_estimate_set_date['und'][0]['value']:'',
    'plan_budget' => isset($estimateNode->field_plan_budget['und'])?$estimateNode->field_plan_budget['und'][0]['value']:'',
    'capital_contingency' => isset($estimateNode->field_capital_contingency['und'])?$estimateNode->field_capital_contingency['und'][0]['value']:'10',
    'estimate_approver' => isset($estimateNode->field_estimate_approver['und'])?$estimateNode->field_estimate_approver['und'][0]['value']:'',
    'comment' => isset($estimateNode->body['und'])?$estimateNode->body['und'][0]['value']:'',
    );    
    }    
  }else if(isset($form_state['values'],$form_state['input'],$form_state['triggering_element'],$form_state['triggering_element']['#type'],$form_state['triggering_element']['#name']) && $form_state['triggering_element']['#type']=='select' && $form_state['triggering_element']['#name']=='select-estimate'){
     $triggeringElement = $form_state['triggering_element'];
     if($triggeringElement['#value'] != 0 && !empty($triggeringElement['#value'])) {
       $estimateOptions = get_estimate_nodes_by_projectid($triggeringElement['#value']);
       //drup_msg($estimateOptions);
       $form_state['est_project_trigger_option'] = $estimateOptions;
     }
  }
  
  //drup_msg($form_state['est_project_trigger_option']);
  
  
  $form['main-container']= array(
  '#type' => 'container',
  '#attributes' => array('class'=>array('row')), 
  '#prefix' => '<div class="clearfix"><div id="project_estimatesub_main_container" class="project-detail">',
  '#process' => array('project_estimate_schedule_main_container_process'),
  '#suffix' => '</div></div>',  
  );  
  
  $form['estimate-dialog']= array(
  '#markup' => '',
  '#prefix' => '<div id="estimate-approve-change-dialog">',
  '#suffix' => '</div>',
  );    
  $form['actions']['submit'] = array(
  '#type' => 'submit',
  '#name' => 'main_call',
  '#submit'=> array('project_estimate_submit'),
  '#attributes' => array('class'=>array('main-estimate-submit-call')), 
  '#value' => 'Save',
  /*'#prefix' => '<div style="visibility:hidden;height:0px;width:0px;">', 
  '#suffix' => '</div>', */
  );      
  return $form; 
}

function project_estimate_schedule_main_container_process($element, &$form_state) {
  global $user;
  global $company;    
  $getEstimateByCompany = _project_list_by_company($company->nid, 'project_management');
  $getEstNodes = _project_list_by_company($company->nid, 'project_estimate');
  drupal_add_js(drupal_get_path('module', 'm6connect_program') . '/js/m6connect_program.js');
  drupal_add_js(drupal_get_path('module', 'm6connect_program') . '/js/Prototype_Price_Format_0.1.js');  
  
  $defaultValues = $form_state['storage_project_estimate'];     
  $element['main-container']['left-container']= array(
  '#type' => 'container',
  '#attributes' => array('class'=>array('col-md-6','col-sm-6','col-xs-12','project-details-left')),
  '#weight' => 1,
  );  
  $element['main-container']['right-container']= array(
  '#type' => 'container',
  '#attributes' => array('class'=>array('col-md-6','col-sm-6','col-xs-12','project-details-right')),
  '#weight' => 2,
  );   
  /*$element['main-container']['full-container']= array(
    '#type' => 'container',
  '#attributes' => array('class'=>array('col-md-12','col-sm-12','col-xs-12','project-details-full','margin-bottom-10')),
  '#weight' => 3,
  );*/
  $element['project_est_ref_nid']= array(
  '#type'=>'hidden',
  '#title_display' => 'invisible',
  '#attributes' => array('class'=> array('form-control project_est_ref_nid')),  
  );   
  $element['approve-status-drop'] = array(
  '#type'=>'select',
  '#options' => array('ok' => 'OK', 'cancel' => 'Cancel'),
  '#prefix' => '<div style="display:none">',
  '#suffix' => '</div>',
  );  
  $element['approve_status_previous_approved']= array(
  '#type'=>'hidden',
  '#title_display' => 'invisible',
  '#attributes' => array('class'=> array('form-control approve_status_previous_approved')), 
  );   
  /*$element['main-container']['left-container']['estimate_name']= array(
  '#type'=>'textfield',
  '#title' => 'Estimate Name',
  '#attributes' => array('class'=> array('form-control estimate_name')),
  '#required' => TRUE,
  '#default_value' => isset($defaultValues['estimate_name'])?$defaultValues['estimate_name']:'',
  '#prefix' => '<div class="project-details-border"><div class="form-item clearfix">',
  '#suffix' => '</div>',
  );*/
  krsort($form_state['est_project_trigger_option']);
  $element['main-container']['left-container']['subchoose-estimate'] = array(
  '#type'=>'select',
  '#title'=> 'Select Budget',
  //'#options' => $getEstNodes, 
  '#options' => $form_state['est_project_trigger_option'],
  '#attributes' => array('class'=> array('form-control project-program-sel-est-details')),
  '#ajax' => array(
    'callback'=> 'change_program_estimate_subtab_callback',
    'wrapper' => 'project_estimatesub_main_container',
    'effect' => 'fade',
  ),
  //'#empty_option' => '',
  '#prefix' => '<div class="project-details-border"><div class="form-item clearfix">',
  '#suffix' => '</div>',
  );    
   /*   
  $element['main-container']['left-container']['estimate_status']= array(
  '#type'=>'select',
  '#title' => 'Estimate Status',
  '#options' => array('approved'=>'Approved','pending'=>'Pending'),
  '#empty_option' => '- Select -',
  '#attributes' => array('class'=> array('form-control estimate_status')),
  '#default_value' => isset($defaultValues['estimate_status'])?$defaultValues['estimate_status']:'',
  //'#required' => TRUE,
  '#prefix' => '<div class="form-item clearfix">',
  '#suffix' => '</div>',  
  );  
  $installationType = array('new construction'=>'New Construction','renovation'=>'Renovation','equipment'=>'Equipment','infrastructure'=>'Infrastructure','utilities'=>'Utilities','tele communication'=>'Tele Communication','real estate'=>'Real Estate');  
  $element['main-container']['left-container']['installation_type']= array(
  '#type'=>'select',
  '#title' => 'Installation Type',
  '#options' => $installationType,
  '#empty_option' => '- Select -',
  '#attributes' => array('class'=> array('form-control installation_type')),
  //'#required' => TRUE,
  '#default_value' => isset($defaultValues['installation_type'])?$defaultValues['installation_type']:'',
  '#prefix' => '<div class="form-item clearfix">',
  '#suffix' => '</div>',
  ); */ 
  $element['main-container']['left-container']['request_date']= array(
  '#title' => 'Request Date',
  '#type' => 'date_popup',
  '#date_format' => 'm/d/Y',
  '#date_year_range' => '-3:+3',  
  '#attributes' => array('class'=> array('form-control request_date'),'autocomplete' => 'off'),
  '#pre_render' => array('m6connect_programe_date_prerender'),
  //'#required' => TRUE,
  '#default_value' => isset($defaultValues['request_date'])?$defaultValues['request_date']:'',
  '#prefix' => '<div class="form-item clearfix">',
  '#suffix' => '</div>',
  );  
  $element['main-container']['left-container']['agree_date']= array(
  '#title' => 'Budget Completion Date',
  '#type' => 'date_popup',
  '#date_format' => 'm/d/Y',
  '#date_year_range' => '-3:+3',  
  //'#required' => TRUE,
  '#pre_render' => array('m6connect_programe_date_prerender'),
  '#attributes'=> array('class'=> array('form-control agree_date'),'autocomplete' => 'off'),
  '#default_value' => isset($defaultValues['agree_date'])?$defaultValues['agree_date']:'',
  '#prefix' => '<div class="form-item clearfix">',
  '#suffix' => '</div>',
  );  
  
  $element['main-container']['left-container']['submit_date']= array(
  '#title' => 'Submit Date',
  '#type' => 'date_popup',
  '#date_format' => 'm/d/Y',
  '#date_year_range' => '-3:+3',  
  //'#required' => TRUE,
  '#pre_render' => array('m6connect_programe_date_prerender'),
  '#attributes'=> array('class'=> array('form-control submit_date'),'autocomplete' => 'off'),
  '#default_value' => isset($defaultValues['submit_date'])?$defaultValues['submit_date']:'',
  '#prefix' => '<div class="form-item clearfix">',
  '#suffix' => '</div></div>',
  );  
  $element['main-container']['right-container']['approval_date']= array(
  '#title' => 'Approval Date',
  '#type' => 'date_popup',
  '#date_format' => 'm/d/Y',
  '#date_year_range' => '-3:+3',  
  //'#required' => TRUE,
  '#attributes'=> array('class'=> array('form-control approval_date'),'autocomplete' => 'off'),
  '#pre_render' => array('m6connect_programe_date_prerender'),
  '#default_value' => isset($defaultValues['approval_date'])?$defaultValues['approval_date']:'',
  '#prefix' => '<div class="project-details-border"><div class="form-item clearfix">',
  '#suffix' => '</div>',
  );      
  $element['main-container']['right-container']['planed_completion_date']= array(
  '#title' => 'Funding Date',
  '#type' => 'date_popup',
  '#date_format' => 'm/d/Y',
  '#date_year_range' => '-3:+3',  
  //'#required' => TRUE,
  '#pre_render' => array('m6connect_programe_date_prerender'),
  '#attributes'=> array('class'=> array('form-control planed_completion_date'),'autocomplete' => 'off'),
  '#default_value' => isset($defaultValues['planed_completion_date'])?$defaultValues['planed_completion_date']:'',
  '#prefix' => '<div class="form-item clearfix">',
  '#suffix' => '</div>',
  );
  $element['main-container']['right-container']['spend_start_date']= array(
  '#title' => 'Spend Start Date',
  '#type' => 'date_popup',
  '#date_format' => 'm/d/Y',
  '#date_year_range' => '-3:+3',  
  //'#required' => TRUE,
  '#attributes' => array('class'=> array('form-control spend_start_date'),'autocomplete' => 'off'),
  '#pre_render' => array('m6connect_programe_date_prerender'),
  '#default_value' => isset($defaultValues['spend_start_date'])?$defaultValues['spend_start_date']:'',
  '#prefix' => '<div class="form-item clearfix">',
  '#suffix' => '</div>',
  );  
  $element['main-container']['right-container']['spend_end_date']= array(    
  '#type' => 'date_popup',
  '#date_format' => 'm/d/Y',
  '#date_year_range' => '-3:+3',    
  '#title' => 'Spend End Date',
  '#attributes' => array('class'=> array('form-control spend_end_date'),'autocomplete' => 'off'),
  //'#required' => TRUE,
  '#pre_render' => array('m6connect_programe_date_prerender'),
  '#default_value' => isset($defaultValues['spend_end_date'])?$defaultValues['spend_end_date']:'',
  '#prefix' => '<div class="form-item clearfix">',
  '#suffix' => '</div></div>',
  );  
  
  
  return $element;
}

//estimates subtab -supporting estimates
function program_project_estimates_content_supporting_estimates($form, &$form_state) {
  global $company;    
  $getEstimateByCompany = _project_list_by_company($company->nid, 'project_management');    
  reset( $array );
  $firstProject = key( $getEstimateByCompany );
  $elements = array();  
  $elements['estimates_form']= array(
  '#markup' => drupal_render(drupal_get_form('program_modify_estimates_supporting_estimates_form')),
  '#prefix' => '<div class="clearfix margin-bottom-10">',
  '#suffix' => '</div>',
  ); 
  return $elements;
}

function program_modify_estimates_supporting_estimates_form($form,&$form_state){
  global $user;
  global $company;    
  $getEstimateByCompany = _project_list_by_company($company->nid, 'project_management');
  $getEstNodes = _project_list_by_company($company->nid, 'project_estimate');
  if(empty($form_state['est_project_trigger_option'])){
    $form_state['est_project_trigger_option'] = array(); //$getEstNodes;
  }
  drupal_add_js(drupal_get_path('module', 'm6connect_program') . '/js/m6connect_program.js');
  drupal_add_js(drupal_get_path('module', 'm6connect_program') . '/js/Prototype_Price_Format_0.1.js');  
  $form['#attached']['js'][] = array(
  'data'=>drupal_get_path('module', 'm6connect_routing') . '/js/routing_type_slip_form.js',
  'type'=>'file'
  );
  $form['#attributes']['class'] = array('program_modify_estimates_supporting_estimates_form');
 /* $form['prgram-project-page-title'] = array(
  '#markup' => '<h1>Estimates</h1>',
  '#prefix' => '<div class="clearfix">',
  '#suffix' => '</div>',
  );*/  
  $form['select-estimate'] = array(
  '#type'=>'select',
  '#title'=> 'Select Project',
  '#options' => $getEstimateByCompany,
  '#default_value' => isset($_GET['pnid'])?check_plain($_GET['pnid']):'',
  '#attributes' => array('class'=> array('form-control project-program-sel')),
  '#ajax' => array(
    'callback'=> 'change_program_estimate_subtab_callback',
   // 'wrapper' => 'project_estimatesub_main_container',
    'effect' => 'fade',
  ),
  '#prefix' => '<div class="clearfix"><div class="pull-left form-inline">',
  '#suffix' => '</div><div class="add-new-budget-btn pull-right" id="add-budget-button-custom">'. l('<input type="button" value="Create New Budget" class="form-submit new-record-cus-btn" />', '/program/estimates', array('html' => TRUE, 'external' => TRUE, 'attributes' => array('class' => array('new-budget-link')))).'</div></div>',
  );
  $form['estimate-nodata-dialog']= array(
  '#markup' => '',
  '#prefix' => '<div id="estimate-approve-nodata-dialog">',
  '#suffix' => '</div>',
  );  
  $form['prgram-project-menu-items'] = array(
  '#markup' => program_project_menu_links_content(),
  '#prefix' => '<div class="clearfix">',
  '#suffix' => '</div>',
  );
  //estimate subtab
  $form['prgram-project-menu-items-estimate-subtab'] = array(
    '#markup' => program_project_estimate_subtab(),
  '#prefix' => '<div class="clearfix">',
  '#suffix' => '</div>',
  );
  $form_state['storage_project_estimate'] = array();
  if(isset($form_state['values'],$form_state['input'],$form_state['triggering_element'],$form_state['triggering_element']['#type'],$form_state['triggering_element']['#name']) && $form_state['triggering_element']['#type']=='select' && $form_state['triggering_element']['#name']=='subchoose-estimate'){
  $triggeringElement = $form_state['triggering_element'];
  if($triggeringElement['#value'] != 0 && !empty($triggeringElement['#value'])) {   
    $estimateNode = node_load($triggeringElement['#value']);    
    $form_state['storage_project_estimate'] = array(
      'estimate_name' => $estimateNode->title,
      'estimate_status' => isset($estimateNode->field_project_estimate_status['und'])?$estimateNode->field_project_estimate_status['und'][0]['value']:'',
      'request_date' => isset($estimateNode->field_project_est_request_date['und'])?$estimateNode->field_project_est_request_date['und'][0]['value']:'',
    'agree_date' => isset($estimateNode->field_project_est_agree_to_date['und'])?$estimateNode->field_project_est_agree_to_date['und'][0]['value']:'',
    'planed_completion_date' => isset($estimateNode->field_planned_completion_date['und'])?$estimateNode->field_planned_completion_date['und'][0]['value']:'',
    'submit_date' => isset($estimateNode->field_project_est_submit_date['und'])?$estimateNode->field_project_est_submit_date['und'][0]['value']:'',
    'approval_date' => isset($estimateNode->field_project_est_approval_date['und'])?$estimateNode->field_project_est_approval_date['und'][0]['value']:'',
    'estimate_amount' => isset($estimateNode->field_project_estimate_amount['und'])?$estimateNode->field_project_estimate_amount['und'][0]['value']:'',
    'installation_type' => isset($estimateNode->field_project_installation_type['und'])?$estimateNode->field_project_installation_type['und'][0]['value']:'',
    'spend_start_date' => isset($estimateNode->field_project_spend_start_date['und'])?$estimateNode->field_project_spend_start_date['und'][0]['value']:'',
    'spend_end_date' => isset($estimateNode->field_project_spend_end_date['und'])?$estimateNode->field_project_spend_end_date['und'][0]['value']:'',
    'estimate_set_date' => isset($estimateNode->field_project_estimate_set_date['und'])?$estimateNode->field_project_estimate_set_date['und'][0]['value']:'',
    'plan_budget' => isset($estimateNode->field_plan_budget['und'])?$estimateNode->field_plan_budget['und'][0]['value']:'',
    'capital_contingency' => isset($estimateNode->field_capital_contingency['und'])?$estimateNode->field_capital_contingency['und'][0]['value']:'10',
    'estimate_approver' => isset($estimateNode->field_estimate_approver['und'])?$estimateNode->field_estimate_approver['und'][0]['value']:'',
    'comment' => isset($estimateNode->body['und'])?$estimateNode->body['und'][0]['value']:'',
    );    
    }    
  }else if(isset($form_state['values'],$form_state['input'],$form_state['triggering_element'],$form_state['triggering_element']['#type'],$form_state['triggering_element']['#name']) && $form_state['triggering_element']['#type']=='select' && $form_state['triggering_element']['#name']=='select-estimate'){
     $triggeringElement = $form_state['triggering_element'];
     if($triggeringElement['#value'] != 0 && !empty($triggeringElement['#value'])) {
       $estimateOptions = get_estimate_nodes_by_projectid($triggeringElement['#value']);
       //drup_msg($estimateOptions);
       $form_state['est_project_trigger_option'] = $estimateOptions;
     }
  }
  
  //drup_msg($form_state['est_project_trigger_option']);
  
  
  $form['main-container']= array(
  '#type' => 'container',
  '#attributes' => array('class'=>array('row')), 
  '#prefix' => '<div class="clearfix"><div id="project_estimatesub_main_container" class="project-detail">',
  '#process' => array('project_estimate_supporting_estimates_main_container_process'),
  '#suffix' => '</div></div>',  
  );  
  
  $form['estimate-dialog']= array(
  '#markup' => '',
  '#prefix' => '<div id="estimate-approve-change-dialog">',
  '#suffix' => '</div>',
  );    
  $form['actions']['submit'] = array(
  '#type' => 'submit',
  '#name' => 'main_call',
  '#submit'=> array('project_estimate_supporting_estimates_submit'),
  '#attributes' => array('class'=>array('main-estimate-submit-call')), 
  '#value' => 'Save',
  /*'#prefix' => '<div style="visibility:hidden;height:0px;width:0px;">', 
  '#suffix' => '</div>', */
  );      
  return $form; 
}

function project_estimate_supporting_estimates_main_container_process($element, &$form_state) {
  global $user;
  global $company;    
  $getEstimateByCompany = _project_list_by_company($company->nid, 'project_management');
  $getEstNodes = _project_list_by_company($company->nid, 'project_estimate');
  drupal_add_js(drupal_get_path('module', 'm6connect_program') . '/js/m6connect_program.js');  
  drupal_add_js(drupal_get_path('module', 'm6connect_program') . '/js/Prototype_Price_Format_0.1.js');
  
  $defaultValues = $form_state['storage_project_estimate'];     
  $element['main-container']['left-container']= array(
  '#type' => 'container',
  '#attributes' => array('class'=>array('col-md-6','col-sm-6','col-xs-12','project-details-left')),
  '#weight' => 1,
  );  
  $element['main-container']['right-container']= array(
  '#type' => 'container',
  '#attributes' => array('class'=>array('col-md-6','col-sm-6','col-xs-12','project-details-right')),
  '#weight' => 2,
  );   
  /*$element['main-container']['full-container']= array(
    '#type' => 'container',
  '#attributes' => array('class'=>array('col-md-12','col-sm-12','col-xs-12','project-details-full','margin-bottom-10')),
  '#weight' => 3,
  );*/
  $element['project_est_ref_nid']= array(
  '#type'=>'hidden',
  '#title_display' => 'invisible',
  '#attributes' => array('class'=> array('form-control project_est_ref_nid')),  
  );   
  $element['approve-status-drop'] = array(
  '#type'=>'select',
  '#options' => array('ok' => 'OK', 'cancel' => 'Cancel'),
  '#prefix' => '<div style="display:none">',
  '#suffix' => '</div>',
  );  
  $element['approve_status_previous_approved']= array(
  '#type'=>'hidden',
  '#title_display' => 'invisible',
  '#attributes' => array('class'=> array('form-control approve_status_previous_approved')), 
  );   
  /*$element['main-container']['left-container']['estimate_name']= array(
  '#type'=>'textfield',
  '#title' => 'Estimate Name',
  '#attributes' => array('class'=> array('form-control estimate_name')),
  '#required' => TRUE,
  '#default_value' => isset($defaultValues['estimate_name'])?$defaultValues['estimate_name']:'',
  '#prefix' => '<div class="project-details-border"><div class="form-item clearfix">',
  '#suffix' => '</div>',
  );*/
  krsort($form_state['est_project_trigger_option']);
  $element['main-container']['left-container']['subchoose-estimate'] = array(
    '#type'=>'select',
  '#title'=> 'Select Budget',
  //'#options' => $getEstNodes, 
  '#options' => $form_state['est_project_trigger_option'],
  '#attributes' => array('class'=> array('form-control project-program-sel-est-details')),
  '#ajax' => array(
    'callback'=> 'change_program_estimate_subtab_callback',
    'wrapper' => 'project_estimatesub_main_container',
    'effect' => 'fade',
  ),
  //'#empty_option' => '',
  '#prefix' => '<div class="project-details-border"><div class="form-item clearfix">',
  '#suffix' => '</div>',
  );    
  
  $estimate_request_option = array('FFE','Furniture','Medical Equipment','Information Technology','External Vendor','Contractor','Party Estimate','Other
');   
  $element['main-container']['left-container']['estimate_supporting_estimate_request'] = array(
  '#type'=>'select',
  '#title'=> 'Estimate Request',
  '#options' => $estimate_request_option, 
  //'#attributes' => '',
  '#prefix' => '<div class="form-item clearfix">',
  '#suffix' => '</div>',
  );    
  $element['main-container']['left-container']['estimate_supporting_budget_amount'] = array(
  '#type'=>'textfield',
  '#title'=> 'Budget Amount',
  '#default_value' => isset($defaultValues['estimate_supporting_budget_amount'])?$defaultValues['estimate_supporting_budget_amount']:'',
  //'#attributes' => '',
  '#prefix' => '<div class="form-item clearfix">',
  '#suffix' => '</div>',
  );    
  $element['main-container']['left-container']['estimate_supporting_Description'] = array(
  '#type'=>'textarea',
  '#title'=> 'Description',
  '#default_value' => isset($defaultValues['estimate_supporting_Description'])?$defaultValues['estimate_supporting_Description']:'',
  //'#attributes' => '',
  '#prefix' => '<div class="form-item clearfix">',
  '#suffix' => '</div>',
  ); 
  $element['main-container']['left-container']['estimate_supporting_attachment'] = array(
  '#name' => 'files[]',
  '#type' => 'file',
  '#title' => t('Choose a file'),
  '#title_display' => 'invisible',  
  '#attributes' => array('multiple' => 'multiple'), 
  '#prefix' => '<div class="form-item clearfix">',
  '#suffix' => '</div></div>',
  ); 
  
  return $element;
}

function get_estimate_nodes_by_projectid($projectID=0){
  $query= db_select('field_data_field_project_reference','pr');
  $query->join('node','n','n.nid=pr.entity_id');
  $query->fields('pr', array('entity_id'));
  $query->fields('n', array('title'));
  $query->condition('pr.field_project_reference_nid', $projectID, '=');
  $query->condition('pr.bundle','project_estimate','=');
  $estimateID= $query->execute()->fetchAllKeyed(0,1);
  
  return $estimateID;
}

function clear_asset_data_callback($spendId, $ajax = NULL, $using_internal = FALSE) {
  if (!$using_internal) {
    ctools_include('ajax');
  }

  $nodeData = node_load($spendId);
  $hasAsset = $nodeData->field_has_asset['und'][0]['value'] != '' ? $nodeData->field_has_asset['und'][0]['value'] : 'FALSE';
  $assetType = $nodeData->field_asset_type['und'][0]['value'] != '' ? $nodeData->field_asset_type['und'][0]['value'] : '';

  if ($hasAsset == 'TRUE' && ($assetType == 'Split' || $assetType == 'Spread')) {
    if ($assetType == 'Split') {
      foreach ($nodeData->field_asset_category_split['und'] as $delta => $assetVal) {
        $getAssetCost = $nodeData->field_asset_cost['und'][$delta]['value'] != '' ? $nodeData->field_asset_cost['und'][$delta]['value'] : 0;
        $getAssetInstall = $nodeData->field_asset_installation['und'][$delta]['value'] != '' ? $nodeData->field_asset_installation['und'][$delta]['value'] : 0;
        $getAssetOutside = $nodeData->field_asset_outside_consultant['und'][$delta]['value'] != '' ? $nodeData->field_asset_outside_consultant['und'][$delta]['value'] : 0;
        $getAssetInteral = $nodeData->field_asset_internal_charge['und'][$delta]['value'] != '' ? $nodeData->field_asset_internal_charge['und'][$delta]['value'] : 0;

        $getAssetNode = $nodeData->field_asset_description_spending['und'][$delta]['value'];

        $getAssetId = explode('-', $getAssetNode);
        $getAssetId = $getAssetId[0];
        $assetNode = node_load($getAssetId);

        $asseCost = $assetNode->field_asset_cost['und'][0]['value'] != '' ? $assetNode->field_asset_cost['und'][0]['value'] : 0;
        $asseInstall = $assetNode->field_asset_installation['und'][0]['value'] != '' ? $assetNode->field_asset_installation['und'][0]['value'] : 0;
        $asseOutside = $assetNode->field_asset_outside_consultant['und'][0]['value'] != '' ? $assetNode->field_asset_outside_consultant['und'][0]['value'] : 0;
        $asseInternal = $assetNode->field_asset_internal_charge['und'][0]['value'] != '' ? $assetNode->field_asset_internal_charge['und'][0]['value'] : 0;

        // Updating all split amount
        $assetNode->field_asset_cost['und'][0]['value'] = ($asseCost - $getAssetCost > 0) ? $asseCost - $getAssetCost : 0;
        $assetNode->field_asset_installation['und'][0]['value'] = ($asseInstall - $getAssetInstall > 0) ? $asseInstall - $getAssetInstall : 0;
        $assetNode->field_asset_outside_consultant['und'][0]['value'] = ($asseOutside - $getAssetOutside > 0) ? $asseOutside - $getAssetOutside : 0;
        $assetNode->field_asset_internal_charge['und'][0]['value'] = ($asseInternal - $getAssetInteral > 0) ? $asseInternal - $getAssetInteral : 0;

        field_attach_presave('node', $assetNode);
        field_attach_update('node', $assetNode);
        entity_get_controller('node')->resetCache(array($assetNode->nid));
      }
    }

    if ($assetType == 'Spread') {
      $asset_nids_to_be_deleted = array();
      // If the asset type is spread, then we need to subtract the spread amount
      // from the asset node.
      foreach ($nodeData->field_asset_category_spread['und'] as $delta => $assetVal) {
        $getAssetNode = $nodeData->field_asset_description_spending['und'][$delta]['value'];
        $getAssetId = explode('-', $getAssetNode);
        $getAssetId = $getAssetId[0];
        if ($assetNode = node_load($getAssetId)) {
          // Need to save the asset nodes, which are being updated. We ought
          // to delete the assets afterwords.
          $asset_nids_to_be_deleted[] = $assetNode->nid;

          $original_spread = _get_spread_amount_from_table($nodeData->nid, $assetNode->nid);
          if (empty($original_spread)) {
            $original_spread = 0;
          }

          // Subtracting the original spread amount from asset node, and always
          // maintaining the minimum amount to be 0.
          if (!empty($original_spread) && $original_spread > 0 && is_numeric($original_spread)) {
            // Only subtracting if we have something to subtract.
            $assetNode->field_asset_spread_amount['und'][0]['value'] = ($assetNode->field_asset_spread_amount['und'][0]['value'] - $original_spread > 0) ? $assetNode->field_asset_spread_amount['und'][0]['value'] - $original_spread : 0;

            // Saving new values
            field_attach_presave('node', $assetNode);
            field_attach_update('node', $assetNode);
            entity_get_controller('node')->resetCache(array($assetNode->nid));
          }
        }
      }

      // Deleting asset nids from table, if any.
      if (!empty($asset_nids_to_be_deleted)) {
        _delete_assets_from_table($nodeData->nid, $asset_nids_to_be_deleted);
      }
    }

    unset($nodeData->field_asset_category_split['und']);
    unset($nodeData->field_asset_category_spread['und']);
    unset($nodeData->field_asset_cost['und']);
    unset($nodeData->field_asset_installation['und']);
    unset($nodeData->field_asset_outside_consultant['und']);
    unset($nodeData->field_asset_internal_charge['und']);
    unset($nodeData->field_asset_reference['und']);
    unset($nodeData->field_asset_description_spending['und']);
    unset($nodeData->field_has_asset['und']);
    unset($nodeData->field_asset_type['und']);
    unset($nodeData->field_spread_auto['und']);

    field_attach_presave('node', $nodeData);
    field_attach_update('node', $nodeData);
    entity_get_controller('node')->resetCache(array($nodeData->nid));
  }

  if (!$using_internal) {
    $commands[] = ajax_command_invoke("select.project-program-sel-spending", 'trigger',array('change'));
    print ajax_render($commands);
    drupal_exit();
  }
}

function delete_asset_data_spread_callback($spendId, $ajax = NULL) {
  ctools_include('ajax'); 
  $nodeData = node_load($spendId);
  $hasAsset = $nodeData->field_has_asset['und'][0]['value']!=''?$nodeData->field_has_asset['und'][0]['value']:'FALSE';
  $assetType = $nodeData->field_asset_type['und'][0]['value']!=''?$nodeData->field_asset_type['und'][0]['value']:'';
  $spreadAuto = $nodeData->field_spread_auto['und'][0]['value']!=''?$nodeData->field_spread_auto['und'][0]['value']:'';

  if ($hasAsset == 'TRUE' && $assetType == 'Spread' && $spreadAuto == 'Yes') {
    $asset_nids_to_be_deleted = array();
    foreach ($nodeData->field_asset_category_spread['und'] as $delta => $assetVal) {
      $getAssetNode = $nodeData->field_asset_description_spending['und'][$delta]['value'];
      $getAssetId = explode('-', $getAssetNode);
      $getAssetId = $getAssetId[0];
      if ($assetNode = node_load($getAssetId)) {
        // Need to save the asset nodes, which are being updated. We ought
        // to delete the assets afterwords.
        $asset_nids_to_be_deleted[] = $assetNode->nid;

        $original_spread = _get_spread_amount_from_table($nodeData->nid, $assetNode->nid);
        if (empty($original_spread)) {
          $original_spread = 0;
        }

        // Subtracting the original spread amount from asset node, and always
        // maintaining the minimum amount to be 0.
        if (!empty($original_spread) && $original_spread > 0 && is_numeric($original_spread)) {
          // Only subtracting if we have something to subtract.
          $assetNode->field_asset_spread_amount['und'][0]['value'] = ($assetNode->field_asset_spread_amount['und'][0]['value'] - $original_spread > 0) ? $assetNode->field_asset_spread_amount['und'][0]['value'] - $original_spread : 0;

          // Saving new values
          field_attach_presave('node', $assetNode);
          field_attach_update('node', $assetNode);
          entity_get_controller('node')->resetCache(array($assetNode->nid));
        }
      }
    }

    // Deleting asset nids from table, if any.
    if (!empty($asset_nids_to_be_deleted)) {
      _delete_assets_from_table($nodeData->nid, $asset_nids_to_be_deleted);
    }

    unset($nodeData->field_asset_category_split['und']);
    unset($nodeData->field_asset_category_spread['und']);
    unset($nodeData->field_asset_cost['und']);
    unset($nodeData->field_asset_installation['und']);
    unset($nodeData->field_asset_outside_consultant['und']);
    unset($nodeData->field_asset_internal_charge['und']);
    unset($nodeData->field_asset_reference['und']);
    unset($nodeData->field_asset_description_spending['und']);
    unset($nodeData->field_has_asset['und']);
    unset($nodeData->field_asset_type['und']);
    unset($nodeData->field_spread_auto['und']);

    field_attach_presave('node', $nodeData);
    field_attach_update('node', $nodeData);
    entity_get_controller('node')->resetCache(array($nodeData->nid));
  }

  $commands[] = ajax_command_invoke("select.project-program-sel-spending", 'trigger',array('change'));
  print ajax_render($commands);
  drupal_exit();
}

function load_estimate_budget_details_callback($estmtId, $ajax = NULL) {  
  $output = estimate_budget_details_content($estmtId);  
  ctools_include('ajax');
    $commands = array();
    $commands[] = ajax_command_html('#programe-estimate-cost-code', $output); 
  $commands[] = ajax_command_invoke("select.project-program-sel-est-details", 'val',array($estmtId));
  $commands[] = ajax_command_invoke("select.project-program-sel-est-details", 'trigger',array('change'));
  $commands[] = ajax_command_invoke("#project_estimate_main_container", 'attr',array('data','edit'));
  $commands[] = ajax_command_invoke("#project_estimate_main_container", 'attr',array('for','open'));
  $commands[] = ajax_command_invoke("#project_estimate_main_container", 'show',array('slow'));
  $commands[] = ajax_command_invoke(".program-project-sub-menu-links", 'show',array('slow'));
  $commands[] = ajax_command_invoke(".main-estimate-submit-call", 'show',array('slow'));
  $commands[] = ajax_command_invoke(".custom-submit-reset", 'show',array('slow'));
  
  
  /*jQuery('#project_estimate_main_container').attr('for','open');
      jQuery('#project_estimate_main_container').attr('data','edit');     
      jQuery('#project_estimate_main_container').show();*/
      
  //$commands[] = ajax_command_invoke("table.m6connect-program-estimate-table-main-estimate tr.estimate-tr", 'removeClass',array('bg-info'));
  //$commands[] = ajax_command_invoke("table.m6connect-program-estimate-table-main-estimate tr.estimate-tr-".$estmtId, 'removeClass',array('odd')); 
  //$commands[] = ajax_command_invoke("table.m6connect-program-estimate-table-main-estimate tr.estimate-tr-".$estmtId, 'removeClass',array('even'));  
  //$commands[] = ajax_command_invoke("table.m6connect-program-estimate-table-main-estimate tr.estimate-tr-".$estmtId, 'addClass',array('bg-info'));  
    print ajax_render($commands); // this function exits.
    exit;   
}

function reset_filter_settings_callback($filterType, $ajax = NULL) {  
    //$output = estimate_budget_details_content($estmtId);  
    ctools_include('ajax');
  if($filterType == 'commit') {
    //unset($_SESSION['ACTIVEFILTERVAL']);
    unset($_SESSION['ACTIVEFILTERVAL-commitNumber']);
    unset($_SESSION['ACTIVEFILTERVAL-commitCompanyName']);
    unset($_SESSION['ACTIVEFILTERVAL-commitRecType']);
    unset($_SESSION['ACTIVEFILTERVAL-commitCostCode']);
    unset($_SESSION['FILTERTYPE']);
    //drupal_goto('/program/commitments');
    $commands[] = ajax_command_html("#programe-commitment-details", get_commitment_listing_table_data($_SESSION['ACTIVEPROJECT']));
  }
  if($filterType == 'spending') {
    //unset($_SESSION['ACTIVEFILTERVALSPEND']);
    unset($_SESSION['ACTIVEFILTERVALSPEND-spend-invNo']);
    unset($_SESSION['ACTIVEFILTERVALSPEND-spend-Vendor']);
    unset($_SESSION['ACTIVEFILTERVALSPEND-spend-CostCode']);
    unset($_SESSION['ACTIVEFILTERVALSPEND-spend-commitType']);
    unset($_SESSION['FILTERTYPESPEND']);

    // Unsetting asset filter also.
    unset($_SESSION['change_asset_filter']);
    //drupal_goto('/program/commitments');
    $commands[] = ajax_command_html("#programe-spending-details", get_spending_listing_table_data($_SESSION['ACTIVEPROJECT'], '', '', '', '', 0, 10));
  } 
    /*$commands = array();
    $commands[] = ajax_command_html('#programe-estimate-cost-code', $output); 
  $commands[] = ajax_command_invoke("select.project-program-sel-est-details", 'val',array($estmtId));
  $commands[] = ajax_command_invoke("select.project-program-sel-est-details", 'trigger',array('change'));
  $commands[] = ajax_command_invoke("#project_estimate_main_container", 'attr',array('data','edit'));
  $commands[] = ajax_command_invoke("#project_estimate_main_container", 'attr',array('for','open'));
  $commands[] = ajax_command_invoke("#project_estimate_main_container", 'show',array('slow'));
  $commands[] = ajax_command_invoke(".program-project-sub-menu-links", 'show',array('slow'));
  $commands[] = ajax_command_invoke(".main-estimate-submit-call", 'show',array('slow'));
  $commands[] = ajax_command_invoke(".custom-submit-reset", 'show',array('slow'));  
    print ajax_render($commands); // this function exits.
    exit;*/
  print ajax_render($commands); // this function exits.
    exit;   
}

function estimate_budget_details_content($estmtId) {
  global $company;
  setlocale(LC_MONETARY, 'en_US');
  $getNodeType = node_load($estmtId)->type;
  $rows = array();
  $header = array(
  array('data'=>'Cost Code and Description','class'=>array('text-left')),
  array('data'=>'Line Item Amount','class'=>array('text-left')),
  array('data'=>'Action','class'=>array('text-center')),
  );
  if($getNodeType == 'project_management') {
    $query = db_select('field_data_field_project_reference','pr');
    $query->join('field_data_field_estimate_reference','ed','ed.entity_id=pr.entity_id');
    $query->join('node','es_node','es_node.nid=ed.field_estimate_reference_nid');
  $query->join('field_data_field_conigency_status','cs','cs.entity_id=pr.entity_id');
    $query->fields('pr', array('entity_id'));
    $query->addField('es_node','nid','es_node_nid');
    $query->addField('es_node','title','es_node_title');
  $query->condition('cs.field_conigency_status_value','FALSE','=');
    $query->condition('pr.field_project_reference_nid', $estmtId, '=');
    $query->condition('pr.bundle','estimate_detail','=');
    $getEstimateNid = $query->execute()->fetchAll();
  }
  else {
    /*$query= db_select('field_data_field_estimate_reference','ed');
    $query->join('node','es_node','es_node.nid=ed.field_estimate_reference_nid');
  $query->join('field_data_field_conigency_status','cs','cs.entity_id=ed.field_estimate_reference_nid');
    $query->fields('ed', array('entity_id'));
    $query->addField('es_node','nid','es_node_nid');
    $query->addField('es_node','title','es_node_title');
    $query->condition('ed.field_estimate_reference_nid', $estmtId, '=');
  $query->condition('cs.field_conigency_status_value','FALSE','=');
    $query->condition('ed.bundle','estimate_detail','=');
    $getEstimateNid = $query->execute()->fetchAll();*/  
  
  $query = db_select('node','n');
  $query->join('field_data_field_estimate_reference','ed','ed.entity_id=n.nid');
  $query->join('node','es_node','es_node.nid=ed.field_estimate_reference_nid');
  $query->join('field_data_field_conigency_status','cs','cs.entity_id=n.nid');
  $query->fields('ed', array('entity_id'));
  $query->addField('es_node','nid','es_node_nid');
    $query->addField('es_node','title','es_node_title');
  $query->condition('ed.field_estimate_reference_nid', $estmtId, '=');
  $query->condition('cs.field_conigency_status_value','FALSE','=');
  $query->condition('ed.bundle','estimate_detail','=');
  $getEstimateNid = $query->execute()->fetchAll();
  }    
  $lineAmoutTotal = $lineAmoutTotal;
  $rowsByEstimate = array();
  if(!empty($getEstimateNid)){    
  $costCodeArr = array();
  foreach($getEstimateNid as $estId => $estVal) {
    $estimateNode = node_load($estVal->entity_id);  
    $costCode = isset($estimateNode->field_est_cost_code['und'])?$estimateNode->field_est_cost_code['und'][0]['value']:'- None -';
    $costCodeArr[$estVal->es_node_nid][] = $costCode;
    // Get cost code's description
    $query= db_select('node','n'); 
      $query->join('field_data_field_manager_cost_code','mcc','mcc.entity_id = n.nid');      
      $query->join('field_data_field_cost_code_description','ccd','ccd.entity_id = n.nid');       
      $query->fields('ccd',array('field_cost_code_description_value'));   
      $query->condition('mcc.field_manager_cost_code_value', $costCode, '=');
      $query->condition('n.type', 'project_cost_code', '=');
      $getCostCodeDesc = $query->execute()->fetchField();
    
    $estDesc = isset($estimateNode->field_project_est_description['und'])?$estimateNode->field_project_est_description['und'][0]['value']:'- None -';
    $lineAmt = isset($estimateNode->field_est_line_item_amt['und'])?'$'.number_format($estimateNode->field_est_line_item_amt['und'][0]['value']):'$0.00';
    $estComment = isset($estimateNode->field_project_est_comment['und'])?$estimateNode->field_project_est_comment['und'][0]['value']:'- None -';      
    $estimateRef = isset($estimateNode->field_estimate_reference['und'])?$estimateNode->field_estimate_reference['und'][0]['nid']:'';
    if($estimateRef != '') {
      $estimateName = node_load($estimateRef)->title;
    }
    else {
      $estimateName = 'None';
    }
    $estmateNid = $estimateNode->nid;         
    $action = '<div class="project-action"><div class="btn-group">
            <div class="dropdown">
          <button id="dLabel" class="btn btn-success" type="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"> Actions</button>
            <ul class="dropdown-menu" role="menu" aria-labelledby="dLabel">
              <li>'.l('Edit','edit-est-details/'.$estmateNid.'/nojs',array('attributes' => array('class' => 'ctools-modal-assign-dashboard-popup-style ctools-use-modal edit-estmate-details', 'for' => $estmateNid))).'</li>
            <li>'.l('Delete', url('node-delete/nojs/'.$estmateNid), array( 'external'=>TRUE, 'attributes'=> array('class'=>array('use-ajax ctools-modal-assign-dashboard-popup-style ctools-use-modal'))) ).'</li>
            </ul></div></div></div>';           
    if(!isset($lineAmoutTotal[$estVal->es_node_nid])){
    $lineAmoutTotal[$estVal->es_node_nid] =0;  
    }   
    $lineAmoutTotal[$estVal->es_node_nid] += (isset($estimateNode->field_est_line_item_amt['und']) && !empty($estimateNode->field_est_line_item_amt['und'][0]['value']))?$estimateNode->field_est_line_item_amt['und'][0]['value']:0;   
    if($estDesc != '' && !empty($estDesc)) {
      $ccWithDesc = $costCode.'|'.$getCostCodeDesc.' -'.$estDesc;
    }
    else {
      $ccWithDesc = $costCode.'|'.$getCostCodeDesc;
    }
    $rowsByEstimate[$estVal->es_node_nid][] = array($ccWithDesc,$lineAmt,$action); 
  }   
  }
  // Check if the cost code has contigensy
  $rows= array();  
  $rowClass = 'custom-even';
  foreach($rowsByEstimate as $estimateId => $estimateRows) {
  $rowConut = count($estimateRows);
  $rowClass = ($rowClass=='custom-even')?'custom-odd':'custom-even';
  foreach($estimateRows as $index => $esrow){
    if($index== 0){
    $rows[] = array(
      'data' => array(
        array('data'=>$esrow[0],'class' => array('text-left')),
      array('data'=>$esrow[1],'class' => array('text-left')),
      array('data'=>$esrow[2],'class' => array('text-center')),
      ),
      //'class' => array('custom-odd'),
    );  
    }
    else{
     $rows[] = array(
      'data' => array(
        array('data'=>$esrow[0],'class' => array('text-left')),
      array('data'=>$esrow[1],'class' => array('text-left')),
      array('data'=>$esrow[2],'class' => array('text-center')),
      ),
      //'class' => array('custom-odd'),
    );  
    }
  } 
  // Updated contigency calculation
  if($getNodeType == 'project_management') {
      $query = db_select('field_data_field_project_reference','pr');
      $query->join('field_data_field_estimate_reference','ed','ed.entity_id=pr.entity_id');
    $query->join('node','es_node','es_node.nid=ed.field_estimate_reference_nid');
    $query->join('field_data_field_conigency_status','cs','cs.entity_id=pr.entity_id');
    $query->fields('pr', array('entity_id'));
    $query->addField('es_node','nid','es_node_nid');
    $query->addField('es_node','title','es_node_title');
    $query->condition('cs.field_conigency_status_value','TRUE','=');
    $query->condition('pr.field_project_reference_nid', $estmtId, '=');
    $query->condition('pr.bundle','estimate_detail','=');
    $getEstimateNidContigency = $query->execute()->fetchAll();
  }
  else {      
    $query= db_select('node','n');
    $query->join('field_data_field_estimate_reference','ed','ed.entity_id=n.nid');
    $query->join('field_data_field_conigency_status','cs','cs.entity_id=n.nid');
    $query->fields('ed', array('entity_id'));
    $query->condition('ed.field_estimate_reference_nid', $estmtId, '=');
    $query->condition('cs.field_conigency_status_value','TRUE','=');
    $query->condition('ed.bundle','estimate_detail','=');
    $getEstimateNidContigency = $query->execute()->fetchAll();
    }     
  $rows[] = array(
      'data' => array(  
      array('data'=> '<strong>SubTotal: </strong>','class' => array('text-right')),
    array('data'=> '$'.number_format($lineAmoutTotal[$estimateId],2),'class' => array('text-left'),'colspan' => 2),       
    ),
    'class' => array('custom-odd'),
    );
  
  foreach($getEstimateNidContigency as $contiKey => $contiVal) {
    $contigencyNode = node_load($contiVal->entity_id);
    $action = '<div class="project-action"><div class="btn-group">
            <div class="dropdown">
          <button id="dLabel" class="btn btn-success" type="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"> Actions</button>
            <ul class="dropdown-menu" role="menu" aria-labelledby="dLabel">
              <li>'.l('Edit','edit-est-details/'.$contigencyNode->nid.'/nojs',array('attributes' => array('class' => 'ctools-modal-assign-dashboard-popup-style ctools-use-modal edit-estmate-details', 'for' => $contigencyNode->nid))).'</li>
            <li>'.l('Delete', url('node-delete/nojs/'.$contigencyNode->nid), array( 'external'=>TRUE, 'attributes'=> array('class'=>array('use-ajax ctools-modal-assign-dashboard-popup-style ctools-use-modal'))) ).'</li>
            </ul></div></div></div>'; 
    $getConPer = 0;
    $getConAmt = 0;
    if(isset($contigencyNode->field_conigency_percentage['und'])) {
      $getConPer = $contigencyNode->field_conigency_percentage['und'][0]['value'];
    }
    else {
      $getConAmt = $contigencyNode->field_est_line_item_amt['und'][0]['value'];
    }
    if($getConAmt != 0) {
    $calPer = ($getConAmt/$lineAmoutTotal[$estimateId]) * 100;
    $finalAMT += $getConAmt;     
    $rows[] = array(
          'data' => array(  
          array('data'=> get_description_by_cost_code_mod($contigencyNode->field_est_cost_code['und'][0]['value']),'class' => array('text-left')),
        //array('data'=> '$'.number_format($getConAmt).' | '.number_format($calPer, 2).' %','colspan' => 2,'class' => array('text-left')),    
      array('data'=> '$'.number_format($getConAmt, 2).' | '.number_format($calPer, 2).' %','class' => array('text-left')),
      array('data'=>$action,'class' => array('text-center')),
        ),
        //'class' => array('custom-odd'),
        );  
    }
    if($getConPer != 0) {     
      $percent = ($lineAmoutTotal[$estimateId] * $getConPer)/100;     
    $finalAMT += $percent; 
    $rows[] = array(
          'data' => array(  
          array('data'=> get_description_by_cost_code_mod($contigencyNode->field_est_cost_code['und'][0]['value']),'class' => array('text-left')),
        //array('data'=> '$'.number_format($percent).' | '.$getConPer.'%','colspan' => 2,'class' => array('text-left')),    
      array('data'=> '$'.number_format($percent).' | '.$getConPer.'%','class' => array('text-left')),   
      array('data'=>$action,'class' => array('text-center')),
        ),
        //'class' => array('custom-odd'),
        );  
    }
  }
  $totalBudget = $lineAmoutTotal[$estimateId] + $finalAMT;
  $rows[] = array(
      'data' => array(  
      array('data'=> '<strong>Total Budget: </strong>','class' => array('text-right')),
    array('data'=> '$'.number_format($totalBudget,2),'colspan' => 2,'class' => array('text-left')),   
    ),
    //'class' => array('custom-odd'),
    );
  }
  return  theme('table', array('header'=>$header,'rows'=>$rows,'empty'=>'No Line item created yet','attributes'=>array('class'=>array('table','m6connect-custom-table','m6connect-custom-program-table','m6connect-remove-vertical-top','m6connect-program-estimate-table','table-hover','table-bordered','text-center')),'sticky'=>FALSE));
}

function get_total_cost_of_estimate_detail($prjectId=0, $estimateId=0){
  $query= db_select('field_data_field_project_reference','pr');
  $query->join('field_data_field_estimate_reference','ed','ed.entity_id=pr.entity_id');
  $query->join('field_data_field_est_line_item_amt' ,'elia', 'elia.entity_id=pr.entity_id');
  $query->addExpression('SUM(elia.field_est_line_item_amt_value)');
  $query->condition('pr.field_project_reference_nid', $prjectId, '=');
  $query->condition('ed.field_estimate_reference_nid',$estimateId,'=');
  $query->condition('pr.bundle','estimate_detail','=');
  $query->groupBy('ed.field_estimate_reference_nid');
  $totalLineItemAmout = $query->execute()->fetchField();
  return $totalLineItemAmout;
}

function get_project_manager_comment_by_project($projectId) {
  global $company;  
  // Get project manager comment
  $query = db_select('m6connect_project_manager_comment', 'pmc');
  $query->join('realname', 'r', 'r.uid=pmc.user_uid');
  $query->fields('pmc', array('id', 'message','timestamp','user_uid'));
  $query->fields('r', array('realname'));   
  $query->condition('pmc.project_ref_id', $projectId, '=');
  $query->condition('pmc.company_nid', $company->nid, '=');
  $query->orderBy('pmc.timestamp', 'ASC');
  $result = $query->execute()->fetchAll();
  return $result;
}

function get_invoice_total_by_cost_code($costCode, $proId) {
  $query= db_select('node','n');     
  $query->join('field_data_field_project_reference','pr','n.nid=pr.entity_id');
  $query->join('field_data_field_invoice_cost_code','icc','icc.entity_id=n.nid');
  $query->join('field_data_field_invoice_amount','ea','ea.entity_id = n.nid');  
  $query->addExpression('SUM(ea.field_invoice_amount_value)','finalTotal');
  $query->condition('icc.field_invoice_cost_code_value', $costCode, '=');
  $query->condition('pr.field_project_reference_nid', $proId, '=');
  $query->groupBy('icc.field_invoice_cost_code_value');
  $getTotalInvoiceAmt = $query->execute()->fetchField(); 
  return $getTotalInvoiceAmt;
}

function get_commitment_total_by_cost_code($costCode, $proId) {
  $query = db_select('node','n');     
  $query->join('field_data_field_project_reference','pr','n.nid=pr.entity_id');
  $query->join('field_data_field_commitment_ws_code','icc','icc.entity_id=n.nid');
  $query->join('field_data_field_commitment_po_final_total','ft','ft.entity_id = n.nid');  
  $query->addExpression('SUM(ft.field_commitment_po_final_total_value)','finalTotal');
  $query->condition('icc.field_commitment_ws_code_value', $costCode, '=');
  $query->condition('pr.field_project_reference_nid', $proId, '=');
  $query->groupBy('icc.field_commitment_ws_code_value');
  $getTotalCommitemtnAmt = $query->execute()->fetchField(); 
  return $getTotalCommitemtnAmt;
}

function get_etc_total_by_cost_code($costCode, $proId) {
  $query = db_select('node','n');     
  $query->join('field_data_field_project_reference','pr','n.nid=pr.entity_id');
  $query->join('field_data_field_etc_cost_code','ecc','ecc.entity_id=n.nid');
  $query->join('field_data_field_etc_amount','ea','ea.entity_id = n.nid');  
  $query->join('field_data_field_etc_operation_done', 'eo', 'eo.entity_id = n.nid');
  $query->addExpression('SUM(ea.field_etc_amount_value)','finalTotal');
  $query->condition('ecc.field_etc_cost_code_value', $costCode, '=');
  $query->condition('pr.field_project_reference_nid', $proId, '=');
  //$query->condition('eo.field_etc_operation_done_value', 'In ETC', '=');
  $query->condition('eo.field_etc_operation_done_value', 'In ETC', '=');
  $query->groupBy('ecc.field_etc_cost_code_value');
  $getTotalEtcAmt = $query->execute()->fetchField(); 
  return $getTotalEtcAmt;
}

function get_total_allocated_by_cost_code($costCode, $proId,$getCommitmentAmt) {
  $query = db_select('node','n'); 
  $query->join('field_data_field_cost_code','ccc','ccc.entity_id = n.nid');
  $query->join('field_data_field_project_reference','pr','n.nid=pr.entity_id');
  $query->join('field_data_field_commitment_po_final_total','cpt','n.nid=cpt.entity_id');
  $query->fields('n', array('nid'));
  $query->fields('cpt', array('field_commitment_po_final_total_value'));
  $query->condition('ccc.field_cost_code_value', $costCode, '=');
  $query->condition('pr.field_project_reference_nid', $proId, '=');
  $commitmentNode = $query->execute()->fetchAll();
  $getPoBal = 0;
  foreach($commitmentNode as $commitKey => $commitVal) {
    // Get invoice against
    $query= db_select('node','n'); 
    $query->join('field_data_field_invoice_commitment','ic','ic.entity_id = n.nid');
    $query->join('field_data_field_invoice_amount','ia','ia.entity_id = n.nid');
    $query->addExpression('SUM(ia.field_invoice_amount_value)','finalTotal');
    $query->condition('n.type','project_spending','=');
    $query->condition('ic.field_invoice_commitment_nid',$commitVal->nid,'=');
    $query->groupBy('ic.field_invoice_commitment_nid');
    $getTotalSpending = $query->execute()->fetchField();
  
    $getCommitemntTotal = $commitVal->field_commitment_po_final_total_value;  
    if($getCommitemntTotal < $getTotalSpending) {
      $getPoBal += intval($getTotalSpending) - intval($getCommitemntTotal);
    }    
  }
  //return $getCommitmentAmt + $getPoBal;
  return (intval($getCommitmentAmt) + intval($getPoBal));
}

function get_userlist_by_role_company_nid($companyNid, $roleId) {
  global $company;
  $query = db_select('users','u');
  $query->innerjoin('users_roles','ur','ur.uid= u.uid');
  $query->join('field_data_field_first_name','fn', 'fn.entity_id = u.uid');
  $query->join('field_data_field_last_name','ln', 'ln.entity_id = u.uid');
  $query->join('og_membership','og', 'og.etid = u.uid');
  $query->fields('u', array('uid'));
  $query->fields('fn', array('field_first_name_value'));
  $query->fields('ln', array('field_last_name_value'));
  $query->condition('ur.rid', $roleId, '=');
  $query->condition('og.gid', $companyNid, '=');
  $result = $query->execute()->fetchAll();
  $userData = array();
  foreach($result as $resKey => $resVal) {
  $userData[$resVal->uid] = $resVal->field_first_name_value.' '.$resVal->field_last_name_value;
  }
  return $userData;
}

function _get_company_users_list_by_og_roles($cmpNid, $roleName) {
  $query = db_select ( 'users', 'u' );
  $query->join ( 'og_membership', 'og', 'og.etid=u.uid AND og.entity_type=:EntityType', array (
      ':EntityType' => 'user' 
  ) );
  $query->join ( 'og_users_roles', 'ogur', 'ogur.uid=og.etid AND ogur.gid=og.gid AND ogur.group_type=:GroupType', array (
      ':GroupType' => 'node' 
  ) );
  $query->join ( 'og_role', 'ogr', 'ogur.rid = ogr.rid' );
  $query->join ( 'realname', 'r', 'u.uid = r.uid' );
  $query->fields ( 'u', array (
      'uid' 
  ) );
  $query->fields ( 'r', array (
      'realname' 
  ) );
  $query->condition ( 'og.gid', $cmpNid, '=' );
  $query->condition ( 'ogr.group_bundle', 'organization', '=' );
  $query->condition ( 'ogr.name', $roleName, '=' );
  return $query->execute ()->fetchAllKeyed (0,1);
}

function get_total_approved_budget_by_project($proId = 0) {
  global $company;  
  // Get cost code by and budget amount by project    
  $query= db_select('node','n');
  $query->join('og_membership','om','om.etid=n.nid AND om.entity_type=:entityType', array(':entityType'=>'node'));
  $query->join('field_data_field_estimate_reference','er','er.entity_id = n.nid');
  $query->join('node','enode','enode.nid=er.field_estimate_reference_nid');
  $query->join('field_data_field_project_estimate_status','es','es.entity_id = enode.nid');  
  $query->join('field_data_field_project_estimate_amount','ea','ea.entity_id = enode.nid');    
  $query->join('field_data_field_capital_contingency','ecc','ecc.entity_id = enode.nid');        
  $query->join('field_data_field_project_reference','pr','enode.nid=pr.entity_id');  
  $query->leftjoin('field_data_field_est_line_item_amt','la','n.nid=la.entity_id');  
  $query->leftjoin('field_data_field_conigency_percentage','cp','n.nid=cp.entity_id');  
  $query->leftjoin('field_data_field_est_cost_code','cc','cc.entity_id=n.nid');
  $query->fields('cc',array('entity_id'));
  $query->fields('la',array('field_est_line_item_amt_value'));
  $query->fields('cp',array('field_conigency_percentage_value'));
  $query->fields('cc',array('field_est_cost_code_value'));
  $query->fields('ea',array('field_project_estimate_amount_value'));  
  $query->fields('ecc',array('field_capital_contingency_value'));  
  $query->fields('er',array('field_estimate_reference_nid'));  
  $query->condition('es.field_project_estimate_status_value', 'approved', '=');
  $query->orderBy('cc.field_est_cost_code_value', 'ASC');
  $query->condition('pr.field_project_reference_nid', $proId, '=');
  $query->condition('om.gid', $company->nid, '=');
  $costCode = $query->execute()->fetchAll();    
  
  $query2= db_select('node','n'); 
  $query2->join('og_membership','om','om.etid=n.nid AND om.entity_type=:entityType', array(':entityType'=>'node'));
  $query2->join('field_data_field_estimate_reference','er','er.entity_id = n.nid');
  $query2->join('node','enode','enode.nid=er.field_estimate_reference_nid');
  $query2->join('field_data_field_project_estimate_status','es','es.entity_id = enode.nid');      
  $query2->join('field_data_field_project_reference','pr','enode.nid=pr.entity_id');  
  $query2->leftjoin('field_data_field_est_line_item_amt','la','n.nid=la.entity_id');  
  $query2->leftjoin('field_data_field_est_cost_code','cc','cc.entity_id=n.nid');
  $query2->addExpression('SUM(la.field_est_line_item_amt_value)');
  $query2->condition('es.field_project_estimate_status_value', 'approved', '=');
  $query2->orderBy('cc.field_est_cost_code_value', 'ASC');
  $query2->condition('pr.field_project_reference_nid', $proId, '=');        
  $query2->condition('om.gid', $company->nid, '=');
  $amtLineTotal = $query2->execute()->fetchField(); 
  
  $i = 0;
  foreach($costCode as $ccId => $ccVal) { 
    // Get cost code  
    $costCode = get_description_by_cost_code_mod($ccVal->field_est_cost_code_value);
    // Get Original budget
    $capitalContigency = $ccVal->field_capital_contingency_value; 
    if(!isset($ccArr[$ccVal->field_est_cost_code_value])){
      $ccArr[$ccVal->field_est_cost_code_value]= array(
        'cost_code' => $ccVal->field_est_cost_code_value.'|'.$costCodeDes,
        'originalBudget' => 0,
        'currentBudget' => 0,
        'Commitment' => 0,
        'spent' => 0,
        'Allocated' => 0,
        'est' => 0,
        'PFC' => 0,
        'Variance' => 0,
      );
    }
    if($ccVal->field_est_line_item_amt_value != '') {
      $originalBudget = $ccVal->field_est_line_item_amt_value;
    }
    else if($ccVal->field_conigency_percentage_value != '') {
      $percent = ($amtLineTotal * $ccVal->field_conigency_percentage_value)/100;      
      $originalBudget = $percent;
    }
    $totalOriginalBudget += $originalBudget;
    $currentBudget = $originalBudget;
    $totalcurrentBudget += $currentBudget;
    // Get invoice total
    $getInvoiceTotal = get_invoice_total_by_cost_code($ccVal->field_est_cost_code_value,$proId);
    $totalInvoiceTotal += $getInvoiceTotal;
    // Get commitment total
    $getCommitmentTotal = get_commitment_total_by_cost_code($ccVal->field_est_cost_code_value,$proId);
    $totalCommitmentTotal += $getCommitmentTotal;
    // Get total allocated 
    $getTotalAllocated = get_total_allocated_by_cost_code($ccVal->field_est_cost_code_value,$proId,$getCommitmentTotal);
    $totalAllocated += $getTotalAllocated;
    // Get etc total
    $getETCTotal = get_etc_total_by_cost_code($ccVal->field_est_cost_code_value,$proId);
    $etcTotal += $getETCTotal;
    // Get Project final cost
    $projectFinalCost = $getTotalAllocated + $getETCTotal;
    $totalFinalCost += $projectFinalCost;
    // Variance
    $varience = $originalBudget - $projectFinalCost;
    $totalVariance += $varience;  
  
    $ccArr[$ccVal->field_est_cost_code_value]['originalBudget'] += $originalBudget; 
    $ccArr[$ccVal->field_est_cost_code_value]['currentBudget'] += $currentBudget;
    $ccArr[$ccVal->field_est_cost_code_value]['Commitment'] = $getCommitmentTotal;
    $ccArr[$ccVal->field_est_cost_code_value]['spent'] = $getInvoiceTotal;
    $ccArr[$ccVal->field_est_cost_code_value]['Allocated'] = $getTotalAllocated;
    $ccArr[$ccVal->field_est_cost_code_value]['est'] = $getETCTotal;
    $ccArr[$ccVal->field_est_cost_code_value]['PFC'] = $projectFinalCost;
    $ccArr[$ccVal->field_est_cost_code_value]['Variance'] = $varience;  
  } 
  $ccArrTotal= array(
    'originalBudget' => 0,
    'currentBudget' => 0,
    'Commitment' => 0,
    'spent' => 0,
    'Allocated' => 0,
    'est' => 0,
    'PFC' => 0,
    'Variance' => 0,
  );
  foreach($ccArr as $ccKey => $ccVals) {
    $ccArrTotal= array(
      'originalBudget' => $ccArrTotal['originalBudget']+$ccVals['originalBudget'],
      'currentBudget' => $ccArrTotal['currentBudget']+$ccVals['currentBudget'],
      'Commitment' => $ccArrTotal['Commitment']+$ccVals['Commitment'],
      'spent' => $ccArrTotal['spent']+$ccVals['spent'],
      'Allocated' => $ccArrTotal['Allocated']+$ccVals['Allocated'],
      'est' => $ccArrTotal['est']+$ccVals['est'],
      'PFC' => $ccArrTotal['PFC']+$ccVals['PFC'],
      'Variance' => $ccArrTotal['Variance']+$ccVals['Variance'],
    );
  } 
  return array('totalAllocated' => $ccArrTotal['originalBudget'],'etcTotal' => $ccArrTotal['est'],'projectFinalCost' => $ccArrTotal['PFC'],'totalOriginalBudget' => $ccArrTotal['originalBudget']); 
}

function get_status_mark_of_project($bundle,$projectNode) {
  $query= db_select('field_data_field_project_reference','pr');
  $query->fields('pr', array('entity_id'));
  $query->condition('pr.field_project_reference_nid', $projectNode, '=');
  $query->condition('pr.bundle',$bundle,'=');
  $getNode = $query->execute()->fetchCol();
  foreach($getNode as $nodeVal) {
    $nodeStatus = node_load($nodeVal);
    if($bundle == 'project_safety') {
      if(isset($nodeStatus->field_safety_status['und'])) {
        if($nodeStatus->field_safety_status['und'][0]['value'] != '') { 
          $status = node_load($nodeStatus->nid)->field_safety_status['und'][0]['value'];
          if($status == 'reds') {
            return '<div class="status-mark form-group text-danger"><i class="fa fa-check-circle"></i></div>';
          }
          else if($status == 'yellows') {
            return '<div class="status-mark form-group text-warning-cost-manger"><i class="fa fa-check-circle"></i></div>';
          }
          else if($status == 'greens') {
            return '<div class="status-mark form-group text-success"><i class="fa fa-check-circle"></i></div>';
          }
        }
      }
    }
    else if($bundle == 'project_schedule') {
      if(isset($nodeStatus->field_schedule_status['und'])) {
        if($nodeStatus->field_schedule_status['und'][0]['value'] != '') { 
          $status = node_load($nodeStatus->nid)->field_schedule_status['und'][0]['value'];
          if($status == 'reds') {
            return '<div class="status-mark form-group text-danger"><i class="fa fa-check-circle"></i></div>';
          }
          else if($status == 'yellows') {
            return '<div class="status-mark form-group text-warning-cost-manger"><i class="fa fa-check-circle"></i></div>';
          }
          else if($status == 'greens') {
            return '<div class="status-mark form-group text-success"><i class="fa fa-check-circle"></i></div>';
          }
        }
      }
    } 
    else if($bundle == 'project_etc') {
      if(isset($nodeStatus->field_etc_status_mark['und'])) {
        if($nodeStatus->field_etc_status_mark['und'][0]['value'] != '') { 
          $status = node_load($nodeStatus->nid)->field_etc_status_mark['und'][0]['value'];
          if($status == 'reds') {
            return '<div class="status-mark form-group text-danger"><i class="fa fa-check-circle"></i></div>';
          }
          else if($status == 'yellows') {
            return '<div class="status-mark form-group text-warning-cost-manger"><i class="fa fa-check-circle"></i></div>';
          }
          else if($status == 'greens') {
            return '<div class="status-mark form-group text-success"><i class="fa fa-check-circle"></i></div>';
          }
        }
      }
    }
  }   
}

function _get_user_realname($uid){
  return db_select('realname','r')->fields('r', array('realname'))->condition('r.uid',$uid)->execute()->fetchField(); 
}

function _is_m6_user_logged_in() {
  if(user_is_logged_in()) {
    return true;
  }
  return false;
}

function get_description_by_cost_code_mod($costCode = 0) {
  if($costCode != '') { 
    $getCcDes = db_select('node','n'); 
    $getCcDes->join('field_data_field_manager_cost_code','mcc','mcc.entity_id = n.nid'); 
    $getCcDes->join('field_data_field_cost_code_description','ccd','ccd.entity_id = n.nid');    
    $getCcDes->fields('ccd',array('field_cost_code_description_value'));
    $getCcDes->condition('mcc.field_manager_cost_code_value',$costCode, '=');
    $costCodeDes = $getCcDes->execute()->fetchField();      
  return $costCode.' | '.$costCodeDes;
  }
  else {
    return 'None';
  }
}

function _get_final_budget_by_contigency($projectId, $estId, $contigency) {
  $capitalContigency = $contigency;
  
  $query = db_select('field_data_field_project_reference','pr');
  $query->join('field_data_field_estimate_reference','ed','ed.entity_id=pr.entity_id');
  $query->join('field_data_field_est_line_item_amt' ,'elia', 'elia.entity_id=pr.entity_id');
  $query->join('field_data_field_conigency_status','cs','cs.entity_id=pr.entity_id');
  $query->addExpression('SUM(elia.field_est_line_item_amt_value)');
  $query->condition('pr.field_project_reference_nid', $projectId, '=');
  $query->condition('ed.field_estimate_reference_nid',$estId,'=');
  $query->condition('cs.field_conigency_status_value','FALSE','=');
  $query->condition('pr.bundle','estimate_detail','=');
  $query->groupBy('ed.field_estimate_reference_nid');
  $totalLineItemAmout = $query->execute()->fetchField();
  
  $query= db_select('node','n');
  $query->join('field_data_field_estimate_reference','ed','ed.entity_id=n.nid');
  $query->join('field_data_field_conigency_status','cs','cs.entity_id=n.nid');
  $query->fields('ed', array('entity_id'));
  $query->condition('ed.field_estimate_reference_nid', $estId, '=');
  $query->condition('cs.field_conigency_status_value','TRUE','=');
  $query->condition('ed.bundle','estimate_detail','=');
  $getEstimateNidContigency = $query->execute()->fetchAll();
  $finalAMT = 0;
  foreach($getEstimateNidContigency as $contiKey => $contiVal) {
    $contigencyNode = node_load($contiVal->entity_id);
    $getConPer = 0;
    $getConAmt = 0;
    if(isset($contigencyNode->field_conigency_percentage['und'])) {
      $getConPer = $contigencyNode->field_conigency_percentage['und'][0]['value'];
    }
    else {
      $getConAmt = $contigencyNode->field_est_line_item_amt['und'][0]['value'];
    }
    if($getConAmt != 0) {   
      $finalAMT += $getConAmt; 
    }
    if($getConPer != 0) {     
      $percent = ($totalLineItemAmout * $getConPer)/100;      
      $finalAMT += $percent;    
    }
  }
  return $finalBudget = $totalLineItemAmout + $finalAMT;
}

function get_costcode_contigency_status_callback($code,$ajax=TRUE) {
  // Check if cost code is sub or main cost code
  if (strpos($code, ".") !== false) {
    $cCodeCal = explode('.',$code);
    $cCode = $cCodeCal[0]; 
  }
  else {
    $cCode = $code;
  }
  $query = db_select('node','n');
  $query->join('field_data_field_manager_cost_code','mcc', 'mcc.entity_id = n.nid');
  $query->join('field_data_field_cost_code_project_continge','pc', 'pc.entity_id = n.nid');
  $query->fields('pc', array('field_cost_code_project_continge_value'));
  $query->condition('mcc.field_manager_cost_code_value', $cCode,'=');
  $query->condition('pc.field_cost_code_project_continge_value', '1','=');
  $resultContigency = $query->execute()->fetchField();
  if(!empty($resultContigency) && $resultContigency == 1) {
    drupal_json_output(1);
    drupal_exit(0);
  }
  else {
  drupal_json_output(0);
    drupal_exit(0);
  }
}

function _node_list_by_company_project($cnid, $ctype = '',$proId) { 
  $query = db_select('node','n');
  $query->join('og_membership','om','om.etid=n.nid AND om.entity_type=:entityType', array(':entityType'=>'node'));
  $query->join('field_data_field_project_reference','pr','n.nid=pr.entity_id');
  $query->join('field_data_field_commitment_number_calculat','cn','n.nid=cn.entity_id');
  $query->fields('n', array('nid'));
  $query->fields('cn', array('field_commitment_number_calculat_value'));
  $query->condition('om.gid', $cnid, '=');
  $query->condition('n.type', $ctype,'=');
  $query->condition('pr.field_project_reference_nid', $proId, '=');
  $query->orderBy('n.created', 'DESC');
  $projectByCompany = $query->execute()->fetchAll();  
  if (!empty($projectByCompany)) {
    $commiArr = array();
    foreach($projectByCompany as $commitKey => $comVal) {
      if($comVal->field_total_commit_clone_value == 0) {
        $commiArr[$comVal->nid] = $comVal->field_commitment_number_calculat_value;
      } 
      else {
        $commiArr[$comVal->nid] = $comVal->field_commitment_number_calculat_value.' - '.$comVal->field_total_commit_clone_value;
      }
    }
    return $commiArr;
  }
  return array();
}

function _get_total_commitments_total($companyId, $proId) {
  $query= db_select('node','n');
  $query->join('field_data_field_project_reference','pr','n.nid=pr.entity_id');    
  $query->join('field_data_field_commitment_po_final_total','ia','ia.entity_id = n.nid');
  $query->join('og_membership','om','om.etid=n.nid AND om.entity_type=:entityType', array(':entityType'=>'node'));
  $query->addExpression('SUM(ia.field_commitment_po_final_total_value)','finalTotal');
  $query->condition('n.type','project_commitement','=');
  $query->condition('om.gid', $companyId, '=');
  $query->condition('pr.field_project_reference_nid', $proId, '=');        
  //$query->groupBy('ic.field_invoice_commitment_nid');
  $getTotalSpending = $query->execute()->fetchField();
  return '<div class="form-control">Total Commitments: $'.number_format($getTotalSpending, 2).'</div>';
}

function _get_total_etc_total($companyId, $proId) {
  $query= db_select('node','n');
  $query->join('field_data_field_project_reference','pr','n.nid=pr.entity_id');    
  $query->join('field_data_field_etc_amount','ia','ia.entity_id = n.nid');
  $query->join('og_membership','om','om.etid=n.nid AND om.entity_type=:entityType', array(':entityType'=>'node'));
  $query->join('field_data_field_etc_operation_done', 'eo', 'eo.entity_id = n.nid');
  $query->addExpression('SUM(ia.field_etc_amount_value)','finalTotal');
  $query->condition('n.type','project_etc','=');
  $query->condition('om.gid', $companyId, '=');
  $query->condition('pr.field_project_reference_nid', $proId, '=');
  $query->condition('eo.field_etc_operation_done_value', 'In ETC', '=');
  $getTotalEtc = $query->execute()->fetchField();
  return '<div class="form-control">Spending Previous Year: $0.00</div>';
  //return '<div class="form-control">Total ETC: $'.number_format($getTotalEtc, 2).'</div>';
}

function _get_total_spending_total($companyId, $proId) {
  $query= db_select('node','n');
  $query->join('field_data_field_project_reference','pr','n.nid=pr.entity_id');    
  $query->join('field_data_field_invoice_amount','ia','ia.entity_id = n.nid');
  $query->join('og_membership','om','om.etid=n.nid AND om.entity_type=:entityType', array(':entityType'=>'node'));
  $query->addExpression('SUM(ia.field_invoice_amount_value)','finalTotal');
  $query->condition('n.type','project_spending','=');
  $query->condition('om.gid', $companyId, '=');
  $query->condition('pr.field_project_reference_nid', $proId, '=');        
  //$query->groupBy('ic.field_invoice_commitment_nid');
  $getTotalSpending = $query->execute()->fetchField();
  return '<div class="form-control">Total Spending: $'.number_format($getTotalSpending, 2).'</div>';
}

function load_more_data_callback($type,$projectId,$endRange) {
  global $company;
  if($type == 'commit') {
    $tableRows = get_commitment_listing_table_data($projectId, $filterFor = '', $filterVal='',$ajax=TRUE,$endRange);
  }
  if($type == 'spending') {
    $tableRows = get_spending_listing_table_data($projectId,$filterFor = '', $filterVal='',$ajax=TRUE,$endRange);  
  }
  drupal_json_output(array('tableDate'=>$tableRows));
  drupal_exit(0);
}

function _get_current_quarter($month){
  if($month < 4){
    return 'firstQuarter';
  }
  elseif($month > 3 && $month <7){
    return 'secondQuarter';
  }
  elseif($month >6 && $month < 10){
    return 'thirdQuarter';
  }
  elseif($month >9){
    return 'fourthQuarter';
  }
}

function _get_spending_total_by_quarter($startDateQuater,$endD,$proId,$commitId, $only_digits = FALSE) {
  /*
   *  Get spending amount based on quarter, 
   *  Prod id and commit id.
   */ 
  $query= db_select('node','n'); 
  $query->join('field_data_field_project_reference','pr', 'pr.entity_id = n.nid');   
  $query->join('field_data_field_invoice_commitment','ic','ic.entity_id = n.nid');    
  $query->join('field_data_field_invoice_amount','ia','ia.entity_id = n.nid');
  $query->join('field_data_field_invoice_date','id','id.entity_id = n.nid');
  $query->addExpression('SUM(ia.field_invoice_amount_value)','finalTotal');
  $query->condition('n.type','project_spending','=');
  $query->condition('id.field_invoice_date_value', array($startDateQuater, $endD), 'BETWEEN');
  $query->condition('pr.field_project_reference_nid', $proId, '=');
  $query->condition('ic.field_invoice_commitment_nid',$commitId,'=');
  $getQuarterSpending = $query->execute()->fetchField();
  if (!empty($getQuarterSpending)) {
    return $only_digits ? $getQuarterSpending : '$'.number_format($getQuarterSpending);
  }
  else {
    return $only_digits ? 0 : '$0.00';
  }
}

function _get_previous_year_spending_total($proId,$commitId) {      
  //$updatedYear = date('Y', strtotime('-1 years'));
  $updatedYear = date('Y');
  $currentYear = $updatedYear.'-01-01 00:00:00';  
  //$endDateYear = $updatedYear.'-12-31 00:00:00';
  $query= db_select('node','n'); 
  $query->join('field_data_field_project_reference','pr', 'pr.entity_id = n.nid');   
  $query->join('field_data_field_invoice_commitment','ic','ic.entity_id = n.nid');    
  $query->join('field_data_field_invoice_amount','ia','ia.entity_id = n.nid');
  $query->join('field_data_field_invoice_date','id','id.entity_id = n.nid');
  $query->addExpression('SUM(ia.field_invoice_amount_value)','finalTotal');
  //$query->fields('n',array('nid'));
  $query->condition('n.type','project_spending','=');
  $query->condition('id.field_invoice_date_value', array($currentYear), '<');
  $query->condition('pr.field_project_reference_nid', $proId, '=');
  $query->condition('ic.field_invoice_commitment_nid',$commitId,'=');
  $lastYearSpend = $query->execute()->fetchField();
  if(!empty($lastYearSpend)) {
  return $lastYearSpend;
  }
  else {
  return 0;
  }
}

function _get_previous_year_etc_total($proId,$commitId) {      
  //$updatedYear = date('Y', strtotime('-1 years'));
  $updatedYear = date('Y');
  $currentYear = $updatedYear.'-01-01 00:00:00';  
  //$endDateYear = $updatedYear.'-12-31 00:00:00';
  $query= db_select('node','n'); 
  $query->join('field_data_field_project_reference','pr', 'pr.entity_id = n.nid');   
  $query->join('field_data_field_invoice_commitment','ic','ic.entity_id = n.nid');    
  $query->join('field_data_field_invoice_amount','ia','ia.entity_id = n.nid');
  $query->join('field_data_field_invoice_date','id','id.entity_id = n.nid');
  $query->addExpression('SUM(ia.field_invoice_amount_value)','finalTotal');
  //$query->fields('n',array('nid'));
  $query->condition('n.type','project_etc','=');
  $query->condition('pr.field_project_reference_nid', $proId, '=');
  $lastYearSpend = $query->execute()->fetchField();
  if(!empty($lastYearSpend)) {
  return '$'.number_format($lastYearSpend);
  }
  else {
  return '$0.00';
  }
}

function spending_forecast_data_callback($quarterName,$proId,$commitId,$values,$currentYear,$variance) {
  global $company;
  if($values != '') {             
  if($quarterName == 'one') {
    $query = db_select('m6connect_spending_forecast', 'sf');
    $query->fields('sf', array('quarter_two_amount', 'quarter_three_amount','quarter_four_amount','future_year_amout'));
    $query->condition('sf.project_id', $proId, '=');
    $query->condition('sf.commitment_id', $commitId, '=');
    $result = $query->execute()->fetchAll();
    $qOne = $values;
    $qTwo = $result[0]->quarter_two_amount!=''?$result[0]->quarter_two_amount:0;
    $qThree = $result[0]->quarter_three_amount!=''?$result[0]->quarter_three_amount:0;
    $qFour = $result[0]->quarter_four_amount!=''?$result[0]->quarter_four_amount:0;
    $future = $result[0]->future_year_amout!=''?$result[0]->future_year_amout:0;
  }
  if($quarterName == 'two') {
    $query = db_select('m6connect_spending_forecast', 'sf');
    $query->fields('sf', array('quarter_one_amount', 'quarter_three_amount','quarter_four_amount','future_year_amout'));
    $query->condition('sf.project_id', $proId, '=');
    $query->condition('sf.commitment_id', $commitId, '=');
    $result = $query->execute()->fetchAll();
    $qOne = $result[0]->quarter_one_amount!=''?$result[0]->quarter_one_amount:0;
    $qTwo = $values;
    $qThree = $result[0]->quarter_three_amount!=''?$result[0]->quarter_three_amount:0;
    $qFour = $result[0]->quarter_four_amount!=''?$result[0]->quarter_four_amount:0;
    $future = $result[0]->future_year_amout!=''?$result[0]->future_year_amout:0;
  }
  if($quarterName == 'three') {
    $query = db_select('m6connect_spending_forecast', 'sf');
    $query->fields('sf', array('quarter_one_amount','quarter_two_amount','quarter_four_amount','future_year_amout'));
    $query->condition('sf.project_id', $proId, '=');
    $query->condition('sf.commitment_id', $commitId, '=');
    $result = $query->execute()->fetchAll();
    $qOne = $result[0]->quarter_one_amount!=''?$result[0]->quarter_one_amount:0;
    $qTwo = $result[0]->quarter_two_amount!=''?$result[0]->quarter_two_amount:0;
    $qThree = $values;
    $qFour = $result[0]->quarter_four_amount!=''?$result[0]->quarter_four_amount:0;
    $future = $result[0]->future_year_amout!=''?$result[0]->future_year_amout:0;
  }
  if($quarterName == 'four') {
    $query = db_select('m6connect_spending_forecast', 'sf');
    $query->fields('sf', array('quarter_one_amount','quarter_two_amount', 'quarter_three_amount','future_year_amout'));
    $query->condition('sf.project_id', $proId, '=');
    $query->condition('sf.commitment_id', $commitId, '=');
    $result = $query->execute()->fetchAll();
    $qOne = $result[0]->quarter_one_amount!=''?$result[0]->quarter_one_amount:0;
    $qTwo = $result[0]->quarter_two_amount!=''?$result[0]->quarter_two_amount:0;
    $qThree = $result[0]->quarter_three_amount!=''?$result[0]->quarter_three_amount:0;
    $qFour = $values;
    $future = $result[0]->future_year_amout!=''?$result[0]->future_year_amout:0;
  } 
  if($quarterName == 'future') { 
    $query = db_select('m6connect_spending_forecast', 'sf');
    $query->fields('sf', array('quarter_one_amount','quarter_two_amount', 'quarter_three_amount','quarter_four_amount','future_year_amout'));
    $query->condition('sf.project_id', $proId, '=');
    $query->condition('sf.commitment_id', $commitId, '=');
    $result = $query->execute()->fetchAll();
    $qOne = $result[0]->quarter_one_amount;
    $qTwo = $result[0]->quarter_two_amount;
    $qThree = $result[0]->quarter_three_amount;
    $qFour = $result[0]->quarter_four_amount;
    $future = $result[0]->future_year_amout!=''?$result[0]->future_year_amout:0;
  }
  
  db_merge('m6connect_spending_forecast')
    ->key(array('project_id' => $proId,'commitment_id' => $commitId))
    ->fields(array(
      'project_id' => $proId,
      'commitment_id' => $commitId,
      'quarter_one_amount' => $qOne,
      'quarter_two_amount' => $qTwo,
      'quarter_three_amount' => $qThree,
    'quarter_four_amount' => $qFour,
    'current_year_spending_amount' => $currentYear,
    'future_year_amout' => $future,
    'variance_amount' => $variance,
    ))
    ->execute();
  $status = array('out' => 'success');
  drupal_json_output($status);
  }      
  drupal_exit(0);
}


function spending_forecast_previous_data_callback($proId,$forecast) {
  // Get the privius forecast with the same name  
  $query = db_select('m6connect_spending_forecast', 'sf');
  $query->fields('sf', array('id'));
  $query->condition('sf.forecast_name', $forecast, '=');
  $query->condition('sf.project_id', $proId, '=');
  $previousForecast = $query->execute()->fetchCol();
  if($previousForecast) 
  $status = array('out' => 'success');
  drupal_json_output($status);
  drupal_exit(0);
}

function spending_forecast_remove_data_callback($proId,$forecast) {
  if(!empty($forecast)) {
    db_delete('m6connect_spending_forecast')
            ->condition('project_id',$proId, '=')     
      ->condition('forecast_name', '%' . db_like($forecast) . '%', 'LIKE')
      ->execute();
    $status = array('out' => 'success');
  }
  else {
    $status = array('out' => 'error');
  }
  drupal_json_output($status);
  drupal_exit(0);
}

function _get_report_costcode_data($proID) {
  global $company;
// Get cost code by and budget amount by project    
  $query= db_select('node','n'); 
  $query->join('og_membership','om','om.etid=n.nid AND om.entity_type=:entityType', array(':entityType'=>'node'));
  $query->join('field_data_field_estimate_reference','er','er.entity_id = n.nid');
  $query->join('node','enode','enode.nid=er.field_estimate_reference_nid');
  $query->join('field_data_field_project_estimate_status','es','es.entity_id = enode.nid');  
  $query->join('field_data_field_project_estimate_amount','ea','ea.entity_id = enode.nid');    
  $query->join('field_data_field_capital_contingency','ecc','ecc.entity_id = enode.nid');        
  $query->join('field_data_field_project_reference','pr','enode.nid=pr.entity_id');  
  $query->leftjoin('field_data_field_est_line_item_amt','la','n.nid=la.entity_id');  
  $query->leftjoin('field_data_field_conigency_percentage','cp','n.nid=cp.entity_id');  
  $query->leftjoin('field_data_field_est_cost_code','cc','cc.entity_id=n.nid');
  $query->fields('cc',array('entity_id'));
  $query->fields('la',array('field_est_line_item_amt_value'));
  $query->fields('cp',array('field_conigency_percentage_value'));
  $query->fields('cc',array('field_est_cost_code_value'));
  $query->fields('ea',array('field_project_estimate_amount_value'));  
  $query->fields('ecc',array('field_capital_contingency_value'));  
  $query->fields('er',array('field_estimate_reference_nid'));  
  $query->fields('pr',array('field_project_reference_nid'));  
  $query->condition('es.field_project_estimate_status_value', 'approved', '=');
  $query->orderBy('cc.field_est_cost_code_value', 'ASC');
  $query->condition('pr.field_project_reference_nid', $proID, '=');
  $query->condition('om.gid', $company->nid, '=');
  $costCode = $query->execute()->fetchAll();
  
  $query2= db_select('node','n'); 
  $query2->join('og_membership','om','om.etid=n.nid AND om.entity_type=:entityType', array(':entityType'=>'node'));
  $query2->join('field_data_field_estimate_reference','er','er.entity_id = n.nid');
  $query2->join('node','enode','enode.nid=er.field_estimate_reference_nid');
  $query2->join('field_data_field_project_estimate_status','es','es.entity_id = enode.nid');      
  $query2->join('field_data_field_project_reference','pr','enode.nid=pr.entity_id');  
  $query2->leftjoin('field_data_field_est_line_item_amt','la','n.nid=la.entity_id');  
  $query2->leftjoin('field_data_field_est_cost_code','cc','cc.entity_id=n.nid');
  $query2->addExpression('SUM(la.field_est_line_item_amt_value)');
  $query2->condition('es.field_project_estimate_status_value', 'approved', '=');
  $query2->orderBy('cc.field_est_cost_code_value', 'ASC');
  $query2->condition('pr.field_project_reference_nid', $proID, '=');        
  $query2->condition('om.gid', $company->nid, '=');
  $amtLineTotal = $query2->execute()->fetchField(); 
    
  $ccArr = array();
  $ccArrCount = array();
  $allDataArr[$proID] = $costCode;
  foreach($costCode as $ccId => $ccVal) { 

    // Get cost code
    $getCcDes = db_select('node','n'); 
    $getCcDes->join('field_data_field_manager_cost_code','mcc','mcc.entity_id = n.nid'); 
    $getCcDes->join('field_data_field_cost_code_description','ccd','ccd.entity_id = n.nid');    
    $getCcDes->fields('ccd',array('field_cost_code_description_value'));
    $getCcDes->condition('mcc.field_manager_cost_code_value',$ccVal->field_est_cost_code_value, '=');
    $costCodeDes = $getCcDes->execute()->fetchField();        
    $costCode = $ccVal->field_est_cost_code_value.'|'.$costCodeDes; 
    // Get Original budget
    $capitalContigency = $ccVal->field_capital_contingency_value; 
    if(!isset($ccArr[$ccVal->field_est_cost_code_value])){
    $ccArr[$ccVal->field_est_cost_code_value]= array(     
      'cost_code' => $ccVal->field_est_cost_code_value.'|'.$costCodeDes,
      'originalBudget' => 0,
      'currentBudget' => 0,
      'Commitment' => 0,
      'spent' => 0,
      'Allocated' => 0,
      'est' => 0,
      'PFC' => 0,
      'Variance' => 0,
    );
    $ccArrCount[$ccVal->field_est_cost_code_value] = 0; 
    }   
    if($ccVal->field_est_line_item_amt_value != '') {
    $originalBudget = $ccVal->field_est_line_item_amt_value;
    }
    else if($ccVal->field_conigency_percentage_value != '') {
    $percent = ($amtLineTotal * $ccVal->field_conigency_percentage_value)/100;
    $originalBudget = $percent;
    }
    $totalOriginalBudget += $originalBudget;
    $currentBudget = $originalBudget;
    $totalcurrentBudget += $currentBudget;
    // Get invoice total
    $getInvoiceTotal = get_invoice_total_by_cost_code($ccVal->field_est_cost_code_value,$proID);
    $totalInvoiceTotal += $getInvoiceTotal;
    // Get commitment total
    $getCommitmentTotal = get_commitment_total_by_cost_code($ccVal->field_est_cost_code_value,$proID);
    
    $totalCommitmentTotal += $getCommitmentTotal;
    // Get total allocated 
    $getTotalAllocated = get_total_allocated_by_cost_code($ccVal->field_est_cost_code_value,$proID,$getCommitmentTotal);
    $totalAllocated += $getTotalAllocated;
    // Get etc total
    $getETCTotal = get_etc_total_by_cost_code($ccVal->field_est_cost_code_value,$proID);
    $etcTotal += $getETCTotal;
    // Get Project final cost
    $projectFinalCost = $getTotalAllocated + $getETCTotal;
    $totalFinalCost += $projectFinalCost;
    // Variance
    $varience = $originalBudget - $projectFinalCost;
    $totalVariance += $varience;  
    
    $ccArr[$ccVal->field_est_cost_code_value]['originalBudget'] += $originalBudget; 
    $ccArr[$ccVal->field_est_cost_code_value]['currentBudget'] += $currentBudget;
    $ccArr[$ccVal->field_est_cost_code_value]['Commitment'] = $getCommitmentTotal;
    $ccArr[$ccVal->field_est_cost_code_value]['spent'] = $getInvoiceTotal;
    $ccArr[$ccVal->field_est_cost_code_value]['Allocated'] = $getTotalAllocated;
    $ccArr[$ccVal->field_est_cost_code_value]['est'] = $getETCTotal;
    $ccArr[$ccVal->field_est_cost_code_value]['PFC'] = $projectFinalCost;
    $ccArr[$ccVal->field_est_cost_code_value]['Variance'] = $varience;
  } 
  return $ccArr;
}

function _get_sechedule_data_by_project($proID) {
  // ============================== 
  // Get schedule Nodes for PDF and 
  // Excel report by project For (Monthly Report)
  $query= db_select('field_data_field_project_reference','pr'); 
  $query->join('field_data_field_in_report','sr', 'sr.entity_id = pr.entity_id');
  $query->fields('pr', array('entity_id'));
  $query->condition('sr.field_in_report_value', 1, '=');
  $query->condition('pr.field_project_reference_nid', $proID, '=');
  $query->condition('pr.bundle','project_schedule','=');
  $getScheduleNodes = $query->execute()->fetchCol();
  if(!empty($getScheduleNodes)) {
    return $getScheduleNodes;
  }
  else {
    return array();
  }
} 

function _get_general_image_data_by_project($proID) {
  // ============================== 
  // Get General image from photos tab for project
  // For Pdf and Excel report by project For (Monthly Report)
  $query= db_select('node','n'); 
  $query->join('field_data_field_group_information','gi','gi.entity_id = n.nid');
  $query->join('field_data_field_project_reference','pr','n.nid=pr.entity_id');
  $query->fields('gi',array('field_group_information_fid'));
  $query->condition('pr.field_project_reference_nid', $proID, '=');
  $generalInfoImage = $query->execute()->fetchAll();   
  if(!empty($generalInfoImage)) {
    return $generalInfoImage;
  }
  else {
    return array();
  } 
} 

function _get_project_description_image_data_by_project($proID) {
  // ==============================
  // Get Project Description images from Photos tab
  // For Pdf and Excel report by project For (Monthly Report)
  $query= db_select('node','n'); 
  $query->join('field_data_field_project_description_images','pd','pd.entity_id = n.nid');
  $query->join('field_data_field_project_reference','pr','n.nid=pr.entity_id');
  $query->fields('pd',array('field_project_description_images_fid'));
  $query->condition('pr.field_project_reference_nid', $proID, '=');
  $proDescImage = $query->execute()->fetchAll();   
  if(!empty($proDescImage)) {
    return $proDescImage;
  }
  else {
    return array();
  }
} 
function _get_safety_image_data_by_project($proID) {
  // ===============================
  // Get Project Safety images image From photo pages
  // For Pdf and Excel report by project For (Monthly Report)
  $query= db_select('node','n'); 
  $query->join('field_data_field_project_safety_images','si','si.entity_id = n.nid');
  $query->join('field_data_field_project_reference','pr','n.nid=pr.entity_id');
  $query->fields('si',array('field_project_safety_images_fid'));
  $query->condition('pr.field_project_reference_nid', $proID, '=');
  $proSafetyImage = $query->execute()->fetchAll();   
  if(!empty($proSafetyImage)) {
    return $proSafetyImage;
  }
  else {
    return array();
  }  
} 

function _get_additional_image_data_by_project($proID) {
  // ============================
  // Get Project Additional image from photo page
  // For Pdf and Excel report by project For (Monthly Report)
  $query= db_select('node','n'); 
  $query->join('field_data_field_project_additional_images','ai','ai.entity_id = n.nid');
  $query->join('field_data_field_project_reference','pr','n.nid=pr.entity_id');
  $query->fields('ai',array('field_project_additional_images_fid'));
  $query->condition('pr.field_project_reference_nid', $proID, '=');
  $proAdditionalImage = $query->execute()->fetchAll();   
  if(!empty($proAdditionalImage)) {
    return $proAdditionalImage;
  }
  else {
    return array();
  }  
}
 
function _get_recent_safety_data_by_project($proID) {
  // ============================
  // Get Recent safety Data
  // For Pdf and Excel report by project For (Monthly Report)
  $query = db_select('node', 'n');   
  $query->join('field_data_field_project_reference','pr','n.nid=pr.entity_id');
  $query->join('field_data_field_start_date','st','st.entity_id = n.nid');
  $query->join('field_data_field_lost_time_accidents','lta','lta.entity_id = n.nid');
  $query->join('field_data_field_hours_this_period','ph','ph.entity_id = n.nid');
  $query->fields('st',array('field_start_date_value'));
  $query->fields('lta',array('field_lost_time_accidents_value'));
  $query->fields('ph',array('field_hours_this_period_value'));
  $query->condition('pr.field_project_reference_nid', $proID, '=');
  $query->condition('n.type', 'project_safety', '=');
  $query->orderBy('n.created', 'DESC');
  $query->range(0,1);   
  $recentSafety = $query->execute()->fetchAll();
  if(!empty($recentSafety)) {
    return $recentSafety;
  }
  else {
    return array();
  }
}   

function _get_all_safety_data_by_project($proID) {
  // Get all safety Records by project
  $query = db_select('node', 'n');   
  $query->join('field_data_field_project_reference','pr','n.nid=pr.entity_id');
  $query->join('field_data_field_start_date','st','st.entity_id = n.nid');
  $query->join('field_data_field_lost_time_accidents','lta','lta.entity_id = n.nid');
  $query->join('field_data_field_hours_this_period','ph','ph.entity_id = n.nid');
  $query->fields('st',array('field_start_date_value'));
  $query->fields('lta',array('field_lost_time_accidents_value'));
  $query->fields('ph',array('field_hours_this_period_value'));
  $query->condition('pr.field_project_reference_nid', $proID, '=');
  $query->condition('n.type', 'project_safety', '=');
  $allSafety = $query->execute()->fetchAll();
  if(!empty($allSafety)) {
    return $allSafety;
  }
  else {
    return array();
  }
}

function get_costcode_option_callback_test($projectNode,$ajax=TRUE) {
  global $company;      
  // Check if project id or commitment id
  $getNodeDetail = node_load($projectNode);
  if($getNodeDetail->type == 'project_commitement') {
    // COST CODE APPROVED ONLY
    $costCodeArr = array(); 
    if(isset($getNodeDetail->field_commitment_ws_code['und']) && $getNodeDetail->field_commitment_ws_code['und'][0]['value'] != '') {
      foreach($getNodeDetail->field_commitment_ws_code['und'] as $wsKey => $wsVal) {        
      $costCodeArr[$getNodeDetail->field_commitment_ws_code['und'][$wsKey]['value']] = get_description_by_cost_code_mod($getNodeDetail->field_commitment_ws_code['und'][$wsKey]['value']);        
    }
    drupal_json_output($costCodeArr);
        drupal_exit(0);
    }
    else {
      drupal_json_output(0);
        drupal_exit(0);
    }
  /* if(isset($getNodeDetail->field_cost_code['und'])) {
    $costCode = $getNodeDetail->field_cost_code['und'][0]['value'];
    $getCcDes = db_select('node','n'); 
      $getCcDes->join('field_data_field_manager_cost_code','mcc','mcc.entity_id = n.nid'); 
        $getCcDes->join('field_data_field_cost_code_description','ccd','ccd.entity_id = n.nid');    
      $getCcDes->fields('ccd',array('field_cost_code_description_value'));
      $getCcDes->condition('mcc.field_manager_cost_code_value',$costCode, '=');
      $costCodeDes = $getCcDes->execute()->fetchField();    
    $costCodeArr[$costCode] = $costCode.'|'.$costCodeDes;
      drupal_json_output($costCodeArr);
        drupal_exit(0);
    }*/
  } 
  else {  
    // COST CODE APPROVED ONLY  
    $query= db_select('node','n'); 
    $query->join('field_data_field_estimate_reference','er','er.entity_id = n.nid');
    $query->join('node','enode','enode.nid=er.field_estimate_reference_nid');
    $query->join('field_data_field_project_estimate_status','es','es.entity_id = enode.nid');
    $query->join('field_data_field_project_reference','pr','enode.nid=pr.entity_id');
    $query->leftjoin('field_data_field_est_cost_code','cc','cc.entity_id=n.nid');
    $query->fields('cc',array('field_est_cost_code_value'));
    $query->condition('es.field_project_estimate_status_value', 'approved', '=');
    $query->condition('pr.field_project_reference_nid', $projectNode, '=');
    $costCode = $query->execute()->fetchCol();  
    foreach($costCode as $codeKey => $codeVal) {
    $getCcDes = db_select('node','n'); 
    $getCcDes->join('field_data_field_manager_cost_code','mcc','mcc.entity_id = n.nid'); 
      $getCcDes->join('field_data_field_cost_code_description','ccd','ccd.entity_id = n.nid');    
    $getCcDes->fields('ccd',array('field_cost_code_description_value'));
    $getCcDes->condition('mcc.field_manager_cost_code_value',$codeVal, '=');
    $costCodeDes = $getCcDes->execute()->fetchField();
      $ccArr[$codeKey][$codeVal] = $codeVal.'|'.$costCodeDes; 
    } 
    $test = drupal_json_output($ccArr);
  //pre($ccArr, 1);
    drupal_exit(0);
  }
}
function _get_user_data_callback($getUserData) {
  if(empty($getUserData)) {
    echo "Nothing comes data empty";
  }
  else { 
    print_r($getUserData);
    die;
  }
}
//echo  '<pre>';  print_r($form_state['values']);  die;

/**
 * Menu callback for program/archive-program/%/%ctools_js.
 */
function archive_program_cpm($projectId, $ajax = NULL) {
  if ($ajax) {
    // If ajax is enabled, then processing the form with ctools to show it in
    // popup.
    ctools_include('ajax');
    ctools_include('modal');
    $form_state = array(
      'ajax' => TRUE,
      'project_id'=>$projectId,
    );

    $output = ctools_modal_form_wrapper('archive_program_cpm_form', $form_state);

    if (!empty($form_state['ajax_commands'])) {
      $output = $form_state['ajax_commands'];
    }
    print ajax_render($output);
    drupal_exit();
  }

  return drupal_get_form('archive_program_cpm_form', $projectId);
}

/**
 * Archive form for projects.
 */
function archive_program_cpm_form($form, &$form_state) {
  if(!$projectId) {
    $projectId = $form_state['project_id'];
  }

  // Loading node object to get title of the node.
  $projectData = node_load($projectId);

  // Confirmation text of the form.
  $form['intro'] = array(
    '#type' => 'markup',
    '#markup' => '<div class="group-action-status"><h4><p>Are you sure you want to archive project: <em>' . $projectData->title . '</em>?</p></h4><p> The project shall not be accessible under <strong>Capital Projects Manager</strong> or <strong>Cost Manager</strong>.</p></div>',
  );

  // Project ID.
  $form['project_id'] = array(
    '#type' => 'hidden',
    '#value' => $projectId,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Confirm'),
  );

  // Providing a cancel button.
  $form['cancel']['close'] = array(
    '#markup' => '&nbsp;&nbsp;' . l('<input type="button" class="btn btn primary form-submit" value="Cancel" />', 'javascript:void(0);', array('external' => TRUE, 'html' => TRUE, 'attributes' => array('class' => array('group-delete-popup-close'), 'onclick' => 'jQuery("span.popups-close").click();'))),
    '#weight' => 10,
  );

  return $form;
}

/**
 * Submit handler for archive_program_cpm_form.
 */
function archive_program_cpm_form_submit(&$form, &$form_state) {
  global $company;
  $form_values = $form_state['values'];
  $projectId = $form_state['project_id'];

  // We need to set the boolean "Project Archive Status" to 1, and also update
  // node, so that update time is recorded, and we shall display this time in
  // archive record table.
  if (!empty($projectId)) {
    $node = node_load($projectId);
    $node->field_project_archive_status['und'][0]['value'] = 1;
    node_save($node); // Saving node.

    // We need to update the status of the project in custom lock table
    // (m6connect_project_default_milestone_lock_date), so that it does not
    // list in lock milestone date table.
    db_update('m6connect_project_default_milestone_lock_date')
      ->fields(array(
        'status' => 0,
      ))
      ->condition('project_id', $projectId)
      ->execute();
  }

  if ((isset($form_state['ajax'])) ? (($form_state['ajax'] == 1) ? TRUE : FALSE) : FALSE) {
    $form_state['ajax_commands'][] = ctools_modal_command_dismiss();
    $form_state['ajax_commands'][] = ajax_command_html("#project-default-milestone-lock-date-details", get_default_milestone_lock_date_table_data());
  }
}

/**
 * Menu callback for program/restore-archive/%/%ctools_js.
 */
function restore_program_cpm($projectId, $ajax = NULL) {
  if ($ajax) {
    // If ajax is enabled, then processing the form with ctools to show it in
    // popup.
    ctools_include('ajax');
    ctools_include('modal');
    $form_state = array(
      'ajax' => TRUE,
      'project_id'=>$projectId,
    );

    $output = ctools_modal_form_wrapper('restore_program_cpm_form', $form_state);

    if (!empty($form_state['ajax_commands'])) {
      $output = $form_state['ajax_commands'];
    }
    print ajax_render($output);
    drupal_exit();
  }

  return drupal_get_form('restore_program_cpm_form', $projectId);
}

/**
 * Restore Archive form for projects.
 */
function restore_program_cpm_form($form, &$form_state) {
  if(!$projectId) {
    $projectId = $form_state['project_id'];
  }

  // Loading node object to get title of the node.
  $projectData = node_load($projectId);

  // Confirmation text of the form.
  $form['intro'] = array(
    '#type' => 'markup',
    '#markup' => '<div class="group-action-status"><h4><p>Are you sure you want to restore project: <em>' . $projectData->title . '</em>?</p></h4><p> The project can be then accessed under it\'s respective <strong>Manager</strong>.</p></div>',
  );

  // Project ID.
  $form['project_id'] = array(
    '#type' => 'hidden',
    '#value' => $projectId,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Confirm'),
  );

  // Providing a cancel button.
  $form['cancel']['close'] = array(
    '#markup' => '&nbsp;&nbsp;' . l('<input type="button" class="btn btn primary form-submit" value="Cancel" />', 'javascript:void(0);', array('external' => TRUE, 'html' => TRUE, 'attributes' => array('class' => array('group-delete-popup-close'), 'onclick' => 'jQuery("span.popups-close").click();'))),
    '#weight' => 10,
  );

  return $form;
}

/**
 * Submit handler for restore_program_cpm_form.
 */
function restore_program_cpm_form_submit(&$form, &$form_state) {
  $form_values = $form_state['values'];
  $projectId = $form_state['project_id'];

  // We need to set the boolean "Project Archive Status" to 0.
  if (!empty($projectId)) {
    $node = node_load($projectId);
    $node->field_project_archive_status['und'][0]['value'] = 0;
    node_save($node); // Saving node.

    // We need to update the status of the project in custom lock table
    // (m6connect_project_default_milestone_lock_date), so that it starts getting
    // listed in lock milestone date table.
    db_update('m6connect_project_default_milestone_lock_date')
      ->fields(array(
        'status' => 1,
      ))
      ->condition('project_id', $projectId)
      ->execute();
  }

  if ((isset($form_state['ajax'])) ? (($form_state['ajax'] == 1) ? TRUE : FALSE) : FALSE) {
    $form_state['ajax_commands'][] = ctools_modal_command_dismiss();
    $form_state['ajax_commands'][] = ajax_command_html("#project_archived_summary_container", get_archived_projects_summary_table_data());
  }
}

/**
 * Helper function to get Milestone ID by ProjectID (Node ID).
 */
function _get_milestone_id_by_project_id($project_id) {
  return db_select('m6connect_project_default_milestone_lock_date', 'm')
    ->fields('m', array('id'))
    ->condition('project_id', $project_id)
    ->range(0, 1)
    ->execute()
    ->fetchField();
}

function update_lock_status_project($duration,$mileId,$ajax=TRUE) {
  $dateObject = new DateObject(time(), new DateTimeZone('UTC'));
  $dateTimeNew =  date_format_date($dateObject, 'custom', 'Y-m-d H:i');
  $currentTimestamp = strtotime($dateTimeNew);    
  if($duration == 'lock') {
    db_update('m6connect_project_default_milestone_lock_date')
      ->fields(array(
        'status' => 1,
    'duration' => 0,
    'created' => $currentTimestamp,
      ))
      ->condition('id', $mileId)
      ->execute();
  }
  else {
    db_update('m6connect_project_default_milestone_lock_date')
      ->fields(array(
        'status' => 0,
    'duration' => $duration,
    'created' => $currentTimestamp,
      ))
      ->condition('id', $mileId)
      ->execute();
  }
  $status = 1;
   $commands[] = ajax_command_html("#project-default-milestone-lock-date-details", get_default_milestone_lock_date_table_data());
  drupal_json_output($status);
  drupal_exit(0);
}

function _getting_all_asset_for_spread_callback($form, &$form_state) {
  global $company;
  $projectId = $form_state['values']['adding_new_assets_project'];
  $spreadOption = $form_state['values']['spread_options'];
  $assetCat = $form_state['values']['asset_category'];
  if($spreadOption == 'Yes' && $assetCat == 'Spread') {
    // ==== Get all the asset == //
    $query= db_select('node', 'n');
    $query->join('og_membership', 'om', 'om.etid=n.nid AND om.entity_type=:entityType', array(':entityType' => 'node'));
    $query->join('field_data_field_project_reference', 'pr', 'pr.entity_id = n.nid');
    $query->join('field_data_field_system_asset_type', 'at', 'at.entity_id = n.nid');
    $query->fields('n', array('nid'));
    $query->condition('pr.field_project_reference_nid', $projectId);
    $query->condition('n.type', 'program_assets');
    $query->condition('om.gid', $company->nid);
    $assetListing = $query->execute()->fetchCol();

    $form_state['asset_cat_m6_storage'] = array();
    $form_state['asset_cat_storage_default_value'] = array();

    foreach ($assetListing as $delta => $assetNid) {
      $tempIdentifer = uniqid();
      $assetNode = node_load($assetNid);
      $form_state['asset_cat_m6_storage'][]  = $tempIdentifer;

      $form_state['asset_cat_storage_default_value'][$tempIdentifer] = array(
        'assetCategory' => isset($assetNode->field_system_asset_type['und'])?$assetNode->field_system_asset_type['und'][0]['value']:'',
        'assetName' => $assetNode->nid.'-'.$assetNode->field_system_asset_type['und'][0]['value'],
        'currentAssetVal' => isset($assetNode->field_current_asset_value['und'])?$assetNode->field_current_asset_value['und'][0]['value']:0,
      );
    }
    // pre($form_state['asset_cat_storage_default_value'], 1);
  }
  else {
    $form_state['asset_cat_m6_storage']  = array();  
    // $tempIdentifer = uniqid();
    // $form_state['asset_cat_m6_storage'][]  = $tempIdentifer;  
    // $form_state['asset_cat_storage_default_value'] = array();
  }

  $form_state['rebuild'] = TRUE;
  return $form['main-container2'];
}

function _m6connct_program_options_after_build(&$element, &$form_state){
    // Each renderable radio element.
    foreach (element_children($element) as $key) {
        $element[$key]['#prefix'] = '<div class="form-group padding-right-10">';
        $element[$key]['#suffix'] = '</div>';
    }
    // Always return the element to render in after_build callbacks.
    return $element;
}

function asset_additional_submit(&$form, &$form_state) {
  if(!empty($form_state['values'])) {
    $_SESSION['assetData'] = $form_state['values'];
  }  
  else {
    unset($_SESSION['assetData']);
  }
  if((isset($form_state['ajax']))?(($form_state['ajax']==1)?true:false):false) {
      $form_state['ajax_commands'][] = ctools_modal_command_dismiss();  
  }
  else {
    $form_state['redirect'] = 'program/spending'; 
  }
}
function theme_assets_form_theme($variables) {
  $element = $variables['form'];
  $storage = $element['#storage'];
  $output = '';    
  $header= array(
  /*array('data'=>'Asset Category','class'=>array('asset-category-header-split')),
    array('data'=>'Asset Category','class'=>array('asset-category-header-spread')),*/
  array('data'=>'<div class="asset-category-header-split-spread" style="padding:0 0 10px 0; margin:0 0 10px 0; border-bottom:4px double #888;">Asset Category </div> <div>Asset Name</div>','class'=>array('asset-category-header-split-spread','text-center')),
  //array('data'=>'Asset Name','class'=>array('asset-description-header')),
  array('data'=>'Spread','class'=>array('asset-category-header-spread')),
  array('data'=>'Asset Cost','class'=>array('asset-type-header','asset-category-header-split')),
  array('data'=>'Installation','class'=>array('asset-type-header','asset-category-header-split')),
  array('data'=>'Outside Consultants','class'=>array('asset-type-header','asset-category-header-split')),
  array('data'=>'Internal Charges','class'=>array('asset-type-header','asset-category-header-split')),  
  array('data'=>'Current Asset Value','class'=>array('current-asset-value-header')),
  array('data'=>'New Asset Value', 'class'=>array('new-asset-value-header')),
  array('data'=>''),
  array('data'=>''),
  );
  $rowNo = 1;
  foreach ($storage as $key => $uniqId) {
    $rows[] = array(
    'data'=> array(   
     array('data'=> '<div class="asset-category-header-split" style="margin:0 0 10px 0;">' . drupal_render($element['asset_category_all_split'][$uniqId]) . '</div><div style="padding:0 0 5px 0; margin:0 0 5px 0;" class="asset-category-header-spread">' . drupal_render($element['asset_category_all_spread'][$uniqId]) . '</div>' . drupal_render($element['asset_description'][$uniqId]),'class'=> array('asset-category-header-split-spread')),
    /*array('data'=>drupal_render($element['asset_category_all_split'][$uniqId]),'class'=> array('col-md-2','asset-category-header-split')),  // FOR SPLIT
    array('data'=>drupal_render($element['asset_category_all_spread'][$uniqId]),'class'=> array('col-md-2','asset-category-header-spread')),//FOR Spread    
    array('data'=>drupal_render($element['asset_description'][$uniqId]),'class'=> array('col-md-2')),*/
    array('data'=>drupal_render($element['spread_amount'][$uniqId]),'class'=> array('col-md-3', 'asset-category-header-spread','asset-border-3')), //FOR SPREAD
    array('data'=>drupal_render($element['asset_cost'][$uniqId]),'class'=> array('asset-border-3','asset-category-header-split')), //FOR SPLIT
    array('data'=>drupal_render($element['asset_installation'][$uniqId]),'class'=> array('asset-category-header-split')), //FOR SPLIT
    array('data'=>drupal_render($element['asset_outside_consultants'][$uniqId]),'class'=> array('asset-category-header-split')), //FOR SPLIT
    array('data'=>drupal_render($element['asset_internal_charges'][$uniqId]),'class'=> array('asset-category-header-split')), //FOR SPLIT
    array('data'=>drupal_render($element['current_asset_value'][$uniqId])), //FOR BOTH SPLIT SPREAD   
    array('data'=>drupal_render($element['new_asset_value'][$uniqId]),'class'=> array('asset-border-3','asset-category-header-split', 'new-asset-value-row-split')), //FOR BOTH SPLIT SPREAD
    array('data'=>drupal_render($element['new_asset_value_spread'][$uniqId]),'class'=> array('asset-border-3','asset-category-header-spread', 'new-asset-value-row-spread')), //FOR SPREAD
    array('data'=>drupal_render($element['current_asset_value_main'][$uniqId]),'class' => array('hidden')), //FOR BOTH SPLIT SPREAD BUT IN HIDDEN STATE
    array('data'=>drupal_render($element['remove'][$uniqId]),'class'=> array('workflow-remove-td')), //FOR BOTH SPLIT SPREAD
    array('data'=>'&nbsp'),
      ),
    'id' => array('asset-table-list-'.$rowNo),
    );
  $rowNo++;
  }
 /* $rows[] = array(
    'data'=> array(         
      array('data'=>drupal_render($element['asset_description'][$uniqId]),'class'=> array('col-md-3')), //FOR BOTH SPLIT SPREAD
      array('data'=>'&nbsp;','class'=> array('col-md-3')), //FOR BOTH SPLIT SPREAD
      
      ),
    );*/
  
  $rows[] = array(
    'data'=> array(
    array('data'=> '<div id="adding-new-assets-amount" class="margin-bottom-10 pull-left"><h5 style="display:none;" class="main-invoice-amt"><strong>Invoice Amount:<span class="description adding-new-assets-amount"></span></strong></h5><h5><strong><span class="category-based-amout-label"></span><span class="description category-based-amout"></span></strong></h5> <h5><strong><span class="description asset-cost-total-var tooltip-hover-varience"></span></strong></h5></div><div class="margin-bottom-10 pull-right" style="padding-top: 16px;"><strong>Total:</strong></div>','class'=> array('asset-category-header-split')),
    array('data'=> '&nbsp;','class'=> array('text-left','asset-category-header-spread')),       
    array('data'=> '<strong class="spread-total-amount-count"></strong>','class'=> array('text-left','asset-category-header-spread')),        
    array('data'=> '<strong class="asset_cost_total" style="margin-left:14px;"></strong>','class'=> array('text-left','asset-category-header-split')),
    array('data'=> '<strong class="asset_installation_total" style="margin-left:14px;"></strong>','class'=> array('text-left','asset-category-header-split')),
    array('data'=> '<strong class="asset_consultant_total" style="margin-left:14px;"></strong>','class'=> array('text-left','asset-category-header-split')),
    array('data'=> '<strong class="asset_internal_charge_total" style="margin-left:14px;"></strong>','class'=> array('text-left','asset-category-header-split')),
    array('data'=> '<strong class="current_asset_val_total" style="margin-left:14px;"></strong>','class'=> array('text-left')),   
    array('data'=> '<strong class="new_asset_val_total" style="margin-left:14px;"></strong>','class'=> array('text-left')),
    array('data'=> '&nbsp;','class' => array('hidden-old')),
    array('data'=> '&nbsp;','class' => array('asset-category-header-split')),
    array('data'=> '&nbsp;','class' => array('asset-category-header-spread')),
  ),   
  );
  $output .= '<div class="margin-bottom-10 clearfix proposal-poup-table-section">';
  $output .= drupal_render($element['form-edit-respread-button']);
  $output .= theme('table', array('header' => $header, 'rows' => $rows, 'attributes'=> array('class'=> array('project-assetes-main-table','table','table-hover','m6connect-custom-table','m6connect-table-border'))));
  $output .= '</div>';
  $output .= drupal_render_children($element);
  return $output;
}

function assets_form_theme_process($element, &$form_state) {
  global $company,$user;
  drupal_add_js(drupal_get_path('module', 'm6connect_program') . '/js/m6connect_program_spending.js');
  $storage = $form_state['asset_cat_m6_storage']; 
  // Trying to get $projectId as precised as possible.
  // The best way would be to first check in session, then in form_state and
  // if not found in both, then default.

  if (!empty($_SESSION['ACTIVEPROJECT'])) {
    // If there is a project in session, than this is it.
    $projectId = $_SESSION['ACTIVEPROJECT'];
  }
  else {
    // If it is not set in session. Then it won't be in form_state also.
    // setting it null.
    $projectId = NULL;
  }
  $element['#storage'] = $storage;
  
  // Get Asset Listing from settings
  $query = db_select('m6connect_project_asset_category', 'ac');
  $query->fields('ac', array('id','category_description','category_type'));
  $query->condition('ac.company_nid', $company->nid, '=');
  $getAssetData = $query->execute()->fetchAllKeyed();
  // Get asset Listing from asset page
  $query= db_select('node','n');   
  $query->join('og_membership','om','om.etid=n.nid AND om.entity_type=:entityType', array(':entityType'=>'node'));
  $query->join('field_data_field_project_reference','pr','pr.entity_id = n.nid');
  $query->join('field_data_field_system_asset_type','at','at.entity_id = n.nid');
  $query->fields('n', array('nid', 'title'));  
  $query->fields('at', array('field_system_asset_type_value'));  
  $query->condition('n.type', 'program_assets', '=');
  $query->condition('om.gid', $company->nid, '=');
  $query->condition('pr.field_project_reference_nid', $projectId, '=');
  $assetListing = $query->execute()->fetchAll();
  $assetListUp = array('' => 'None');
  foreach($assetListing as $assetKey => $assetVal) {
    if(!empty($assetVal->field_system_asset_type_value)) {
      $assetListUp[$assetVal->nid.'-'.$assetVal->field_system_asset_type_value] = $assetVal->title;
    }
  }
  $show_respread_button = FALSE;
  // Checking whether to show respread button.
  // The button will only be visible when a spending is edited, and the current
  // invoice is of type spread.
  if (!empty($form_state['asset_cat_storage_default_value']) && !empty($form_state['triggering_element']['#name']) && $form_state['triggering_element']['#name'] == 'get-spending') {
    reset($form_state['asset_cat_storage_default_value']);
    $first_ele = current($form_state['asset_cat_storage_default_value']);
    if (!empty($first_ele['AssetType']) && $first_ele['AssetType'] == 'Spread') {
      $show_respread_button = TRUE;
    }
  }
  if (!empty($form_state['asset_cat_storage_default_value']['spread_auto_yes'])) {
    $show_respread_button = TRUE;
  }
  $element['form-edit-respread-button'] = array(
    '#type' => 'button',
    '#value' => t('Respread'),
    '#attributes' => array('class' => array('respread-button-custom')),
    '#prefix' => '<div class="clearfix margin-bottom-10 pull-right">',
    '#suffix' => '</div>',
    // '#access' => $show_respread_button,
  );
  foreach ($storage as $key => $uniqId) {
    // ======================================
    // Common field for both Split and Spread
    $element['asset_category_all_split'][$uniqId] = array(  
      '#type' => 'select',
      '#options' => $getAssetData,    
      '#attributes'=> array('class'=> array('form-control','workflow-auto','asset_category_all_split')),
      '#empty_option' => 'None',
      '#parents' => array('alert',$uniqId,'asset_category_all_split'),    
      '#select2' => array(
        'width' => '250',
        'minimumResultsForSearch' => '5',
      ),
    );
    $element['asset_category_all_spread'][$uniqId] = array(  
      '#type' => 'select',
      '#options' => $getAssetData,    
      '#empty_option' => 'None',
      '#attributes'=> array('class'=> array('form-control','workflow-auto','asset_category_all_spread')),   
      '#parents' => array('alert',$uniqId,'asset_category_all_spread'),
      '#select2' => array(
        'width' => '250',
        'minimumResultsForSearch' => '5',
      ),
    );
    $element['asset_description'][$uniqId] = array(
      '#type' => 'select',
      '#options' => $assetListUp,   
      '#attributes'=> array('class'=> array('form-control','workflow-auto','asset_description')),
      '#parents' => array('alert',$uniqId,'asset_description'),
      '#select2' => array(
        'width' => '250',
        'minimumResultsForSearch' => '5',
      ),
    );
    // ======================
    // Split field Start here
    $element['asset_cost'][$uniqId] = array(
      '#type' => 'textfield', 
      '#default_value' => 0,
      '#attributes'=> array('class'=> array('form-control','workflow-auto','asset_cost','bg-yellow')),
      '#parents' => array('alert',$uniqId,'asset_cost'),
      '#field_prefix' => '<span class="tooltip-main-custom padding-5"><i class="fa fa-question-circle custom-tooltip asset_cost_tool_tip_hover" aria-hidden="true"><span class="tooltip" data-tooltip-content="#asset_cost_tool_tip">&nbsp;</span><div class="tooltip_templates"><span id="asset_cost_tool_tip"><p class="asset_cost_tool_tip_new">Previous value</p></span></div></i></span><label class="asset_cost_tool_tip" style="display:none;"></label>',
      '#prefix' => '<div class="tool-tip-custom-common relative">',
      '#suffix' => '</div>',
    );
    $element['asset_installation'][$uniqId] = array(
      '#type' => 'textfield', 
      '#default_value' => 0,
      '#attributes'=> array('class'=> array('form-control','workflow-auto','asset_installation','bg-yellow')),
      '#parents' => array('alert',$uniqId,'asset_installation'),
      '#field_prefix' => '<span class="tooltip-main-custom padding-5"><i class="fa fa-question-circle custom-tooltip asset_installation_tool_tip_hover" aria-hidden="true"><span class="tooltip" data-tooltip-content="#asset_installation_tool_tip">&nbsp;</span><div class="tooltip_templates"><span id="asset_installation_tool_tip"><p class="asset_installation_tool_tip_new">Previous value</p></span></div></i></span><label class="asset_installation_tool_tip" style="display:none;"></label>',
      '#prefix' => '<div class="tool-tip-custom-common relative">',
      '#suffix' => '</div>',
    );
    $element['asset_outside_consultants'][$uniqId] = array(
      '#type' => 'textfield',
      '#default_value' => 0, 
      '#attributes'=> array('class'=> array('form-control','workflow-auto','asset_outside_consultants','bg-yellow')),
      '#parents' => array('alert',$uniqId,'asset_outside_consultants'),
      '#field_prefix' => '<span class="tooltip-main-custom padding-5"><i class="fa fa-question-circle custom-tooltip asset_outside_tool_tip_hover" aria-hidden="true"><span class="tooltip" data-tooltip-content="#asset_outside_tool_tip">&nbsp;</span><div class="tooltip_templates"><span id="asset_outside_tool_tip"><p class="asset_outside_tool_tip_new">Previous value</p></span></div></i></span><label class="asset_outside_tool_tip" style="display:none;"></label>',  
      '#prefix' => '<div class="tool-tip-custom-common relative">',
      '#suffix' => '</div>',
    );
    $element['asset_internal_charges'][$uniqId] = array(
      '#type' => 'textfield',
      '#default_value' => 0, 
      '#attributes'=> array('class'=> array('form-control','workflow-auto','asset_internal_charges','bg-yellow')),
      '#parents' => array('alert',$uniqId,'asset_internal_charges'),
      '#field_prefix' => '<span class="tooltip-main-custom padding-5"><i class="fa fa-question-circle custom-tooltip asset_internal_tool_tip_hover" aria-hidden="true"><span class="tooltip" data-tooltip-content="#asset_internal_tool_tip">&nbsp;</span><div class="tooltip_templates"><span id="asset_internal_tool_tip"><p class="asset_internal_tool_tip_new">Previous value </p></span></div></i></span><label class="asset_internal_tool_tip" style="display:none;"></label>',
      '#prefix' => '<div class="tool-tip-custom-common relative">',
      '#suffix' => '</div>',
    );
  // End split field work    
    // Start Spread field work
    $element['spread_amount'][$uniqId] = array(
      '#type' => 'textfield', 
      '#default_value' => 0,
      '#attributes'=> array('class'=> array('form-control','workflow-auto','spread_amount','bg-yellow')),
      '#parents' => array('alert',$uniqId,'spread_amount'),
      '#disabled' => TRUE,
    );
    // end spread field work
    $element['current_asset_value'][$uniqId] = array(
      '#type' => 'textfield',
      '#default_value' => 0, 
      '#attributes'=> array('class'=> array('form-control','get_current_asset_value','workflow-auto','bg-yellow','current_asset_value_'.$uniqId)),
      '#disabled' => TRUE,
      '#parents' => array('alert',$uniqId,'current_asset_value'),
    );
    $element['new_asset_value'][$uniqId] = array(
      '#type' => 'textfield', 
      '#default_value' => 0,
      '#disabled' => TRUE,
      '#attributes'=> array('class'=> array('form-control','workflow-auto','new_asset_value','bg-yellow')),
      '#parents' => array('alert',$uniqId,'new_asset_value'),
    );
    $element['new_asset_value_spread'][$uniqId] = array(
      '#type' => 'textfield', 
      '#default_value' => 0,
      '#disabled' => TRUE,
      '#attributes'=> array('class'=> array('form-control','workflow-auto','new_asset_value_spread','bg-yellow')),
      '#parents' => array('alert',$uniqId,'new_asset_value_spread'),
    );    
    $element['current_asset_value_main'][$uniqId] = array(
      '#type' => 'hidden', 
      '#attributes'=> array('class'=> array('form-control','get_current_asset_value_hidden','workflow-auto','current_asset_value_hidden_'.$uniqId)),
      '#parents' => array('alert',$uniqId,'current_asset_value_hidden'),
      '#prefix' => '<div style="display:none">',
      '#suffix' => '</div>', 
    );
    $element['asset_node_nid'][$uniqId] = array(
      '#type' => 'hidden', 
      '#attributes'=> array('class'=> array('form-control','workflow-auto','asset_node_nid')),
      '#parents' => array('alert',$uniqId,'asset_node_nid'),  
    );
    $element['total_current_asset_val'][$uniqId] = array(
      '#type' => 'hidden', 
      '#attributes'=> array('class'=> array('form-control','workflow-auto','total_current_asset_val')),
      '#parents' => array('alert',$uniqId,'total_current_asset_val'), 
    );
    $element['remove'][$uniqId] = array(
      '#type' => 'submit',
      '#value' => 'remove_asset',
      '#name' => $uniqId,
      '#attributes'=> array('style'=> array('font-family:FontAwesome;'),'class'=>array('alert-container-section', 'workflow-remove-submit','hidden')),
      '#parents' => array('alert', $uniqId, 'remove'),
      "#limit_validation_errors" => array(),
      '#submit'=> array('remove_asset_category_handler'),
      '#ajax' => array(
        'callback' => 'asset_category_row_callback',
        'wrapper' => 'asset-container-section',
        'method' => 'replace',
        'effect' => 'fade',
        'progress' => array('type'=> 'throbber', 'message'=> NULL),
      ),
      '#prefix' => '<div><i class="fa fa-trash-o get-removed" aria-hidden="true" style="font-size:24px; cursor:pointer;"></i>',
      '#suffix' => '</div>',
    );

    if (isset($form_state['asset_cat_storage_default_value'][$uniqId])) {
      $stdefault = $form_state['asset_cat_storage_default_value'][$uniqId]; //pre($form_state['po_storage_default_value']);
      $element['asset_category_all_spread'][$uniqId]['#default_value'] = $stdefault['assetCategory'];
      $element['asset_description'][$uniqId]['#default_value'] = $stdefault['assetName'];
      $element['current_asset_value'][$uniqId]['#default_value'] = $stdefault['currentAssetVal'];
    }
    if (!empty($form_state['asset_cat_storage_default_value'][$uniqId])) {
      // If a form is being edited and we have the desired AssetType then filling
      // the default values got in form_state.
      if ($form_state['asset_cat_storage_default_value'][$uniqId]['AssetType'] == 'Split') {
        // If the AssetType is Split, then filling default values in split
        // field.
        $stdefault = $form_state['asset_cat_storage_default_value'][$uniqId];
        $element['asset_category_all_split'][$uniqId]['#default_value'] = $stdefault['assetCategory'];
        $element['asset_description'][$uniqId]['#default_value'] = $stdefault['assetDesc'];
        $element['asset_cost'][$uniqId]['#default_value'] = $stdefault['assetCost'];
        $element['asset_installation'][$uniqId]['#default_value'] = $stdefault['assetInst'];
        $element['asset_outside_consultants'][$uniqId]['#default_value'] = $stdefault['assetConst'];
        $element['asset_internal_charges'][$uniqId]['#default_value'] = $stdefault['assetInternalCharge'];
        $element['asset_category_all_split'][$uniqId]['#suffix'] = '<div id="split-edit-value" style="display:none;">Split</div>';
      }
      elseif ($form_state['asset_cat_storage_default_value'][$uniqId]['AssetType'] == 'Spread') {
        // If the Asset type is Spread, then filling default values in Spread
        // field.
        // We had already checked that the "Spread Option" is No, while preparing
        // the above array. Because there is no need to do this when the
        // "Spread Option" is set to Yes.
        $stdefault = $form_state['asset_cat_storage_default_value'][$uniqId];

        $element['asset_category_all_spread'][$uniqId]['#default_value'] = $stdefault['assetCategory'];
        $element['asset_description'][$uniqId]['#default_value'] = $stdefault['assetName'];
        $element['current_asset_value'][$uniqId]['#default_value'] = $stdefault['currentAssetVal'];
        $element['asset_category_all_spread'][$uniqId]['#suffix'] = '<div id="split-edit-value" style="display:none;">Spread</div>';
      }
    }

    if (!empty($form_state['asset_cat_storage_default_value']['spread_auto_yes'])) {
      $element['asset_category_all_spread'][$uniqId]['#suffix'] = '<div id="split-edit-value" style="display:none;">Spread_YES</div>';
    }
    $rowNoStorage++;
  }
  /*$element['invoice_attechment_asset'] = array(
    '#type' => 'file',
    '#title' => 'Attachment',
    '#name' => 'files[]',
    '#multiple' => TRUE,
    '#upload_location' => 'public://',
    '#description' => t('Use CTRL + Click to choose multiple attachments.'),
    '#attributes' => array('multiple' => 'multiple', 'onchange' => 'handleFiles(this.files)'),
    '#prefix' => '<div id="dvPreview" class="clearfix margin-bottom-10"></div><div id="dvPreviewIframe" class="clearfix margin-bottom-10"></div><div class="asset-data-rendration" style="display:none;">',
    '#suffix' => '</div><div classs="clearfix"><div class="upload-btn"><i class="btn btn-primary btn-lg glyphicon glyphicon-plus" id="upload_plus"></i></div></div>',
  );*/
  $element['workflow_add_new_row'] = array(
    '#type' => 'submit',
  '#value' => 'Add New',
  '#name' => 'workflow_add_new_row',
  '#attributes'=> array('class'=>array('routing-workflow-action','assets-workflow-action-add-new-assets'),'title'=>'Add New Detail'),
  "#limit_validation_errors" => array(),
  '#submit'=> array('add_new_asset_cat_submit_handler_invite_m6'),
  '#ajax' => array(
    'callback' => 'add_new_asset_cat_action_callback',
    'wrapper' => 'alert-container-section',
    'method' => 'replace',
    'effect' => 'fade',
    'progress' => array('type'=> 'throbber', 'message'=> NULL),
  ),
  '#prefix' => '<div class="table-footer-custom clearfix margin-bottom-10" style="display:none;"><div class="asset-cat-main-btn pull-left">',
  '#suffix' => '</div>',
  );
  
  $element['final_total_details'] = array(
    '#markup' => '<div class="final_total_details pull-right">
              <dl class="dl-horizontal margin-bottom-10 clearfix">
            <dt>Subtotal</dt>
            <dd><div class="total_po_amount">$ 0</div></dd>
            </dl>
          </div>',
    '#attributes'=> array('class'=> array('final_total_details')),
    '#suffix' => '</div>',
  );  
  $element['final_total'] = array(
    //'#type' => 'hidden', 
    '#type' => 'hidden', 
    '#attributes'=> array('class'=> array('final_asset_total_amt')),
  );
  
  return $element;
}

function _get_asset_description_callback ($form,&$form_state) {
  global $company;  
  $commands = array();  
  $triggering_element = $form_state['triggering_element'];
  $query= db_select('node','n');   
  $query->join('og_membership','om','om.etid=n.nid AND om.entity_type=:entityType', array(':entityType'=>'node'));
  $query->join('field_data_field_project_reference','pr','pr.entity_id = n.nid');
  $query->fields('n', array('nid', 'title'));  
  $query->condition('pr.field_project_reference_nid', $form_state['project_id'], '=');
  $query->condition('n.type', 'program_assets', '=');
  $query->condition('om.gid', $company->nid, '=');
  $assetListing = $query->execute()->fetchAllKeyed(0,1);  
  $identifier = $triggering_element['#parents'][1];  
  $findme   = '(';
  $pos = strstr($triggering_element['#value'], $findme);
  $isNewAsset = str_replace(array( '(', ')' ), '', $pos);  
  if(!empty($isNewAsset)){
  $getAssetData = node_load($isNewAsset);
  if(isset($getAssetData->field_current_asset_value['und']) && $getAssetData->field_current_asset_value['und'][0]['value'] != '') {
    $getAssetVal = $getAssetData->field_current_asset_value['und'][0]['value'];
    $commands[] = ajax_command_invoke('input.current_asset_value_'.$identifier, 'val' ,array($getAssetVal));
    $commands[] = ajax_command_invoke('input.current_asset_value_hidden_'.$identifier, 'val' ,array($getAssetVal));
    $commands[] = ajax_command_invoke('input.current_asset_value_'.$identifier, 'attr',array('disabled','disabled'));   
    $commands[] = ajax_command_invoke('input.asset_node_nid_'.$identifier, 'val' ,array($isNewAsset));
  
  }
  else {
    $commands[] = ajax_command_invoke('input.current_asset_value_'.$identifier, 'val' ,array(''));
    $commands[] = ajax_command_invoke('input.current_asset_value_hidden_'.$identifier, 'val' ,array(''));
    $commands[] = ajax_command_invoke('input.current_asset_value_'.$identifier, 'attr',array('disabled','disabled'));
  }
  }     
  return array('#type' => 'ajax','#commands' => $commands);
}

function remove_asset_category_handler(&$form,&$form_state) {
  $triggering_element = $form_state['triggering_element'];
  $identifier = $triggering_element['#parents'][1];

  if (isset($form_state['asset_cat_m6_storage'])) {
    foreach ($form_state['asset_cat_m6_storage'] as $key => $value) {
      if ($form_state['asset_cat_m6_storage'][$key] == $identifier) {
        unset($form_state['asset_cat_m6_storage'][$key]);
        $form_state['asset_cat_storage_default_value_remove_data'][$identifier] = $form_state['asset_cat_storage_default_value'][$identifier];
        if ($form_state['input']['asset_category'] == 'Spread') {
          $totalAssetVal = check_plain($form_state['input']['alert'][$identifier]['total_current_asset_val']);
          $getCurrentAsset = check_plain($form_state['input']['alert'][$identifier]['current_asset_value_hidden']);
          $getInvAmt = str_replace(',','',str_replace("$","",check_plain($form_state['input']['invoice_amount'])));
          $spreadAsmt = ($getCurrentAsset/$totalAssetVal)*$getInvAmt;
          $form_state['asset_cat_storage_default_value_remove_data'][$identifier]['amt'] = $spreadAsmt;
        }

        unset($form_state['asset_cat_storage_default_value'][$identifier]);
      }
    }
  }

  $form_state['rebuild'] = TRUE;
}

function asset_category_row_callback(&$form, &$form_state) {  
  $commands = array();
  $commands[] = ajax_command_replace("#main-class-assets", render($form['main-container2']));
  return array('#type' => 'ajax', '#commands' => $commands);
  //return $form['main-container2'];
}

// add ajax callback
function add_new_asset_cat_action_callback(&$form, &$form_state) {  
  return $form['main-container2'];
}

/*function add_new_asset_cat_submit_handler_invite_m6(&$form, &$form_state) {
  $triggerElement = $form_state['triggering_element'];
  if($triggerElement['#name'] =='workflow_add_new_row'){
    $tempIdentifer = uniqid();
    $form_state['asset_cat_m6_storage'][]  = $tempIdentifer;
  }
  $form_state['rebuild'] = TRUE;
}*/

function add_new_asset_cat_submit_handler_invite_m6(&$form, &$form_state) {
  $triggerElement = $form_state['triggering_element'];
  if ($triggerElement['#name'] =='workflow_add_new_row') {
    // We need to judge if we really want to add a new row.
    $data = $form_state['input']['alert'];
    $count = count($data);
    $add_new = FALSE;
    if ($count == 1) {
      // If there is only one row, then adding another.
      $cur_ele = current ($data);
      if (empty($cur_ele['asset_category_all_split']) && empty($cur_ele['asset_category_all_spread'])) {
        $form_state['asset_cat_m6_storage'] = array();
        $tempIdentifer = uniqid();
        $form_state['asset_cat_m6_storage'][]  = $tempIdentifer;
      }
      $add_new = TRUE;
    }
    else {
      // If we have more than one row, then we need to see if the last row has
      // some data in it, or not. And also if the request is to delete or add new.
      $last_row = end($data);
      if (!empty($last_row['asset_category_all_split']) || !empty($last_row['asset_category_all_spread'])) {
        $add_new = TRUE;
      }
      else {
    $rowFlag = 0;  
        foreach ($data as $key => $value) {
          if (empty($value['asset_category_all_split']) && empty($value['asset_category_all_spread'])) {        
        $rowFlag ++;
            foreach ($form_state['asset_cat_m6_storage'] as $key1 => $value1) {
              if ($key == $value1 && $rowFlag >1) {
                unset($form_state['asset_cat_m6_storage'][$key1]);
              }
            }
          }          
    }
        /*if ($count - count($form_state['asset_cat_m6_storage']) > 1) {
          $add_new = TRUE;
        }*/
      }
    }
    if ($add_new) {
      // Adding another row only if it is required.
      $tempIdentifer = uniqid();
      $form_state['asset_cat_m6_storage'][]  = $tempIdentifer;
    }
    if (empty($form_state['asset_cat_m6_storage'])) {
      $tempIdentifer = uniqid();
      $form_state['asset_cat_m6_storage'][]  = $tempIdentifer;
    }
  }
  $form_state['rebuild'] = TRUE;
}

function _get_current_asset_value($amt, $assetId, $only_current = FALSE){
  global $company;  
  /*$query= db_select('node','n');   
  $query->join('og_membership','om','om.etid=n.nid AND om.entity_type=:entityType', array(':entityType'=>'node'));
  $query->join('field_data_field_current_asset_value','ca','ca.entity_id = n.nid');
  $query->fields('ca', array('field_current_asset_value_value'));  
  $query->condition('n.type', 'program_assets', '=');
  $query->condition('n.nid', $assetId, '=');
  $query->condition('om.gid', $company->nid, '=');
  $assetValue = $query->execute()->fetchField();*/
  $status = array();
  if(is_numeric($assetId)) {
    $assetData = node_load($assetId);
    $assetCost = !empty($assetData->field_asset_cost['und'][0]['value']) ? $assetData->field_asset_cost['und'][0]['value'] : 0;
    $assetInstallation = !empty($assetData->field_asset_installation['und'][0]['value']) ? $assetData->field_asset_installation['und'][0]['value'] : 0;
    $assetConsu = !empty($assetData->field_asset_outside_consultant['und'][0]['value']) ? $assetData->field_asset_outside_consultant['und'][0]['value'] : 0;
    $assetInterCharge = !empty($assetData->field_asset_internal_charge['und'][0]['value']) ? $assetData->field_asset_internal_charge['und'][0]['value'] : 0;
    $spreadAsseVal = !empty($assetData->field_asset_spread_amount['und'][0]['value']) ? $assetData->field_asset_spread_amount['und'][0]['value'] : 0;

    $currentAsseVal = $assetCost + $assetInstallation + $assetConsu + $assetInterCharge + $spreadAsseVal;
    if ($only_current) {
      return $currentAsseVal;
    }

    $status['AssetCost'] = (string) $assetCost;
    $status['AssetInstallation'] = (string) $assetInstallation;
    $status['AssetConsu'] = (string) $assetConsu;
    $status['AssetInterCharge'] = (string) $assetInterCharge;
    $status['CurrentAsseVal'] = (string) $currentAsseVal;
    $status['SpreadAmt'] = (string) $spreadAsseVal;
  }

  if ($only_current) {
    return '';
  }

  //$assetVal = empty($assetValue)?0:$assetValue;
  drupal_json_output($status);
  drupal_exit(0);
}

/**
 * Returns HTML for a managed file element with thumbnail.
 */
function theme_image_multifield_multitype($variables) {
  $element = $variables['element'];

    if (isset($element['#file']->uri)) {
        $output = '<div id="edit-logo-ajax-wrapper"><div class="form-item form-type-managed-file form-item-logo"><span class="file">';
    if($element['#file']->filemime == 'application/pdf') {
          $output .= '<img height="50px" src="' . file_create_url($element['#file']->uri) . '" />';
    }
    $output .= '<iframe src="'.file_create_url($element['#file']->uri).'"></iframe>';
        $output .= '</span><input type="submit" id="edit-' . $element['#name'] . '-remove-button" name="' . $element['#name'] . '_remove_button" value="Remove" class="form-submit ajax-processed">';
        $output .= '<input type="hidden" name="' . $element['#name'] . '[fid]" value="' . $element['#file']->fid . '">';

        return $output;
    }
}

/*function get_state_by_countrycode_callback($CountryCode,$ajax=TRUE) {
  module_load_include('inc', 'addressfield', 'addressfield.administrative_areas');
  if(isset($CountryCode) && !empty($CountryCode)){
    $administrativeNamesList = addressfield_get_administrative_areas($CountryCode);   
    drupal_json_output($administrativeNamesList);
    drupal_exit(0); 
  }
}*/

function program_loc_node_action_callback($NodeType, $NodeNid, $Action, $ajax) {
  ctools_include('ajax');
  $commands = array();
  module_load_include('inc', 'm6connect_program', 'includes/asset_location');
  //Edit Section Callback
  if(isset($NodeType) && isset($NodeNid) && is_numeric($NodeNid) && $Action == 'edit') {
  
    //config location region
    if($NodeType == 'fm_location_region') {
      $query= db_select('node', 'n');
      $query->leftjoin('field_data_field_locationregion_description' ,'fld', 'fld.entity_id=n.nid');
      $query->leftjoin('field_data_field_locationregion_address' ,'fla' ,'fla.entity_id=n.nid');
      $query->fields('n',array('nid','title'));
      $query->fields('fld',array('field_locationregion_description_value'));
      $query->fields('fla',array('field_locationregion_address_country','field_locationregion_address_thoroughfare','field_locationregion_address_premise','field_locationregion_address_locality','field_locationregion_address_administrative_area','field_locationregion_address_postal_code'));
      $query->condition('n.nid', $NodeNid , '=');
      $query->condition('n.type', $NodeType, '=');
      $CData= $query->execute()->fetchAll();
             
      $commands[] = ajax_command_invoke("input.config_location_region_title", 'val',array($CData[0]->title));
      $commands[] = ajax_command_invoke("input.config_location_region_description", 'val',array($CData[0]->field_locationregion_description_value));
      //$commands[] = ajax_command_invoke("input.config_location_region_address", 'val',array($CData[0]['field_region_address_value']));
      
      $commands[] = ajax_command_invoke("select.config_location_region_country", 'val',array($CData[0]->field_locationregion_address_country));
      $commands[] = ajax_command_invoke("select.config_location_region_country", 'trigger',array('change'));
      //$commands[] = ajax_command_invoke("input.config_location_region_country_value", 'val',array($CData[0]['field_country_code_value_value']));
      $commands[] = ajax_command_invoke("input.config_location_region_address1", 'val',array($CData[0]->field_locationregion_address_thoroughfare));
      $commands[] = ajax_command_invoke("input.config_location_region_address2", 'val',array($CData[0]->field_locationregion_address_premise));
      $commands[] = ajax_command_invoke("input.config_location_region_city", 'val',array($CData[0]->field_locationregion_address_locality));
      $commands[] = ajax_command_invoke("select.config_location_region_state", 'val',array($CData[0]->field_locationregion_address_administrative_area));
      $commands[] = ajax_command_invoke("input.config_location_region_state_key", 'val',array($CData[0]->field_locationregion_address_administrative_area));
      //$commands[] = ajax_command_invoke("input.config_location_region_state_value", 'val',array($CData[0]['field_state_code_value_value']));
      $commands[] = ajax_command_invoke("input.config_location_region_zipcode", 'val',array($CData[0]->field_locationregion_address_postal_code));
      $commands[] = ajax_command_invoke("input.node-nid", 'val',array($CData[0]->nid));
    }

    //config location site
    if($NodeType == 'fm_location_site') {
      $query= db_select('node', 'n');
      $query->leftjoin('field_data_field_location_region' ,'flr', 'flr.entity_id=n.nid');      
      $query->leftjoin('field_data_field_locationsite_description' ,'fld', 'fld.entity_id=n.nid');
      $query->leftjoin('field_data_field_locationsite_address' ,'fla' ,'fla.entity_id=n.nid');
      $query->fields('n',array('nid','title'));
      $query->fields('flr',array('field_location_region_target_id'));
      $query->fields('fld',array('field_locationsite_description_value'));
      $query->fields('fla',array('field_locationsite_address_country','field_locationsite_address_thoroughfare','field_locationsite_address_premise','field_locationsite_address_locality','field_locationsite_address_administrative_area','field_locationsite_address_postal_code'));
      $query->condition('n.nid', $NodeNid , '=');
      $query->condition('n.type', $NodeType, '=');
      $CData= $query->execute()->fetchAll();
      
      $commands[] = ajax_command_invoke("select.config_location_pick_region", 'val',array($CData[0]->field_location_region_target_id));
      $commands[] = ajax_command_invoke("input.config_location_site_title", 'val',array($CData[0]->title));
      $commands[] = ajax_command_invoke("input.config_location_site_description", 'val',array($CData[0]->field_locationsite_description_value));
     // $commands[] = ajax_command_invoke("input.config_location_site_address", 'val',array($CData[0]->title));
      
      $commands[] = ajax_command_invoke("select.config_location_site_country", 'val',array($CData[0]->field_locationsite_address_country));
      $commands[] = ajax_command_invoke("select.config_location_site_country", 'trigger',array('change'));
     // $commands[] = ajax_command_invoke("input.config_location_site_country_value", 'val',array($CData[0]['field_country_code_value_value']));
      $commands[] = ajax_command_invoke("input.config_location_site_address1", 'val',array($CData[0]->field_locationsite_address_thoroughfare));
      $commands[] = ajax_command_invoke("input.config_location_site_address2", 'val',array($CData[0]->field_locationsite_address_premise));
      $commands[] = ajax_command_invoke("input.config_location_site_city", 'val',array($CData[0]->field_locationsite_address_locality));
      $commands[] = ajax_command_invoke("select.config_location_site_state", 'val',array($CData[0]->field_locationsite_address_administrative_area));
      $commands[] = ajax_command_invoke("input.config_location_site_state_key", 'val',array($CData[0]->field_locationsite_address_administrative_area));
      //$commands[] = ajax_command_invoke("input.config_location_site_state_value", 'val',array($CData[0]->title));
      $commands[] = ajax_command_invoke("input.config_location_site_zipcode", 'val',array($CData[0]->field_locationsite_address_postal_code));    
      $commands[] = ajax_command_invoke("input.node-nid", 'val',array($CData[0]->nid));
    }

    //config location facility
    if($NodeType == 'fm_facility') {
      $query= db_select('node', 'n');
      $query->leftjoin('field_data_field_facility_location_site' ,'flr', 'flr.entity_id=n.nid');      
      $query->leftjoin('field_data_field_facility_number_of_floor' ,'ffnof', 'ffnof.entity_id=n.nid');
      $query->leftjoin('field_data_field_facility_ftes' ,'ffft', 'ffft.entity_id=n.nid');
      $query->leftjoin('field_data_field_facility_employees' ,'ffem', 'ffem.entity_id=n.nid');
      $query->leftjoin('field_data_field_facility_type' ,'ffty', 'ffty.entity_id=n.nid');
      $query->leftjoin('field_data_field_facility_address' ,'fla' ,'fla.entity_id=n.nid');
      $query->fields('n',array('nid','title'));
      $query->fields('ffft',array('field_facility_ftes_value'));
      $query->fields('ffem',array('field_facility_employees_value'));
      $query->fields('ffty',array('field_facility_type_target_id'));
      $query->fields('flr',array('field_facility_location_site_target_id'));
      $query->fields('ffnof',array('field_facility_number_of_floor_value'));
      $query->fields('fla',array('field_facility_address_country','field_facility_address_thoroughfare','field_facility_address_premise','field_facility_address_locality','field_facility_address_administrative_area','field_facility_address_postal_code'));
      $query->condition('n.nid', $NodeNid , '=');
      $query->condition('n.type', $NodeType, '=');
      $CData= $query->execute()->fetchAll();
      
      
      $NodeObj111 = array('NodeType'=>'NoType','TableJoin'=>'TableJoin','TableName'=>'field_data_field_facility_area_type','Fetch'=>'fetchAllKeyed','CFields'=>'CFields','CFieldsNames'=>array('delta','field_facility_area_type_target_id'),'OtherId'=>array('equal'=>array('bundle'=>'facility'),'equal'=>array('entity_id'=>$NodeNid )));
      $TableData111 =  _get_asset_loc_db_request($NodeObj111);

      $commands[] = ajax_command_invoke("select.config_location_pick_site", 'val',array($CData[0]->field_facility_location_site_target_id));
      $commands[] = ajax_command_invoke("input.config_location_facility_title", 'val',array($CData[0]->title));
     // $commands[] = ajax_command_invoke("input.config_location_facility_conditionalarea", 'val',array($CData[0]->nid)); 
      $commands[] = ajax_command_invoke("select.config_location_facility_facilitytype", 'val',array($CData[0]->field_facility_type_target_id));
      $commands[] = ajax_command_invoke("input.config_location_facility_ftes", 'val',array($CData[0]->field_facility_ftes_value));

      // $commands[] = ajax_command_invoke("input.config_location_facility_floornumber", 'val',array($CData[0]->field_facility_number_of_floor_value));
      if(isset($CData[0]->field_facility_number_of_floor_value) && !empty($CData[0]->field_facility_number_of_floor_value)){
        $commands[] = ajax_command_invoke("input.config_location_facility_floornumber", 'val',array($CData[0]->field_facility_number_of_floor_value));
        $commands[] = ajax_command_invoke("input.config_location_facility_floornumber_addmore", 'trigger',array('mousedown'));
      }
      $commands[] = ajax_command_invoke("select.config_location_facility_country", 'val',array($CData[0]->field_facility_address_country));
      $commands[] = ajax_command_invoke("select.config_location_facility_country", 'trigger',array('change'));
     // $commands[] = ajax_command_invoke("input.config_location_facility_country_value", 'val',array($CData[0]->nid));
      $commands[] = ajax_command_invoke("input.config_location_facility_address1", 'val',array($CData[0]->field_facility_address_thoroughfare));
      $commands[] = ajax_command_invoke("input.config_location_facility_address2", 'val',array($CData[0]->field_facility_address_premise));
      $commands[] = ajax_command_invoke("input.config_location_facility_city", 'val',array($CData[0]->field_facility_address_locality));
      $commands[] = ajax_command_invoke("select.config_location_facility_state", 'val',array($CData[0]->field_facility_address_administrative_area));
      $commands[] = ajax_command_invoke("input.config_location_facility_state_key", 'val',array($CData[0]->field_facility_address_administrative_area));
      //$commands[] = ajax_command_invoke("input.config_location_facility_state_value", 'val',array($CData[0]->nid));
      $commands[] = ajax_command_invoke("input.config_location_facility_zipcode", 'val',array($CData[0]->field_facility_address_postal_code));
      
      $commands[] = ajax_command_invoke("input.facility_area_type_values", 'val',array($TableData111));
    
      $commands[] = ajax_command_invoke("input.fm_facility_node_nid", 'val',array($CData[0]->nid));
    }

    //config location location
    if($NodeType == 'fm_location_location'){
      $query= db_select('node', 'n');
      $query->leftjoin('field_data_field_location_facility' ,'flr', 'flr.entity_id=n.nid');      
      $query->leftjoin('field_data_field_location_description' ,'ffnof', 'ffnof.entity_id=n.nid');
      $query->leftjoin('field_data_field_location_room_number' ,'ffft', 'ffft.entity_id=n.nid');
      $query->leftjoin('field_data_field_location_department' ,'ffty', 'ffty.entity_id=n.nid');
      $query->leftjoin('field_data_field_location_zone_address' ,'fla' ,'fla.entity_id=n.nid');
      $query->leftjoin('field_data_field_location_floor_count' ,'flfco' ,'flfco.entity_id=n.nid');
      $query->fields('n',array('nid','title'));
      $query->fields('ffft',array('field_location_room_number_value'));
      $query->fields('ffty',array('field_location_department_target_id'));    
      $query->fields('flr',array('field_location_facility_target_id'));
      $query->fields('ffnof',array('field_location_description_value'));
      $query->fields('flfco',array('field_location_floor_count_value'));
      $query->fields('fla',array('field_location_zone_address_country','field_location_zone_address_thoroughfare','field_location_zone_address_premise','field_location_zone_address_locality','field_location_zone_address_administrative_area','field_location_zone_address_postal_code'));
      $query->condition('n.nid', $NodeNid , '=');
      $query->condition('n.type', $NodeType, '=');
      $CData= $query->execute()->fetchAll();
      
      $commands[] = ajax_command_invoke("select.config_location_pick_facility", 'val',array($CData[0]->field_location_facility_target_id));
      $commands[] = ajax_command_invoke("select.config_location_pick_facility", 'trigger',array('change'));
      //$commands[] = ajax_command_invoke("select.config_location_location_numberoffloor", 'trigger',array('change'));  
     // $commands[] = ajax_command_invoke("input.config_location_location_numberoffloor", 'val',array($CData[0]->title));
      $commands[] = ajax_command_invoke("input.config_location_location_title", 'val',array($CData[0]->title)); 
      $commands[] = ajax_command_invoke("input.config_location_zone_description", 'val',array($CData[0]->field_location_description_value));    
      $commands[] = ajax_command_invoke("input.config_location_location_roomnumber", 'val',array($CData[0]->field_location_room_number_value));
      $commands[] = ajax_command_invoke("select.config_location_department_number",  'val',array($CData[0]->field_location_department_target_id));    
      //$commands[] = ajax_command_invoke("input.config_location_location_address",  'val',array($CData[0]->title));  
      if(isset($CData[0]->field_location_floor_count_value) && !empty($CData[0]->field_location_floor_count_value)){
        //$commands[] = ajax_command_invoke("select.config_location_location_floornumber_select", 'val',array($CData[0]->field_location_floor_count_value));
       // $commands[] = ajax_command_invoke("input.config_location_location_floornumber_addmore", 'trigger',array('mousedown'));
      }
      
      $FloorListsObj = array('NodeType'=>'NoType','TableJoin'=>'TableJoin','TableName'=>'field_data_field_location_floors','addExpression'=>"CONCAT(entity_id, '_', delta)",'addExpression_value'=>"nid_delta",'Fetch'=>'fetchCol','CFields'=>'CFields','CFieldsNames'=>array('field_location_floors_value'),'OtherId'=>array('equal'=>array('bundle'=>'fm_facility'),'equal'=>array('entity_id'=>$NodeNid)));
      $FloorLists =  _get_asset_loc_db_request($FloorListsObj);
    
      $commands[] = ajax_command_invoke("input.location_location_numberoffloor_values", 'val',array($FloorLists));
      
      
      $commands[] = ajax_command_invoke("select.config_location_location_country", 'val',array($CData[0]->field_location_zone_address_country));
      $commands[] = ajax_command_invoke("select.config_location_location_country", 'trigger',array('change'));
      //$commands[] = ajax_command_invoke("input.config_location_location_country_value", 'val',array($CData[0]->title));
      $commands[] = ajax_command_invoke("input.config_location_location_address1", 'val',array($CData[0]->field_location_zone_address_thoroughfare));
      $commands[] = ajax_command_invoke("input.config_location_location_address2", 'val',array($CData[0]->field_location_zone_address_premise));
      $commands[] = ajax_command_invoke("input.config_location_location_city", 'val',array($CData[0]->field_location_zone_address_locality));
      $commands[] = ajax_command_invoke("select.config_location_location_state", 'val',array($CData[0]->field_location_zone_address_administrative_area));
      $commands[] = ajax_command_invoke("input.config_location_location_state_key", 'val',array($CData[0]->field_location_zone_address_administrative_area));
      //$commands[] = ajax_command_invoke("input.config_location_location_state_value", 'val',array($CData[0]->title));
      $commands[] = ajax_command_invoke("input.config_location_location_zipcode", 'val',array($CData[0]->field_location_zone_address_postal_code));
      $commands[] = ajax_command_invoke("input.fm_location_location_node_nid", 'val',array($CData[0]->nid));
    }

    //config fm_facility_type
    if($NodeType == 'fm_facility_type'){
      $JoinField = array(
      'nfacds-_value'=>'field_data_field_facility_type_description', 
      );    
      $NodeObj = array('NodeNid'=>$NodeNid,'NodeType'=>$NodeType);
      $CData = _get_asset_loc_db_request($NodeObj,$JoinField); 
      $commands[] = ajax_command_invoke("input.config_facility_type_title", 'val',array($CData[0]['title']));
      $commands[] = ajax_command_invoke("input.config_facility_type_description", 'val',array($CData[0]['field_facility_type_description_value']));
      $commands[] = ajax_command_invoke("input.facility_type_node_nid", 'val',array($CData[0]['nid'])); 
    }

    //config fm_facility_area_type
    if($NodeType == 'fm_facility_area_type'){
      $JoinField = array(
      'nfacds-_value'=>'field_data_field_fareatype_description', 
      );    
      $NodeObj = array('NodeNid'=>$NodeNid,'NodeType'=>$NodeType);
      $CData = _get_asset_loc_db_request($NodeObj,$JoinField); 
      $commands[] = ajax_command_invoke("input.config_facility_area_type_title", 'val',array($CData[0]['title']));
      $commands[] = ajax_command_invoke("input.config_facility_area_type_description", 'val',array($CData[0]['field_fareatype_description_value']));
      $commands[] = ajax_command_invoke("input.facility_area_type_node_nid", 'val',array($CData[0]['nid']));  
    }
  }

  print ajax_render($commands);
  exit;
}

function get_location_data_country_callback_program($action,$id,$ajax=TRUE) {
  if(isset($action) && $action == 'region' && !empty($id)){
    $query= db_select('field_data_field_locationregion_address', 'flr');  
  $query->fields('flr',array('field_locationregion_address_country'));
  $query->condition('flr.entity_id', $id , '=');
  $query->condition('flr.bundle', 'fm_location_region' , '=');
  $CData = $query->execute()->fetchColumn(0);
  drupal_json_output($CData);     
  }
  if(isset($action) && $action == 'site' && !empty($id)){
    $query= db_select('field_data_field_locationsite_address', 'flr');  
  $query->fields('flr',array('field_locationsite_address_country'));
  $query->condition('flr.entity_id', $id , '=');
  $query->condition('flr.bundle', 'fm_location_site' , '=');
  $CData = $query->execute()->fetchColumn(0);
  drupal_json_output($CData);
  }
  if(isset($action) && $action == 'facility' && !empty($id)){
    $query= db_select('field_data_field_facility_address', 'flr');  
  $query->fields('flr',array('field_facility_address_country'));
  $query->condition('flr.entity_id', $id , '=');
  $query->condition('flr.bundle', 'fm_facility' , '=');
  $CData = $query->execute()->fetchColumn(0);
  drupal_json_output($CData);     
  }  
}

function _project_location_by_company($cnid, $locationType,$proType) {
  $query = db_select('node','n');
  $query->leftjoin('og_membership','ogm','ogm.etid=n.nid');
  $query->leftjoin('field_data_field_locationregion_description','fsd','fsd.entity_id=n.nid');
  $query->join('field_data_field_cm_type','cmt','cmt.entity_id=n.nid');
  $query->fields('n',array('nid','title'));
  //$query->fields('fsd',array('field_locationregion_description_value'));
  $query->condition('ogm.gid',$cnid,'=');
  $query->condition('cmt.field_cm_type_value',$proType,'=');
  $query->condition('n.type',$locationType,'=');
  $result = $query->execute()->fetchAllKeyed(0,1);
  return $result;
}

/**
 * Menu callback for get-facility-floordata-program.
 */
function get_facility_floor_data_program_callback($nid, $ajax=TRUE) {
  $floorData = 0;
  if(isset($nid) && !empty($nid)){
    module_load_include('inc', 'm6connect_program', 'includes/asset_location');
    $NodeObj11 = array('NodeType'=>'NoType','TableJoin'=>'TableJoin','TableName'=>'field_data_field_facility_floor_name','Fetch'=>'fetchAllKeyed','CFields'=>'CFields','CFieldsNames'=>array('delta','field_facility_floor_name_value'),'OtherId'=>array('equal'=>array('bundle'=>'facility'),'equal'=>array('entity_id'=>$nid )));
    $TableData111 =  _get_asset_loc_db_request($NodeObj11);
  
    $NodeObj12 = array('NodeType'=>'NoType','TableJoin'=>'TableJoin','TableName'=>'field_data_field_facility_floor_square_feet','Fetch'=>'fetchAllKeyed','CFields'=>'CFields','CFieldsNames'=>array('delta','field_facility_floor_square_feet_value'),'OtherId'=>array('equal'=>array('bundle'=>'facility'),'equal'=>array('entity_id'=>$nid ))); 
    $TableData112 =  _get_asset_loc_db_request($NodeObj12);
  
    $floorData = array('facilityfloor'=>$TableData111,'facilitysf'=>$TableData112);
    if ($floorData) {
      drupal_json_output($floorData);
      drupal_exit(0);
    }
  }
  drupal_json_output($floorData);
  drupal_exit(0);
}

/**
 * Menu callback for get-all-aseets.
 */
function get_all_assets() {
  $return = array();
  if (!empty($_POST['data'])) {
    $data = $_POST['data'];
    if (!empty($data)) {
      $return = array();
      foreach ($data as $key => $value) {
        if (!empty($value)) {
          $nid_splited = explode('-', $value);
          $nid = $nid_splited[0];
          if (!empty($nid) && $assetData = node_load($nid)) {
            $assetCost = !empty($assetData->field_asset_cost['und'][0]['value']) ? $assetData->field_asset_cost['und'][0]['value'] : 0;
            $assetInstallation = !empty($assetData->field_asset_installation['und'][0]['value']) ? $assetData->field_asset_installation['und'][0]['value'] : 0;
            $assetConsu = !empty($assetData->field_asset_outside_consultant['und'][0]['value']) ? $assetData->field_asset_outside_consultant['und'][0]['value'] : 0;
            $assetInterCharge = !empty($assetData->field_asset_internal_charge['und'][0]['value']) ? $assetData->field_asset_internal_charge['und'][0]['value'] : 0;
            $spreadAsseVal = !empty($assetData->field_asset_spread_amount['und'][0]['value']) ? $assetData->field_asset_spread_amount['und'][0]['value'] : 0;

            $currentAsseVal = $assetCost + $assetInstallation + $assetConsu + $assetInterCharge + $spreadAsseVal;
            $status = array();

            $status['AssetCost'] = (string) $assetCost;
            $status['AssetInstallation'] = (string) $assetInstallation;
            $status['AssetConsu'] = (string) $assetConsu;
            $status['AssetInterCharge'] = (string) $assetInterCharge;
            $status['CurrentAsseVal'] = (string) $currentAsseVal;
            $status['SpreadAmt'] = (string) $spreadAsseVal;

            $return[$value] = $status;
          }
        }
      }
    }
  }
  drupal_json_output($return);
  drupal_exit();
}

function get_next_page_data_records($type,$pageNo,$proId, $ajax = NULL,$totalRec) {   
  ctools_include('ajax');    
  if($pageNo == 0 || $pageNo == 1) {
    $from = 0;
    $to = 10;
  }
  else {
    $from = ($pageNo - 1) * 10;
    $to = $pageNo * 10;
  }
  $commands = array();
  if($type == 'spend') {
    $output = get_spending_listing_table_data($proId,'','', '', $ajax=FALSE, $from, $to,$pageNo);
    $commands[] = ajax_command_html('#programe-spending-details', $output);
  }
  if($type == 'etc') {
    $output = get_etc_listing_table_data($proId,$form,$to);
  $commands[] = ajax_command_html('#prgram-etc-listing-table', $output);
  }
  if($type == 'commit') {
    $output = get_commitment_listing_table_data($proId,'','', $ajax=FALSE, $from, $to);
  $commands[] = ajax_command_html('#programe-commitment-details', $output);
  }
  if($type == 'asset') {
    $output = get_default_assets_listing_table_data($proId, $ajax=FALSE, $from, $to);
    $commands[] = ajax_command_html('#prgram-aset-listing-table', $output);
  }
  $commands[] = ajax_command_invoke("input.datatable_page_id", 'val',array($pageNo));  
  print ajax_render($commands);
  exit;   
}

function get_total_number_data_records($start,$end,$type,$proId,$ajax = NULL) {
  ctools_include('ajax');
  $commands = array();
  if($type == 'spend') {
    $output = get_spending_listing_table_data($proId,'','', '', $ajax=FALSE, 'select', $end);
    $commands[] = ajax_command_html('#programe-spending-details', $output);
  }
  if($type == 'etc') {
    $output = get_etc_listing_table_data($proId,'select',$end);
  $commands[] = ajax_command_html('#prgram-etc-listing-table', $output);
  }
  if($type == 'commit') {
    $output = get_commitment_listing_table_data($proId,'','', $ajax=FALSE, 'select', $end);
  $commands[] = ajax_command_html('#programe-commitment-details', $output);
  }
  if($type == 'asset') {
    $output = get_default_assets_listing_table_data($proId, $ajax=FALSE, 'select', $end);
  $commands[] = ajax_command_html('#prgram-aset-listing-table', $output);
  }  
  $commands[] = ajax_command_invoke("select.pager-load-more-to", 'val',array($end));
  print ajax_render($commands);
  exit;   
}

function get_asset_based_data_callback($assetId,$proId,$ajax = NULL) {
  if (isset($_SESSION['change_asset_filter'])) {
    unset($_SESSION['change_asset_filter']);
  }
  $_SESSION['change_asset_filter'] = $assetId;
  ctools_include('ajax');
  $commands = array();
  $output = get_spending_listing_table_data($proId,$assetId);  
  $commands[] = ajax_command_html('#programe-spending-details', $output);  
  $commands[] = ajax_command_invoke('select.asset-based-load-more-to','val',array($assetId));  
  print ajax_render($commands);
  exit;   
}

function _get_table_pager_custom($rakam,$projectId,$pageNo) {
  $pagerGene = '';
  if($rakam > 10) {
    $pagerGene .= '<div class="item-list"><ul class="pager">';
    $pagerGene .= '<li class="pager-current">'.l('<< First', 'get-next-page-data/spend/0/'.$projectId.'/'.$rakam.'/nojs', array('attributes' => array('class' => array('use-ajax','page-range-0')))).'</li>';
    if($rakam > 10) {
      $getpageLimit = $rakam/10;
      $getpageLimit = ceil($getpageLimit);
    }
    for($i = 1; $i<=$getpageLimit; $i++) {
      $pagerGene .= '<li class="pager-current">'.l($i, 'get-next-page-data/spend/'.$i.'/'.$projectId.'/'.$rakam.'/nojs', array('attributes' => array('class' => array('use-ajax','page-range-'.$i)))).'</li>';
    }
    $pagerGene .= '<li class="pager-current">'.l('Last >>', 'get-next-page-data/spend/'.$getpageLimit.'/'.$projectId.'/'.$rakam.'/nojs', array('attributes' => array('class' => array('use-ajax','page-range-0')))).'</li>';
    $pagerGene .= '</ul></div>';
  }
  return $pagerGene;
}

function _get_pager_option_data_list($projectId,$type) {
  $output = '<div class="item-data-list" style="display:none;"><ul class="pager-list">';
  $output .= '<li class="pager-no-10">'.l(10, 'get-total-number-of-data/0/10/'.$type.'/'.$projectId.'/nojs', array('attributes' => array('class' => array('use-ajax','page-range-10')))).'</li><li class="pager-no-25">'.l(25, 'get-total-number-of-data/0/25/'.$type.'/'.$projectId.'/nojs', array('attributes' => array('class' => array('use-ajax','page-range-25')))).'</li><li class="pager-no-30">'.l(30, 'get-total-number-of-data/0/30/'.$type.'/'.$projectId.'/nojs', array('attributes' => array('class' => array('use-ajax','page-range-30')))).'</li><li class="pager-no-50">'.l(50, 'get-total-number-of-data/0/50/'.$type.'/'.$projectId.'/nojs', array('attributes' => array('class' => array('use-ajax','page-range-50')))).'</li><li class="pager-no-100">'.l(100, 'get-total-number-of-data/0/100/'.$type.'/'.$projectId.'/nojs', array('attributes' => array('class' => array('use-ajax','page-range-100')))).'</li></ul></div>';
  $output .= '<div class="col-md-3 padding-0 margin-bottom-15 pull-left"><div class="item-list-select input-group"><span class="input-group-addon">Show Entries: </span>
          <select class="pager-load-more-to" name="pager-navigation-control" for="'.$projectId.'">
              <option value="10">10</option>
                <option value="25">25</option>
              <option value="30">30</option>
              <option value="50" selected="selected">50</option>
              <option value="100">100</option>
              </select>';
  $output .= '</div></div>';
  return $output;
}

function _get_filter_by_asset_list($projectId, $default_asset = NULL) {
  global $company;  
  if (empty($default_asset)) {
    if (!empty($_SESSION['change_asset_filter'])) {
      $default_asset = $_SESSION['change_asset_filter'];
    }
  }
  $query= db_select('node','n');   
  $query->join('og_membership','om','om.etid=n.nid AND om.entity_type=:entityType', array(':entityType'=>'node'));
  $query->join('field_data_field_project_reference','pr','pr.entity_id = n.nid');
  $query->join('field_data_field_system_asset_type','at','at.entity_id = n.nid');
  $query->fields('n', array('nid', 'title'));  
  $query->condition('n.type', 'program_assets', '=');
  $query->condition('om.gid', $company->nid, '=');
  $query->condition('pr.field_project_reference_nid', $projectId, '=');
  $assetListingSelect = $query->execute()->fetchAllKeyed(0,1);
  $output = '<div class="asset-item-data-list" style="display:none;"><ul class="asset-pager-list">';
  foreach($assetListingSelect as $assetId => $assetName) {
    $output .= '<li class="asset-no-'.$assetId.'">'.l($assetId, 'get-asset-based-data/'.$assetId.'/'.$projectId.'/nojs', array('attributes' => array('class' => array('use-ajax','asset-data-'.$assetId)))).'</li>';
  }  
  $output .= '</ul></div>';
  $output .= '<div class="col-md-4 padding-0 margin-bottom-15 pull-right"><div class="asset-item-list-select input-group"><span class="input-group-addon">Filter By Asset(s):  </span>
          <select class="asset-based-load-more-to" name="pager-navigation-control-asset" for="'.$projectId.'">';
  $output .= '<option value="">- Select Asset -</option>';      
  foreach($assetListingSelect as $assetId => $assetName) {
    if (!empty($default_asset) && $default_asset == $assetId) {
      $output .= '<option value="'.$assetId.'" selected>'.$assetName.'</option>';
    }
    else {
      $output .= '<option value="'.$assetId.'">'.$assetName.'</option>';
    }
  }
  $output .= '</select></div></div>';
  return $output;
}

function project_asset_list_callback($form,&$form_state) {
  global $company;  
  $triggeringElement = $form_state['triggering_element'];    
  if($form_state['triggering_element']['#name']=='project_asset_list') {
    if(!empty($triggeringElement['#value'])) {
    $assetNid = $triggeringElement['#value'];
    $output = get_spending_listing_table_data($form_state['values']['select-spending'],$assetNid,'','','','','');  
      ctools_include('ajax');
      $commands = array();
      $commands[] = ajax_command_html('#programe-spending-details', $output);
  }
  }
  print ajax_render($commands);
  exit; 
}

/**
 * Helper function to save spread data in custom table.
 */
function _update_spending_calculations($spending_amounts = array(), $spending_nid = NULL, $auto = 0) {
  if (empty($spending_amounts) || empty($spending_nid)) {
    // If data is not proper, abort.
    return;
  }

  // Double check that we have unique entries.
  db_delete('m6connect_spending_spread_calculations')
    ->condition('spending_nid', $spending_nid)
    ->condition('asset_nid', array_keys($spending_amounts))
    ->execute();

  // Inserting data.
  foreach ($spending_amounts as $asset_nid => $amount) {
    db_insert('m6connect_spending_spread_calculations')
      ->fields(array(
        'spending_nid' => $spending_nid,
        'asset_nid' => $asset_nid,
        'auto' => $auto,
        'amount' => $amount,
        'updated' => REQUEST_TIME,
      ))
      ->execute();
  }
}

/**
 * Helper function to get spread amount from custom table.
 * @var $spending_nid
 *   Spending Node NID (required)
 * @var $asset_nid
 *   Asset Node NID (required)
 * @return spread amount
 */
function _get_spread_amount_from_table($spending_nid = NULL, $asset_nid = NULL) {
  if (empty($spending_nid) || empty($asset_nid)) {
    return NULL;
  }

  return db_select('m6connect_spending_spread_calculations', 's')
    ->fields('s', array('amount'))
    ->condition('spending_nid', $spending_nid)
    ->condition('asset_nid', $asset_nid)
    ->execute()
    ->fetchField();
}

/**
 * Helper function to check if a service is available for CM.
 */
function _check_cm_service_availability($service = FALSE, $cm_type = FALSE) {
  if (!$service || !$cm_type) {
    // If either of the data is not available, then Aborting.
    return FALSE;
  }
  
  global $company;
  $saved_data = variable_get('cm_services', array());
  return isset($saved_data[$company->nid][$cm_type][$service]);
}

/**
 * Function to delete assets from custom table.
 */
function _delete_assets_from_table($spending_nid = NULL, $assets = array()) {
  if (empty($spending_nid) || empty($assets)) {
    // If any of the two parameters not get, abort.
    return;
  }

  db_delete('m6connect_spending_spread_calculations')
    ->condition('spending_nid', $spending_nid)
    ->condition('asset_nid', $assets)
    ->execute();
}

/**
 * Function to clean assets from table.
 * This function should only be called when deleting an asset node from system.
 * As the deletion is done on the basis of assets only, and no spending nodes
 * are taken into consideration.
 * If it is just called to delete assets for a spending node, then also it will
 * clear all the asset entries.
 */
function _clear_assets_from_table($assets = array()) {
  if (empty($assets)) {
    return;
  }
  db_delete('m6connect_spending_spread_calculations')
    ->condition('asset_nid', $assets)
    ->execute();
}

function _get_spending_details_by_asset($assetId,$projectId) {
  // Get spending data by asset id and showing all the thing on edit.
  global $company;
  ctools_include('ajax');
  ctools_include('modal');
  $query = db_select('node','n');
  $query->join('og_membership','om','om.etid=n.nid AND om.entity_type=:entityType', array(':entityType'=>'node'));
  $query->join('field_data_field_project_reference','pr', 'pr.entity_id = n.nid');
  $query->fields('n', array('nid'));
  $query->condition('pr.field_project_reference_nid', $projectId, '=');
  $query->join('field_data_field_asset_description_spending','ad','n.nid=ad.entity_id');
  $query->condition('ad.field_asset_description_spending_value', '%' . db_like($assetId) . '%', 'LIKE');
  $query->condition('n.type','project_spending','=');
  $query->condition('om.gid', $company->nid, '=');
  $query->orderBy('n.nid', 'DESC');
  $getSpendingNodes = $query->execute()->fetchCol();
  $rows = array(); 
  $header = array( 
    array('data'=>'Commitment Number','class'=>array('text-left')),
    array('data'=>'Invoice Number','class'=>array('text-left','col-md-1')),
  array('data'=>'Vendor Name','class'=>array('text-left')),
    array('data'=>'Vendor #','class'=>array('text-left')),
  array('data'=>'Invoice Amount','class'=>array('text-left')),
    array('data'=>'Amount Allocated','class'=>array('text-left')),
  array('data'=>'Percentage %','class'=>array('text-center','no-sort')),
  );
  $getTotalAmount = 0;
  if($getSpendingNodes && !empty($getSpendingNodes)) {
    foreach($getSpendingNodes as $spendingId => $spendingVal){
    $spendingNode = node_load($spendingVal);  
    $invoiceNumber = isset($spendingNode->field_invoice_number_cal['und'])?$spendingNode->field_invoice_number_cal['und'][0]['value']:'None';
    $invoiceAmount = isset($spendingNode->field_invoice_amount['und'])?'$'.number_format($spendingNode->field_invoice_amount['und'][0]['value'],2):'$0.00';
    $commitmentNid = isset($spendingNode->field_invoice_commitment['und'])?$spendingNode->field_invoice_commitment['und'][0]['nid']:'';
    $venoderName = 'None';
    $vendorNumber = '';
    if(!empty($commitmentNid)) {
      $getCommitData = node_load($commitmentNid);
    $commitNumber = $getCommitData->field_commitment_number_calculat['und'][0]['value'];
    if($getCommitData->field_vendor['und'][0]['value'] != '' && is_numeric($getCommitData->field_vendor['und'][0]['value'])) {
          $venoderName = node_load($getCommitData->field_vendor['und'][0]['value'])->title;
        }
        else {
          $venoderName = $getCommitData->field_vendor['und'][0]['value'];
        }   
    $vendorNumber = ($spendingNode->field_vendor_number['und'][0]['value']!='')?$spendingNode->field_vendor_number['und'][0]['value']:'None';
    }
    $getTotalAmount = 0;
    if($spendingNode->field_has_asset['und'][0]['value'] == 'TRUE') {
      //Checking if amount remain in split section
    if($spendingNode->field_asset_type['und'][0]['value'] == 'Split') {
      foreach ($spendingNode->field_asset_category_split['und'] as $delta => $assetNid) { 
            $assetCost += $spendingNode->field_asset_cost['und'][$delta]['value'];  
            $assetInst += $spendingNode->field_asset_installation['und'][$delta]['value'];
            $assetConst += $spendingNode->field_asset_outside_consultant['und'][$delta]['value'];
            $assetInterCharge += $spendingNode->field_asset_internal_charge['und'][$delta]['value'];
      }
      $getTotalAmount = $assetCost +  $assetInst + $assetConst + $assetInterCharge;
      $finalTotalAmt += $getTotalAmount;
    }
    else if($spendingNode->field_asset_type['und'][0]['value'] == 'Spread'){      
      foreach($spendingNode->field_asset_description_spending['und'] as $nidsKey => $loadData) {
      $assetDesc_split = explode('-',$loadData['value']);
        if ($assetDesc_split[0] == $assetId) {
              $assetNodeNid = $assetDesc_split[0];
          $getTotalAmount = db_select('m6connect_spending_spread_calculations', 's')
            ->fields('s', array('amount'))
              ->condition('spending_nid', $spendingNode->nid)
              ->condition('asset_nid', $assetNodeNid)
              ->execute()
              ->fetchField();
        $finalTotalAmt += $getTotalAmount;
      }
      }     
    }   
    }
    $percentageRemain = $getTotalAmount/$spendingNode->field_invoice_amount['und'][0]['value']*100; 
    $finalPer = 100 - $percentageRemain;
    $rows[] = array(
        'data' => array(  
      array('data' => $commitNumber,'class' => array('text-left')),
          array('data' => substr($invoiceNumber,0,15).'...','class' => array('text-left','col-md-1')),
      array('data' => $venoderName,'class' => array('text-left')),
      array('data' => $vendorNumber,'class' => array('text-left')),
          array('data' => $invoiceAmount,'class' => array('text-right')),     
          array('data' => '$'.number_format($getTotalAmount,2),'class' => array('text-right')),     
      array('data' => number_format($percentageRemain,2).'%','class' => array('text-left')),      
        ),
    );      
    }
  $rows[] = array(
        'data' => array(  
      array('data' => '&nbsp;'),
          array('data' => '&nbsp;','class' => array('text-left','col-md-1')),
      array('data' => '&nbsp;'),
      array('data' => '&nbsp;'),
          array('data' => 'Total','class' => array('text-right')),      
          array('data' => '$'.number_format($finalTotalAmt,2),'class' => array('text-right')),      
      array('data' => '&nbsp;'),
        ),
    
    );  
  }
  return theme('table', array('header'=>$header,'rows'=>$rows,'empty'=>'No Record Found','attributes'=>array('class'=>array('table','m6connect-custom-table','m6connect-custom-program-manager-spending-based-asset-table','m6connect-program-spending-based-asset-table','table-hover','table-bordered','text-center'))));
}

function load_spending_details_callback($assetId,$proId,$ajax = TRUE) {
  global $company;
  if ($ajax) {
    ctools_include('ajax');
    ctools_include('modal');
    $nodeDetails = node_load($assetId);
    $loadProData = node_load($proId);
	$city = ''; $state = ''; $addressType = '';
    module_load_include('inc', 'addressfield', 'addressfield.administrative_areas');
    if(isset($loadProData->field_project_location_facility['und'])) {
      $addressType = 'Faciltiy';  
      $getFacitiy = $loadProData->field_project_location_facility['und'][0]['target_id'];
      $getFaciltiyData = node_load($getFacitiy);
      $country = $getFaciltiyData->field_facility_address['und'][0]['country'];
      $stateListing = addressfield_get_administrative_areas($country);
      $city = $getFaciltiyData->field_facility_address['und'][0]['locality'];
      $state = $stateListing[$getFaciltiyData->field_facility_address['und'][0]['administrative_area']];
    }
    else if(isset($loadProData->field_project_location_site['und'])) {
      $addressType = 'Site';
      $getFacitiy = $loadProData->field_project_location_site['und'][0]['target_id'];
      $getFaciltiyData = node_load($getFacitiy);
      $country = $getFaciltiyData->field_facility_address['und'][0]['country'];
      $stateListing = addressfield_get_administrative_areas($country);
      $city = $getFaciltiyData->field_facility_address['und'][0]['locality'];
      $state = $stateListing[$getFaciltiyData->field_facility_address['und'][0]['administrative_area']];
    }
    else if(isset($loadProData->field_project_location_region['und'])) {
      $addressType = 'Region';  
      $getFacitiy = $loadProData->field_project_location_region['und'][0]['target_id'];
      $getFaciltiyData = node_load($getFacitiy);
      $country = $getFaciltiyData->field_facility_address['und'][0]['country'];
      $stateListing = addressfield_get_administrative_areas($country);
      $city = $getFaciltiyData->field_facility_address['und'][0]['locality'];
      $state = $stateListing[$getFaciltiyData->field_facility_address['und'][0]['administrative_area']];
    }
	$assetImgThumb = '';
    $makeDefault = ($nodeDetails->field_make_defaults['und'][0]['value'] != '')?$nodeDetails->field_make_defaults['und'][0]['value']:'';
    $acquisitionDate = ($nodeDetails->field_acquisition_date['und'][0]['value'] != '')?date('m/d/Y', strtotime($nodeDetails->field_acquisition_date['und'][0]['value'])):'';
	$sinNumber = ($nodeDetails->field_project_asset_sin_number['und'][0]['value'] != '')?$nodeDetails->field_project_asset_sin_number['und'][0]['value']:'';
    $serialNumber = ($nodeDetails->field_asset_pin_number['und'][0]['value'] != '')?$nodeDetails->field_asset_pin_number['und'][0]['value']:'';
    if(isset($nodeDetails->field_system_asset_attachment['und'])) {
      foreach($nodeDetails->field_system_asset_attachment['und'] as $addKey => $addVal) {
        if(!empty($makeDefault)) {
          if($makeDefault == $addVal['fid']) {
            $assetImgThumb = '<img src="'.image_style_url('thumbnail',$addVal['uri']).'">';
          }
        }
        else {
          $assetImgThumb = '<img src="'.image_style_url('thumbnail',$nodeDetails->field_system_asset_attachment['und'][0]['uri']).'">';
        }
      } 
    }
    else {
      $assetImgThumb = '';
    }
    $query = db_select('node','n');
    $query->join('og_membership','om','om.etid=n.nid AND om.entity_type=:entityType', array(':entityType'=>'node'));
    $query->join('field_data_field_project_reference','pr', 'pr.entity_id = n.nid');
    $query->fields('n', array('nid'));
    $query->condition('pr.field_project_reference_nid', $proId, '=');
    $query->join('field_data_field_asset_description_spending','ad','n.nid=ad.entity_id');
    $query->condition('ad.field_asset_description_spending_value', '%' . db_like($assetId) . '%', 'LIKE');
    $query->condition('n.type','project_spending','=');
    $query->condition('om.gid', $company->nid, '=');
    $totalSpend = $query->execute()->rowCount();
    // Getting acuasition cost
    $assetAcqCost = 0;
    if (isset($nodeDetails->field_asset_cost['und'][0]['value'])) {
      $assetAcqCost += $nodeDetails->field_asset_cost['und'][0]['value'];
    }
    if (isset($nodeDetails->field_asset_installation['und'][0]['value'])) {
      $assetAcqCost += $nodeDetails->field_asset_installation['und'][0]['value'];
    }
    if (isset($nodeDetails->field_asset_outside_consultant['und'][0]['value'])) {
      $assetAcqCost += $nodeDetails->field_asset_outside_consultant['und'][0]['value'];
    }
    if (isset($nodeDetails->field_asset_internal_charge['und'][0]['value'])) {
      $assetAcqCost += $nodeDetails->field_asset_internal_charge['und'][0]['value'];
    }
	$output .= '<div class="associated-overflow"><h4><strong>Associated Spending For - '.$nodeDetails->title.'</strong></h4>';
    $output .= '<div class="clearfix margin-bottom-10">'.$assetImgThumb.'</div>';
    $output .= '<div class="row margin-bottom-10"><div class="col-md-2"><label>Asset Name: </label></div><div class="col-md-3">'.$nodeDetails->title.'</div><div class="col-md-2"><label>SIN #: </label></div><div class="col-md-3">'.$sinNumber.'</div></div>';
	$output .= '<div class="row margin-bottom-10"><div class="col-md-2"><label>Acquisition Cost: </label></div><div class="col-md-3">$'.number_format($assetAcqCost,2).'</div><div class="col-md-2"><label>Serial #: </label></div><div class="col-md-3">'.$serialNumber.'</div></div>';
	if(!empty($addressType)) {
	  $output .= '<div class="row margin-bottom-10"><div class="col-md-2"><label>'.$addressType.': </label></div><div class="col-md-3">'.$city.', '.$state.'</div><div class="col-md-2"><label>Quantity: </label></div><div class="col-md-3">'.$totalSpend.'</div></div>';
	}
	else {
      $output .= '<div class="row margin-bottom-10"><div class="col-md-2"><label>Adress: </label></div><div class="col-md-3">None</div><div class="col-md-2"><label>Quantity: </label></div><div class="col-md-3">'.$totalSpend.'</div></div>';
    }
    $output .= '<div class="row margin-bottom-10"><div class="col-md-2"><label>City: </label></div><div class="col-md-3">Test City</div><div class="col-md-2"><label>Acquisition Date: </label></div><div class="col-md-3">'.$acquisitionDate.'</div></div>';
    $output .= '<div class="row margin-bottom-10"><div class="col-md-2">&nbsp</div><div class="col-md-3">&nbsp;</div><div class="col-md-2"><label>Project Name: </label></div><div class="col-md-3">'._get_title_of_node($proId).'</div></div>';
    $output .= _get_spending_details_by_asset($assetId,$proId);     
    $output .= '<div class="clearfix margin-top-10">'.l('<input type="button" class="btn btn primary form-submit" value="Close" />', 'javascript:void(0);', array('external' => TRUE, 'html' => TRUE, 'attributes' => array('class' => array('assign-bid-packages-popup-close'), 'onclick' => 'jQuery("span.popups-close").click();'))).'</div></div>';
	return ctools_modal_render('',$output) ;
  }
  else {
    return _get_spending_details_by_asset($assetId,$proId);
  } 
}

function generate_spending_details_callback($assetId,$proId) {
  $nodeDetails = node_load($assetId);
  $loadProData = node_load($proId);
  global $company;
  $city = ''; $state = ''; $addressType = '';
  module_load_include('inc', 'addressfield', 'addressfield.administrative_areas');
  if(isset($loadProData->field_project_location_facility['und'])) {
    $addressType = 'Faciltiy';  
    $getFacitiy = $loadProData->field_project_location_facility['und'][0]['target_id'];
    $getFaciltiyData = node_load($getFacitiy);
    $country = $getFaciltiyData->field_facility_address['und'][0]['country'];
    $stateListing = addressfield_get_administrative_areas($country);
    $city = $getFaciltiyData->field_facility_address['und'][0]['locality'];
    $state = $stateListing[$getFaciltiyData->field_facility_address['und'][0]['administrative_area']];
  }
  else if(isset($loadProData->field_project_location_site['und'])) {
    $addressType = 'Site';
    $getFacitiy = $loadProData->field_project_location_site['und'][0]['target_id'];
    $getFaciltiyData = node_load($getFacitiy);
    $country = $getFaciltiyData->field_facility_address['und'][0]['country'];
    $stateListing = addressfield_get_administrative_areas($country);
    $city = $getFaciltiyData->field_facility_address['und'][0]['locality'];
    $state = $stateListing[$getFaciltiyData->field_facility_address['und'][0]['administrative_area']];
  }
  else if(isset($loadProData->field_project_location_region['und'])) {
    $addressType = 'Region';  
    $getFacitiy = $loadProData->field_project_location_region['und'][0]['target_id'];
    $getFaciltiyData = node_load($getFacitiy);
    $country = $getFaciltiyData->field_facility_address['und'][0]['country'];
    $stateListing = addressfield_get_administrative_areas($country);
    $city = $getFaciltiyData->field_facility_address['und'][0]['locality'];
    $state = $stateListing[$getFaciltiyData->field_facility_address['und'][0]['administrative_area']];
  }
  
  $assetImgThumb = '';
  $makeDefault = ($nodeDetails->field_make_defaults['und'][0]['value'] != '')?$nodeDetails->field_make_defaults['und'][0]['value']:'';
  $acquisitionDate = ($nodeDetails->field_acquisition_date['und'][0]['value'] != '')?date('m/d/Y', strtotime($nodeDetails->field_acquisition_date['und'][0]['value'])):'';
  $sinNumber = ($nodeDetails->field_project_asset_sin_number['und'][0]['value'] != '')?$nodeDetails->field_project_asset_sin_number['und'][0]['value']:'';
  $serialNumber = ($nodeDetails->field_asset_pin_number['und'][0]['value'] != '')?$nodeDetails->field_asset_pin_number['und'][0]['value']:'';
  if(isset($nodeDetails->field_system_asset_attachment['und'])) {
    foreach($nodeDetails->field_system_asset_attachment['und'] as $addKey => $addVal) {
      if(!empty($makeDefault)) {
      if($makeDefault == $addVal['fid']) {
        $assetImgThumb = '<img src="'.image_style_url('thumbnail',$addVal['uri']).'">';
      }
    }
    else {
      $assetImgThumb = '<img src="'.image_style_url('thumbnail',$nodeDetails->field_system_asset_attachment['und'][0]['uri']).'">';
    }
    } 
  }
  else {
    $assetImgThumb = '';
  }
  $query = db_select('node','n');
    $query->join('og_membership','om','om.etid=n.nid AND om.entity_type=:entityType', array(':entityType'=>'node'));
    $query->join('field_data_field_project_reference','pr', 'pr.entity_id = n.nid');
    $query->fields('n', array('nid'));
    $query->condition('pr.field_project_reference_nid', $proId, '=');
    $query->join('field_data_field_asset_description_spending','ad','n.nid=ad.entity_id');
    $query->condition('ad.field_asset_description_spending_value', '%' . db_like($assetId) . '%', 'LIKE');
    $query->condition('n.type','project_spending','=');
    $query->condition('om.gid', $company->nid, '=');
    $totalSpend = $query->execute()->rowCount();
  // Getting acuasition cost
  $assetAcqCost = 0;
  if (isset($nodeDetails->field_asset_cost['und'][0]['value'])) {
      $assetAcqCost += $nodeDetails->field_asset_cost['und'][0]['value'];
    }
  if (isset($nodeDetails->field_asset_installation['und'][0]['value'])) {
      $assetAcqCost += $nodeDetails->field_asset_installation['und'][0]['value'];
    }
  if (isset($nodeDetails->field_asset_outside_consultant['und'][0]['value'])) {
      $assetAcqCost += $nodeDetails->field_asset_outside_consultant['und'][0]['value'];
  }
  if (isset($nodeDetails->field_asset_internal_charge['und'][0]['value'])) {
      $assetAcqCost += $nodeDetails->field_asset_internal_charge['und'][0]['value'];
  }
  
  $output .= '<div class="associated-overflow" style="margin-bottom:10px; float:left; width:100%;"><div style="margin-bottom:10px; float:left; width:600px;"><h4><strong>Associated Spending For - '.$nodeDetails->title.'</strong></h4></div>';
  $output .= '<div style="margin-bottom:10px; float:left; width:600px;">'.$assetImgThumb.'</div>';
  $output .= '<div class="row" style="margin-bottom:10px; float:left; width:600px;"><div class="col-md-2" style="float:left; width:100px;"><label>Asset Name: </label></div><div class="col-md-3" style="float:left; width:200px;">'.$nodeDetails->title.'</div><div class="col-md-2" style="float:left; width:100px;"><label>SIN #: </label></div><div class="col-md-3" style="float:left; width:200px;">'.$sinNumber.'</div></div>';
  $output .= '<div class="row" style="margin-bottom:10px; float:left; width:600px;"><div class="col-md-2" style="float:left; width:100px;"><label>Acquisition Cost: </label></div><div class="col-md-3" style="float:left; width:200px;">$'.number_format($assetAcqCost,2).'</div><div class="col-md-2" style="float:left; width:100px;"><label>Serial #: </label></div><div class="col-md-3" style="float:left; width:200px;">'.$serialNumber.'</div></div>';
  if(!empty($addressType)) {
    $output .= '<div class="row" style="margin-bottom:10px; float:left; width:600px;"><div class="col-md-2" style="float:left; width:100px;"><label>'.$addressType.': </label></div><div class="col-md-3" style="float:left; width:200px;">'.$city.', '.$state.'</div><div class="col-md-2" style="float:left; width:100px;"><label>Quantity: </label></div><div class="col-md-3" style="float:left; width:200px;">'.$totalSpend.'</div></div>';
  }
  else {
    $output .= '<div class="row" style="margin-bottom:10px; float:left; width:600px;"><div class="col-md-2" style="float:left; width:100px;"><label>Adress: </label></div><div class="col-md-3" style="float:left; width:200px;">None</div><div class="col-md-2" style="float:left; width:100px;"><label>Quantity: </label></div><div class="col-md-3" style="float:left; width:200px;">'.$totalSpend.'</div></div>';
  }
  $output .= '<div class="row" style="margin-bottom:10px; float:left; width:600px;"><div class="col-md-2" style="float:left; width:100px;"><label>City: </label></div><div class="col-md-3" style="float:left; width:200px;">Test City</div><div class="col-md-2" style="float:left; width:100px;"><label>Acquisition Date: </label></div><div class="col-md-3" style="float:left; width:200px;">'.$acquisitionDate.'</div></div>';
  $output .= '<div class="row" style="margin-bottom:10px; float:left; width:600px;"><div class="col-md-2" style="float:left; width:100px;"></div><div class="col-md-3" style="float:left; width:200px;"></div><div class="col-md-2" style="float:left; width:100px;"><label>Project Name: </label></div><div class="col-md-3" style="float:left; width:200px;">'._get_title_of_node($proId).'</div></div>';
  $output .= '<div style="margin-bottom:10px; float:left; width:100%;"><style>table{width:100%;border-collapse: collapse;} table tr td,table tr th{padding:8px; border:1px solid #CCC;} table tr th{background:#265a7f; color:#FFF;}</style>'._get_spending_details_by_asset($assetId,$proId);     
  $output .= '</div></div>';
    $contents = render($output);    
    include_once(libraries_get_path('mpdf') . '/mpdf.php'); 
    $mpdf = new mPDF('c', 'A4-L');
    $mpdf->SetHTMLHeader('<div class="page_header" style="padding:10px; background: #eee;"><table style="margin:0; width:100%;"><tr><td width="150">'.$companyLogo.'</td><td align="center" width="300" style="vertical-align:top;"><h2>Asset Profile Report</h2><h2>&nbsp;</h2></td><td width="150" align="right" style="vertical-align:bottom"><p style="margin:0;">&nbsp;</p></td></tr></table></div>');  
  $mpdf->SetHTMLFooter('<div class="page_footer" style="float:left; width:100%;"><div style="float:left; width:100%;"><hr style="height:1px; border:none; border-bottom:1px solid #CCC;"></div><div style="float:left; width:100%; clear:both;"><div style="float:left; width:33.33%; text-align:left;"><img src="/sites/all/themes/m6connect/images/bidder_report_footer.png" alt="res" width="100" /></div><div style="float:left; width:33.33%; text-align:center;">Page {PAGENO} of {nb}</div><div style="float:left; width:33.33%; text-align:right;">'.date("l, F d, Y").'</div></div></div>');
    $mpdf->setAutoTopMargin = 'stretch';  
    $mpdf->setAutoBottomMargin = 'stretch'; 
    $mpdf->WriteHTML($output);
    $file_content = $mpdf->Output('report.pdf', 'I');
  }